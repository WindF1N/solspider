#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ bundle_analyzer –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
"""

import re
from collections import defaultdict
import ast

def extract_contract_from_jupiter(line):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–∏ –æ Jupiter"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å Python –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ '–î–∞—Ç–∞ —Å–µ—Ç —Ç–æ–∫–µ–Ω–∞ Jupiter: '
        dict_str = line.split('–î–∞—Ç–∞ —Å–µ—Ç —Ç–æ–∫–µ–Ω–∞ Jupiter: ')[1].strip()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ast.literal_eval –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        data = ast.literal_eval(dict_str)
        
        if data['type'] == 'new' and 'pool' in data:
            return data['pool']['baseAsset']['id']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ Jupiter: {e}")
    return None

def analyze_log(log_file):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    """
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    metrics_count = defaultdict(int)
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ Jupiter
    jupiter_contracts = {}
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫
    metrics_pattern = re.compile(r'üìä –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö –¥–ª—è ([A-Za-z0-9]{8}):')
    
    with open(log_file, 'r', encoding='utf-8') as f:
        for line in f:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ Jupiter
            if '–î–∞—Ç–∞ —Å–µ—Ç —Ç–æ–∫–µ–Ω–∞ Jupiter:' in line:
                contract = extract_contract_from_jupiter(line)
                if contract:
                    short_id = contract[:8]
                    jupiter_contracts[short_id] = contract  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                    print(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç Jupiter: {short_id} ({contract})")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            match = metrics_pattern.search(line)
            if match:
                contract_id = match.group(1)
                metrics_count[contract_id] += 1
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Ç—Ä–∏–∫
    active_contracts = {
        contract: {
            'count': count,
            'full_address': jupiter_contracts.get(contract)
        }
        for contract, count in metrics_count.items() 
        if count >= 100 and contract in jupiter_contracts
    }
    
    return active_contracts

def save_results(contracts, output_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    with open(output_file, 'w', encoding='utf-8') as f:
        for contract, data in sorted(contracts.items(), key=lambda x: x[1]['count'], reverse=True):
            full_address = data['full_address']
            count = data['count']
            axiom_link = f"https://axiom.trade/t/{full_address}"
            f.write(f"{contract} (–º–µ—Ç—Ä–∏–∫: {count})\n")
            f.write(f"Axiom: {axiom_link}\n\n")

def main():
    log_file = 'bundle_analyzer.log'
    output_file = 'output2.txt'
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥-—Ñ–∞–π–ª...")
    active_contracts = analyze_log(log_file)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(active_contracts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    save_results(active_contracts, output_file)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if active_contracts:
        counts = [data['count'] for data in active_contracts.values()]
        max_metrics = max(counts)
        min_metrics = min(counts)
        avg_metrics = sum(counts) / len(counts)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –ú–∞–∫—Å–∏–º—É–º –º–µ—Ç—Ä–∏–∫: {max_metrics}")
        print(f"  –ú–∏–Ω–∏–º—É–º –º–µ—Ç—Ä–∏–∫: {min_metrics}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –º–µ—Ç—Ä–∏–∫: {avg_metrics:.1f}")

if __name__ == "__main__":
    main() 