#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–Ω–∞–ø—à–æ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_snapshot_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    tester = TokenFilterTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tokens_logs
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    
    if not log_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tokens_logs_dir} –Ω–µ—Ç .log —Ñ–∞–π–ª–æ–≤")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 5 —Ç–æ–∫–µ–Ω–∞—Ö
    test_files = log_files[:5]
    
    print(f"üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–ù–ê–ü–®–û–¢–ù–û–ô –õ–û–ì–ò–ö–ò –ê–ù–ê–õ–ò–ó–ê")
    print(f"="*60)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ö–∞–∂–¥—ã–π —Å–Ω–∞–ø—à–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print()
    
    for i, log_file in enumerate(test_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        token_id = log_file.replace('.log', '')
        
        print(f"{i}. üîç –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê: {token_id}")
        print("-" * 50)
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')
            snapshots_checked = result.get('snapshots_checked', 0)
            total_snapshots = result.get('total_snapshots', 0)
            snapshot_number = result.get('snapshot_number', None)
            
            if decision == 'WOULD_SEND':
                print(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
                print(f"üéØ –ü–†–û–®–ï–õ –ù–ê –°–ù–ê–ü–®–û–¢–ï: #{snapshot_number} –∏–∑ {total_snapshots}")
                print(f"üìä –ü–†–û–í–ï–†–ï–ù–û –°–ù–ê–ü–®–û–¢–û–í: {snapshots_checked}")
                print(f"üí° –ü–†–ò–ß–ò–ù–ê: {reason}")
            elif decision == 'WOULD_REJECT':
                print(f"‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
                print(f"üìä –ü–†–û–í–ï–†–ï–ù–û –°–ù–ê–ü–®–û–¢–û–í: {snapshots_checked} –∏–∑ {total_snapshots}")
                print(f"üí° –ü–†–ò–ß–ò–ù–ê: {reason}")
            elif decision == 'BLACKLISTED':
                print(f"‚ö´ –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
                print(f"üí° –ü–†–ò–ß–ò–ù–ê: {reason}")
            elif decision == 'ERROR':
                print(f"üí• –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
                print(f"üí° –ü–†–ò–ß–ò–ù–ê: {reason}")
            elif decision == 'NO_DATA':
                print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
                print(f"üí° –ü–†–ò–ß–ò–ù–ê: {reason}")
            else:
                print(f"‚ùì –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
                print(f"üí° –ü–†–ò–ß–ò–ù–ê: {reason}")
                
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    print("="*60)
    print("üéØ –õ–û–ì–ò–ö–ê –ü–û–°–ù–ê–ü–®–û–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
    print("1. –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Å—Ç—Ä–æ–∫–∞ –∑–∞ —Å—Ç—Ä–æ–∫–æ–π")
    print("2. –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç")  
    print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º activity_conditions –Ω–∞ –∫–∞–∂–¥–æ–º —Å–Ω–∞–ø—à–æ—Ç–µ")
    print("4. –ü–µ—Ä–≤—ã–π –ø—Ä–æ—à–µ–¥—à–∏–π —Å–Ω–∞–ø—à–æ—Ç = WOULD_SEND")
    print("5. –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø—Ä–æ—à–µ–ª = WOULD_REJECT")
    print()
    print("üìà –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
    print("‚úÖ –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è bundle_analyzer.py")
    print("‚úÖ –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω —Å—Ç–∞–ª '—Ö–æ—Ä–æ—à–∏–º'")
    print("‚úÖ –£—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫")
    print("‚úÖ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")

if __name__ == "__main__":
    asyncio.run(test_snapshot_analysis())