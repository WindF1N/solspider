#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ slice
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_error_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ slice"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')][:3]
    
    print(f"üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò SLICE")
    print(f"="*60)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(log_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print()
    
    for i, log_file in enumerate(log_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        token_id = log_file.replace('.log', '')
        
        print(f"{i}. üîç –¢–ï–°–¢: {token_id}")
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            print(f"   ‚úÖ –£–°–ü–ï–•: {decision}")
            
            if decision == 'WOULD_REJECT':
                best_snapshot = result.get('best_snapshot', {})
                if best_snapshot:
                    print(f"   üìä –õ—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç: #{best_snapshot.get('snapshot_number', '?')}")
                    print(f"   ‚úÖ –ü—Ä–æ—à–ª–æ —É—Å–ª–æ–≤–∏–π: {best_snapshot.get('passed_conditions', 0)}")
                    failed = best_snapshot.get('failed_conditions', [])
                    if failed:
                        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {failed[:2]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                        
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
            if "slice" in str(e):
                print(f"   üö® –û—à–∏–±–∫–∞ slice –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
            else:
                print(f"   üìä –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ slice)")
        
        print()
    
    print("="*60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
    print("‚úÖ –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ 'unhashable type: slice' - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ test_filter.log –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫")

if __name__ == "__main__":
    asyncio.run(test_error_fix())