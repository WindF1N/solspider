#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üêõüí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–†–ï–°–°–ò–í–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô WORMSTER'–ê
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤ –¥—É—Ö–µ —á–µ—Ä–≤—è–∫–∞-—Ç—Ä–µ–π–¥–µ—Ä–∞
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from duplicate_groups_manager import DuplicateGroupsManager
from pump_bot import format_new_token
from config import Config

async def test_duplicate_group_message():
    """üêõ –¢–µ—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥—Ä—É–ø–ø–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("üêõüî• –¢–ï–°–¢: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä—É–ø–ø–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
    manager = DuplicateGroupsManager(Config.TELEGRAM_BOT_TOKEN)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    group = manager.GroupData("test_key", "PEPE", "Pepe the Frog")
    group.main_twitter = "pepecoin_sol"
    group.tokens = [
        {
            "id": "A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0",
            "symbol": "PEPE",
            "name": "Pepe the Frog",
            "twitter": "https://twitter.com/pepecoin_sol",
            "website": "https://pepe.com",
            "telegram": "https://t.me/pepechat"
        },
        {
            "id": "B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0A1",
            "symbol": "PEPE",
            "name": "Pepe Coin",
            "twitter": "https://twitter.com/pepe_official"
        },
        {
            "id": "C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0A1B2",
            "symbol": "PEPE",
            "name": "Pepe Token"
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
    group.official_announcement = {
        "text": "üê∏ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ PEPE - –º–µ–º-—Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–æ—Ä–∏—Ç –≤–µ—Å—å –º–∏—Ä! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ª—É–Ω–µ! üöÄ",
        "date": "16.06.2024 18:30:15"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω
    group.latest_added_token = {
        "id": "C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0A1B2",
        "firstPool": {"createdAt": "2024-06-16T18:30:15.000Z"}
    }
    
    group.last_updated = datetime.now()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    print("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ì—Ä—É–ø–ø–∞ –ë–ï–ó –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    group.official_contract = None
    message = await manager._format_group_message(group)
    print(message)
    
    print("\n" + "=" * 60)
    print("\nüéâ –°–¶–ï–ù–ê–†–ò–ô 2: –ì—Ä—É–ø–ø–∞ –° –Ω–∞–π–¥–µ–Ω–Ω—ã–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º")
    group.official_contract = {
        "address": "A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0",
        "date": "16.06.2024 19:45:30"
    }
    message = await manager._format_group_message(group)
    print(message)
    
    manager.stop()

async def test_new_token_message():
    """üêõ –¢–µ—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ"""
    print("\nüêõüöÄ –¢–ï–°–¢: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
    token_data = {
        "mint": "A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0",
        "name": "Wormster Coin",
        "symbol": "WORM",
        "description": "–°–∞–º—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-—á–µ—Ä–≤—è–∫ –≤ Solana! –ö–æ–ø–∞–µ–º –∏–∫—Å—ã –¥–æ –ª—É–Ω—ã! üêõüíé",
        "creator": "B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0A1C2",
        "marketCap": 150000,
        "initialBuy": 5.5,
        "creatorPercentage": 15,
        "dex_source": "pump.fun",
        "pool_type": "pumpfun",
        "twitter": "https://twitter.com/wormster_coin",
        "telegram": "https://t.me/wormster_chat",
        "website": "https://wormster.io"
    }
    
    # –ê–Ω–∞–ª–∏–∑ Twitter
    twitter_analysis = {
        "rating": "üî• –í–´–°–û–ö–ê–Ø",
        "tweets": 50,
        "engagement": "–ê–∫—Ç–∏–≤–Ω–∞—è",
        "score": 85,
        "symbol_tweets": 25,
        "contract_tweets": 3,
        "contract_found": True,
        "contract_authors": [
            {
                "username": "crypto_whale_hunter",
                "display_name": "Crypto Whale Hunter üêã",
                "followers_count": 15000,
                "following_count": 2500,
                "tweets_count": 8500,
                "likes_count": 45000,
                "is_verified": True,
                "tweet_text": "üöÄ –ù–æ–≤—ã–π –≥–µ–º –Ω–∞–π–¥–µ–Ω! $WORM - —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π 100x! –ß–µ—Ä–≤—è–∫ –∫–æ–ø–∞–µ—Ç –≥–ª—É–±–æ–∫–æ! üíéüêõ #WORM #PumpFun",
                "tweet_date": "16.06.2024 19:30:15",
                "tweet_type": "–¢–≤–∏—Ç",
                "contract_diversity": 65,
                "max_contract_spam": 75,
                "diversity_recommendation": "–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
                "spam_analysis": "–í—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "is_spam_likely": False,
                "total_contract_tweets": 10,
                "unique_contracts_count": 7,
                "join_date": "–ú–∞—Ä—Ç 2021"
            },
            {
                "username": "solana_degen_ape",
                "display_name": "Solana Degen ü¶ç",
                "followers_count": 8500,
                "following_count": 1200,
                "tweets_count": 12000,
                "likes_count": 25000,
                "is_verified": False,
                "tweet_text": "–ê–ü–ï–ò–ú –í $WORM! –ß–µ—Ä–≤—è–∫ —É–∂–µ —Ä–æ–µ—Ç —Ç—É–Ω–Ω–µ–ª—å –∫ –ª—É–Ω–µ! üöÄüêõ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è!",
                "tweet_date": "16.06.2024 19:45:22",
                "tweet_type": "–û—Ç–≤–µ—Ç",
                "contract_diversity": 45,
                "max_contract_spam": 60,
                "diversity_recommendation": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
                "spam_analysis": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "is_spam_likely": False,
                "total_contract_tweets": 8,
                "unique_contracts_count": 5,
                "join_date": "–ò—é–Ω—å 2022"
            }
        ]
    }
    
    print("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ Pump.fun")
    message, keyboard, should_notify, image_url = await format_new_token(token_data, twitter_analysis)
    print(message)
    
    print("\n" + "=" * 60)
    print("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 2: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Jupiter")
    token_data["dex_source"] = "jupiter"
    token_data["pool_type"] = "raydium"
    message, keyboard, should_notify, image_url = await format_new_token(token_data, twitter_analysis)
    print(message)

def test_log_messages():
    """üêõ –¢–µ—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüêõüìù –¢–ï–°–¢: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 60)
    
    print("\nüéØ –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–π:")
    
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    print("üêõüéâ –ß–ï–†–í–Ø–ö –°–û–ó–î–ê–õ –ù–û–í–£–Æ –û–•–û–¢–ù–ò–ß–¨–Æ –°–¢–ê–Æ PEPE! –¢–µ–ø–µ—Ä—å –∫–æ–ø–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ! üìä")
    
    print("\n2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞:")
    print("üêõüö´ –ß–ï–†–í–Ø–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –¢–û–ö–ï–ù SCAM: –ì–ª–∞–≤–Ω—ã–π Twitter @scam_token —Å–≤–µ—Ç–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã! –ß–µ—Ä–≤—è–∫ –Ω–µ –ª—é–±–∏—Ç —Å–ø–æ–π–ª–µ—Ä—ã! ü§¨")
    
    print("\n3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:")
    print("üêõ‚úÖ –ß–ï–†–í–Ø–ö –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω DOGE –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤—Å–µ–≥–æ –∂–µ—Ä—Ç–≤: 5) üéØ")
    
    print("\n4. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã –±–µ–∑ –∞–Ω–æ–Ω—Å–∞:")
    print("üêõ‚ùå –ß–ï–†–í–Ø–ö –û–¢–ö–ê–ó–ê–õ–°–Ø –°–û–ó–î–ê–í–ê–¢–¨ –ì–†–£–ü–ü–£ FAKE: –ù–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞ –≤ @fake_token! –ß–µ—Ä–≤—è–∫ –Ω–µ –ª—é–±–∏—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥–¥–µ–ª–∫–∏! üö´")
    
    print("\n5. –ü–æ–∏—Å–∫ –∞–Ω–æ–Ω—Å–∞:")
    print("üêõüîç –ß–ï–†–í–Ø–ö –ù–ê–®–Å–õ –ì–†–£–ü–ü–£ MYSTERY –ë–ï–ó –ê–ù–û–ù–°–ê! –ö–æ–ø–∞–µ–º –≥–ª—É–±–∂–µ –≤ @mystery_coin...")
    
    print("\n6. –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    print("üêõüí• –ß–ï–†–í–Ø–ö –£–ù–ò–ß–¢–û–ñ–ò–õ –ì–†–£–ü–ü–£ EXPIRED! –û—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéØ")

async def main():
    """üêõ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üêõüí∞ WORMSTER - –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ö–†–ò–ü–¢–û-–ß–ï–†–í–Ø–ö")
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 60)
    
    try:
        await test_duplicate_group_message()
        await test_new_token_message()
        test_log_messages()
        
        print("\nüêõüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("üí∞ –ß–µ—Ä–≤—è–∫ –≥–æ—Ç–æ–≤ –∫ –æ—Ö–æ—Ç–µ –∑–∞ –∏–∫—Å–∞–º–∏! üöÄ")
        
    except Exception as e:
        print(f"üêõ‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 