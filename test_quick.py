#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ test_filter.py
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    tester = TokenFilterTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tokens_logs
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    
    if not log_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tokens_logs_dir} –Ω–µ—Ç .log —Ñ–∞–π–ª–æ–≤")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(log_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–∫–µ–Ω–∞:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–∫–µ–Ω–∞
    for i, log_file in enumerate(log_files[:3]):
        print(f"\n--- –¢–æ–∫–µ–Ω {i+1}: {log_file} ---")
        log_path = os.path.join(tokens_logs_dir, log_file)
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            print(f"–¢–æ–∫–µ–Ω: {result['token_id']}")
            print(f"–†–µ—à–µ–Ω–∏–µ: {result['decision']}")
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
            
            if 'notification_type' in result:
                print(f"–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result['notification_type']}")
            
            if 'holders' in result:
                print(f"–•–æ–ª–¥–µ—Ä—ã: {result['holders']}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ bundle_analyzer.py —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!")
    print(f"üì¶ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: BUNDLER, ACTIVITY, PUMP")
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: WOULD_SEND, WOULD_REJECT, BLACKLISTED, NO_DATA, ERROR")

if __name__ == "__main__":
    asyncio.run(quick_test())