#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TwitterProfileParser –Ω–∞–ø—Ä—è–º—É—é
"""
import asyncio
import logging
from twitter_profile_parser import TwitterProfileParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_twitter_profile_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TwitterProfileParser –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        test_twitter = "mst1287"  # –ü—Ä–∏–º–µ—Ä –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ @{test_twitter}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        async with TwitterProfileParser() as parser:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            result = await parser.get_profile_with_replies_multi_page(test_twitter, max_pages=1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
            if result and len(result) == 3:
                profile_data, all_tweets, tweets_with_contracts = result
            elif result and len(result) == 2:
                profile_data, all_tweets = result
                tweets_with_contracts = []
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è @{test_twitter}: {result}")
                return False
            
            if profile_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{test_twitter}:")
                logger.info(f"   üìã –ò–º—è: {profile_data.get('display_name', 'N/A')}")
                logger.info(f"   üìù –ë–∏–æ: {profile_data.get('bio', 'N/A')[:100]}...")
                logger.info(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {profile_data.get('followers_count', 0)}")
                logger.info(f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {profile_data.get('join_date', 'N/A')}")
                logger.info(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {profile_data.get('is_verified', False)}")
                logger.info(f"   üê¶ –¢–≤–∏—Ç—ã: {profile_data.get('tweets_count', 0)}")
                logger.info(f"   üîó –ü–æ–¥–ø–∏—Å–∫–∏: {profile_data.get('following_count', 0)}")
                logger.info(f"   ‚ù§Ô∏è –õ–∞–π–∫–∏: {profile_data.get('likes_count', 0)}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
                def format_number(number: int) -> str:
                    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (1.2K, 15M –∏ —Ç.–¥.)"""
                    if number >= 1_000_000:
                        return f"{number / 1_000_000:.1f}M"
                    elif number >= 1_000:
                        return f"{number / 1_000:.1f}K"
                    else:
                        return str(number)
                
                logger.info(f"\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                logger.info(f"   üìä {format_number(profile_data.get('tweets_count', 0))} —Ç–≤–∏—Ç–æ–≤")
                logger.info(f"   üë• {format_number(profile_data.get('followers_count', 0))} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                logger.info(f"   üîó {format_number(profile_data.get('following_count', 0))} –ø–æ–¥–ø–∏—Å–æ–∫")
                logger.info(f"   ‚ù§Ô∏è {format_number(profile_data.get('likes_count', 0))} –ª–∞–π–∫–æ–≤")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                display_name = profile_data.get('display_name', test_twitter)
                bio = profile_data.get('bio', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                join_date = profile_data.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                is_verified = profile_data.get('is_verified', False)
                
                tweets = format_number(profile_data.get('tweets_count', 0))
                followers = format_number(profile_data.get('followers_count', 0))
                following = format_number(profile_data.get('following_count', 0))
                likes = format_number(profile_data.get('likes_count', 0))
                
                verified_badge = "‚úÖ" if is_verified else ""
                
                print(f"\nüéØ –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                print(f"üê¶ –ì–õ–ê–í–ù–´–ô TWITTER: @{test_twitter} {verified_badge}")
                print(f"üìã –ò–º—è: {display_name}")
                
                if bio and bio != '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è':
                    bio_short = bio[:200] + "..." if len(bio) > 200 else bio
                    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:")
                    print(f"<blockquote>{bio_short}</blockquote>")
                
                print(f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {join_date}")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {tweets} —Ç–≤–∏—Ç–æ–≤ ‚Ä¢ {followers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Ä¢ {following} –ø–æ–¥–ø–∏—Å–æ–∫ ‚Ä¢ {likes} –ª–∞–π–∫–æ–≤")
                
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ @{test_twitter}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TwitterProfileParser")
    
    success = await test_twitter_profile_parser()
    
    if success:
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(main()) 