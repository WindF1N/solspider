#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, —É–º–Ω—ã–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
"""
import logging
import requests
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from collections import Counter
import json
import re
import time

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from google_sheets_manager import sheets_manager
from database import get_db_manager, DuplicateToken

logger = logging.getLogger(__name__)

class DuplicateGroupsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —É–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, telegram_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º Telegram –±–æ—Ç–∞"""
        self.telegram_token = telegram_token
        self.telegram_url = f"https://api.telegram.org/bot{telegram_token}"
        
        # –ì—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {group_key: GroupData}
        self.groups = {}
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ {group_key: official_contract_info}
        self.official_contracts = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.target_chat_id = -1002680160752  # ID –≥—Ä—É–ø–ø—ã
        self.message_thread_id = 14  # ID —Ç–µ–º—ã –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    class GroupData:
        """–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        def __init__(self, group_key: str, symbol: str, name: str):
            self.group_key = group_key
            self.symbol = symbol
            self.name = name
            self.tokens = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            self.message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            self.sheet_url = None  # URL Google Sheets —Ç–∞–±–ª–∏—Ü—ã
            self.main_twitter = None  # –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            self.official_contract = None  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            self.created_at = datetime.now()
            self.last_updated = datetime.now()
    
    def create_group_key(self, token_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
        name = token_data.get('name', '').strip().lower()
        symbol = token_data.get('symbol', '').strip().upper()
        return f"{name}_{symbol}"
    
    def extract_twitter_accounts(self, token_data: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
        twitter_accounts = set()
        
        # –ü–æ–ª—è –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å Twitter —Å—Å—ã–ª–∫–∏
        twitter_fields = ['twitter', 'website', 'telegram', 'social', 'links']
        
        for field in twitter_fields:
            url = token_data.get(field, '')
            if url and isinstance(url, str):
                account = self._normalize_twitter_url(url)
                if account:
                    twitter_accounts.add(account)
        
        return list(twitter_accounts)
    
    def _normalize_twitter_url(self, url: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç Twitter URL, –∏–∑–≤–ª–µ–∫–∞—è username"""
        try:
            if not url or not isinstance(url, str):
                return None
                
            url_lower = url.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Twitter/X —Å—Å—ã–ª–∫–∞
            if not any(domain in url_lower for domain in ['twitter.com', 'x.com']):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username
            username_pattern = r'(?i)(?:twitter\.com|x\.com)/([^/\?]+)'
            match = re.search(username_pattern, url)
            
            if match:
                username = match.group(1).strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É—Ç–∏
                service_paths = ['i', 'home', 'search', 'notifications', 'messages', 'settings', 'intent']
                if username.lower() in service_paths:
                    return None
                    
                return username
                
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Twitter URL {url}: {e}")
            
        return None
    
    def determine_main_twitter(self, tokens: List[Dict]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏"""
        try:
            twitter_counter = Counter()
            
            for token in tokens:
                twitter_accounts = self.extract_twitter_accounts(token)
                for account in twitter_accounts:
                    twitter_counter[account.lower()] += 1
            
            if not twitter_counter:
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–π—Å—è –∞–∫–∫–∞—É–Ω—Ç
            most_common = twitter_counter.most_common(1)[0]
            main_twitter = most_common[0]
            frequency = most_common[1]
            
            logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: @{main_twitter} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {frequency} —Ä–∞–∑)")
            return main_twitter
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter: {e}")
            return None
    
    async def add_token_to_group(self, token_data: Dict, reason: str = "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            group_key = self.create_group_key(token_data)
            token_id = token_data.get('id')
            symbol = token_data.get('symbol', 'Unknown')
            name = token_data.get('name', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞
            if group_key not in self.groups:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {symbol}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –ë–î
                db_tokens = self._load_tokens_from_db(symbol)
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                group = self.GroupData(group_key, symbol, name)
                group.tokens = db_tokens + [token_data] if token_data not in db_tokens else db_tokens
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                group.main_twitter = self.determine_main_twitter(group.tokens)
                
                # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π Twitter –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ù–ï —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                if not group.main_twitter:
                    logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {symbol} –ù–ï —Å–æ–∑–¥–∞–Ω–∞: –≥–ª–∞–≤–Ω—ã–π Twitter –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                    return False
                
                # üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º —Ç–∞–±–ª–∏—Ü–∞ –≤ —Ñ–æ–Ω–µ
                logger.info(f"üìä –ì—Ä—É–ø–ø–∞ {symbol} —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
                
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏ (–Ω–µ —Ç–æ—Ä–º–æ–∑–∏–º –ø–æ—Ç–æ–∫)
                group.sheet_url = None  # –ü–æ–∫–∞ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
                group.message_id = await self._send_group_message(group)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
                self.groups[group_key] = group
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)
                self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                
                logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {symbol} —Å–æ–∑–¥–∞–Ω–∞, —Ç–∞–±–ª–∏—Ü–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ")
                return True
                
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                group = self.groups[group_key]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
                existing_ids = [t.get('id') for t in group.tokens]
                if token_id in existing_ids:
                    logger.debug(f"üîÑ –¢–æ–∫–µ–Ω {token_id[:8]}... —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group_key}")
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                group.tokens.append(token_data)
                group.last_updated = datetime.now()
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                new_main_twitter = self.determine_main_twitter(group.tokens)
                if new_main_twitter != group.main_twitter:
                    group.main_twitter = new_main_twitter
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ Google Sheets –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    sheets_manager.update_main_twitter_async(group_key, new_main_twitter)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ Google Sheets –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                sheets_manager.add_single_token_fast_async(group_key, token_data, group.main_twitter)
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                if not group.sheet_url:
                    logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ...")
                    self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                else:
                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self._update_group_message(group)
                
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É (–≤—Å–µ–≥–æ: {len(group.tokens)})")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
    
    def _load_tokens_from_db(self, symbol: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db_manager = get_db_manager()
            session = db_manager.Session()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            tokens = session.query(DuplicateToken).filter(
                DuplicateToken.normalized_symbol == symbol.lower()
            ).all()
            
            session.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
            token_list = []
            for token in tokens:
                token_dict = {
                    'id': token.mint,
                    'name': token.name,
                    'symbol': token.symbol,
                    'icon': token.icon,
                    'twitter': token.twitter,
                    'telegram': token.telegram,
                    'website': token.website,
                    'firstPool': {
                        'createdAt': token.created_at.isoformat() if token.created_at else None
                    }
                }
                token_list.append(token_dict)
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_list)} —Ç–æ–∫–µ–Ω–æ–≤ {symbol} –∏–∑ –ë–î")
            return token_list
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ë–î: {e}")
            return []
    
    async def _send_group_message(self, group: 'GroupData') -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ Telegram"""
        try:
            message_text = self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)
            
            payload = {
                "chat_id": self.target_chat_id,
                "message_thread_id": self.message_thread_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }
            
            response = requests.post(f"{self.telegram_url}/sendMessage", json=payload)
            
            if response.status_code == 200:
                result = response.json()
                message_id = result['result']['message_id']
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {message_id})")
                return message_id
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _update_group_message(self, group: 'GroupData') -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            message_text = self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)
            
            payload = {
                "chat_id": self.target_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }
            
            response = requests.post(f"{self.telegram_url}/editMessageText", json=payload)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def _format_group_message(self, group: 'GroupData') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            message = f"üîÑ <b>–ì–†–£–ü–ü–ê –î–£–ë–õ–ò–ö–ê–¢–û–í: {group.symbol.upper()}</b>\n"
            message += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {group.name}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter –∞–∫–∫–∞—É–Ω—Ç–µ
            if group.main_twitter:
                message += f"üéØ <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> @{group.main_twitter}\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                if group.official_contract:
                    message += f"‚úÖ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù!</b>\n"
                    message += f"üìç <b>–ê–¥—Ä–µ—Å:</b> <code>{group.official_contract['address']}</code>\n"
                    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_contract['date']}\n\n"
                else:
                    message += f"üîç <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ Twitter\n\n"
            else:
                message += f"‚ùì <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
            total_tokens = len(group.tokens)
            tokens_with_links = sum(1 for token in group.tokens if self._has_links(token))
            tokens_without_links = total_tokens - tokens_with_links
            
            message += f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: <b>{total_tokens}</b>\n"
            message += f"‚Ä¢ –° —Å—Å—ã–ª–∫–∞–º–∏: <b>{tokens_with_links}</b>\n"
            message += f"‚Ä¢ –ë–µ–∑ —Å—Å—ã–ª–æ–∫: <b>{tokens_without_links}</b>\n\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            if group.tokens:
                def safe_get_created_at(token):
                    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
                    created_at = token.get('firstPool', {}).get('createdAt', '')
                    if not created_at:
                        return ''  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è None/–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    return str(created_at)
                
                try:
                    latest_token = max(group.tokens, key=safe_get_created_at)
                    latest_contract = latest_token.get('id', 'Unknown')
                    latest_created = latest_token.get('firstPool', {}).get('createdAt', '')
                    
                    if latest_created:
                        try:
                            created_date = datetime.fromisoformat(latest_created.replace('Z', '+00:00'))
                            created_display = created_date.strftime('%d.%m.%Y %H:%M')
                        except:
                            created_display = latest_created
                    else:
                        created_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    message += f"üÜï <b>–ü–û–°–õ–ï–î–ù–ò–ô –ö–û–ù–¢–†–ê–ö–¢:</b>\n"
                    message += f"<code>{latest_contract}</code>\n"
                    message += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_display}\n\n"
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ fallback
                    if group.tokens:
                        fallback_token = group.tokens[0]
                        fallback_contract = fallback_token.get('id', 'Unknown')
                        message += f"üÜï <b>–ü–û–°–õ–ï–î–ù–ò–ô –ö–û–ù–¢–†–ê–ö–¢:</b>\n"
                        message += f"<code>{fallback_contract}</code>\n"
                        message += f"üìÖ –°–æ–∑–¥–∞–Ω: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\n"
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message += f"üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {group.last_updated.strftime('%d.%m.%Y %H:%M:%S')}"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}"
    
    def _create_group_keyboard(self, group: 'GroupData') -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ Google Sheets - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
            if group.sheet_url and group.sheet_url.strip():
                buttons.append([{
                    "text": "üìä –°–º–æ—Ç—Ä–µ—Ç—å –≤ Google Sheets",
                    "url": group.sheet_url
                }])
                logger.debug(f"‚úÖ –ö–Ω–æ–ø–∫–∞ Google Sheets –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            else:
                logger.debug(f"üìä –ö–Ω–æ–ø–∫–∞ Google Sheets –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol} (—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è)")
            
            # –ö–Ω–æ–ø–∫–∞ "–û–∫–µ–π" –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if group.official_contract:
                buttons.append([{
                    "text": "‚úÖ –û–∫–µ–π",
                    "callback_data": f"delete_group:{group.group_key}"
                }])
            
            return {"inline_keyboard": buttons}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥—Ä—É–ø–ø—ã: {e}")
            return {"inline_keyboard": []}
    
    def _has_links(self, token_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ —É —Ç–æ–∫–µ–Ω–∞"""
        link_fields = ['twitter', 'telegram', 'website']
        return any(token_data.get(field) for field in link_fields)
    
    def _create_sheet_and_update_message_async(self, group_key: str, tokens: List[Dict], main_twitter: str):
        """üî• –°–£–ü–ï–† –ë–´–°–¢–†–û–ï –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü—ã –±–∞—Ç—á–µ–º"""
        def create_sheet_task():
            try:
                logger.info(f"üî• –°–æ–∑–¥–∞–µ–º Google Sheets —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –ë–ê–¢–ß–ï–ú ({len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤)...")
                
                # üî• –°–£–ü–ï–† –ë–´–°–¢–†–û: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
                if tokens:
                    table_created = sheets_manager.add_tokens_batch(group_key, tokens, main_twitter)
                    
                    if table_created:
                        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã
                        sheet_url = sheets_manager.get_sheet_url(group_key)
                        
                        if sheet_url and group_key in self.groups:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
                            group = self.groups[group_key]
                            group.sheet_url = sheet_url
                            
                            logger.info(f"üî• –ë–ê–¢–ß–ï–í–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {group_key}, URL: {sheet_url}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                            if group.message_id:
                                self._update_message_with_sheet_button(group)
                            else:
                                logger.debug(f"üìä –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–µ—Å—Ç —Ä–µ–∂–∏–º)")
                            
                            logger.info(f"‚úÖ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å!")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {group_key}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ –¥–ª—è {group_key}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ Google Sheets
        sheets_manager._queue_task(create_sheet_task)
    
    def _update_message_with_sheet_button(self, group: 'GroupData') -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            message_text = self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)
            
            payload = {
                "chat_id": self.target_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }
            
            response = requests.post(f"{self.telegram_url}/editMessageText", json=payload)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            return False
    
    async def check_official_contract(self, group_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            if not group.main_twitter:
                return False
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤–µ—Ä–Ω–µ—Ç False
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∏—Å–∫–∞ –≤ Twitter –∏–∑ pump_bot.py
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è @{group.main_twitter} - –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return False
    
    async def mark_official_contract_found(self, group_key: str, contract_address: str, found_date: str = None) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            group.official_contract = {
                'address': contract_address,
                'date': found_date or datetime.now().strftime('%d.%m.%Y %H:%M'),
                'found_at': datetime.now()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            if group.main_twitter:
                sheets_manager.check_official_contract_in_twitter(
                    group_key, group.main_twitter, contract_address
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._update_group_message(group)
            
            logger.info(f"‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç {contract_address[:8]}... –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return False
    
    async def delete_group(self, group_key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram)"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            if group.message_id:
                payload = {
                    "chat_id": self.target_chat_id,
                    "message_id": group.message_id
                }
                
                response = requests.post(f"{self.telegram_url}/deleteMessage", json=payload)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} —É–¥–∞–ª–µ–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol}: {response.text}")
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–∞–º—è—Ç–∏
            del self.groups[group_key]
            
            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {group.symbol} —É–¥–∞–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def get_group_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º"""
        try:
            total_groups = len(self.groups)
            total_tokens = sum(len(group.tokens) for group in self.groups.values())
            groups_with_official = sum(1 for group in self.groups.values() if group.official_contract)
            
            return {
                'total_groups': total_groups,
                'total_tokens': total_tokens,
                'groups_with_official_contracts': groups_with_official,
                'active_groups': [
                    {
                        'symbol': group.symbol,
                        'tokens_count': len(group.tokens),
                        'main_twitter': group.main_twitter,
                        'has_official': bool(group.official_contract),
                        'sheet_url': group.sheet_url
                    }
                    for group in self.groups.values()
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
# –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
_duplicate_groups_manager = None

def get_duplicate_groups_manager():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    global _duplicate_groups_manager
    return _duplicate_groups_manager

def initialize_duplicate_groups_manager(telegram_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    global _duplicate_groups_manager
    _duplicate_groups_manager = DuplicateGroupsManager(telegram_token)
    logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —É–¥–∞–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_duplicate_groups_manager() 