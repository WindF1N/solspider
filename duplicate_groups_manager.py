#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, —É–º–Ω—ã–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
"""
import logging
import requests
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from collections import Counter
import json
import re
import time
import random
from queue import Queue
from threading import Thread
import aiohttp
from bs4 import BeautifulSoup
from urllib.parse import quote

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from google_sheets_manager import sheets_manager
from database import get_db_manager, DuplicateToken, Token
from dynamic_cookie_rotation import get_next_proxy_cookie_async
from anubis_handler import handle_anubis_challenge_for_session, update_cookies_in_string

logger = logging.getLogger(__name__)

class TelegramMessageQueue:
    """–û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram —Å rate limiting"""
    
    def __init__(self, telegram_token: str):
        self.telegram_token = telegram_token
        self.telegram_url = f"https://api.telegram.org/bot{telegram_token}"
        self.queue = Queue()
        self.running = True
        self.worker_thread = None
        self.min_delay = 2.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.max_delay = 4.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_request_time = 0
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        if self.worker_thread is None:
            self.worker_thread = Thread(target=self._process_queue, daemon=True)
            self.worker_thread.start()
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        self.running = False
        if self.worker_thread:
            self.worker_thread.join()
            logger.info("‚èπÔ∏è –û—á–µ—Ä–µ–¥—å Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        while self.running:
            try:
                if not self.queue.empty():
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    task = self.queue.get(timeout=1)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    current_time = time.time()
                    time_since_last = current_time - self.last_request_time
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É min_delay –∏ max_delay
                    delay = random.uniform(self.min_delay, self.max_delay)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∏, –∂–¥–µ–º
                    if time_since_last < delay:
                        sleep_time = delay - time_since_last
                        time.sleep(sleep_time)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                    self._execute_request(task)
                    self.last_request_time = time.time()
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    self.queue.task_done()
                else:
                    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    time.sleep(0.1)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏ Telegram: {e}")
                time.sleep(1)
    
    def _execute_request(self, task: Dict):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        try:
            method = task['method']
            payload = task['payload']
            callback = task.get('callback')
            
            response = requests.post(f"{self.telegram_url}/{method}", json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if callback:
                    callback(True, result)
                logger.debug(f"‚úÖ Telegram API {method} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                error_text = response.text
                if callback:
                    callback(False, error_text)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API {method}: {error_text}")
                
        except Exception as e:
            if task.get('callback'):
                task['callback'](False, str(e))
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Telegram –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def send_message(self, payload: Dict, callback=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'method': 'sendMessage',
            'payload': payload,
            'callback': callback
        }
        self.queue.put(task)
        logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.queue.qsize()})")
    
    def edit_message(self, payload: Dict, callback=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'method': 'editMessageText',
            'payload': payload,
            'callback': callback
        }
        self.queue.put(task)
        logger.debug(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.queue.qsize()})")
    
    def delete_message(self, payload: Dict, callback=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'method': 'deleteMessage',
            'payload': payload,
            'callback': callback
        }
        self.queue.put(task)
        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.queue.qsize()})")
    
    def get_queue_size(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏"""
        return self.queue.qsize()

class DuplicateGroupsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —É–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, telegram_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º Telegram –±–æ—Ç–∞"""
        self.telegram_token = telegram_token
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.telegram_queue = TelegramMessageQueue(telegram_token)
        self.telegram_queue.start()
        
        # –ì—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {group_key: GroupData}
        self.groups = {}
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ {group_key: official_contract_info}
        self.official_contracts = {}
        
        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ)
        self.twitter_check_cache = {}  # key: "account_symbol" -> {"has_mentions": bool, "last_check": timestamp, "error": str}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.error_cache_ttl = 3600  # 1 —á–∞—Å –∫—ç—à –¥–ª—è –æ—à–∏–±–æ–∫ (404, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ç.–¥.)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.target_chat_id = -1002680160752  # ID –≥—Ä—É–ø–ø—ã
        self.message_thread_id = 14  # ID —Ç–µ–º—ã –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if hasattr(self, 'telegram_queue'):
                self.telegram_queue.stop()
        except:
            pass
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.telegram_queue.stop()
        logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_queue_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            'queue_size': self.telegram_queue.get_queue_size(),
            'min_delay': self.telegram_queue.min_delay,
            'max_delay': self.telegram_queue.max_delay,
            'is_running': self.telegram_queue.running
        }
    
    class GroupData:
        """–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        def __init__(self, group_key: str, symbol: str, name: str):
            self.group_key = group_key
            self.symbol = symbol
            self.name = name
            self.tokens = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            self.message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            self.sheet_url = None  # URL Google Sheets —Ç–∞–±–ª–∏—Ü—ã
            self.main_twitter = None  # –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            self.official_contract = None  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            self.official_announcement = None  # –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç —Å –∞–Ω–æ–Ω—Å–æ–º —Ç–æ–∫–µ–Ω–∞
            self.created_at = datetime.now()
            self.last_updated = datetime.now()
            self.latest_added_token = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter –ø–æ—Ç–æ–∫–∞
    
    def create_group_key(self, token_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
        name = token_data.get('name', '').strip().lower()
        symbol = token_data.get('symbol', '').strip().upper()
        return f"{name}_{symbol}"
    
    def extract_twitter_accounts(self, token_data: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
        twitter_accounts = set()
        
        # –ü–æ–ª—è –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å Twitter —Å—Å—ã–ª–∫–∏
        twitter_fields = ['twitter', 'website', 'telegram', 'social', 'links']
        
        for field in twitter_fields:
            url = token_data.get(field, '')
            if url and isinstance(url, str):
                account = self._normalize_twitter_url(url)
                if account:
                    twitter_accounts.add(account)
        
        return list(twitter_accounts)
    
    def _normalize_twitter_url(self, url: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç Twitter URL, –∏–∑–≤–ª–µ–∫–∞—è username"""
        try:
            if not url or not isinstance(url, str):
                return None
                
            url_lower = url.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Twitter/X —Å—Å—ã–ª–∫–∞
            if not any(domain in url_lower for domain in ['twitter.com', 'x.com']):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username
            username_pattern = r'(?i)(?:twitter\.com|x\.com)/([^/\?]+)'
            match = re.search(username_pattern, url)
            
            if match:
                username = match.group(1).strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É—Ç–∏
                service_paths = ['i', 'home', 'search', 'notifications', 'messages', 'settings', 'intent']
                if username.lower() in service_paths:
                    return None
                    
                return username
                
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Twitter URL {url}: {e}")
            
        return None
    
    async def determine_main_twitter(self, tokens: List[Dict]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            if not tokens:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
            symbol = tokens[0].get('symbol', '').strip()
            if not symbol:
                return None
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã
            all_twitter_accounts = set()
            for token in tokens:
                twitter_accounts = self.extract_twitter_accounts(token)
                for account in twitter_accounts:
                    all_twitter_accounts.add(account.lower())
            
            if not all_twitter_accounts:
                logger.warning(f"üö´ –ù–µ—Ç Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}")
                return None
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(all_twitter_accounts)} Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            valid_accounts = []
            has_any_fresh_tweets = False
            
            for twitter_account in all_twitter_accounts:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç @{twitter_account} –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\"")
                
                # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
                has_contracts = await self._check_contracts_in_twitter(twitter_account)
                if has_contracts:
                    logger.warning(f"üö´ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ò–°–ö–õ–Æ–ß–ï–ù: –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞)
                has_symbol_mentions = await self._check_symbol_mentions_in_twitter(twitter_account, symbol)
                
                if has_symbol_mentions:
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} —Å–æ–¥–µ—Ä–∂–∏—Ç –°–í–ï–ñ–ò–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" (< 30 –¥–Ω–µ–π) –ë–ï–ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                    valid_accounts.append(twitter_account)
                    has_any_fresh_tweets = True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
                    cache_key = f"{twitter_account}_{symbol}"
                    cached_result = self.twitter_check_cache.get(cache_key, {})
                    error_reason = cached_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
                    
                    if error_reason == '–í—Å–µ —Ç–≤–∏—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π':
                        logger.info(f"‚è∞ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\", –Ω–æ –≤—Å–µ —Ç–≤–∏—Ç—ã –°–¢–ê–†–®–ï 30 –¥–Ω–µ–π")
                    else:
                        logger.info(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" ({error_reason})")
            
            # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ù–ò –û–î–ò–ù –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ - —Å–∫–∏–ø–∞–µ–º –≥—Ä—É–ø–ø—É
            if not has_any_fresh_tweets:
                logger.warning(f"‚è∞üö´ –ì–†–£–ü–ü–ê {symbol} –°–ö–ò–ü–ê–ï–¢–°–Ø: –í—Å–µ —Ç–≤–∏—Ç—ã —Å–æ –≤—Å–µ—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π! –ì—Ä—É–ø–ø–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞.")
                return None
            
            if not valid_accounts:
                logger.warning(f"üö´ –ù–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –°–í–ï–ñ–ò–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" - –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return None
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç - –æ–Ω –≥–ª–∞–≤–Ω—ã–π
            if len(valid_accounts) == 1:
                main_twitter = valid_accounts[0]
                logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: @{main_twitter} (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ –°–í–ï–ñ–ò–ú–ò —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ \"${symbol}\")")
                return main_twitter
            
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –ª–æ–≥–∏–∫—É)
            main_twitter = valid_accounts[0]
            logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: @{main_twitter} (–ø–µ—Ä–≤—ã–π –∏–∑ {len(valid_accounts)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ –°–í–ï–ñ–ò–ú–ò —Ç–≤–∏—Ç–∞–º–∏)")
            return main_twitter
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter: {e}")
            return None
    
    async def _check_symbol_mentions_in_twitter(self, twitter_account: str, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{twitter_account}_{symbol}"
            current_time = time.time()
            
            if cache_key in self.twitter_check_cache:
                cached_result = self.twitter_check_cache[cache_key]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if cached_result.get('error'):
                    # –î–ª—è –æ—à–∏–±–æ–∫ (404, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã) - –¥–ª–∏–Ω–Ω—ã–π –∫—ç—à
                    ttl = self.error_cache_ttl
                    cache_type = "ERROR"
                else:
                    # –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - –∫–æ—Ä–æ—Ç–∫–∏–π –∫—ç—à
                    ttl = self.cache_ttl
                    cache_type = "SUCCESS"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
                if current_time - cached_result['last_check'] < ttl:
                    logger.info(f"üìã –ö—ç—à [{cache_type}]: @{twitter_account} - {cached_result.get('error', '–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ')} (TTL: {int(ttl/60)}–º–∏–Ω)")
                    return cached_result['has_mentions']
                else:
                    logger.debug(f"‚è∞ –ö—ç—à –∏—Å—Ç–µ–∫ –¥–ª—è @{twitter_account} (–ø—Ä–æ—à–ª–æ {int((current_time - cached_result['last_check'])/60)}–º–∏–Ω)")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${–°–ò–ú–í–û–õ}"
            search_query = f'"${symbol}"'
            
            # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –ø–æ–∏—Å–∫–∞
            async with aiohttp.ClientSession() as session:
                proxy, cookie = await get_next_proxy_cookie_async(session)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                    'Cookie': cookie
                }
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connector = aiohttp.TCPConnector(ssl=False)
                request_kwargs = {}
                if proxy:
                    request_kwargs['proxy'] = proxy
                
                # URL –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
                search_url = f"https://nitter.tiekoetter.com/{twitter_account}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                
                async with session.get(search_url, headers=headers, timeout=20, **request_kwargs) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                        title = soup.find('title')
                        if title and 'Making sure you\'re not a bot!' in title.get_text():
                            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                            
                            # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                            retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, search_url, f"–ø–æ–∏—Å–∫ \"${symbol}\" –≤ @{twitter_account}", html)
                            
                            if retry_soup:
                                # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                soup = retry_soup
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account}")
                            else:
                                # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account}")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –æ—à–∏–±–∫—É
                                self.twitter_check_cache[cache_key] = {
                                    'has_mentions': False,
                                    'last_check': current_time,
                                    'error': 'Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)'
                                }
                                return False
                        
                        # –ò—â–µ–º —Ç–≤–∏—Ç—ã
                        tweets = soup.find_all('div', class_='timeline-item')
                        if tweets and len(tweets) > 0:
                            # üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–≤–∏—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "$SYMBOL" –∏ –≤–æ–∑—Ä–∞—Å—Ç
                            valid_tweets = 0
                            fresh_tweets = 0
                            one_month_ago = datetime.now() - timedelta(days=30)
                            
                            for tweet in tweets:
                                tweet_content = tweet.find('div', class_='tweet-content')
                                tweet_date_elem = tweet.find('span', class_='tweet-date')
                                
                                if tweet_content and tweet_date_elem:
                                    tweet_text = tweet_content.get_text()
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ —Å $ –≤ —Ç–µ–∫—Å—Ç–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
                                    symbol_pattern = f"${symbol.upper()}"
                                    if symbol_pattern in tweet_text.upper():
                                        valid_tweets += 1
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–∞
                                        tweet_age = self._get_tweet_age(tweet_date_elem)
                                        if tweet_age and tweet_age > one_month_ago:
                                            fresh_tweets += 1
                                            logger.debug(f"‚úÖ –°–≤–µ–∂–∏–π —Ç–≤–∏—Ç —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d')}): {tweet_text[:50]}...")
                                        else:
                                            logger.debug(f"‚è∞ –°—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d') if tweet_age else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}): {tweet_text[:50]}...")
                                    else:
                                        logger.debug(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–≤–∏—Ç (–Ω–µ—Ç \"{symbol_pattern}\"): {tweet_text[:50]}...")
                            
                            if valid_tweets > 0:
                                if fresh_tweets > 0:
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {valid_tweets} –í–ê–õ–ò–î–ù–´–• —Ç–≤–∏—Ç–æ–≤ —Å \"${symbol}\" –≤ @{twitter_account}, –∏–∑ –Ω–∏—Ö {fresh_tweets} —Å–≤–µ–∂–∏—Ö (< 30 –¥–Ω–µ–π)")
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ —É—Å–ø–µ—Ö
                                    self.twitter_check_cache[cache_key] = {
                                        'has_mentions': True,
                                        'last_check': current_time,
                                        'error': None
                                    }
                                    return True
                                else:
                                    logger.warning(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ {valid_tweets} —Ç–≤–∏—Ç–æ–≤ —Å \"${symbol}\" –≤ @{twitter_account}, –Ω–æ –≤—Å–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π")
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –Ω–µ—É—Å–ø–µ—Ö (—Å—Ç–∞—Ä—ã–µ —Ç–≤–∏—Ç—ã)
                                    self.twitter_check_cache[cache_key] = {
                                        'has_mentions': False,
                                        'last_check': current_time,
                                        'error': '–í—Å–µ —Ç–≤–∏—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π'
                                    }
                                    return False
                            else:
                                logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤, –Ω–æ –ù–ò –û–î–ò–ù –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç \"${symbol}\" –≤ @{twitter_account}")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –Ω–µ—É—Å–ø–µ—Ö
                                self.twitter_check_cache[cache_key] = {
                                    'has_mentions': False,
                                    'last_check': current_time,
                                    'error': '–¢–≤–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞'
                                }
                                return False
                        else:
                            logger.debug(f"üö´ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ @{twitter_account}")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –Ω–µ—É—Å–ø–µ—Ö
                            self.twitter_check_cache[cache_key] = {
                                'has_mentions': False,
                                'last_check': current_time,
                                'error': None
                            }
                            return False
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ @{twitter_account}: HTTP {response.status}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –æ—à–∏–±–∫—É
                        self.twitter_check_cache[cache_key] = {
                            'has_mentions': False,
                            'last_check': current_time,
                            'error': f'HTTP {response.status}'
                        }
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ –≤ @{twitter_account}: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –æ—à–∏–±–∫—É
            self.twitter_check_cache[cache_key] = {
                'has_mentions': False,
                'last_check': current_time,
                'error': str(e)
            }
            return False
    
    def _get_tweet_age(self, tweet_date_elem) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞—Ç—ã"""
        try:
            if not tweet_date_elem:
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ title —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            date_link = tweet_date_elem.find('a')
            if date_link and date_link.get('title'):
                # –ë–µ—Ä–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏–∑ title: "Jun 16, 2025 ¬∑ 6:03 PM UTC"
                date_str = date_link.get('title')
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Jun 16, 2025 ¬∑ 6:03 PM UTC"
                try:
                    # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                    date_str = date_str.replace(' UTC', '').replace(' ¬∑ ', ' ')
                    tweet_date = datetime.strptime(date_str, '%b %d, %Y %I:%M %p')
                    return tweet_date
                except:
                    pass
                    
            # Fallback: –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            date_text = tweet_date_elem.get_text(strip=True)
            if date_text:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Ç–∏–ø–∞ "1h", "2d", "3w"
                if 'h' in date_text:  # —á–∞—Å—ã
                    hours = int(re.search(r'(\d+)h', date_text).group(1))
                    return datetime.now() - timedelta(hours=hours)
                elif 'd' in date_text:  # –¥–Ω–∏
                    days = int(re.search(r'(\d+)d', date_text).group(1))
                    return datetime.now() - timedelta(days=days)
                elif 'w' in date_text:  # –Ω–µ–¥–µ–ª–∏
                    weeks = int(re.search(r'(\d+)w', date_text).group(1))
                    return datetime.now() - timedelta(weeks=weeks)
                elif 'm' in date_text:  # –º–µ—Å—è—Ü—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                    months = int(re.search(r'(\d+)m', date_text).group(1))
                    return datetime.now() - timedelta(days=months * 30)
                elif 'y' in date_text:  # –≥–æ–¥—ã
                    years = int(re.search(r'(\d+)y', date_text).group(1))
                    return datetime.now() - timedelta(days=years * 365)
            
            return None
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç–≤–∏—Ç–∞: {e}")
            return None
    
    async def _find_oldest_token_mention(self, twitter_account: str, symbol: str) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${–°–ò–ú–í–û–õ}"
            search_query = f'"${symbol}"'
            
            # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –ø–æ–∏—Å–∫–∞
            async with aiohttp.ClientSession() as session:
                proxy, cookie = await get_next_proxy_cookie_async(session)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                    'Cookie': cookie
                }
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connector = aiohttp.TCPConnector(ssl=False)
                request_kwargs = {}
                if proxy:
                    request_kwargs['proxy'] = proxy
                
                # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–º–∞–∫—Å–∏–º—É–º 3)
                all_tweets = []
                current_url = f"https://nitter.tiekoetter.com/{twitter_account}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                
                for page in range(3):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    logger.debug(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account}")
                    
                    async with session.get(current_url, headers=headers, timeout=20, **request_kwargs) as response:
                        if response.status == 200:
                            html = await response.text()
                            soup = BeautifulSoup(html, 'html.parser')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                            title = soup.find('title')
                            if title and 'Making sure you\'re not a bot!' in title.get_text():
                                logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                                
                                # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                                retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, current_url, f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π @{twitter_account}", html)
                                
                                if retry_soup:
                                    # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                    soup = retry_soup
                                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π @{twitter_account}")
                                else:
                                    # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π @{twitter_account}")
                                    break
                            
                            # –ò—â–µ–º —Ç–≤–∏—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            tweets = soup.find_all('div', class_='timeline-item')
                            page_tweets_count = 0
                            symbol_pattern = f"${symbol.upper()}"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–∏–º–≤–æ–ª–∞
                            
                            if tweets:
                                for tweet in tweets:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–≤–∏—Ç–∞
                                    tweet_text_elem = tweet.find('div', class_='tweet-content')
                                    tweet_date_elem = tweet.find('span', class_='tweet-date')
                                    tweet_link_elem = tweet.find('a', class_='tweet-link')
                                    
                                    if tweet_text_elem and tweet_date_elem:
                                        tweet_text = tweet_text_elem.get_text(strip=True)
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ title —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                                        tweet_date = ""
                                        date_link = tweet_date_elem.find('a')
                                        if date_link and date_link.get('title'):
                                            # –ë–µ—Ä–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏–∑ title: "Jun 16, 2025 ¬∑ 6:03 PM UTC"
                                            tweet_date = date_link.get('title')
                                        else:
                                            # Fallback: –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                                            tweet_date = tweet_date_elem.get_text(strip=True)
                                        
                                        tweet_url = ""
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–∏—Ç
                                        if tweet_link_elem and 'href' in tweet_link_elem.attrs:
                                            tweet_url = f"https://nitter.tiekoetter.com{tweet_link_elem['href']}"
                                        
                                        # üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "$SYMBOL" –≤ —Ç–µ–∫—Å—Ç–µ —Ç–≤–∏—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
                                        if symbol_pattern in tweet_text.upper():
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–∞ - –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Ç–≤–∏—Ç—ã
                                            tweet_age = self._get_tweet_age(tweet_date_elem)
                                            one_month_ago = datetime.now() - timedelta(days=30)
                                            
                                            if tweet_age and tweet_age > one_month_ago:
                                                all_tweets.append({
                                                    'text': tweet_text,
                                                    'date': tweet_date,
                                                    'url': tweet_url,
                                                    'page': page + 1,
                                                    'age': tweet_age
                                                })
                                                page_tweets_count += 1
                                                logger.debug(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –°–í–ï–ñ–ò–ô —Ç–≤–∏—Ç —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d')}): {tweet_text[:50]}...")
                                            else:
                                                logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—â–µ–Ω –°–¢–ê–†–´–ô —Ç–≤–∏—Ç —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d') if tweet_age else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}): {tweet_text[:50]}...")
                                        else:
                                            logger.debug(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω —Ç–≤–∏—Ç –±–µ–∑ \"{symbol_pattern}\": {tweet_text[:50]}...")
                                
                                logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}: –Ω–∞–π–¥–µ–Ω–æ {page_tweets_count} –í–ê–õ–ò–î–ù–´–• —Ç–≤–∏—Ç–æ–≤ —Å \"{symbol_pattern}\"")
                            else:
                                logger.debug(f"üö´ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} —Ç–≤–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ .show-more
                            next_link = None
                            has_more = False
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç div.show-more —Å —Å—Å—ã–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏
                            show_more = soup.find('div', class_='show-more')
                            if show_more:
                                next_link = show_more.find('a')
                                if next_link and next_link.get('href'):
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ .show-more: {next_link['href']}")
                                    
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º —Å—Å—ã–ª–∫—É "Load more" –ø–æ —Ç–µ–∫—Å—Ç—É
                            if not next_link:
                                next_link = soup.find('a', string=lambda text: text and ('load more' in text.lower() or 'more' in text.lower()))
                                if next_link:
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 'Load more': {next_link['href']}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'cursor=' –∏–ª–∏ 'max_position='
                            if not next_link:
                                all_links = soup.find_all('a', href=True)
                                for link in all_links:
                                    if 'cursor=' in link['href'] or 'max_position=' in link['href']:
                                        next_link = link
                                        logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å cursor: {next_link['href']}")
                                        break
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                            if next_link and 'href' in next_link.attrs and page < 2:
                                next_url = next_link['href']
                                
                                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                if next_url.startswith('/'):
                                    current_url = f"https://nitter.tiekoetter.com{next_url}"
                                elif next_url.startswith('?'):
                                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–æ–≤–æ–º URL
                                    current_url = f"https://nitter.tiekoetter.com/{twitter_account}/search{next_url}"
                                else:
                                    current_url = next_url
                                
                                logger.debug(f"üîó –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_url}")
                                has_more = True
                                
                                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                                await asyncio.sleep(2)
                            else:
                                logger.debug(f"üö´ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
                                has_more = False
                            
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–µ—Ç —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π - –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                            if not has_more and page_tweets_count == 0:
                                logger.debug(f"üö´ –ù–µ—Ç –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ç–≤–∏—Ç–æ–≤")
                                break
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –¥–ª—è @{twitter_account}: HTTP {response.status}")
                            break
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –≤–∞–ª–∏–¥–Ω—ã–π –°–í–ï–ñ–ò–ô —Ç–≤–∏—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ, —Ç–∞–∫ –∫–∞–∫ Nitter —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                if all_tweets:
                    oldest_tweet = all_tweets[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç = —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∏–∑ —Å–≤–µ–∂–∏—Ö
                    logger.info(f"üï∞Ô∏è –ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –°–í–ï–ñ–ò–ô —Ç–≤–∏—Ç —Å \"${symbol}\" –≤ @{twitter_account}: {oldest_tweet['date']} (–≤–æ–∑—Ä–∞—Å—Ç: {oldest_tweet['age'].strftime('%Y-%m-%d')})")
                    return oldest_tweet
                else:
                    logger.warning(f"‚è∞üö´ –°–í–ï–ñ–ò–ï —Ç–≤–∏—Ç—ã —Å \"${symbol}\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ @{twitter_account} - –≤—Å–µ —Ç–≤–∏—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π!")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ @{twitter_account}: {e}")
            return None
    
    async def _check_contracts_in_twitter(self, twitter_account: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –ø–æ–∏—Å–∫–∞
            async with aiohttp.ClientSession() as session:
                proxy, cookie = await get_next_proxy_cookie_async(session)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                    'Cookie': cookie
                }
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connector = aiohttp.TCPConnector(ssl=False)
                request_kwargs = {}
                if proxy:
                    request_kwargs['proxy'] = proxy
                
                # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è (–±–∏–æ)
                profile_url = f"https://nitter.tiekoetter.com/{twitter_account}"
                
                logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}")
                
                async with session.get(profile_url, headers=headers, timeout=20, **request_kwargs) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                        title = soup.find('title')
                        if title and 'Making sure you\'re not a bot!' in title.get_text():
                            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                            
                            # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                            retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, profile_url, f"–ø—Ä–æ—Ñ–∏–ª—å @{twitter_account}", html)
                            
                            if retry_soup:
                                # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                soup = retry_soup
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}")
                            else:
                                # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–≤–∏—Ç–æ–≤
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–æ")
                                soup = None
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ soup –¥–æ—Å—Ç—É–ø–µ–Ω
                        if soup:
                            # –ò—â–µ–º –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è
                            bio_element = soup.find('div', class_='profile-bio')
                            if bio_element:
                                bio_text = bio_element.get_text()
                                logger.debug(f"üìã –ë–∏–æ @{twitter_account}: {bio_text[:100]}...")
                                
                                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –±–∏–æ
                                solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
                                potential_contracts = re.findall(solana_pattern, bio_text)
                                
                                if potential_contracts:
                                    logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –ë–ò–û @{twitter_account}: {len(potential_contracts)} —à—Ç.")
                                    for contract in potential_contracts:
                                        logger.warning(f"   üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –±–∏–æ: {contract}")
                                    return True
                                else:
                                    logger.debug(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –±–∏–æ @{twitter_account} –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
                            else:
                                logger.debug(f"‚ö†Ô∏è –ë–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è @{twitter_account}")
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}: HTTP {response.status}")
                
                # –ó–ê–¢–ï–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–∏—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ (–º–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–∏—Ç—ã @{twitter_account}")
                
                # –ò—â–µ–º –ª—é–±—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
                search_query = "pump OR raydium OR solana OR token OR contract"
                current_url = f"https://nitter.tiekoetter.com/{twitter_account}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                
                for page in range(3):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    logger.debug(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ @{twitter_account}")
                    
                    async with session.get(current_url, headers=headers, timeout=20, **request_kwargs) as response:
                        if response.status == 200:
                            html = await response.text()
                            soup = BeautifulSoup(html, 'html.parser')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                            title = soup.find('title')
                            if title and 'Making sure you\'re not a bot!' in title.get_text():
                                logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} –¥–ª—è @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                                
                                # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                                retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, current_url, f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø–æ–∏—Å–∫–∞ @{twitter_account}", html)
                                
                                if retry_soup:
                                    # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                    soup = retry_soup
                                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –ø–æ–∏—Å–∫–∞ @{twitter_account}")
                                else:
                                    # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –ø–æ–∏—Å–∫–∞ @{twitter_account}")
                                    break
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_text = soup.get_text()
                            
                            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (base58, 32-44 —Å–∏–º–≤–æ–ª–∞)
                            solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
                            potential_contracts = re.findall(solana_pattern, page_text)
                            
                            if potential_contracts:
                                logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ @{twitter_account} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1}: {len(potential_contracts)} —à—Ç.")
                                return True
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ .show-more
                            next_link = None
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç div.show-more —Å —Å—Å—ã–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏
                            show_more = soup.find('div', class_='show-more')
                            if show_more:
                                next_link = show_more.find('a')
                                if next_link and next_link.get('href'):
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ .show-more: {next_link['href']}")
                                    
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º —Å—Å—ã–ª–∫—É "Load more" –ø–æ —Ç–µ–∫—Å—Ç—É
                            if not next_link:
                                next_link = soup.find('a', string=lambda text: text and ('load more' in text.lower() or 'more' in text.lower()))
                                if next_link:
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 'Load more': {next_link['href']}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'cursor=' –∏–ª–∏ 'max_position='
                            if not next_link:
                                all_links = soup.find_all('a', href=True)
                                for link in all_links:
                                    if 'cursor=' in link['href'] or 'max_position=' in link['href']:
                                        next_link = link
                                        logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å cursor: {next_link['href']}")
                                        break
                            
                            if next_link and 'href' in next_link.attrs and page < 2:
                                next_url = next_link['href']
                                
                                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                if next_url.startswith('/'):
                                    current_url = f"https://nitter.tiekoetter.com{next_url}"
                                elif next_url.startswith('?'):
                                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–æ–≤–æ–º URL
                                    current_url = f"https://nitter.tiekoetter.com/{twitter_account}/search{next_url}"
                                else:
                                    current_url = next_url
                                
                                logger.debug(f"üîó –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {current_url}")
                                
                                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                                await asyncio.sleep(2)
                            else:
                                logger.debug(f"üö´ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
                                break
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –¥–ª—è @{twitter_account}: HTTP {response.status}")
                            break
                
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ with_replies (–º–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü)
                logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É with_replies @{twitter_account}")
                
                current_url = f"https://nitter.tiekoetter.com/{twitter_account}/with_replies"
                
                for page in range(5):  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                    logger.debug(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} with_replies –¥–ª—è @{twitter_account}")
                    
                    async with session.get(current_url, headers=headers, timeout=20, **request_kwargs) as response:
                        if response.status == 200:
                            html = await response.text()
                            soup = BeautifulSoup(html, 'html.parser')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                            title = soup.find('title')
                            if title and 'Making sure you\'re not a bot!' in title.get_text():
                                logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} with_replies –¥–ª—è @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                                
                                # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                                retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, current_url, f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} with_replies @{twitter_account}", html)
                                
                                if retry_soup:
                                    # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                    soup = retry_soup
                                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} with_replies @{twitter_account}")
                                else:
                                    # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} with_replies @{twitter_account}")
                                    break
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_text = soup.get_text()
                            
                            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (base58, 32-44 —Å–∏–º–≤–æ–ª–∞)
                            solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
                            potential_contracts = re.findall(solana_pattern, page_text)
                            
                            if potential_contracts:
                                logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ @{twitter_account} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} with_replies: {len(potential_contracts)} —à—Ç.")
                                for contract in potential_contracts:
                                    logger.warning(f"   üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤ with_replies: {contract}")
                                return True
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ .show-more
                            next_link = None
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç div.show-more —Å —Å—Å—ã–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏
                            show_more = soup.find('div', class_='show-more')
                            if show_more:
                                next_link = show_more.find('a')
                                if next_link and next_link.get('href'):
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ .show-more: {next_link['href']}")
                                    
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º —Å—Å—ã–ª–∫—É "Load more" –ø–æ —Ç–µ–∫—Å—Ç—É
                            if not next_link:
                                next_link = soup.find('a', string=lambda text: text and ('load more' in text.lower() or 'more' in text.lower()))
                                if next_link:
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 'Load more': {next_link['href']}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'cursor=' –∏–ª–∏ 'max_position='
                            if not next_link:
                                all_links = soup.find_all('a', href=True)
                                for link in all_links:
                                    if 'cursor=' in link['href'] or 'max_position=' in link['href']:
                                        next_link = link
                                        logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å cursor: {next_link['href']}")
                                        break
                            
                            if next_link and 'href' in next_link.attrs and page < 4:
                                next_url = next_link['href']
                                
                                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                if next_url.startswith('/'):
                                    current_url = f"https://nitter.tiekoetter.com{next_url}"
                                elif next_url.startswith('?'):
                                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–æ–≤–æ–º URL
                                    current_url = f"https://nitter.tiekoetter.com/{twitter_account}/with_replies{next_url}"
                                else:
                                    current_url = next_url
                                
                                logger.debug(f"üîó –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ with_replies: {current_url}")
                                
                                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                                await asyncio.sleep(2)
                            else:
                                logger.debug(f"üö´ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ with_replies –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
                                break
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} with_replies –¥–ª—è @{twitter_account}: HTTP {response.status}")
                            break
                
                logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ @{twitter_account} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: –±–∏–æ + 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–∏—Ç–æ–≤ + 5 —Å—Ç—Ä–∞–Ω–∏—Ü with_replies)")
                return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ @{twitter_account}: {e}")
            return False
    
    async def add_token_to_group(self, token_data: Dict, reason: str = "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            group_key = self.create_group_key(token_data)
            token_id = token_data.get('id')
            symbol = token_data.get('symbol', 'Unknown')
            name = token_data.get('name', 'Unknown')
            
            # üîç –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º
            existing_group = None
            existing_group_key = None
            
            for key, group in self.groups.items():
                if group.symbol.upper() == symbol.upper():
                    existing_group = group
                    existing_group_key = key
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}: {key}")
                    break
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ç—É–¥–∞
            if existing_group:
                logger.info(f"‚û°Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω {symbol} –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É {existing_group_key}")
                
                # üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–∫–∏–ø–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                if existing_group.main_twitter:
                    has_contracts = await self._check_contracts_in_twitter(existing_group.main_twitter)
                    if has_contracts:
                        logger.warning(f"üêõüö´ WORMSTER –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –¢–û–ö–ï–ù {symbol}: –ì–ª–∞–≤–Ω—ã–π Twitter @{existing_group.main_twitter} —Å–≤–µ—Ç–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã! –ù–µ –ª—é–±–∏–º —Å–ø–æ–π–ª–µ—Ä—ã! ü§¨")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
                existing_ids = [t.get('id') for t in existing_group.tokens]
                if token_id in existing_ids:
                    logger.debug(f"üîÑ –¢–æ–∫–µ–Ω {token_id[:8]}... —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {existing_group_key}")
                    # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º latest_added_token –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å
                    existing_group.latest_added_token = self._enrich_token_with_date(token_data)
                    existing_group.last_updated = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    await self._update_group_message(existing_group)
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                existing_group.tokens.append(token_data)
                existing_group.latest_added_token = self._enrich_token_with_date(token_data)
                existing_group.last_updated = datetime.now()
                
                # –ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                logger.info(f"üêõ‚úÖ WORMSTER –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É (–≥–ª–∞–≤–Ω—ã–π Twitter: @{existing_group.main_twitter or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'})")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} —Å {len(existing_group.tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏...")
                self._create_sheet_and_update_message_async(existing_group_key, existing_group.tokens, existing_group.main_twitter)
                
                logger.info(f"üêõ‚úÖ WORMSTER –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤—Å–µ–≥–æ –∂–µ—Ä—Ç–≤: {len(existing_group.tokens)}) üéØ")
                return True
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —Å —Ç–æ—á–Ω—ã–º –∫–ª—é—á–æ–º
            if group_key not in self.groups:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {symbol}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –ë–î
                db_tokens = self._load_tokens_from_db(symbol)
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                group = self.GroupData(group_key, symbol, name)
                group.tokens = db_tokens + [token_data] if token_data not in db_tokens else db_tokens
                group.latest_added_token = self._enrich_token_with_date(token_data)  # üéØ –û–±–æ–≥–∞—â–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –ë–î!
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
                group.main_twitter = await self.determine_main_twitter(group.tokens)
                
                # ‚ö†Ô∏è –°–ú–Ø–ì–ß–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π Twitter –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                if not group.main_twitter:
                    logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {symbol} —Å–æ–∑–¥–∞–Ω–∞ –ë–ï–ó –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ - —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è, –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–Ω—Å–∞")
                    
                    # üöÄ –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ –í –§–û–ù–ï (–ë–ï–ó –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø)
                    group.official_announcement = None
                    group.sheet_url = None
                    group.message_id = None  # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
                    self.groups[group_key] = group
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–¥–∞–∂–µ –±–µ–∑ Twitter)
                    self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                    
                    logger.info(f"üêõüìä WORMSTER –°–û–ó–î–ê–õ –°–ö–†–´–¢–£–Æ –ì–†–£–ü–ü–£ {symbol} –ë–ï–ó TELEGRAM –°–û–û–ë–©–ï–ù–ò–Ø! –ö–æ–ø–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ! üìä")
                    return True
                
                # üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–∫–∏–ø–∞–µ–º –≥—Ä—É–ø–ø—É
                has_contracts = await self._check_contracts_in_twitter(group.main_twitter)
                if has_contracts:
                    logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {symbol} –ù–ï —Å–æ–∑–¥–∞–Ω–∞: –≤ –≥–ª–∞–≤–Ω–æ–º Twitter @{group.main_twitter} –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
                    return False
                
                # üîç –ò—â–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞
                oldest_mention = await self._find_oldest_token_mention(group.main_twitter, symbol)
                if oldest_mention:
                    group.official_announcement = oldest_mention
                    logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ {symbol} –æ—Ç {oldest_mention['date']}")
                else:
                    group.official_announcement = None
                    logger.warning(f"üêõ‚ùå WORMSTER –ù–ï –ù–ê–®–Å–õ –ê–ù–û–ù–° –í @{group.main_twitter}, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –≥—Ä—É–ø–ø—É {symbol}! üö´")
                
                # üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º —Ç–∞–±–ª–∏—Ü–∞ –≤ —Ñ–æ–Ω–µ
                logger.info(f"üìä –ì—Ä—É–ø–ø–∞ {symbol} —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
                
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏ (–Ω–µ —Ç–æ—Ä–º–æ–∑–∏–º –ø–æ—Ç–æ–∫)
                group.sheet_url = None  # –ü–æ–∫–∞ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
                group.message_id = await self._send_group_message(group)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
                self.groups[group_key] = group
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)
                self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                
                logger.info(f"üêõüéâ WORMSTER –°–û–ó–î–ê–õ –ù–û–í–£–Æ –û–•–û–¢–ù–ò–ß–¨–Æ –°–¢–ê–Æ {symbol}! –¢–µ–ø–µ—Ä—å –∫–æ–ø–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ! üìä")
                return True
                
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —Å —Ç–æ—á–Ω—ã–º –∫–ª—é—á–æ–º
                group = self.groups[group_key]
                
                # üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–∫–∏–ø–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                if group.main_twitter:
                    has_contracts = await self._check_contracts_in_twitter(group.main_twitter)
                    if has_contracts:
                        logger.warning(f"üêõüö´ WORMSTER –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –¢–û–ö–ï–ù {symbol}: –ì–ª–∞–≤–Ω—ã–π Twitter @{group.main_twitter} —Å–≤–µ—Ç–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã! –ù–µ –ª—é–±–∏–º —Å–ø–æ–π–ª–µ—Ä—ã! ü§¨")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
                existing_ids = [t.get('id') for t in group.tokens]
                if token_id in existing_ids:
                    logger.debug(f"üîÑ –¢–æ–∫–µ–Ω {token_id[:8]}... —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group_key}")
                    # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º latest_added_token –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å
                    group.latest_added_token = self._enrich_token_with_date(token_data)  # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –ë–î!
                    group.last_updated = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    await self._update_group_message(group)
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                group.tokens.append(token_data)
                group.latest_added_token = self._enrich_token_with_date(token_data)  # üéØ –û–±–æ–≥–∞—â–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –ë–î!
                group.last_updated = datetime.now()
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                new_main_twitter = await self.determine_main_twitter(group.tokens)
                if new_main_twitter != group.main_twitter:
                    # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π Twitter –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    if new_main_twitter:
                        has_contracts = await self._check_contracts_in_twitter(new_main_twitter)
                        if has_contracts:
                            logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {symbol} —Å–∫–∏–ø–∞–µ—Ç—Å—è: –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π Twitter @{new_main_twitter} —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
                            return False
                    
                    group.main_twitter = new_main_twitter
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ Google Sheets –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    priority = 0 if group.message_id else 1  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
                    sheets_manager.update_main_twitter_async(group_key, new_main_twitter, priority=priority)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –≥–ª–∞–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    if new_main_twitter:
                        oldest_mention = await self._find_oldest_token_mention(new_main_twitter, symbol)
                        group.official_announcement = oldest_mention
                
                # üîç –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –∞–Ω–æ–Ω—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø–µ
                if group.main_twitter and not group.official_announcement:
                    logger.info(f"üêõüîç WORMSTER –ù–ê–®–Å–õ –ì–†–£–ü–ü–£ {symbol} –ë–ï–ó –ê–ù–û–ù–°–ê! –ö–æ–ø–∞–µ–º –≥–ª—É–±–∂–µ –≤ @{group.main_twitter}...")
                    oldest_mention = await self._find_oldest_token_mention(group.main_twitter, symbol)
                    if oldest_mention:
                        group.official_announcement = oldest_mention
                        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω –∞–Ω–æ–Ω—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã {symbol} –æ—Ç {oldest_mention['date']}")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} —Å {len(group.tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏...")
                self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                
                logger.info(f"üêõ‚úÖ WORMSTER –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤—Å–µ–≥–æ –∂–µ—Ä—Ç–≤: {len(group.tokens)}) üéØ")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
    
    def _enrich_token_with_date(self, token_data: Dict) -> Dict:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑ –ë–î"""
        try:
            db_manager = get_db_manager()
            session = db_manager.Session()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            from database import Token
            main_token = session.query(Token).filter_by(mint=token_data.get('id')).first()
            dup_token = session.query(DuplicateToken).filter_by(mint=token_data.get('id')).first()
            
            session.close()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é token_data –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            enriched_token = token_data.copy()
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–∫–µ–Ω –≤ –ë–î –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            if main_token and main_token.created_at:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç —Å Z —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                created_at_str = main_token.created_at.strftime('%Y-%m-%dT%H:%M:%SZ')
                
                # –û–±–æ–≥–∞—â–∞–µ–º firstPool –¥–∞–Ω–Ω—ã–º–∏
                if 'firstPool' not in enriched_token:
                    enriched_token['firstPool'] = {}
                
                enriched_token['firstPool']['createdAt'] = created_at_str
                
                logger.debug(f"‚úÖ –¢–æ–∫–µ–Ω {token_data.get('id', '')[:8]}... –æ–±–æ–≥–∞—â–µ–Ω –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è: {created_at_str}")
            else:
                logger.debug(f"‚ö†Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_data.get('id', '')[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if dup_token and dup_token.first_seen:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç —Å Z —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                first_seen_str = dup_token.first_seen.strftime('%Y-%m-%dT%H:%M:%SZ')
                enriched_token['first_seen'] = first_seen_str
                
                logger.debug(f"‚úÖ –¢–æ–∫–µ–Ω {token_data.get('id', '')[:8]}... –æ–±–æ–≥–∞—â–µ–Ω –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {first_seen_str}")
            else:
                logger.debug(f"‚ö†Ô∏è –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_data.get('id', '')[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            return enriched_token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–∞—Ç–æ–π: {e}")
            return token_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    def _load_tokens_from_db(self, symbol: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Ç–æ–∫–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã tokens —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        try:
            db_manager = get_db_manager()
            session = db_manager.Session()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã tokens —Å JOIN –∫ duplicate_tokens –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            tokens = session.query(Token, DuplicateToken).outerjoin(
                DuplicateToken, Token.mint == DuplicateToken.mint
            ).filter(
                Token.symbol == symbol.upper()  # –°–∏–º–≤–æ–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            ).order_by(Token.created_at.desc()).all()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            
            session.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Jupiter API
            token_list = []
            for token, dup_token in tokens:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è Jupiter API —Ñ–æ—Ä–º–∞—Ç–∞
                created_at_str = None
                if token.created_at:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç —Å Z —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                    created_at_str = token.created_at.strftime('%Y-%m-%dT%H:%M:%SZ')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                first_seen_str = None
                if dup_token and dup_token.first_seen:
                    first_seen_str = dup_token.first_seen.strftime('%Y-%m-%dT%H:%M:%SZ')
                
                token_dict = {
                    'id': token.mint,
                    'name': token.name or 'Unknown',
                    'symbol': token.symbol,
                    'icon': getattr(token, 'icon', None),
                    'twitter': getattr(token, 'twitter', None),
                    'telegram': getattr(token, 'telegram', None),
                    'website': getattr(token, 'website', None),
                    'decimals': getattr(token, 'decimals', 6),
                    'firstPool': {
                        'createdAt': created_at_str
                    },
                    'first_seen': first_seen_str  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                }
                token_list.append(token_dict)
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_list)} —Ç–æ–∫–µ–Ω–æ–≤ {symbol} –∏–∑ –û–°–ù–û–í–ù–û–ô —Ç–∞–±–ª–∏—Ü—ã tokens —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
            return token_list
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ë–î: {e}")
            return []
    
    async def _send_group_message(self, group: 'GroupData') -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ Telegram —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        try:
            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)
            
            payload = {
                "chat_id": self.target_chat_id,
                "message_thread_id": self.message_thread_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }
            
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            future = asyncio.Future()
            
            def callback(success: bool, result):
                if success:
                    message_id = result['result']['message_id']
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å (ID: {message_id})")
                    future.set_result(message_id)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    future.set_result(None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.send_message(payload, callback)
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                return result
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _update_group_message(self, group: 'GroupData') -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False

            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)

            payload = {
                "chat_id": self.target_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            future = asyncio.Future()

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                    future.set_result(True)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    future.set_result(False)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)

            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                return result
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def _parse_jupiter_date(self, date_string: str) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ Jupiter API —Ñ–æ—Ä–º–∞—Ç–∞ '2025-07-05T16:03:59Z' –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if not date_string:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ UTC –¥–∞—Ç—ã —Å Z-—Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            if date_string.endswith('Z'):
                # –ó–∞–º–µ–Ω—è–µ–º Z –Ω–∞ +00:00 –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è UTC
                date_string = date_string.replace('Z', '+00:00')
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
            created_date = datetime.fromisoformat(date_string)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            return created_date.strftime('%d.%m.%Y %H:%M')
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Jupiter –¥–∞—Ç—ã '{date_string}': {e}")
            return str(date_string)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É

    async def _format_group_message(self, group: 'GroupData') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            # üêõ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö WORMSTER'–ê
            message = f"üêõüí∞ <b>WORMSTER –ù–ê–®–Å–õ –°–¢–ê–Æ –î–£–ë–õ–ò–ö–ê–¢–û–í: ${group.symbol.upper()}!</b>\n"
            message += f"üéØ <b>–¶–µ–ª—å –¥–ª—è –ò–ö–°–û–í:</b> {group.name}\n"
            message += f"‚ö° <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏! –í—Ä–µ–º—è –¥–ª—è —Ö–∞–Ω—Ç–∏–Ω–≥–∞! üî•\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter –∞–∫–∫–∞—É–Ω—Ç–µ
            if group.main_twitter:
                message += f"üê¶ <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> @{group.main_twitter}\n"
                
                # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç)
                if group.official_announcement:
                    message += f"üì¢ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–û–ù–°:</b>\n"
                    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_announcement['date']}\n"
                    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    announcement_text = group.official_announcement['text']
                    if len(announcement_text) > 200:
                        announcement_text = announcement_text[:200] + "..."
                    message += f"<blockquote>{announcement_text}</blockquote>\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    additional_accounts = await self._get_additional_twitter_accounts(group)
                    if additional_accounts:
                        message += f"üê¶ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã:</b>\n"
                        for account in additional_accounts:
                            message += f"‚Ä¢ @{account}\n"
                    message += "\n"
                else:
                    message += f"üì¢ <b>–ê–ù–û–ù–°:</b> –ù–µ –Ω–∞–π–¥–µ–Ω\n\n"
                
                # üêõ –°–¢–ê–¢–£–° –û–•–û–¢–´ WORMSTER'–ê
                if group.official_contract:
                    message += f"üéâ <b>–ë–ò–ù–ì–û! WORMSTER –ü–û–ô–ú–ê–õ –û–§–ò–¶–ò–ê–õ–ö–£!</b>\n"
                    message += f"üíé <b>–ó–æ–ª–æ—Ç–æ–π –∞–¥—Ä–µ—Å:</b> <code>{group.official_contract['address']}</code>\n"
                    message += f"üìÖ <b>–ú–æ–º–µ–Ω—Ç –ø–æ–±–µ–¥—ã:</b> {group.official_contract['date']}\n"
                    message += f"üöÄ <b>–≠–¢–û –û–ù–û! –ì–û–¢–û–í–¨ –ö–û–®–ï–õ–Å–ö –ö –ò–ö–°–ê–ú!</b>\n\n"
                else:
                    message += f"üîç <b>WORMSTER –ü–†–û–î–û–õ–ñ–ê–ï–¢ –û–•–û–¢–£...</b>\n"
                    message += f"üëÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ Twitter-–¥–∂—É–Ω–≥–ª—è—Ö!\n"
                    message += f"‚ö° –ù–æ –æ—Ö–æ—Ç–∞ –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è! –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! üêõ\n\n"
            else:
                message += f"‚ùì <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n\n"
            
            # üêõ –ë–û–ï–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê WORMSTER'–ê
            total_tokens = len(group.tokens)
            tokens_with_links = sum(1 for token in group.tokens if self._has_links(token))
            tokens_without_links = total_tokens - tokens_with_links
            
            message += f"‚öîÔ∏è <b>–ë–û–ï–í–ê–Ø –°–í–û–î–ö–ê WORMSTER'–ê:</b>\n"
            message += f"üéØ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π –≤ –∑–∞—Å–∞–¥–µ: <b>{total_tokens}</b>\n"
            message += f"üîó –ì–æ—Ç–æ–≤—ã—Ö –∫ –ø–∞–º–ø-–∞—Ç–∞–∫–µ: <b>{tokens_with_links}</b>\n"
            message += f"üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö (–±–µ–∑ —Å–æ—Ü—Å–µ—Ç–µ–π): <b>{tokens_without_links}</b>\n"
            if tokens_with_links > 0:
                success_rate = round((tokens_with_links / total_tokens) * 100)
                if success_rate >= 70:
                    message += f"üöÄ <b>–®–ê–ù–° –ù–ê –ò–ö–°–°–´: {success_rate}% - –ê–ì–†–ï–°–°–ò–í–ù–û –ó–ê–•–û–î–ò–ú!</b>\n"
                elif success_rate >= 40:
                    message += f"‚ö†Ô∏è <b>–®–ê–ù–° –ù–ê –ò–ö–°–°–´: {success_rate}% - –û–°–¢–û–†–û–ñ–ù–û, –ù–û –ó–ê–•–û–î–ò–ú!</b>\n"
                else:
                    message += f"üêõ <b>–®–ê–ù–° –ù–ê –ò–ö–°–°–´: {success_rate}% - WORMSTER –í –†–ï–ñ–ò–ú–ï –û–•–û–¢–´!</b>\n"
            message += "\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            if group.latest_added_token:
                # üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—à–µ–ª –∏–∑ Jupiter
                latest_token = group.latest_added_token
                latest_contract = latest_token.get('id', 'Unknown')
                latest_created = latest_token.get('firstPool', {}).get('createdAt', '')
                
                # üîß FALLBACK: –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
                if not latest_created or latest_created == '' or latest_created is None:
                    logger.warning(f"‚ö†Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {latest_contract[:8]}... –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    created_display = f"{group.last_updated.strftime('%d.%m.%Y %H:%M')} (–Ω–µ–¥–∞–≤–Ω–æ)"
                else:
                    created_display = self._parse_jupiter_date(latest_created)
                
                message += f"üéØ <b>–°–í–ï–ñ–ê–Ø –î–û–ë–´–ß–ê WORMSTER'–ê:</b>\n"
                message += f"<code>{latest_contract}</code>\n"
                message += f"‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {created_display} UTC\n"
                message += f"üêõ <b>–ß–£–í–°–¢–í–£–Æ –ó–ê–ü–ê–• –ò–ö–°–û–í!</b> –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¢–û–¢ –°–ê–ú–´–ô —Ç–æ–∫–µ–Ω! üíé\n\n"
            elif group.tokens:
                # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç latest_added_token, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
                fallback_token = group.tokens[0]
                fallback_contract = fallback_token.get('id', 'Unknown')
                message += f"üÜï <b>–ö–û–ù–¢–†–ê–ö–¢:</b>\n"
                message += f"<code>{fallback_contract}</code>\n"
                message += f"üìÖ –°–æ–∑–¥–∞–Ω: –ù–µ–¥–∞–≤–Ω–æ\n\n"
            
            # üêõ –ú–ï–¢–ö–ê –í–†–ï–ú–ï–ù–ò WORMSTER'–ê
            utc_time = datetime.utcnow()
            message += f"üïê <b>Wormster –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ:</b> {utc_time.strftime('%d.%m.%Y %H:%M:%S')} UTC\n"
            message += f"üéØ <b>–ü–û–ú–ù–ò:</b> –†–∞–Ω–Ω–∏–µ –ø—Ç–∏—Ü—ã –ª–æ–≤—è—Ç –ª—É—á—à–∏–µ –∏–∫—Å—ã! –ù–µ –ø—Ä–æ—Å–ø–∏ –∞–ª—å—Ñ—É! üí∞üêõ"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}"
    
    def _create_group_keyboard(self, group: 'GroupData') -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ Google Sheets - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
            if group.sheet_url and group.sheet_url.strip():
                buttons.append([{
                    "text": "üìä –°–º–æ—Ç—Ä–µ—Ç—å –≤ Google Sheets",
                    "url": group.sheet_url
                }])
                logger.debug(f"‚úÖ –ö–Ω–æ–ø–∫–∞ Google Sheets –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            else:
                logger.debug(f"üìä –ö–Ω–æ–ø–∫–∞ Google Sheets –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol} (—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è)")
            
            # –ö–Ω–æ–ø–∫–∞ "–û–∫–µ–π" –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if group.official_contract:
                buttons.append([{
                    "text": "‚úÖ –û–∫–µ–π",
                    "callback_data": f"delete_group:{group.group_key}"
                }])
            
            return {"inline_keyboard": buttons}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥—Ä—É–ø–ø—ã: {e}")
            return {"inline_keyboard": []}
    
    def _has_links(self, token_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ —É —Ç–æ–∫–µ–Ω–∞"""
        link_fields = ['twitter', 'telegram', 'website']
        return any(token_data.get(field) for field in link_fields)
    
    async def _get_additional_twitter_accounts(self, group: 'GroupData') -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–∏—Å–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—ã–π)"""
        try:
            additional_accounts = set()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            for token in group.tokens:
                accounts = self.extract_twitter_accounts(token)
                for account in accounts:
                    # –ò—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                    if account and account != group.main_twitter:
                        additional_accounts.add(account)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            filtered_accounts = []
            for account in additional_accounts:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
                    mentions_symbol = await self._check_symbol_mentions_in_twitter(account, group.symbol)
                    if mentions_symbol:
                        filtered_accounts.append(account)
                        logger.debug(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{account} —É–ø–æ–º–∏–Ω–∞–µ—Ç {group.symbol} - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫")
                    else:
                        logger.debug(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{account} –ù–ï —É–ø–æ–º–∏–Ω–∞–µ—Ç {group.symbol} - –∏—Å–∫–ª—é—á–∞–µ–º")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è {group.symbol} –≤ @{account}: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            return sorted(filtered_accounts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []
    
    def _create_sheet_and_update_message_async(self, group_key: str, tokens: List[Dict], main_twitter: str):
        """üî• –°–£–ü–ï–† –ë–´–°–¢–†–û–ï –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü—ã –±–∞—Ç—á–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
        def create_sheet_task():
            try:
                logger.info(f"üî• –°–æ–∑–¥–∞–µ–º Google Sheets —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –ë–ê–¢–ß–ï–ú ({len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤)...")
                logger.info(f"üîç DEBUG: main_twitter = {main_twitter}, group_key = {group_key}")
                
                # üî• –°–£–ü–ï–† –ë–´–°–¢–†–û: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
                if tokens:
                    logger.info(f"üìã DEBUG: –í—ã–∑—ã–≤–∞–µ–º add_tokens_batch –¥–ª—è {group_key} —Å {len(tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏")
                    table_created = sheets_manager.add_tokens_batch(group_key, tokens, main_twitter)
                    logger.info(f"üìä DEBUG: add_tokens_batch –¥–ª—è {group_key} –≤–µ—Ä–Ω—É–ª: {table_created}")
                    
                    if table_created:
                        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã
                        logger.info(f"üîó DEBUG: –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {group_key}")
                        sheet_url = sheets_manager.get_sheet_url(group_key)
                        logger.info(f"üîó DEBUG: get_sheet_url –¥–ª—è {group_key} –≤–µ—Ä–Ω—É–ª: {sheet_url}")
                        
                        if sheet_url and group_key in self.groups:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
                            group = self.groups[group_key]
                            group.sheet_url = sheet_url
                            
                            logger.info(f"üî• –ë–ê–¢–ß–ï–í–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {group_key}, URL: {sheet_url}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
                            if group.message_id:
                                try:
                                    logger.info(f"üì± DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {group.message_id} –¥–ª—è {group_key}")
                                    self._update_message_with_sheet_button_sync(group)
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            else:
                                logger.debug(f"üìä –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–µ—Å—Ç —Ä–µ–∂–∏–º)")
                            
                            logger.info(f"‚úÖ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å!")
                        else:
                            if not sheet_url:
                                logger.error(f"‚ùå get_sheet_url –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π URL –¥–ª—è {group_key}")
                            if group_key not in self.groups:
                                logger.error(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_key} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ self.groups!")
                                logger.info(f"üîç DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {list(self.groups.keys())}")
                    else:
                        logger.error(f"‚ùå add_tokens_batch –≤–µ—Ä–Ω—É–ª False –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                else:
                    logger.error(f"‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {group_key}")
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ –¥–ª—è {group_key}: {e}")
                import traceback
                logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–†–ò–û–†–ò–¢–ï–¢: –í—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ–±—ã—á–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö
        group = self.groups.get(group_key)
        if group and group.message_id:
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            priority = 0
            priority_msg = "üî• –í–´–°–û–ö–ò–ô (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)"
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö/–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
            priority = 1
            priority_msg = "‚è≥ –û–ë–´–ß–ù–´–ô (—Ç–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞)"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ Google Sheets —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        logger.info(f"üì§ DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É create_sheet_task –¥–ª—è {group_key} –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority_msg}")
        sheets_manager._queue_task(create_sheet_task, priority=priority)
    
    def _format_group_message_sync(self, group: 'GroupData') -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        try:
            # üêõ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö WORMSTER'–ê
            message = f"üêõüí∞ <b>WORMSTER –ù–ê–®–Å–õ –°–¢–ê–Æ –î–£–ë–õ–ò–ö–ê–¢–û–í: ${group.symbol.upper()}!</b>\n"
            message += f"üéØ <b>–¶–µ–ª—å –¥–ª—è –ò–ö–°–û–í:</b> {group.name}\n"
            message += f"‚ö° <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏! –í—Ä–µ–º—è –¥–ª—è —Ö–∞–Ω—Ç–∏–Ω–≥–∞! üî•\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter –∞–∫–∫–∞—É–Ω—Ç–µ
            if group.main_twitter:
                message += f"üê¶ <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> @{group.main_twitter}\n"
                
                # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç)
                if group.official_announcement:
                    message += f"üì¢ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–û–ù–°:</b>\n"
                    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_announcement['date']}\n"
                    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    announcement_text = group.official_announcement['text']
                    if len(announcement_text) > 200:
                        announcement_text = announcement_text[:200] + "..."
                    message += f"<blockquote>{announcement_text}</blockquote>\n"
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                    message += "\n"
                else:
                    message += f"üì¢ <b>–ê–ù–û–ù–°:</b> –ù–µ –Ω–∞–π–¥–µ–Ω\n\n"
                
                # üêõ –°–¢–ê–¢–£–° –û–•–û–¢–´ WORMSTER'–ê
                if group.official_contract:
                    message += f"üéâ <b>–ë–ò–ù–ì–û! WORMSTER –ü–û–ô–ú–ê–õ –û–§–ò–¶–ò–ê–õ–ö–£!</b>\n"
                    message += f"üíé <b>–ó–æ–ª–æ—Ç–æ–π –∞–¥—Ä–µ—Å:</b> <code>{group.official_contract['address']}</code>\n"
                    message += f"üìÖ <b>–ú–æ–º–µ–Ω—Ç –ø–æ–±–µ–¥—ã:</b> {group.official_contract['date']}\n"
                    message += f"üöÄ <b>–≠–¢–û –û–ù–û! –ì–û–¢–û–í–¨ –ö–û–®–ï–õ–Å–ö –ö –ò–ö–°–ê–ú!</b>\n\n"
                else:
                    message += f"üîç <b>WORMSTER –ü–†–û–î–û–õ–ñ–ê–ï–¢ –û–•–û–¢–£...</b>\n"
                    message += f"üëÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ Twitter-–¥–∂—É–Ω–≥–ª—è—Ö!\n"
                    message += f"‚ö° –ù–æ –æ—Ö–æ—Ç–∞ –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è! –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! üêõ\n\n"
            else:
                message += f"‚ùì <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n\n"
            
            # üêõ –ë–û–ï–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê WORMSTER'–ê
            total_tokens = len(group.tokens)
            tokens_with_links = sum(1 for token in group.tokens if self._has_links(token))
            tokens_without_links = total_tokens - tokens_with_links
            
            message += f"‚öîÔ∏è <b>–ë–û–ï–í–ê–Ø –°–í–û–î–ö–ê WORMSTER'–ê:</b>\n"
            message += f"üéØ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π –≤ –∑–∞—Å–∞–¥–µ: <b>{total_tokens}</b>\n"
            message += f"üîó –ì–æ—Ç–æ–≤—ã—Ö –∫ –ø–∞–º–ø-–∞—Ç–∞–∫–µ: <b>{tokens_with_links}</b>\n"
            message += f"üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö (–±–µ–∑ —Å–æ—Ü—Å–µ—Ç–µ–π): <b>{tokens_without_links}</b>\n"
            if tokens_with_links > 0:
                success_rate = round((tokens_with_links / total_tokens) * 100)
                if success_rate >= 70:
                    message += f"üöÄ <b>–®–ê–ù–° –ù–ê –ò–ö–°–°–´: {success_rate}% - –ê–ì–†–ï–°–°–ò–í–ù–û –ó–ê–•–û–î–ò–ú!</b>\n"
                elif success_rate >= 40:
                    message += f"‚ö†Ô∏è <b>–®–ê–ù–° –ù–ê –ò–ö–°–°–´: {success_rate}% - –û–°–¢–û–†–û–ñ–ù–û, –ù–û –ó–ê–•–û–î–ò–ú!</b>\n"
                else:
                    message += f"üêõ <b>–®–ê–ù–° –ù–ê –ò–ö–°–°–´: {success_rate}% - WORMSTER –í –†–ï–ñ–ò–ú–ï –û–•–û–¢–´!</b>\n"
            message += "\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            if group.latest_added_token:
                # üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—à–µ–ª –∏–∑ Jupiter
                latest_token = group.latest_added_token
                latest_contract = latest_token.get('id', 'Unknown')
                latest_created = latest_token.get('firstPool', {}).get('createdAt', '')
                
                # üîß FALLBACK: –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
                if not latest_created or latest_created == '' or latest_created is None:
                    logger.warning(f"‚ö†Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {latest_contract[:8]}... –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    created_display = f"{group.last_updated.strftime('%d.%m.%Y %H:%M')} (–Ω–µ–¥–∞–≤–Ω–æ)"
                else:
                    created_display = self._parse_jupiter_date(latest_created)
                
                message += f"üéØ <b>–°–í–ï–ñ–ê–Ø –î–û–ë–´–ß–ê WORMSTER'–ê:</b>\n"
                message += f"<code>{latest_contract}</code>\n"
                message += f"‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {created_display} UTC\n"
                message += f"üêõ <b>–ß–£–í–°–¢–í–£–Æ –ó–ê–ü–ê–• –ò–ö–°–û–í!</b> –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¢–û–¢ –°–ê–ú–´–ô —Ç–æ–∫–µ–Ω! üíé\n\n"
            elif group.tokens:
                # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç latest_added_token, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
                fallback_token = group.tokens[0]
                fallback_contract = fallback_token.get('id', 'Unknown')
                message += f"üÜï <b>–ö–û–ù–¢–†–ê–ö–¢:</b>\n"
                message += f"<code>{fallback_contract}</code>\n"
                message += f"üìÖ –°–æ–∑–¥–∞–Ω: –ù–µ–¥–∞–≤–Ω–æ\n\n"
            
            # üêõ –ú–ï–¢–ö–ê –í–†–ï–ú–ï–ù–ò WORMSTER'–ê
            utc_time = datetime.utcnow()
            message += f"üïê <b>Wormster –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ:</b> {utc_time.strftime('%d.%m.%Y %H:%M:%S')} UTC\n"
            message += f"üéØ <b>–ü–û–ú–ù–ò:</b> –†–∞–Ω–Ω–∏–µ –ø—Ç–∏—Ü—ã –ª–æ–≤—è—Ç –ª—É—á—à–∏–µ –∏–∫—Å—ã! –ù–µ –ø—Ä–æ—Å–ø–∏ –∞–ª—å—Ñ—É! üí∞üêõ"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}"

    def _update_message_with_sheet_button_sync(self, group: 'GroupData') -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False

            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ await)
            message_text = self._format_group_message_sync(group)
            inline_keyboard = self._create_group_keyboard(group)

            payload = {
                "chat_id": self.target_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)
            
            logger.info(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            return False

    async def _update_message_with_sheet_button(self, group: 'GroupData') -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False

            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)

            payload = {
                "chat_id": self.target_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_container = {'success': False}

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                    result_container['success'] = True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    result_container['success'] = False

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)
            
            # –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å)
            logger.info(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            return False
    
    async def check_official_contract(self, group_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            if not group.main_twitter:
                return False
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤–µ—Ä–Ω–µ—Ç False
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∏—Å–∫–∞ –≤ Twitter –∏–∑ pump_bot.py
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è @{group.main_twitter} - –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return False
    
    async def mark_official_contract_found(self, group_key: str, contract_address: str, found_date: str = None) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            group.official_contract = {
                'address': contract_address,
                'date': found_date or datetime.now().strftime('%d.%m.%Y %H:%M'),
                'found_at': datetime.now()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            if group.main_twitter:
                sheets_manager.check_official_contract_in_twitter(
                    group_key, group.main_twitter, contract_address
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._update_group_message(group)
            
            logger.info(f"‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç {contract_address[:8]}... –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return False
    
    async def delete_group(self, group_key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram)"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
            if group.message_id:
                payload = {
                    "chat_id": self.target_chat_id,
                    "message_id": group.message_id
                }
                
                # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                future = asyncio.Future()
                
                def callback(success: bool, result):
                    if success:
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                        future.set_result(True)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                        future.set_result(False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                self.telegram_queue.delete_message(payload, callback)
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(future, timeout=30.0)
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–∞–º—è—Ç–∏
            del self.groups[group_key]
            
            logger.info(f"üêõüí• WORMSTER –£–ù–ò–ß–¢–û–ñ–ò–õ –ì–†–£–ü–ü–£ {group.symbol}! –û—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéØ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def get_group_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º"""
        try:
            total_groups = len(self.groups)
            total_tokens = sum(len(group.tokens) for group in self.groups.values())
            groups_with_official = sum(1 for group in self.groups.values() if group.official_contract)
            
            return {
                'total_groups': total_groups,
                'total_tokens': total_tokens,
                'groups_with_official_contracts': groups_with_official,
                'active_groups': [
                    {
                        'symbol': group.symbol,
                        'tokens_count': len(group.tokens),
                        'main_twitter': group.main_twitter,
                        'has_official': bool(group.official_contract),
                        'sheet_url': group.sheet_url
                    }
                    for group in self.groups.values()
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø: {e}")
            return {}
    
    async def _handle_nitter_block(self, session, proxy, cookie, headers, url, context_name, html_content):
        """üîÑ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ Nitter —Å Anubis challenge"""
        try:
            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è {context_name} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            
            # –°–ù–ê–ß–ê–õ–ê –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å Anubis challenge —Å —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–æ–∫—Å–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞!)
            logger.warning(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge –¥–ª—è {context_name}, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
            
            try:
                anubis_cookies = await handle_anubis_challenge_for_session(session, url, html_content)
                
                if anubis_cookies:
                    logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω –¥–ª—è {context_name}, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –∫—É–∫–∏")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                    updated_cookies = update_cookies_in_string(headers.get('Cookie', ''), anubis_cookies)
                    headers['Cookie'] = updated_cookies
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏
                    request_kwargs = {}
                    if proxy:
                        request_kwargs['proxy'] = proxy
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—à–µ–Ω–Ω—ã–º challenge
                    async with session.get(url, headers=headers, timeout=20, **request_kwargs) as anubis_response:
                        if anubis_response.status == 200:
                            anubis_html = await anubis_response.text()
                            anubis_soup = BeautifulSoup(anubis_html, 'html.parser')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ challenge –±–æ–ª—å—à–µ –Ω–µ—Ç
                            anubis_title = anubis_soup.find('title')
                            anubis_has_challenge_text = anubis_title and 'Making sure you\'re not a bot!' in anubis_title.get_text()
                            anubis_has_anubis_script = 'id="anubis_challenge"' in anubis_html
                            
                            if anubis_has_challenge_text or anubis_has_anubis_script:
                                logger.warning(f"‚ö†Ô∏è Challenge –Ω–µ —Ä–µ—à–µ–Ω —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏")
                                # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                                return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                            
                            logger.info(f"üéâ {context_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è challenge")
                            return anubis_soup
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è challenge –¥–ª—è {context_name}: HTTP {anubis_response.status}")
                            # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                            return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏")
                    # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                    return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                    
            except Exception as anubis_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge –¥–ª—è {context_name}: {anubis_error}")
                # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {context_name}: {e}")
            return None
    
    async def _fallback_with_new_proxy(self, session, old_proxy, old_cookie, headers, url, context_name):
        """Fallback —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ challenge –Ω–µ —Ä–µ—à–∏–ª—Å—è"""
        try:
            logger.info(f"üîÑ Fallback: –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            from dynamic_cookie_rotation import mark_proxy_temp_blocked
            mark_proxy_temp_blocked(old_proxy, old_cookie, block_duration_minutes=5)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ cookie
            from dynamic_cookie_rotation import get_next_proxy_cookie_async
            new_proxy, new_cookie = await get_next_proxy_cookie_async(session)
            
            if new_proxy != old_proxy or new_cookie != old_cookie:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º cookie
                headers['Cookie'] = new_cookie
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                request_kwargs = {}
                if new_proxy:
                    request_kwargs['proxy'] = new_proxy
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                async with session.get(url, headers=headers, timeout=20, **request_kwargs) as retry_response:
                    if retry_response.status == 200:
                        retry_html = await retry_response.text()
                        retry_soup = BeautifulSoup(retry_html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                        retry_title = retry_soup.find('title')
                        has_challenge_text = retry_title and 'Making sure you\'re not a bot!' in retry_title.get_text()
                        has_anubis_script = 'id="anubis_challenge"' in retry_html
                        
                        if has_challenge_text or has_anubis_script:
                            logger.warning(f"ü§ñ –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç challenge –¥–ª—è {context_name}, —Ä–µ—à–∞–µ–º...")
                            
                            # –†–µ—à–∞–µ–º challenge —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                            try:
                                anubis_cookies = await handle_anubis_challenge_for_session(session, url, retry_html)
                                
                                if anubis_cookies:
                                    logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                                    updated_cookies = update_cookies_in_string(headers.get('Cookie', ''), anubis_cookies)
                                    headers['Cookie'] = updated_cookies
                                    
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—à–µ–Ω–Ω—ã–º challenge
                                    async with session.get(url, headers=headers, timeout=20, **request_kwargs) as final_response:
                                        if final_response.status == 200:
                                            final_html = await final_response.text()
                                            final_soup = BeautifulSoup(final_html, 'html.parser')
                                            
                                            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                                            final_title = final_soup.find('title')
                                            final_has_challenge = final_title and 'Making sure you\'re not a bot!' in final_title.get_text()
                                            final_has_anubis = 'id="anubis_challenge"' in final_html
                                            
                                            if final_has_challenge or final_has_anubis:
                                                logger.error(f"‚ùå Challenge –≤—Å—ë –µ—â—ë –Ω–µ —Ä–µ—à–µ–Ω –¥–ª—è {context_name}")
                                                return None
                                            
                                            logger.info(f"üéâ {context_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ fallback —Ä–µ—à–µ–Ω–∏—è challenge")
                                            return final_soup
                                        else:
                                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {context_name}: HTTP {final_response.status}")
                                            return None
                                else:
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                                    return None
                                    
                            except Exception as anubis_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}: {anubis_error}")
                                return None
                        else:
                            logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {context_name}")
                            return retry_soup
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}: HTTP {retry_response.status}")
                        return None
            else:
                logger.warning(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –¥–ª—è {context_name}: {e}")
            return None

    async def cleanup_groups_with_contracts(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ, –≥–¥–µ –≥–ª–∞–≤–Ω—ã–π Twitter —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã"""
        results = {}
        groups_to_delete = []
        
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
            
            for group_key, group in self.groups.items():
                if group.main_twitter:
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É {group.symbol} (@{group.main_twitter})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º Twitter
                    has_contracts = await self._check_contracts_in_twitter(group.main_twitter)
                    
                    if has_contracts:
                        logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {group.symbol} –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ @{group.main_twitter}")
                        groups_to_delete.append(group_key)
                        results[group.symbol] = True
                    else:
                        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group.symbol} —á–∏—Å—Ç–∞—è: –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ @{group.main_twitter}")
                        results[group.symbol] = False
                else:
                    logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.symbol} –±–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ Twitter - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    results[group.symbol] = False
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
            for group_key in groups_to_delete:
                group = self.groups[group_key]
                logger.warning(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É {group.symbol} —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏...")
                await self.delete_group(group_key)
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups_to_delete)}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥—Ä—É–ø–ø: {e}")
            return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
# –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
_duplicate_groups_manager = None

def get_duplicate_groups_manager():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    global _duplicate_groups_manager
    return _duplicate_groups_manager

def initialize_duplicate_groups_manager(telegram_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    global _duplicate_groups_manager
    _duplicate_groups_manager = DuplicateGroupsManager(telegram_token)
    logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def shutdown_duplicate_groups_manager():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    global _duplicate_groups_manager
    if _duplicate_groups_manager:
        _duplicate_groups_manager.stop()
        _duplicate_groups_manager = None
        logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —É–¥–∞–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_duplicate_groups_manager() 