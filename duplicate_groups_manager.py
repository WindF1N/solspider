#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, —É–º–Ω—ã–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

üåç –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ - –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö:
=====================================

–°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –ë–ï–ó Twitter —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫:

1. üîç –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ –ù–ï –∏–º–µ—é—Ç Twitter —Å—Å—ã–ª–æ–∫, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Nitter (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
   - –ò—â–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞–ª–∏ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ —Å $ (–Ω–∞–ø—Ä–∏–º–µ—Ä "$MORI")
   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ —Å–≤–µ–∂–µ—Å—Ç—å —Ç–≤–∏—Ç–æ–≤
   - –í—ã–±–∏—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö (–±–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, —Å–æ —Å–≤–µ–∂–∏–º–∏ —Ç–≤–∏—Ç–∞–º–∏)

2. üéØ –¢–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter (–∏—Å–∫–ª—é—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏)
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ —Ç–≤–∏—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–≤–∏—Ç—ã –º–ª–∞–¥—à–µ 30 –¥–Ω–µ–π)
   - –ü–æ–∏—Å–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç —Å —Å–∏–º–≤–æ–ª–æ–º)

3. üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:
   - –ì—Ä—É–ø–ø—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –õ–ò–ß–ù–´–ô –ß–ê–¢ (ID: 7891524244)
   - –û–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
   - –§–ª–∞–≥ is_global_search_group –ø–æ–º–µ—á–∞–µ—Ç —Ç–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã

4. üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ Anubis Challenge:
   - –ï—Å–ª–∏ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ—Ç challenge
   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–µ–Ω—ã –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

5. üìä Google Sheets:
   - –°–æ–∑–¥–∞—é—Ç—Å—è —Ç–µ –∂–µ —Ç–∞–±–ª–∏—Ü—ã —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
   - –ì–ª–∞–≤–Ω—ã–π Twitter –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
   - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
=============
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ Twitter —Å—Å—ã–ª–æ–∫.
–ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ existing
–ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ pump_bot.py.
"""
import logging
import requests
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from collections import Counter
import json
import re
import time
import random
from queue import Queue
from threading import Thread
import aiohttp
from bs4 import BeautifulSoup
from urllib.parse import quote

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from google_sheets_manager import sheets_manager
from database import get_db_manager, DuplicateToken, Token
from dynamic_cookie_rotation import get_next_proxy_cookie_async, mark_proxy_temp_blocked
from anubis_handler import handle_anubis_challenge_for_session, update_cookies_in_string
from twitter_profile_parser import TwitterProfileParser
from nitter_domain_rotator import get_next_nitter_domain, record_nitter_request_result

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ Nitter, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –¥–∞—é—Ç –æ—à–∏–±–∫–∏
PROBLEMATIC_NITTER_DOMAINS = {
    # –î–æ–º–µ–Ω—ã —Å —á–∞—Å—Ç—ã–º–∏ 503/502 –æ—à–∏–±–∫–∞–º–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
}

def get_nitter_base_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è Nitter —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–æ—Ç–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤"""
    domain = get_next_nitter_domain()
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
    if domain.startswith("nitter."):
        return f"https://{domain}"
    # –î–ª—è IP-–∞–¥—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP
    else:
        return f"http://{domain}"

def get_nitter_domain_and_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–µ–Ω –∏ URL –¥–ª—è Nitter —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–æ—Ç–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤"""
    domain = get_next_nitter_domain()
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
    if domain.startswith("nitter."):
        url = f"https://{domain}"
    # –î–ª—è IP-–∞–¥—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP
    else:
        url = f"http://{domain}"
    
    return domain, url

def format_nitter_url(domain: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"""
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
    if domain.startswith("nitter."):
        return f"https://{domain}"
    # –î–ª—è IP-–∞–¥—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP
    else:
        return f"http://{domain}"

def add_host_header_if_needed(headers: Dict, domain: str) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤"""
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host –¥–ª—è IP nitter.space
    if domain == "89.252.140.174":
        headers['Host'] = 'nitter.space'
        logger.debug(f"üåê –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host: nitter.space –¥–ª—è {domain}")

# üõ°Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –°–ï–¢–ï–í–´–• –û–®–ò–ë–û–ö
async def network_retry_wrapper(session, method, url, max_retries=20, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –õ–Æ–ë–´–• —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
    –° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å—å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    - Server disconnected
    - Connection reset by peer  
    - Cannot connect to host
    - Timeout errors
    - SSL errors
    - DNS errors
    - –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    """
    import time
    from urllib.parse import urlparse
    
    start_time = time.time()
    NETWORK_ERRORS = [
        "Server disconnected",
        "Connection reset by peer", 
        "Cannot connect to host",
        "Connection timed out",
        "Timeout",
        "SSL", 
        "Name resolution failed",
        "Network is unreachable",
        "Connection refused",
        "Connection aborted",
        "Broken pipe",
        "No route to host",
        "Host is unreachable",
        "Connection closed",
        "Connection lost",
        "Socket error",
        "ClientConnectorError",
        "ClientError",
        "ServerDisconnectedError",
        "ClientOSError",
        "TooManyRedirects",
        "Can not decode content-encoding: brotli"
    ]
    
    last_error = None
    
    for attempt in range(max_retries):
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
            if method.lower() == 'get':
                async with session.get(url, **kwargs) as response:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å connection pooling
                    await response.read()
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
                    response_time = time.time() - start_time
                    parsed_url = urlparse(url)
                    if 'nitter' in parsed_url.netloc:
                        domain = parsed_url.netloc
                        success = response.status == 200
                        record_nitter_request_result(domain, success, response_time, response.status)
                        
                    return response
            elif method.lower() == 'post':
                async with session.post(url, **kwargs) as response:
                    await response.read()
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
                    response_time = time.time() - start_time
                    parsed_url = urlparse(url)
                    if 'nitter' in parsed_url.netloc:
                        domain = parsed_url.netloc
                        success = response.status == 200
                        record_nitter_request_result(domain, success, response_time, response.status)
                        
                    return response
            else:
                raise ValueError(f"Unsupported method: {method}")
                
        except Exception as e:
            last_error = e
            error_str = str(e).lower()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
            response_time = time.time() - start_time
            parsed_url = urlparse(url)
            if 'nitter' in parsed_url.netloc:
                domain = parsed_url.netloc
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if '429' in error_str:
                    status_code = 429
                elif '502' in error_str or 'bad gateway' in error_str:
                    status_code = 502
                else:
                    status_code = None
                record_nitter_request_result(domain, False, response_time, status_code)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π (–≤–∫–ª—é—á–∞—è 502, 429, 500, 403, 503)
            is_network_error = any(net_err.lower() in error_str for net_err in NETWORK_ERRORS) or \
                             '502' in error_str or 'bad gateway' in error_str or \
                             '429' in error_str or '500' in error_str or '403' in error_str or '503' in error_str
            
            if is_network_error:
                # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö HTTP –æ—à–∏–±–æ–∫ (403, 429, 500, 503)
                if any(err in error_str for err in ['429', '500', '403', '503', 'toomanyredirects', 'brotli']):
                    backoff_time = min(15, (attempt + 1) * 1 + random.uniform(0.5, 2))  # –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                else:
                    backoff_time = min(60, (attempt + 1) * 2 + random.uniform(1, 5))  # –û–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                logger.warning(f"üî• –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                logger.warning(f"‚è≥ –ñ–¥–µ–º {backoff_time:.1f}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                
                # –ü—Ä–∏ TooManyRedirects, 429, 500, 403, 503, Brotli –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –î–û–ú–ï–ù –±—ã—Å—Ç—Ä–æ
                if any(err in error_str for err in ['toomanyredirects', '429', '500', '403', '503', 'brotli']):
                    error_type = "TooManyRedirects" if 'toomanyredirects' in error_str else f"HTTP {error_str}"
                    logger.warning(f"üîÑ {error_type} - –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ–º–µ–Ω Nitter")
                    try:
                        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                        for _ in range(10):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–æ–º–µ–Ω–∞
                            new_domain = get_next_nitter_domain()
                            if new_domain and new_domain not in PROBLEMATIC_NITTER_DOMAINS:
                                break
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–ø—Ä–æ–±–ª–µ–º–Ω—ã–π –¥–æ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π")
                            new_domain = get_next_nitter_domain()
                            
                        if new_domain and 'nitter' in parsed_url.netloc:
                            # –ó–∞–º–µ–Ω—è–µ–º –¥–æ–º–µ–Ω –≤ URL
                            new_base_url = format_nitter_url(new_domain)
                            url = f"{new_base_url}{parsed_url.path}"
                            if parsed_url.query:
                                url += f"?{parsed_url.query}"
                            logger.info(f"üåê –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω: {new_domain}")
                    except Exception as domain_error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: {domain_error}")
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                    if 'proxy' in kwargs:
                        try:
                            proxy, cookie = await get_next_proxy_cookie_async(session)
                            if proxy:
                                kwargs['proxy'] = proxy
                            if 'headers' in kwargs and cookie:
                                kwargs['headers']['Cookie'] = cookie
                            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞")
                        except:
                            pass
                
                await asyncio.sleep(backoff_time)
                continue
            else:
                # –ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise e
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(f"üíÄ –í–°–ï {max_retries} –ü–û–ü–´–¢–û–ö –ò–°–ß–ï–†–ü–ê–ù–´. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
    raise last_error

class TelegramMessageQueue:
    """–û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram —Å rate limiting"""
    
    def __init__(self, telegram_token: str):
        self.telegram_token = telegram_token
        self.telegram_url = f"https://api.telegram.org/bot{telegram_token}"
        self.queue = Queue()
        self.running = True
        self.worker_thread = None
        self.min_delay = 2.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.max_delay = 4.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_request_time = 0
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        if self.worker_thread is None:
            self.worker_thread = Thread(target=self._process_queue, daemon=True)
            self.worker_thread.start()
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        self.running = False
        if self.worker_thread:
            self.worker_thread.join()
            logger.info("‚èπÔ∏è –û—á–µ—Ä–µ–¥—å Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        while self.running:
            try:
                if not self.queue.empty():
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    task = self.queue.get(timeout=1)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    current_time = time.time()
                    time_since_last = current_time - self.last_request_time
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É min_delay –∏ max_delay
                    delay = random.uniform(self.min_delay, self.max_delay)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∏, –∂–¥–µ–º
                    if time_since_last < delay:
                        sleep_time = delay - time_since_last
                        time.sleep(sleep_time)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                    self._execute_request(task)
                    self.last_request_time = time.time()
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    self.queue.task_done()
                else:
                    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    time.sleep(0.1)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏ Telegram: {e}")
                time.sleep(1)
    
    def _execute_request(self, task: Dict):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        try:
            method = task['method']
            payload = task['payload']
            callback = task.get('callback')
            
            response = requests.post(f"{self.telegram_url}/{method}", json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if callback:
                    callback(True, result)
                logger.debug(f"‚úÖ Telegram API {method} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                error_text = response.text
                if callback:
                    callback(False, error_text)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API {method}: {error_text}")
                
        except Exception as e:
            if task.get('callback'):
                task['callback'](False, str(e))
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Telegram –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def send_message(self, payload: Dict, callback=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'method': 'sendMessage',
            'payload': payload,
            'callback': callback
        }
        self.queue.put(task)
        logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.queue.qsize()})")
    
    def edit_message(self, payload: Dict, callback=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'method': 'editMessageText',
            'payload': payload,
            'callback': callback
        }
        self.queue.put(task)
        logger.debug(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.queue.qsize()})")
    
    def delete_message(self, payload: Dict, callback=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        task = {
            'method': 'deleteMessage',
            'payload': payload,
            'callback': callback
        }
        self.queue.put(task)
        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {self.queue.qsize()})")
    
    def get_queue_size(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏"""
        return self.queue.qsize()

class DuplicateGroupsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–≤–∫–ª—é—á–∞—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ) —Å —É–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, telegram_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º Telegram –±–æ—Ç–∞"""
        self.telegram_token = telegram_token
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.telegram_queue = TelegramMessageQueue(telegram_token)
        self.telegram_queue.start()
        
        # –ì—Ä—É–ø–ø—ã —Ç–æ–∫–µ–Ω–æ–≤ {group_key: GroupData}
        self.groups = {}
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ {group_key: official_contract_info}
        self.official_contracts = {}
        
        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ)
        self.twitter_check_cache = {}  # key: "account_symbol" -> {"has_mentions": bool, "last_check": timestamp, "error": str}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.error_cache_ttl = 3600  # 1 —á–∞—Å –∫—ç—à –¥–ª—è –æ—à–∏–±–æ–∫ (404, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ç.–¥.)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
        self.last_request_time = 0
        self.min_request_interval = 3.0  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.recent_429_count = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö 429 –æ—à–∏–±–æ–∫
        self.last_429_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π 429 –æ—à–∏–±–∫–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.target_chat_id = -1002680160752  # ID –≥—Ä—É–ø–ø—ã
        self.message_thread_id = 14  # ID —Ç–µ–º—ã –¥–ª—è –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤
        self.private_chat_id = 7891524244  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ Twitter
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if hasattr(self, 'telegram_queue'):
                self.telegram_queue.stop()
        except:
            pass
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.telegram_queue.stop()
        logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_queue_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            'queue_size': self.telegram_queue.get_queue_size(),
            'min_delay': self.telegram_queue.min_delay,
            'max_delay': self.telegram_queue.max_delay,
            'is_running': self.telegram_queue.running
        }
    
    class GroupData:
        """–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–∫–µ–Ω–æ–≤"""
        def __init__(self, group_key: str, symbol: str, name: str):
            self.group_key = group_key
            self.symbol = symbol
            self.name = name
            self.tokens = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            self.message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            self.sheet_url = None  # URL Google Sheets —Ç–∞–±–ª–∏—Ü—ã
            self.main_twitter = None  # –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            self.official_contract = None  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            self.official_announcement = None  # –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç —Å –∞–Ω–æ–Ω—Å–æ–º —Ç–æ–∫–µ–Ω–∞
            self.created_at = datetime.now()
            self.last_updated = datetime.now()
            self.latest_added_token = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter –ø–æ—Ç–æ–∫–∞
            self.is_global_search_group = False  # –§–ª–∞–≥ –¥–ª—è –≥—Ä—É–ø–ø –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (–±–µ–∑ Twitter —Å—Å—ã–ª–æ–∫)
    
    async def _apply_global_rate_limit(self):
        """Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 60-—Å–µ–∫ —Å–∏—Å—Ç–µ–º–∞ –≤ dynamic_cookie_rotation.py"""
        # –ù–∏–∫–∞–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∫—Å–∏ —Å 60-—Å–µ–∫—É–Ω–¥–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        pass
    
    def _track_429_error(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç 429 –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_time = time.time()
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π 429 –æ—à–∏–±–∫–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if current_time - self.last_429_time > 1800:  # 30 –º–∏–Ω—É—Ç
            self.recent_429_count = 0
        
        self.recent_429_count += 1
        self.last_429_time = current_time
        
        logger.warning(f"üî• –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 429: {self.recent_429_count} –æ—à–∏–±–æ–∫ –∑–∞ 30–º–∏–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 60-—Å–µ–∫ —Å–∏—Å—Ç–µ–º–∞ –≤ dynamic_cookie_rotation.py")
    
    def create_group_key(self, token_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
        name = token_data.get('name', '').strip().lower()
        symbol = token_data.get('symbol', '').strip().upper()
        return f"{name}_{symbol}"
    
    def extract_twitter_accounts(self, token_data: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
        twitter_accounts = set()
        
        # –ü–æ–ª—è –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å Twitter —Å—Å—ã–ª–∫–∏
        twitter_fields = ['twitter', 'website', 'telegram', 'social', 'links']
        
        for field in twitter_fields:
            url = token_data.get(field, '')
            if url and isinstance(url, str):
                account = self._normalize_twitter_url(url)
                if account:
                    twitter_accounts.add(account)
        
        return list(twitter_accounts)
    
    def _normalize_twitter_url(self, url: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç Twitter URL, –∏–∑–≤–ª–µ–∫–∞—è username"""
        try:
            if not url or not isinstance(url, str):
                return None
                
            url_lower = url.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Twitter/X —Å—Å—ã–ª–∫–∞
            if not any(domain in url_lower for domain in ['twitter.com', 'x.com']):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username
            username_pattern = r'(?i)(?:twitter\.com|x\.com)/([^/\?]+)'
            match = re.search(username_pattern, url)
            
            if match:
                username = match.group(1).strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É—Ç–∏
                service_paths = ['i', 'home', 'search', 'notifications', 'messages', 'settings', 'intent']
                if username.lower() in service_paths:
                    return None
                    
                return username
                
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Twitter URL {url}: {e}")
            
        return None
    
    def _is_twitter_username_similar_to_token(self, username: str, token_name: str, token_symbol: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Å–∏–º–≤–æ–ª–æ–º —Ç–æ–∫–µ–Ω–∞
        
        –ü—Ä–∏–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:
        - @AniAnichat +-= 'Jew Ani' / 'JANI'
        - @jewcoinonbonk +-= 'Jewbacca' / 'JEWBACCA'  
        - @CegeCoin +-= 'Cege' / 'CegeCoin'
        - @spltokenbonk +-= 'Standard Pointless Token' / 'SPL'
        - @suit_xero +-= 'SUITXERO' / 'XERO'
        """
        try:
            if not username or not (token_name or token_symbol):
                return False
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            username_clean = username.lower().strip()
            token_name_clean = token_name.lower().strip() if token_name else ""
            token_symbol_clean = token_symbol.lower().strip() if token_symbol else ""
            
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã/—Å—É—Ñ—Ñ–∏–∫—Å—ã –∏–∑ username
            common_prefixes = ['the', 'official', 'real', 'true']
            common_suffixes = ['coin', 'token', 'crypto', 'sol', 'onsolana', 'onbonk', 'bonk', 'fun', 'official']
            
            username_parts = username_clean.replace('_', '').replace('-', '')
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
            for prefix in common_prefixes:
                if username_parts.startswith(prefix):
                    username_parts = username_parts[len(prefix):]
                    break
            
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã  
            for suffix in common_suffixes:
                if username_parts.endswith(suffix):
                    username_parts = username_parts[:-len(suffix)]
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if username_parts == token_symbol_clean:
                logger.debug(f"‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ username '{username_parts}' —Å —Å–∏–º–≤–æ–ª–æ–º '{token_symbol_clean}'")
                return True
            
            if username_parts == token_name_clean.replace(' ', ''):
                logger.debug(f"‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ username '{username_parts}' —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{token_name_clean}'")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ username
            if token_symbol_clean and len(token_symbol_clean) >= 3:
                if token_symbol_clean in username_parts:
                    logger.debug(f"‚úÖ –°–∏–º–≤–æ–ª '{token_symbol_clean}' —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ username '{username_parts}'")
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ username –≤ —Å–∏–º–≤–æ–ª–µ (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö username)
            if len(username_parts) >= 3:
                if username_parts in token_symbol_clean:
                    logger.debug(f"‚úÖ Username '{username_parts}' —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–∏–º–≤–æ–ª–µ '{token_symbol_clean}'")
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ (–ø–æ —Å–ª–æ–≤–∞–º)
            if token_name_clean:
                token_name_words = token_name_clean.split()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ username —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                for word in token_name_words:
                    if len(word) >= 3 and word in username_parts:
                        logger.debug(f"‚úÖ –°–ª–æ–≤–æ '{word}' –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ –≤ username '{username_parts}'")
                        return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ - —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ username
                if len(username_parts) >= 3:
                    for word in token_name_words:
                        if username_parts in word:
                            logger.debug(f"‚úÖ Username '{username_parts}' –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–µ '{word}' –Ω–∞–∑–≤–∞–Ω–∏—è")
                            return True
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä jewcoin —Å–æ–¥–µ—Ä–∂–∏—Ç jew)
                for word in token_name_words:
                    if len(word) >= 3:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ username
                        word_start = word[:max(3, len(word)//2)]  # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ (–º–∏–Ω 3 —Å–∏–º–≤–æ–ª–∞)
                        if word_start in username_parts:
                            logger.debug(f"‚úÖ –ù–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ '{word_start}' –∏–∑ '{word}' –Ω–∞–π–¥–µ–Ω–æ –≤ username '{username_parts}'")
                            return True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ username –≤ —Å–ª–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        if len(username_parts) >= 3:
                            username_start = username_parts[:max(3, len(username_parts)//2)]
                            if username_start in word:
                                logger.debug(f"‚úÖ –ù–∞—á–∞–ª–æ username '{username_start}' –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–µ '{word}' –Ω–∞–∑–≤–∞–Ω–∏—è")
                                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã)
            if token_name_clean and len(token_name_clean.split()) > 1:
                initials = ''.join([word[0] for word in token_name_clean.split() if word])
                if initials == username_parts:
                    logger.debug(f"‚úÖ Username '{username_parts}' —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è '{initials}'")
                    return True
            
            logger.debug(f"‚ùå –ù–∏–∫–∞–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É username '{username_parts}' –∏ —Ç–æ–∫–µ–Ω–æ–º '{token_name_clean}'/'{token_symbol_clean}'")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–æ–¥—Å—Ç–≤–∞ username {username} —Å —Ç–æ–∫–µ–Ω–æ–º: {e}")
            return False
    
    async def _check_recent_tweets(self, twitter_account: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ (–º–ª–∞–¥—à–µ 30 –¥–Ω–µ–π) –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ –≤ @{twitter_account}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å —Ç–≤–∏—Ç—ã –º–ª–∞–¥—à–µ 30 –¥–Ω–µ–π
            async with TwitterProfileParser() as parser:
                result = await parser.get_profile_with_replies_multi_page(twitter_account, max_pages=2)
                
                if result and len(result) >= 2:
                    profile_data, all_tweets = result[0], result[1]
                else:
                    logger.debug(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–∏—Ç—ã –æ—Ç @{twitter_account}")
                    return False
                
                if not all_tweets:
                    logger.debug(f"‚ùå –ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ –≤ @{twitter_account}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–æ–≤
                fresh_tweets_count = 0
                current_time = datetime.now()
                
                for tweet in all_tweets:
                    try:
                        tweet_date_elem = tweet.get('date')
                        if not tweet_date_elem:
                            continue
                            
                        tweet_date = self._get_tweet_age(tweet_date_elem)
                        if tweet_date:
                            age_days = (current_time - tweet_date).days
                            if age_days <= 30:  # –¢–≤–∏—Ç –º–ª–∞–¥—à–µ 30 –¥–Ω–µ–π
                                fresh_tweets_count += 1
                    except Exception as e:
                        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞: {e}")
                        continue
                
                if fresh_tweets_count > 0:
                    logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {fresh_tweets_count} —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ (< 30 –¥–Ω–µ–π) –≤ @{twitter_account}")
                    return True
                else:
                    logger.debug(f"‚è∞ –í—Å–µ —Ç–≤–∏—Ç—ã –≤ @{twitter_account} —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π")
                    return False
                    
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ –≤ @{twitter_account}: {e}")
            return False
    
    async def determine_main_twitter(self, tokens: List[Dict]) -> Optional[str]:
        """
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º/—Å–∏–º–≤–æ–ª–æ–º —Ç–æ–∫–µ–Ω–∞
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞:
        1. –ù–∏–∫–Ω–µ–π–º Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞  
        2. –ê–∫–∫–∞—É–Ω—Ç –ù–ï –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏)
        3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç–∞–º —Å–æ —Å–≤–µ–∂–∏–º–∏ —Ç–≤–∏—Ç–∞–º–∏ (< 30 –¥–Ω–µ–π)
        """
        try:
            if not tokens:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
            first_token = tokens[0]
            token_name = first_token.get('name', '').strip()
            token_symbol = first_token.get('symbol', '').strip()
            
            if not token_symbol:
                logger.warning(f"üö´ –ù–µ—Ç —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter")
                return None
            
            logger.info(f"üîç –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Ö–æ–∂–∏–π –Ω–∞ '{token_name}' / '{token_symbol}'")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã
            all_twitter_accounts = set()
            for token in tokens:
                twitter_accounts = self.extract_twitter_accounts(token)
                for account in twitter_accounts:
                    all_twitter_accounts.add(account.lower())
            
            if not all_twitter_accounts:
                logger.warning(f"üö´ –ù–µ—Ç Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_symbol}")
                return None
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(all_twitter_accounts)} Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å —Ç–æ–∫–µ–Ω–æ–º {token_symbol}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É –Ω–∏–∫–Ω–µ–π–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
            similar_accounts = []
            for twitter_account in all_twitter_accounts:
                is_similar = self._is_twitter_username_similar_to_token(twitter_account, token_name, token_symbol)
                if is_similar:
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ü–û–•–û–ñ –Ω–∞ —Ç–æ–∫–µ–Ω '{token_name}'/'{token_symbol}'")
                    similar_accounts.append(twitter_account)
                else:
                    logger.debug(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ù–ï –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–∫–µ–Ω '{token_name}'/'{token_symbol}'")
            
            if not similar_accounts:
                logger.warning(f"üö´ –ù–∏ –æ–¥–∏–Ω Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–∫–µ–Ω {token_symbol} - –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –±–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                return None
            
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(similar_accounts)} –ø–æ—Ö–æ–∂–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {', '.join('@' + acc for acc in similar_accounts)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ö–æ–∂–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ —Å–≤–µ–∂–µ—Å—Ç—å —Ç–≤–∏—Ç–æ–≤
            valid_accounts = []
            
            for i, twitter_account in enumerate(similar_accounts):
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–π –∞–∫–∫–∞—É–Ω—Ç @{twitter_account} ({i+1}/{len(similar_accounts)})")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                if i > 0:
                    delay = random.uniform(3, 7)
                    logger.debug(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π @{twitter_account}")
                    await asyncio.sleep(delay)
                
                # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
                has_contracts = await self._check_contracts_in_twitter(twitter_account)
                if has_contracts:
                    logger.warning(f"üö´ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ò–°–ö–õ–Æ–ß–ï–ù: –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ (–ª—é–±—ã—Ö, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —Å–∏–º–≤–æ–ª–æ–º)
                has_fresh_tweets = await self._check_recent_tweets(twitter_account)
                
                if has_fresh_tweets:
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account}: –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–∫–µ–Ω + –ë–ï–ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ + –µ—Å—Ç—å —Å–≤–µ–∂–∏–µ —Ç–≤–∏—Ç—ã")
                    valid_accounts.append(twitter_account)
                else:
                    logger.info(f"‚è∞ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account}: –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–∫–µ–Ω + –ë–ï–ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, –Ω–æ –ù–ï–¢ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤")
                    # –í—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ valid_accounts –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    valid_accounts.append(twitter_account)
            
            if not valid_accounts:
                logger.warning(f"üö´ –ù–∏ –æ–¥–∏–Ω –ø–æ—Ö–æ–∂–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_symbol}")
                return None
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç - –æ–Ω –≥–ª–∞–≤–Ω—ã–π
            if len(valid_accounts) == 1:
                main_twitter = valid_accounts[0]
                logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: @{main_twitter} (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ö–æ–∂–∏–π –∏ –≤–∞–ª–∏–¥–Ω—ã–π)")
                return main_twitter
            
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            main_twitter = valid_accounts[0]
            logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: @{main_twitter} (–ø–µ—Ä–≤—ã–π –∏–∑ {len(valid_accounts)} –ø–æ—Ö–æ–∂–∏—Ö –∏ –≤–∞–ª–∏–¥–Ω—ã—Ö)")
            return main_twitter
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter: {e}")
            return None

    async def determine_main_twitter_from_global_search(self, symbol: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ Twitter —Å—Å—ã–ª–æ–∫"""
        try:
            logger.info(f"üåç –ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol} —á–µ—Ä–µ–∑ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            found_accounts = await self._global_search_for_symbol(symbol)
            
            if not found_accounts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ—É–¥–∞—á–∏ –≤ –∫—ç—à–µ
                cache_key = f"global_search_{symbol}"
                cached_result = self.twitter_check_cache.get(cache_key, {})
                error_reason = cached_result.get('error', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ')
                
                if error_reason and 'TimeoutError' in str(error_reason):
                    logger.error(f"üö´üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {symbol} —É–ø–∞–ª —Å TimeoutError!")
                    logger.error(f"üîß –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ë–û–¢ –ü–†–û–ü–£–°–ö–ê–ï–¢ –¢–û–ö–ï–ù–´ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ–º–µ–Ω–∞–º–∏!")
                else:
                    logger.warning(f"üö´ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞—à–µ–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol} (–ø—Ä–∏—á–∏–Ω–∞: {error_reason})")
                return None
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(found_accounts)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            valid_accounts = []
            has_any_fresh_tweets = False
            
            for i, twitter_account in enumerate(found_accounts):
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç @{twitter_account} –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ({i+1}/{len(found_accounts)})...")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                if i > 0:  # –ù–µ –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                    delay = random.uniform(8, 15)
                    logger.debug(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π @{twitter_account}")
                    await asyncio.sleep(delay)
                
                # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
                has_contracts = await self._check_contracts_in_twitter(twitter_account)
                if has_contracts:
                    logger.warning(f"üö´ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ò–°–ö–õ–Æ–ß–ï–ù: –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞)
                has_symbol_mentions = await self._check_symbol_mentions_in_twitter(twitter_account, symbol)
                
                if has_symbol_mentions:
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} —Å–æ–¥–µ—Ä–∂–∏—Ç –°–í–ï–ñ–ò–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" (< 30 –¥–Ω–µ–π) –ë–ï–ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                    valid_accounts.append(twitter_account)
                    has_any_fresh_tweets = True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
                    cache_key = f"{twitter_account}_{symbol}"
                    cached_result = self.twitter_check_cache.get(cache_key, {})
                    error_reason = cached_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
                    
                    if error_reason == '–í—Å–µ —Ç–≤–∏—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π':
                        logger.info(f"‚è∞ –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\", –Ω–æ –≤—Å–µ —Ç–≤–∏—Ç—ã –°–¢–ê–†–®–ï 30 –¥–Ω–µ–π")
                    else:
                        logger.info(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{twitter_account} –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" ({error_reason})")
            
            # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ù–ò –û–î–ò–ù –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ - —Å–∫–∏–ø–∞–µ–º –≥—Ä—É–ø–ø—É
            if not has_any_fresh_tweets:
                logger.warning(f"‚è∞üö´ –ì–†–£–ü–ü–ê {symbol} –°–ö–ò–ü–ê–ï–¢–°–Ø: –í—Å–µ —Ç–≤–∏—Ç—ã —Å–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π! –ì—Ä—É–ø–ø–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞.")
                return None
            
            if not valid_accounts:
                logger.warning(f"üö´ –ù–∏ –æ–¥–∏–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –°–í–ï–ñ–ò–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" - –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return None
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç - –æ–Ω –≥–ª–∞–≤–Ω—ã–π
            if len(valid_accounts) == 1:
                main_twitter = valid_accounts[0]
                logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö: @{main_twitter} (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ –°–í–ï–ñ–ò–ú–ò —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ \"${symbol}\")")
                return main_twitter
            
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –ª–æ–≥–∏–∫—É)
            main_twitter = valid_accounts[0]
            logger.info(f"üéØ –ì–ª–∞–≤–Ω—ã–π Twitter –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö: @{main_twitter} (–ø–µ—Ä–≤—ã–π –∏–∑ {len(valid_accounts)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ –°–í–ï–ñ–ò–ú–ò —Ç–≤–∏—Ç–∞–º–∏)")
            return main_twitter
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {e}")
            return None
    
    async def _check_symbol_mentions_in_twitter(self, twitter_account: str, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ Nitter (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏)"""
        from dynamic_cookie_rotation import get_next_proxy_cookie_async
        from nitter_domain_rotator import get_all_nitter_domains, get_domain_count, record_nitter_request_result, get_next_nitter_domain
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ–º–µ–Ω–æ–≤ Nitter
        max_attempts = get_domain_count()  # –°—Ç–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫, —Å–∫–æ–ª—å–∫–æ –¥–æ–º–µ–Ω–æ–≤
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–Ω–µ —Ü–∏–∫–ª–∞
        current_time = time.time()
        cache_key = f"{twitter_account}_{symbol}"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
        all_domains = get_all_nitter_domains()
        
        for attempt in range(max_attempts):
            try:
                # üõ°Ô∏è –ù–ò–ö–û–ì–î–ê –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–ú - –í–°–ï–ì–î–ê –î–û–ë–ò–í–ê–ï–ú–°–Ø –£–°–ü–ï–•–ê!
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–ø—ã—Ç–∫–∏ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
                current_domain = all_domains[attempt % len(all_domains)]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
                if attempt == 0 and cache_key in self.twitter_check_cache:
                    cached_result = self.twitter_check_cache[cache_key]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if cached_result.get('error'):
                        # –î–ª—è –∏—Å—Ç–æ—â–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ - —Å—Ä–µ–¥–Ω–∏–π –∫—ç—à (–º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–Ω—å—à–µ)
                        if 'All retries exhausted' in cached_result.get('error', ''):
                            ttl = self.error_cache_ttl // 2  # –í–¥–≤–æ–µ –º–µ–Ω—å—à–µ —á–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                            cache_type = "EXHAUSTED"
                        else:
                            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ (404, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã) - –¥–ª–∏–Ω–Ω—ã–π –∫—ç—à
                            ttl = self.error_cache_ttl
                            cache_type = "ERROR"
                    else:
                        # –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - –∫–æ—Ä–æ—Ç–∫–∏–π –∫—ç—à
                        ttl = self.cache_ttl
                        cache_type = "SUCCESS"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
                    if current_time - cached_result['last_check'] < ttl:
                        if cache_type == "EXHAUSTED":
                            remaining_time = int((ttl - (current_time - cached_result['last_check']))/60)
                            logger.warning(f"üíÄ –ö—ç—à [{cache_type}]: @{twitter_account} –Ω–µ–¥–∞–≤–Ω–æ –∏—Å—á–µ—Ä–ø–∞–ª –ø–æ–ø—ã—Ç–∫–∏, –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_time}–º–∏–Ω)")
                        else:
                            logger.info(f"üìã –ö—ç—à [{cache_type}]: @{twitter_account} - {cached_result.get('error', '–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ')} (TTL: {int(ttl/60)}–º–∏–Ω)")
                        return cached_result['has_mentions']
                    else:
                        logger.debug(f"‚è∞ –ö—ç—à –∏—Å—Ç–µ–∫ –¥–ª—è @{twitter_account} (–ø—Ä–æ—à–ª–æ {int((current_time - cached_result['last_check'])/60)}–º–∏–Ω)")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${–°–ò–ú–í–û–õ}"
                search_query = f'"${symbol}"'
                
                # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –ø–æ–∏—Å–∫–∞
                async with aiohttp.ClientSession() as session:
                    proxy, cookie = await get_next_proxy_cookie_async(session)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                        'Cookie': cookie
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
                    add_host_header_if_needed(headers, current_domain)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connector = aiohttp.TCPConnector(ssl=False)
                    request_kwargs = {}
                    if proxy:
                        request_kwargs['proxy'] = proxy
                    
                    # URL –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ (–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω—ã)
                    nitter_base = format_nitter_url(current_domain)
                    search_url = f"{nitter_base}/{twitter_account}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                    
                    logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –∏—â–µ–º \"${symbol}\" –≤ @{twitter_account} –Ω–∞ –¥–æ–º–µ–Ω–µ {current_domain}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                    await self._apply_global_rate_limit()
                    
                    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    start_time = time.time()
                    
                    # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–°
                    response = await network_retry_wrapper(session, 'get', search_url, 
                                                        headers=headers, timeout=15, **request_kwargs)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                    response_time = time.time() - start_time
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                        title = soup.find('title')
                        if title and 'Making sure you\'re not a bot!' in title.get_text():
                            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                            
                            # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                            retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, search_url, f"–ø–æ–∏—Å–∫ \"${symbol}\" –≤ @{twitter_account}", html)
                            
                            if retry_soup:
                                # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                soup = retry_soup
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account}")
                            else:
                                # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ \"${symbol}\" –≤ @{twitter_account}")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –æ—à–∏–±–∫—É
                                self.twitter_check_cache[cache_key] = {
                                    'has_mentions': False,
                                    'last_check': current_time,
                                    'error': 'Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)'
                                }
                                return False
                        
                        # –ò—â–µ–º —Ç–≤–∏—Ç—ã
                        tweets = soup.find_all('div', class_='timeline-item')
                        if tweets and len(tweets) > 0:
                            # üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–≤–∏—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "$SYMBOL" –∏ –≤–æ–∑—Ä–∞—Å—Ç
                            valid_tweets = 0
                            fresh_tweets = 0
                            one_month_ago = datetime.now() - timedelta(days=30)
                            
                            for tweet in tweets:
                                tweet_content = tweet.find('div', class_='tweet-content')
                                tweet_date_elem = tweet.find('span', class_='tweet-date')
                                
                                if tweet_content and tweet_date_elem:
                                    tweet_text = tweet_content.get_text()
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ —Å $ –≤ —Ç–µ–∫—Å—Ç–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
                                    symbol_pattern = f"${symbol.upper()}"
                                    if symbol_pattern in tweet_text.upper():
                                        valid_tweets += 1
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–∞
                                        tweet_age = self._get_tweet_age(tweet_date_elem)
                                        if tweet_age and tweet_age > one_month_ago:
                                            fresh_tweets += 1
                                            logger.debug(f"‚úÖ –°–≤–µ–∂–∏–π —Ç–≤–∏—Ç —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d')}): {tweet_text[:50]}...")
                                        else:
                                            logger.debug(f"‚è∞ –°—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d') if tweet_age else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}): {tweet_text[:50]}...")
                                    else:
                                        logger.debug(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–≤–∏—Ç (–Ω–µ—Ç \"{symbol_pattern}\"): {tweet_text[:50]}...")
                            
                            if valid_tweets > 0:
                                if fresh_tweets > 0:
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {valid_tweets} –í–ê–õ–ò–î–ù–´–• —Ç–≤–∏—Ç–æ–≤ —Å \"${symbol}\" –≤ @{twitter_account}, –∏–∑ –Ω–∏—Ö {fresh_tweets} —Å–≤–µ–∂–∏—Ö (< 30 –¥–Ω–µ–π)")
                                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–æ–º–µ–Ω–∞
                                    record_nitter_request_result(current_domain, True, response_time, 200)
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ —É—Å–ø–µ—Ö
                                    self.twitter_check_cache[cache_key] = {
                                        'has_mentions': True,
                                        'last_check': current_time,
                                        'error': None
                                    }
                                    return True
                                else:
                                    logger.warning(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ {valid_tweets} —Ç–≤–∏—Ç–æ–≤ —Å \"${symbol}\" –≤ @{twitter_account}, –Ω–æ –≤—Å–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π")
                                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)
                                    record_nitter_request_result(current_domain, True, response_time, 200)
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –Ω–µ—É—Å–ø–µ—Ö (—Å—Ç–∞—Ä—ã–µ —Ç–≤–∏—Ç—ã)
                                    self.twitter_check_cache[cache_key] = {
                                        'has_mentions': False,
                                        'last_check': current_time,
                                        'error': '–í—Å–µ —Ç–≤–∏—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π'
                                    }
                                    return False
                            else:
                                logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤, –Ω–æ –ù–ò –û–î–ò–ù –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç \"${symbol}\" –≤ @{twitter_account}")
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)
                                record_nitter_request_result(current_domain, True, response_time, 200)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –Ω–µ—É—Å–ø–µ—Ö
                                self.twitter_check_cache[cache_key] = {
                                    'has_mentions': False,
                                    'last_check': current_time,
                                    'error': '–¢–≤–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞'
                                }
                                return False
                        else:
                            logger.debug(f"üö´ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è \"${symbol}\" –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ @{twitter_account}")
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)
                            record_nitter_request_result(current_domain, True, response_time, 200)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –Ω–µ—É—Å–ø–µ—Ö
                            self.twitter_check_cache[cache_key] = {
                                'has_mentions': False,
                                'last_check': current_time,
                                'error': None
                            }
                            return False
                    elif response.status == 429:
                        # HTTP 429 - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –¥–æ–º–µ–Ω–∞, –∞ –Ω–µ –ø—Ä–æ–∫—Å–∏
                        self._track_429_error()
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 429 –æ—à–∏–±–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞
                        record_nitter_request_result(current_domain, False, response_time, 429)
                        
                        logger.warning(f"üåê HTTP 429 –¥–ª—è @{twitter_account} –Ω–∞ –¥–æ–º–µ–Ω–µ {current_domain} - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω!")
                        
                        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–æ–º–µ–Ω–æ–º
                        await asyncio.sleep(2)
                        continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω –≤ —Ü–∏–∫–ª–µ
                    else:
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞
                        record_nitter_request_result(current_domain, False, response_time, response.status)
                        
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ @{twitter_account} –Ω–∞ –¥–æ–º–µ–Ω–µ {current_domain}: HTTP {response.status}")
                        # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                        continue
                            
            except Exception as e:
                error_msg = str(e) if str(e).strip() else f"{type(e).__name__} (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                is_timeout_error = any(keyword in error_msg.lower() for keyword in [
                    'timeout', 'timed out', 'connection', 'network', 'disconnected', 
                    'unreachable', 'refused', 'reset', 'aborted'
                ])
                
                if is_timeout_error and attempt < max_attempts - 1:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É timeout –¥–ª—è –¥–æ–º–µ–Ω–∞
                    record_nitter_request_result(current_domain, False, response_time if 'response_time' in locals() else 30.0, None)
                    
                    delay = min(30, (attempt + 1) * 3)  # 3, 6, 9, 12, 15 —Å–µ–∫—É–Ω–¥
                    logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–º–≤–æ–ª–∞ @{twitter_account} –Ω–∞ –¥–æ–º–µ–Ω–µ {current_domain} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞
                    record_nitter_request_result(current_domain, False, response_time if 'response_time' in locals() else 30.0, None)
                    
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ –≤ @{twitter_account} –Ω–∞ –¥–æ–º–µ–Ω–µ {current_domain}: {error_msg}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –æ—à–∏–±–∫—É
                    self.twitter_check_cache[cache_key] = {
                        'has_mentions': False,
                        'last_check': current_time,
                        'error': error_msg
                    }
                    return False
        
        logger.error(f"üíÄ –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ @{twitter_account}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –æ—à–∏–±–∫—É
        self.twitter_check_cache[cache_key] = {
            'has_mentions': False,
            'last_check': time.time(),
            'error': f"–í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã"
        }
        return False
    
    def _get_tweet_age(self, tweet_date_elem) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞—Ç—ã"""
        try:
            if not tweet_date_elem:
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ title —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            date_link = tweet_date_elem.find('a')
            if date_link and date_link.get('title'):
                # –ë–µ—Ä–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏–∑ title: "Jun 16, 2025 ¬∑ 6:03 PM UTC"
                date_str = date_link.get('title')
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Jun 16, 2025 ¬∑ 6:03 PM UTC"
                try:
                    # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                    date_str = date_str.replace(' UTC', '').replace(' ¬∑ ', ' ')
                    tweet_date = datetime.strptime(date_str, '%b %d, %Y %I:%M %p')
                    return tweet_date
                except:
                    pass
                    
            # Fallback: –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            date_text = tweet_date_elem.get_text(strip=True)
            if date_text:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Ç–∏–ø–∞ "1h", "2d", "3w"
                if 'h' in date_text:  # —á–∞—Å—ã
                    hours = int(re.search(r'(\d+)h', date_text).group(1))
                    return datetime.now() - timedelta(hours=hours)
                elif 'd' in date_text:  # –¥–Ω–∏
                    days = int(re.search(r'(\d+)d', date_text).group(1))
                    return datetime.now() - timedelta(days=days)
                elif 'w' in date_text:  # –Ω–µ–¥–µ–ª–∏
                    weeks = int(re.search(r'(\d+)w', date_text).group(1))
                    return datetime.now() - timedelta(weeks=weeks)
                elif 'm' in date_text:  # –º–µ—Å—è—Ü—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                    months = int(re.search(r'(\d+)m', date_text).group(1))
                    return datetime.now() - timedelta(days=months * 30)
                elif 'y' in date_text:  # –≥–æ–¥—ã
                    years = int(re.search(r'(\d+)y', date_text).group(1))
                    return datetime.now() - timedelta(days=years * 365)
            
            return None
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç–≤–∏—Ç–∞: {e}")
            return None
    
    async def _find_oldest_announcement(self, twitter_account: str, symbol: str) -> Optional[Dict]:
        """
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ –∫–∞–∫ –∞–Ω–æ–Ω—Å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —Å–∏–º–≤–æ–ª–æ–º)
        
        –õ–æ–≥–∏–∫–∞:
        1. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–≤–∏—Ç—ã –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        2. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç –∫–∞–∫ –∞–Ω–æ–Ω—Å
        3. –ï—Å–ª–∏ —Ç–≤–∏—Ç–æ–≤ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None (–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–æ–Ω—Å–∞)
        """
        try:
            logger.info(f"üîç –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç –≤ @{twitter_account} –∫–∞–∫ –∞–Ω–æ–Ω—Å (–Ω–µ –∏—â–µ–º ${symbol})")
            
            async with TwitterProfileParser() as parser:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–≤–∏—Ç–∞–º–∏ (–±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–≤–∏—Ç–æ–≤)
                result = await parser.get_profile_with_replies_multi_page(twitter_account, max_pages=5)
                
                if result and len(result) >= 2:
                    profile_data, all_tweets = result[0], result[1]
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–∏—Ç—ã –æ—Ç @{twitter_account}")
                    return None
                
                if not all_tweets:
                    logger.warning(f"‚ùå –ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ –≤ @{twitter_account} - –æ—Ç–ø—Ä–∞–≤–∏–º –±–µ–∑ –∞–Ω–æ–Ω—Å–∞")
                    return None
                
                logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ {len(all_tweets)} —Ç–≤–∏—Ç–æ–≤ –æ—Ç @{twitter_account}")
                
                # –ò—â–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç
                oldest_tweet = None
                oldest_date = None
                
                for tweet in all_tweets:
                    try:
                        tweet_text = tweet.get('text', '').strip()
                        tweet_date_elem = tweet.get('date')
                        tweet_url = tweet.get('url', '')
                        
                        if not tweet_text or not tweet_date_elem:
                            continue
                        
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ç–≤–∏—Ç–∞
                        tweet_date = self._get_tweet_age(tweet_date_elem)
                        if not tweet_date:
                            continue
                        
                        # –ò—â–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç
                        if oldest_date is None or tweet_date < oldest_date:
                            oldest_date = tweet_date
                            oldest_tweet = {
                                'text': tweet_text,
                                'date': tweet_date.strftime('%Y-%m-%d'),
                                'url': tweet_url
                            }
                            
                    except Exception as e:
                        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞: {e}")
                        continue
                
                if oldest_tweet:
                    logger.info(f"‚úÖ –ê–ù–û–ù–° –ù–ê–ô–î–ï–ù: –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç –æ—Ç {oldest_tweet['date']} –≤ @{twitter_account}")
                    logger.info(f"üìÑ –¢–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞: {oldest_tweet['text'][:100]}...")
                    return oldest_tweet
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–≤–∏—Ç—ã –≤ @{twitter_account}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–Ω—Å–∞ –≤ @{twitter_account}: {e}")
            return None
    
    async def _find_oldest_token_mention(self, twitter_account: str, symbol: str) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 15  # –ú–∞–∫—Å–∏–º—É–º 15 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–Ω—Å–∞
        attempt = 0
        
        while attempt < max_attempts:
            try:
                attempt += 1
                logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–∞–π—Ç–∏ –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ ${symbol} –≤ @{twitter_account}")
                
                # üîÑ –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ü–ê–†–°–ï–† –î–õ–Ø –ö–ê–ñ–î–û–ô –ü–û–ü–´–¢–ö–ò (—Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏!)
                async with TwitterProfileParser() as parser:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–≤–∏—Ç–∞–º–∏
                    result = await parser.get_profile_with_replies_multi_page(twitter_account, max_pages=3)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
                    if result and len(result) == 3:
                        profile_data, all_tweets, tweets_with_contracts = result
                    elif result and len(result) == 2:
                        profile_data, all_tweets = result
                        tweets_with_contracts = []
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è @{twitter_account}: {result}")
                        all_tweets = []
                    
                    if not all_tweets:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ –æ—Ç @{twitter_account}")
                        if attempt < max_attempts:
                            delay = min(30, 3 * attempt)
                            logger.info(f"‚è≥ –ñ–¥–µ–º {delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1} (–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏)...")
                            await asyncio.sleep(delay)
                            continue
                        else:
                            break
                    
                    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ {len(all_tweets)} —Ç–≤–∏—Ç–æ–≤ –æ—Ç @{twitter_account}")
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–≤–∏—Ç–∞—Ö
                    mentions = []
                    symbol_patterns = [
                        f"${symbol}",
                        f"#{symbol}",
                        f"{symbol}",
                        f"${symbol.upper()}",
                        f"#{symbol.upper()}",
                        f"{symbol.upper()}"
                    ]
                    
                    for tweet in all_tweets:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ tweet —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                            if not isinstance(tweet, dict):
                                logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–≤–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞: {type(tweet)}")
                                continue
                                
                            tweet_text = tweet.get('text', '').upper()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–º–≤–æ–ª–∞
                            for pattern in symbol_patterns:
                                if pattern.upper() in tweet_text:
                                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç–≤–∏—Ç–∞
                                    tweet_date_elem = tweet.get('date')
                                    tweet_date = self._get_tweet_age(tweet_date_elem)
                                    
                                    if tweet_date:
                                        mentions.append({
                                            'text': tweet.get('text', ''),
                                            'date': tweet_date,
                                            'url': tweet.get('url', ''),
                                            'pattern_matched': pattern
                                        })
                                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ {pattern} –≤ —Ç–≤–∏—Ç–µ –æ—Ç {tweet_date}")
                                    break
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞: {e} (—Ç–∏–ø: {type(tweet)})")
                            continue
                    
                    if mentions:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
                        mentions.sort(key=lambda x: x['date'])
                        oldest_mention = mentions[0]
                        
                        logger.info(f"‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –∞–Ω–æ–Ω—Å ${symbol} –≤ @{twitter_account} –æ—Ç {oldest_mention['date']}")
                        return oldest_mention
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –£–ø–æ–º–∏–Ω–∞–Ω–∏—è ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ @{twitter_account}")
                        
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–Ω—Å–∞ ${symbol} –≤ @{twitter_account}: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            if attempt < max_attempts:
                # –ó–∞–¥–µ—Ä–∂–∫–∞: 5, 10, 15, 20, 25, 30, 30, 30...
                delay = min(30, 5 * attempt)
                logger.info(f"‚è≥ –ñ–¥–µ–º {delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1} (–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏)...")
                await asyncio.sleep(delay)
        
        logger.warning(f"üíÄ –í–°–ï {max_attempts} –ü–û–ü–´–¢–û–ö –ò–°–ß–ï–†–ü–ê–ù–´ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–Ω—Å–∞ ${symbol} –≤ @{twitter_account}! –ê–Ω–æ–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # üîÑ FALLBACK: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Nitter –ø–æ–∏—Å–∫ (—Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!)
        logger.info(f"üîÑ FALLBACK: –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–Ω–æ–Ω—Å ${symbol} —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Nitter –ø–æ–∏—Å–∫...")
        return await self._find_oldest_token_mention_via_nitter(twitter_account, symbol)
    
    async def _find_oldest_token_mention_via_nitter(self, twitter_account: str, symbol: str) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Nitter –ø–æ–∏—Å–∫ (–∫–∞–∫ fallback –¥–ª—è TwitterProfileParser)"""
        from dynamic_cookie_rotation import get_next_proxy_cookie_async
        from nitter_domain_rotator import get_next_nitter_domain, record_nitter_request_result
        
        max_attempts = 5  # –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è fallback
        attempt = 0
        
        logger.info(f"üîç Fallback –ø–æ–∏—Å–∫ –∞–Ω–æ–Ω—Å–∞ ${symbol} –≤ @{twitter_account} —á–µ—Ä–µ–∑ Nitter")
        
        while attempt < max_attempts:
            try:
                attempt += 1
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω Nitter
                current_domain = get_next_nitter_domain()
                
                async with aiohttp.ClientSession() as session:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏
                    proxy, cookie = await get_next_proxy_cookie_async(session)
                    
                    search_query = f'"{symbol}"'  # –ü–æ–∏—Å–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                    search_pattern = f"${symbol}"  # –ß—Ç–æ –∏—â–µ–º –≤ —Ç–≤–∏—Ç–∞—Ö
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                        'Cookie': cookie
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
                    add_host_header_if_needed(headers, current_domain)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connector = aiohttp.TCPConnector(ssl=False)
                    request_kwargs = {}
                    if proxy:
                        request_kwargs['proxy'] = proxy
                    
                    # URL –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
                    nitter_base = format_nitter_url(current_domain)
                    search_url = f"{nitter_base}/{twitter_account}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                    
                    logger.info(f"üîç Nitter fallback –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: {search_url}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                    await self._apply_global_rate_limit()
                    
                    start_time = time.time()
                    
                    # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–°
                    response = await network_retry_wrapper(session, 'get', search_url, 
                                                        headers=headers, timeout=15, **request_kwargs)
                    
                    response_time = time.time() - start_time
                    
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                        title = soup.find('title')
                        if title and 'Making sure you\'re not a bot!' in title.get_text():
                            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è fallback –ø–æ–∏—Å–∫–∞ ${symbol} –≤ @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                            
                            retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, search_url, f"fallback –ø–æ–∏—Å–∫ ${symbol} –≤ @{twitter_account}", html)
                            
                            if retry_soup:
                                soup = retry_soup
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è fallback –ø–æ–∏—Å–∫–∞ ${symbol} –≤ @{twitter_account}")
                            else:
                                # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                                continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–≤–∏—Ç—ã
                        tweets = soup.find_all('div', class_='timeline-item')
                        mentions = []
                        
                        if tweets:
                            logger.info(f"üìÑ Fallback –Ω–∞—à–µ–ª {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –≤ @{twitter_account}")
                            
                            for tweet in tweets:
                                try:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–≤–∏—Ç–∞
                                    tweet_content = tweet.find('div', class_='tweet-content')
                                    if not tweet_content:
                                        continue
                                    
                                    tweet_text = tweet_content.get_text().upper()
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞
                                    if search_pattern.upper() in tweet_text:
                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                                        tweet_date_elem = tweet.find('span', class_='tweet-date')
                                        tweet_date = self._get_tweet_age(tweet_date_elem)
                                        
                                        if tweet_date:
                                            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ç–≤–∏—Ç–∞
                                            tweet_link = tweet.find('a', class_='tweet-link')
                                            tweet_url = tweet_link.get('href', '') if tweet_link else ''
                                            
                                            mentions.append({
                                                'text': tweet_content.get_text(),
                                                'date': tweet_date,
                                                'url': tweet_url,
                                                'pattern_matched': search_pattern
                                            })
                                            
                                            logger.debug(f"‚úÖ Fallback –Ω–∞—à–µ–ª —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ {search_pattern} –æ—Ç {tweet_date}")
                                        
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞ –≤ fallback: {e}")
                                    continue
                            
                            if mentions:
                                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
                                mentions.sort(key=lambda x: x['date'])
                                oldest_mention = mentions[0]
                                
                                logger.info(f"‚úÖ FALLBACK –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –∞–Ω–æ–Ω—Å ${symbol} –≤ @{twitter_account} –æ—Ç {oldest_mention['date']}")
                                record_nitter_request_result(current_domain, True, response_time, 200)
                                return oldest_mention
                            else:
                                logger.warning(f"‚ö†Ô∏è Fallback: —Ç–≤–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ${symbol} –≤ @{twitter_account}")
                                record_nitter_request_result(current_domain, True, response_time, 200)
                        else:
                            logger.warning(f"‚ö†Ô∏è Fallback: –Ω–µ—Ç —Ç–≤–∏—Ç–æ–≤ –¥–ª—è ${symbol} –≤ @{twitter_account}")
                            record_nitter_request_result(current_domain, True, response_time, 200)
                    
                    elif response.status == 429:
                        # HTTP 429 - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                        record_nitter_request_result(current_domain, False, response_time, 429)
                        logger.warning(f"üåê HTTP 429 –¥–ª—è fallback –ø–æ–∏—Å–∫–∞ ${symbol} - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω!")
                        await asyncio.sleep(2)
                        continue
                    
                    else:
                        record_nitter_request_result(current_domain, False, response_time, response.status)
                        logger.warning(f"‚ùå Fallback –æ—à–∏–±–∫–∞ HTTP {response.status} –¥–ª—è ${symbol} –≤ @{twitter_account}")
                        
            except Exception as e:
                error_msg = str(e) if str(e).strip() else f"{type(e).__name__} (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
                logger.error(f"‚ùå Fallback –ø–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ${symbol} –≤ @{twitter_account}: {error_msg}")
                
                if attempt < max_attempts:
                    delay = min(10, 2 * attempt)
                    logger.info(f"‚è≥ Fallback –∂–¥–µ–º {delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1}...")
                    await asyncio.sleep(delay)
        
        logger.warning(f"üíÄ Fallback –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è ${symbol} –≤ @{twitter_account}! –ê–Ω–æ–Ω—Å –ù–ï –Ω–∞–π–¥–µ–Ω")
        return None
    
    async def _global_search_for_symbol(self, symbol: str) -> List[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã"""
        from dynamic_cookie_rotation import get_next_proxy_cookie_async, mark_proxy_temp_blocked
        
        try:
            # üõ°Ô∏è –ù–ò–ö–û–ì–î–ê –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–ú - –í–°–ï–ì–î–ê –î–û–ë–ò–í–ê–ï–ú–°–Ø –£–°–ü–ï–•–ê!
            
            # üóÇÔ∏è –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            cache_key = f"global_search_{symbol}"
            current_time = time.time()
            
            if cache_key in self.twitter_check_cache:
                cached_result = self.twitter_check_cache[cache_key]
                ttl = self.cache_ttl  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TTL –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                
                if current_time - cached_result['last_check'] < ttl:
                    remaining_time = int((ttl - (current_time - cached_result['last_check']))/60)
                    logger.info(f"üóÇÔ∏è –ö–µ—à –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê: —Å–∏–º–≤–æ–ª \"{symbol}\" —É–∂–µ –∏—Å–∫–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_time}–º–∏–Ω)")
                    return cached_result.get('found_accounts', [])
                else:
                    logger.debug(f"‚è∞ –ö–µ—à –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫ –¥–ª—è \"{symbol}\"")
            
            found_accounts = set()
            search_query = f'"${symbol}"'
            symbol_pattern = f"${symbol.upper()}"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–∏–º–≤–æ–ª–∞ –∑–∞—Ä–∞–Ω–µ–µ
            
            logger.info(f"üåç –ù–∞—á–∏–Ω–∞–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞ \"{search_query}\"...")
            
            # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –ø–æ–∏—Å–∫–∞
            async with aiohttp.ClientSession() as session:
                proxy, cookie = await get_next_proxy_cookie_async(session)
                
                # URL –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                current_domain, nitter_base = get_nitter_domain_and_url()
                search_url = f"{nitter_base}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                    'Cookie': cookie
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
                add_host_header_if_needed(headers, current_domain)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connector = aiohttp.TCPConnector(ssl=False)
                request_kwargs = {}
                if proxy:
                    request_kwargs['proxy'] = proxy
                
                # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –¥–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
                current_url = search_url
                page = 0
                
                while current_url:  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    page += 1
                    logger.info(f"üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ \"{search_query}\" - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                    await self._apply_global_rate_limit()
                    
                    # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π TimeoutError
                    try:
                        response = await network_retry_wrapper(session, 'get', current_url, 
                                                             headers=headers, timeout=15, **request_kwargs)
                    except asyncio.TimeoutError:
                        logger.warning(f"‚è∞ {current_domain}: timeout –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω!")
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω Nitter
                        from nitter_domain_rotator import get_next_nitter_domain
                        new_domain = get_next_nitter_domain()
                        logger.warning(f"üåê –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω: {new_domain}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
                        from urllib.parse import urlparse, urlunparse
                        parsed_url = urlparse(current_url)
                        new_base_url = format_nitter_url(new_domain)
                        current_url = f"{new_base_url}{parsed_url.path}"
                        if parsed_url.query:
                            current_url += f"?{parsed_url.query}"
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                        current_domain = new_domain
                        add_host_header_if_needed(headers, current_domain)
                        
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
                        await asyncio.sleep(2)
                        page -= 1  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        continue
                    
                    logger.info(f"URL –∑–∞–ø—Ä–æ—Å–∞: {current_url}")

                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                        title = soup.find('title')
                        if title and 'Making sure you\'re not a bot!' in title.get_text():
                            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                            
                            # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                            retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, current_url, f"–≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", html)
                            
                            if retry_soup:
                                # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                soup = retry_soup
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                            else:
                                # –ù–ò–ö–û–ì–î–ê –ù–ï –°–î–ê–ï–ú–°–Ø! –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ - –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏!")
                                
                                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                                mark_proxy_temp_blocked(proxy, cookie, 120)
                                
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏
                                proxy, cookie = await get_next_proxy_cookie_async(session)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º request_kwargs –∏ headers
                                request_kwargs = {}
                                if proxy:
                                    request_kwargs['proxy'] = proxy
                                
                                headers['Cookie'] = cookie
                                
                                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                                page -= 1
                                await asyncio.sleep(2)
                                continue
                        
                        # –ò—â–µ–º —Ç–≤–∏—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        tweets = soup.find_all('div', class_='timeline-item')
                        page_accounts_count = 0
                        
                        if tweets:
                            for tweet in tweets:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ —Ç–≤–∏—Ç–∞
                                author_elem = tweet.find('a', class_='username')
                                tweet_content = tweet.find('div', class_='tweet-content')
                                tweet_date_elem = tweet.find('span', class_='tweet-date')
                                
                                if author_elem and tweet_content and tweet_date_elem:
                                    author = author_elem.get_text(strip=True).replace('@', '')
                                    tweet_text = tweet_content.get_text(strip=True)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ —Å $ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–≤–∏—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
                                    if symbol_pattern in tweet_text.upper():
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–≤–∏—Ç–∞ - —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ (< 30 –¥–Ω–µ–π)
                                        tweet_age = self._get_tweet_age(tweet_date_elem)
                                        one_month_ago = datetime.now() - timedelta(days=30)
                                        
                                        if tweet_age and tweet_age > one_month_ago:
                                            if author not in found_accounts:
                                                # üÜï –ù–û–í–´–ô –§–ò–õ–¨–¢–†: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∏–∫–Ω–µ–π–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
                                                # –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–∏–º–≤–æ–ª–∞
                                                token_name = symbol  # –í –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ name –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                                                is_similar = self._is_twitter_username_similar_to_token(author, token_name, symbol)
                                                
                                                if is_similar:
                                                    found_accounts.add(author)
                                                    page_accounts_count += 1
                                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ü–û–•–û–ñ–ò–ô –∞–∫–∫–∞—É–Ω—Ç @{author} —Å \"{symbol_pattern}\" ({tweet_age.strftime('%Y-%m-%d')})")
                                                else:
                                                    logger.debug(f"üö´ –ê–∫–∫–∞—É–Ω—Ç @{author} –ù–ï –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–∫–µ–Ω {symbol} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                        else:
                                            logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—â–µ–Ω —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç –æ—Ç @{author} —Å \"{symbol_pattern}\"")
                            
                            logger.info(f"üìÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}: –Ω–∞–π–¥–µ–Ω–æ {page_accounts_count} –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å \"{symbol_pattern}\"")
                        else:
                            logger.debug(f"üö´ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–≤–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        next_link = None
                        
                        # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç div.show-more —Å —Å—Å—ã–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏
                        show_more = soup.find('div', class_='show-more')
                        if show_more:
                            next_link = show_more.find('a')
                            if next_link and next_link.get('href'):
                                logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ .show-more: {next_link['href']}")
                                
                        # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º —Å—Å—ã–ª–∫—É "Load more" –ø–æ —Ç–µ–∫—Å—Ç—É
                        if not next_link:
                            next_link = soup.find('a', string=lambda text: text and ('load more' in text.lower() or 'more' in text.lower()))
                            if next_link:
                                logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 'Load more': {next_link['href']}")
                        
                        # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'cursor=' –∏–ª–∏ 'max_position='
                        if not next_link:
                            all_links = soup.find_all('a', href=True)
                            for link in all_links:
                                if 'cursor=' in link['href'] or 'max_position=' in link['href']:
                                    next_link = link
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å cursor: {next_link['href']}")
                                    break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
                        if next_link and 'href' in next_link.attrs:
                            next_url = next_link['href']
                            
                            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                            if next_url.startswith('/'):
                                current_url = f"{nitter_base}{next_url}"
                            elif next_url.startswith('?'):
                                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–æ–≤–æ–º URL
                                current_url = f"{nitter_base}/search{next_url}"
                            else:
                                current_url = next_url
                            
                            logger.debug(f"üîó –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {current_url}")
                            
                            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –∏–∑-–∑–∞ rate limiting)
                            await asyncio.sleep(random.uniform(15, 30))
                        else:
                            logger.debug(f"üö´ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
                            current_url = None  # –ó–∞–≤–µ—Ä—à–∞–µ–º while —Ü–∏–∫–ª
                    elif response.status == 429:
                        # HTTP 429 - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –¥–æ–º–µ–Ω–∞, –∞ –Ω–µ –ø—Ä–æ–∫—Å–∏
                        self._track_429_error()
                        
                        logger.warning(f"üåê HTTP 429 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω!")
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω Nitter
                        from nitter_domain_rotator import get_next_nitter_domain
                        new_domain = get_next_nitter_domain()
                        logger.warning(f"üåê –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω: {new_domain}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
                        from urllib.parse import urlparse, urlunparse
                        parsed_url = urlparse(current_url)
                        new_base_url = format_nitter_url(new_domain)
                        current_url = f"{new_base_url}{parsed_url.path}"
                        if parsed_url.query:
                            current_url += f"?{parsed_url.query}"
                        
                        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –∏ –ø–æ–≤—Ç–æ—Ä —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
                        await asyncio.sleep(2)
                        page -= 1  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        continue
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: HTTP {response.status}")
                        current_url = None  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                
                found_accounts_list = list(found_accounts)
                logger.info(f"üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(found_accounts_list)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å \"{symbol_pattern}\"")
                
                # üóÇÔ∏è –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –í –ö–ï–® –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.twitter_check_cache[cache_key] = {
                    'found_accounts': found_accounts_list,
                    'last_check': current_time,
                    'error': None
                }
                
                return found_accounts_list
                    
        except Exception as e:
            import traceback
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            
            # üîÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –ï—Å–ª–∏ —ç—Ç–æ TimeoutError, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –¥–æ–º–µ–Ω–æ–º
            if isinstance(e, asyncio.TimeoutError):
                logger.warning(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è {symbol} —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –∏ –ø—Ä–æ–∫—Å–∏
                    from nitter_domain_rotator import get_next_nitter_domain
                    from dynamic_cookie_rotation import get_next_proxy_cookie_async
                    
                    backup_domain = get_next_nitter_domain()
                    backup_proxy, backup_cookie = await get_next_proxy_cookie_async(session)
                    
                    logger.warning(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥–æ–º–µ–Ω–æ–º {backup_domain}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL
                    backup_base_url = format_nitter_url(backup_domain)
                    backup_search_url = f"{backup_base_url}/search?f=tweets&q=\"{symbol_pattern}\"&since=&until=&near="
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    headers['Cookie'] = backup_cookie
                    add_host_header_if_needed(headers, backup_domain)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
                    backup_kwargs = {}
                    if backup_proxy:
                        backup_kwargs['proxy'] = backup_proxy
                    
                    # –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    backup_response = await network_retry_wrapper(session, 'get', backup_search_url, 
                                                                headers=headers, timeout=15, **backup_kwargs)
                    
                    if backup_response.status == 200:
                        logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
                        
                        html = await backup_response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        tweets = soup.find_all('div', class_='timeline-item')
                        backup_accounts = set()
                        
                        if tweets:
                            for tweet in tweets:
                                author_elem = tweet.find('a', class_='username')
                                tweet_content = tweet.find('div', class_='tweet-content')
                                tweet_date_elem = tweet.find('span', class_='tweet-date')
                                
                                if author_elem and tweet_content and tweet_date_elem:
                                    author = author_elem.get_text(strip=True).replace('@', '')
                                    tweet_text = tweet_content.get_text(strip=True)
                                    
                                    if symbol_pattern in tweet_text.upper():
                                        tweet_age = self._get_tweet_age(tweet_date_elem)
                                        one_month_ago = datetime.now() - timedelta(days=30)
                                        
                                        if tweet_age and tweet_age > one_month_ago:
                                            backup_accounts.add(author)
                                            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω @{author} —Å \"{symbol_pattern}\"")
                        
                        backup_accounts_list = list(backup_accounts)
                        if backup_accounts_list:
                            logger.info(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(backup_accounts_list)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
                            self.twitter_check_cache[cache_key] = {
                                'found_accounts': backup_accounts_list,
                                'last_check': current_time,
                                'error': None
                            }
                            
                            return backup_accounts_list
                        else:
                            logger.warning(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    else:
                        logger.warning(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ—É—Å–ø–µ—à–µ–Ω: HTTP {backup_response.status}")
                        
                except Exception as backup_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {backup_error}")
            
            # üóÇÔ∏è –°–û–•–†–ê–ù–Ø–ï–ú –û–®–ò–ë–ö–£ –í –ö–ï–® –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            self.twitter_check_cache[cache_key] = {
                'found_accounts': [],
                'last_check': current_time,
                'error': str(e)
            }
            
            return []

    async def _check_contracts_in_twitter(self, twitter_account: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter –∞–∫–∫–∞—É–Ω—Ç–µ (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã) —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ"""
        from dynamic_cookie_rotation import get_next_proxy_cookie_async, mark_proxy_temp_blocked
        
        max_attempts = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        
        for attempt in range(max_attempts):
            try:
                # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –ø–æ–∏—Å–∫–∞
                async with aiohttp.ClientSession() as session:
                    proxy, cookie = await get_next_proxy_cookie_async(session)
                    
                    # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è (–±–∏–æ) (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                    current_domain, nitter_base = get_nitter_domain_and_url()
                    profile_url = f"{nitter_base}/{twitter_account}"
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                        'Cookie': cookie
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Host –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
                    add_host_header_if_needed(headers, current_domain)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connector = aiohttp.TCPConnector(ssl=False)
                    request_kwargs = {}
                    if proxy:
                        request_kwargs['proxy'] = proxy
                    
                    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                    await self._apply_global_rate_limit()
                    
                    # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø –ü–†–û–§–ò–õ–Ø
                    response = await network_retry_wrapper(session, 'get', profile_url, 
                                                        headers=headers, timeout=15, **request_kwargs)
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                        title = soup.find('title')
                        if title and 'Making sure you\'re not a bot!' in title.get_text():
                            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                            
                            # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                            retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, profile_url, f"–ø—Ä–æ—Ñ–∏–ª—å @{twitter_account}", html)
                            
                            if retry_soup:
                                # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                soup = retry_soup
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}")
                            else:
                                # –ù–ò–ö–û–ì–î–ê –ù–ï –°–î–ê–ï–ú–°–Ø! –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                                logger.warning(f"‚ùå –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è @{twitter_account} - –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏!")
                                
                                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                                mark_proxy_temp_blocked(proxy, cookie)
                                
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏
                                proxy, cookie = await get_next_proxy_cookie_async(session)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º request_kwargs —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                                request_kwargs = {}
                                if proxy:
                                    request_kwargs['proxy'] = proxy
                                
                                # –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
                                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account} —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏")
                                await asyncio.sleep(2)
                                
                                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                                return await self._check_contracts_in_twitter(twitter_account)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ soup –¥–æ—Å—Ç—É–ø–µ–Ω
                        if soup:
                            # –ò—â–µ–º –±–∏–æ –ø—Ä–æ—Ñ–∏–ª—è
                            bio_element = soup.find('div', class_='profile-bio')
                            if bio_element:
                                bio_text = bio_element.get_text()
                                logger.debug(f"üìã –ë–∏–æ @{twitter_account}: {bio_text[:100]}...")
                                
                                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –±–∏–æ
                                solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
                                potential_contracts = re.findall(solana_pattern, bio_text)
                                
                                if potential_contracts:
                                    logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –ë–ò–û @{twitter_account}: {len(potential_contracts)} —à—Ç.")
                                    for contract in potential_contracts:
                                        logger.warning(f"   üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –±–∏–æ: {contract}")
                                    return True
                                else:
                                    logger.debug(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –±–∏–æ @{twitter_account} –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
                            else:
                                logger.debug(f"‚ö†Ô∏è –ë–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è @{twitter_account}")
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}: HTTP {response.status}")
                    
                    # –ó–ê–¢–ï–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–∏—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ (–º–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–∏—Ç—ã @{twitter_account}")
                    
                    # –ò—â–µ–º –ª—é–±—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                    search_query = "pump OR raydium OR solana OR token OR contract"
                    current_url = f"{nitter_base}/{twitter_account}/search?f=tweets&q={quote(search_query)}&since=&until=&near="
                    
                    for page in range(3):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        logger.debug(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ @{twitter_account}")
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                        await self._apply_global_rate_limit()
                        
                        # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø –ü–û–ò–°–ö–ê –ö–û–ù–¢–†–ê–ö–¢–û–í
                        response = await network_retry_wrapper(session, 'get', current_url, 
                                                            headers=headers, timeout=15, **request_kwargs)
                        if response.status == 200:
                            html = await response.text()
                            soup = BeautifulSoup(html, 'html.parser')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                            title = soup.find('title')
                            if title and 'Making sure you\'re not a bot!' in title.get_text():
                                logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} –¥–ª—è @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                                
                                # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                                retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, current_url, f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø–æ–∏—Å–∫–∞ @{twitter_account}", html)
                                
                                if retry_soup:
                                    # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                    soup = retry_soup
                                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –ø–æ–∏—Å–∫–∞ @{twitter_account}")
                                else:
                                    # –ù–ò–ö–û–ì–î–ê –ù–ï –°–î–ê–ï–ú–°–Ø! –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –ø–æ–∏—Å–∫–∞ @{twitter_account} - –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏!")
                                    
                                    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                                    mark_proxy_temp_blocked(proxy, cookie)
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏
                                    proxy, cookie = await get_next_proxy_cookie_async(session)
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º request_kwargs –∏ headers
                                    request_kwargs = {}
                                    if proxy:
                                        request_kwargs['proxy'] = proxy
                                    
                                    headers['Cookie'] = cookie
                                    
                                    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                                    page -= 1
                                    await asyncio.sleep(2)
                                    continue
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_text = soup.get_text()
                            
                            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (base58, 32-44 —Å–∏–º–≤–æ–ª–∞)
                            solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
                            potential_contracts = re.findall(solana_pattern, page_text)
                            
                            if potential_contracts:
                                logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ @{twitter_account} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1}: {len(potential_contracts)} —à—Ç.")
                                return True
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ .show-more
                            next_link = None
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç div.show-more —Å —Å—Å—ã–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏
                            show_more = soup.find('div', class_='show-more')
                            if show_more:
                                next_link = show_more.find('a')
                                if next_link and next_link.get('href'):
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ .show-more: {next_link['href']}")
                                    
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º —Å—Å—ã–ª–∫—É "Load more" –ø–æ —Ç–µ–∫—Å—Ç—É
                            if not next_link:
                                next_link = soup.find('a', string=lambda text: text and ('load more' in text.lower() or 'more' in text.lower()))
                                if next_link:
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 'Load more': {next_link['href']}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'cursor=' –∏–ª–∏ 'max_position='
                            if not next_link:
                                all_links = soup.find_all('a', href=True)
                                for link in all_links:
                                    if 'cursor=' in link['href'] or 'max_position=' in link['href']:
                                        next_link = link
                                        logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å cursor: {next_link['href']}")
                                        break
                            
                            if next_link and 'href' in next_link.attrs and page < 2:
                                next_url = next_link['href']
                                
                                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                                if next_url.startswith('/'):
                                    current_url = f"{nitter_base}{next_url}"
                                elif next_url.startswith('?'):
                                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–æ–≤–æ–º URL
                                    current_url = f"{nitter_base}/{twitter_account}/search{next_url}"
                                else:
                                    current_url = next_url
                                
                                logger.debug(f"üîó –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {current_url}")
                                
                                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                                await asyncio.sleep(random.uniform(10, 20))
                            else:
                                logger.debug(f"üö´ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
                                break
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} –¥–ª—è @{twitter_account}: HTTP {response.status}")
                            break
                    
                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ with_replies (–º–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü) (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É with_replies @{twitter_account}")
                    
                    current_url = f"{nitter_base}/{twitter_account}/with_replies"
                    
                    for page in range(5):  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                        logger.debug(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} with_replies –¥–ª—è @{twitter_account}")
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                        await self._apply_global_rate_limit()
                        
                        # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø WITH_REPLIES
                        response = await network_retry_wrapper(session, 'get', current_url, 
                                                            headers=headers, timeout=15, **request_kwargs)
                        if response.status == 200:
                            html = await response.text()
                            soup = BeautifulSoup(html, 'html.parser')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                            title = soup.find('title')
                            if title and 'Making sure you\'re not a bot!' in title.get_text():
                                logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} with_replies –¥–ª—è @{twitter_account} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                                
                                # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ä–µ—à–∞–µ–º Anubis challenge
                                retry_soup = await self._handle_nitter_block(session, proxy, cookie, headers, current_url, f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} with_replies @{twitter_account}", html)
                                
                                if retry_soup:
                                    # –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π soup
                                    soup = retry_soup
                                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} with_replies @{twitter_account}")
                                else:
                                    # –ù–ò–ö–û–ì–î–ê –ù–ï –°–î–ê–ï–ú–°–Ø! –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} with_replies @{twitter_account} - –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏!")
                                    
                                    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                                    mark_proxy_temp_blocked(proxy, cookie)
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏
                                    proxy, cookie = await get_next_proxy_cookie_async(session)
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º request_kwargs –∏ headers
                                    request_kwargs = {}
                                    if proxy:
                                        request_kwargs['proxy'] = proxy
                                    
                                    headers['Cookie'] = cookie
                                    
                                    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                                    page -= 1
                                    await asyncio.sleep(2)
                                    continue
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_text = soup.get_text()
                            
                            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (base58, 32-44 —Å–∏–º–≤–æ–ª–∞)
                            solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
                            potential_contracts = re.findall(solana_pattern, page_text)
                            
                            if potential_contracts:
                                logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ @{twitter_account} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1} with_replies: {len(potential_contracts)} —à—Ç.")
                                for contract in potential_contracts:
                                    logger.warning(f"   üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤ with_replies: {contract}")
                                return True
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ .show-more
                            next_link = None
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç div.show-more —Å —Å—Å—ã–ª–∫–æ–π –≤–Ω—É—Ç—Ä–∏
                            show_more = soup.find('div', class_='show-more')
                            if show_more:
                                next_link = show_more.find('a')
                                if next_link and next_link.get('href'):
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ .show-more: {next_link['href']}")
                                    
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º —Å—Å—ã–ª–∫—É "Load more" –ø–æ —Ç–µ–∫—Å—Ç—É
                            if not next_link:
                                next_link = soup.find('a', string=lambda text: text and ('load more' in text.lower() or 'more' in text.lower()))
                                if next_link:
                                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 'Load more': {next_link['href']}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'cursor=' –∏–ª–∏ 'max_position='
                            if not next_link:
                                all_links = soup.find_all('a', href=True)
                                for link in all_links:
                                    if 'cursor=' in link['href'] or 'max_position=' in link['href']:
                                        next_link = link
                                        logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å cursor: {next_link['href']}")
                                        break
                            
                            if next_link and 'href' in next_link.attrs:
                                next_url = next_link['href']
                                
                                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–æ–º–µ–Ω–æ–≤)
                                if next_url.startswith('/'):
                                    current_url = f"{nitter_base}{next_url}"
                                elif next_url.startswith('?'):
                                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–æ–≤–æ–º URL
                                    current_url = f"{nitter_base}/{twitter_account}/with_replies{next_url}"
                                else:
                                    current_url = next_url
                                
                                logger.debug(f"üîó –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ with_replies: {current_url}")
                                
                                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                                await asyncio.sleep(random.uniform(10, 20))
                            else:
                                logger.debug(f"üö´ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ with_replies –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
                                break
                        else:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1} with_replies –¥–ª—è @{twitter_account}: HTTP {response.status}")
                            break
                    
                    logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ @{twitter_account} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: –±–∏–æ + 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–∏—Ç–æ–≤ + 5 —Å—Ç—Ä–∞–Ω–∏—Ü with_replies)")
                    return False
                    
            except Exception as e:
                error_msg = str(e) if str(e).strip() else f"{type(e).__name__} (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                is_timeout_error = any(keyword in error_msg.lower() for keyword in [
                    'timeout', 'timed out', 'connection', 'network', 'disconnected', 
                    'unreachable', 'refused', 'reset', 'aborted'
                ])
                
                if is_timeout_error and attempt < max_attempts - 1:
                    delay = min(30, (attempt + 1) * 3)  # 3, 6, 9, 12, 15 —Å–µ–∫—É–Ω–¥
                    logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @{twitter_account} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ @{twitter_account}: {error_msg}")
                    return False
        
        logger.error(f"üíÄ –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @{twitter_account}")
        return False
    
    async def add_token_to_group(self, token_data: Dict, reason: str = "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –≥—Ä—É–ø–ø—É (—Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É –¥–∞–∂–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)"""
        try:
            group_key = self.create_group_key(token_data)
            token_id = token_data.get('id')
            symbol = token_data.get('symbol', 'Unknown')
            name = token_data.get('name', 'Unknown')
            
            # üîç –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º
            existing_group = None
            existing_group_key = None
            
            for key, group in self.groups.items():
                if group.symbol.upper() == symbol.upper():
                    existing_group = group
                    existing_group_key = key
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}: {key}")
                    break
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ç—É–¥–∞
            if existing_group:
                logger.info(f"‚û°Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω {symbol} –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É {existing_group_key}")
                
                # üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–∫–∏–ø–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                if existing_group.main_twitter:
                    has_contracts = await self._check_contracts_in_twitter(existing_group.main_twitter)
                    if has_contracts:
                        logger.warning(f"üêõüö´ WORMSTER –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –¢–û–ö–ï–ù {symbol}: –ì–ª–∞–≤–Ω—ã–π Twitter @{existing_group.main_twitter} —Å–≤–µ—Ç–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã! –ù–µ –ª—é–±–∏–º —Å–ø–æ–π–ª–µ—Ä—ã! ü§¨")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
                existing_ids = [t.get('id') for t in existing_group.tokens]
                if token_id in existing_ids:
                    logger.debug(f"üîÑ –¢–æ–∫–µ–Ω {token_id[:8]}... —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {existing_group_key}")
                    # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º latest_added_token –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å
                    existing_group.latest_added_token = self._enrich_token_with_date(token_data)
                    existing_group.last_updated = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    # üåç –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
                    if existing_group.is_global_search_group:
                        await self._update_private_group_message(existing_group)
                    else:
                        await self._update_group_message(existing_group)
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                existing_group.tokens.append(token_data)
                existing_group.latest_added_token = self._enrich_token_with_date(token_data)
                existing_group.last_updated = datetime.now()
                
                # –ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                logger.info(f"üêõ‚úÖ WORMSTER –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É (–≥–ª–∞–≤–Ω—ã–π Twitter: @{existing_group.main_twitter or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'})")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} —Å {len(existing_group.tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏...")
                self._create_sheet_and_update_message_async(existing_group_key, existing_group.tokens, existing_group.main_twitter)
                
                logger.info(f"üêõ‚úÖ WORMSTER –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É (–≤—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(existing_group.tokens)}) üéØ")
                return True
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —Å —Ç–æ—á–Ω—ã–º –∫–ª—é—á–æ–º
            if group_key not in self.groups:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Ç–æ–∫–µ–Ω–æ–≤
                logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Ç–æ–∫–µ–Ω–æ–≤: {symbol}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –ë–î
                db_tokens = self._load_tokens_from_db(symbol)
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                group = self.GroupData(group_key, symbol, name)
                group.tokens = db_tokens + [token_data] if token_data not in db_tokens else db_tokens
                group.latest_added_token = self._enrich_token_with_date(token_data)  # üéØ –û–±–æ–≥–∞—â–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –ë–î!
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–º–≤–æ–ª–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
                group.main_twitter = await self.determine_main_twitter(group.tokens)
                
                # # üåç –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π Twitter –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                # if not group.main_twitter:
                #     logger.info(f"üåç –¢–æ–∫–µ–Ω—ã {symbol} –ù–ï –∏–º–µ—é—Ç Twitter —Å—Å—ã–ª–æ–∫ - –ø—Ä–æ–±—É–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö...")
                    
                #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ Twitter —Å—Å—ã–ª–∫–∏
                #     has_any_twitter_links = any(
                #         self.extract_twitter_accounts(token) for token in group.tokens
                #     )
                    
                #     if not has_any_twitter_links:
                #         # –¢–æ–∫–µ–Ω—ã –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ—é—Ç Twitter —Å—Å—ã–ª–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                #         logger.info(f"üåç –ì—Ä—É–ø–ø–∞ {symbol} –ë–ï–ó Twitter —Å—Å—ã–ª–æ–∫ - –∏—â–µ–º —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...")
                #         global_main_twitter = await self.determine_main_twitter_from_global_search(symbol)
                        
                #         if global_main_twitter:
                #             group.main_twitter = global_main_twitter
                #             group.is_global_search_group = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≥—Ä—É–ø–ø—É –Ω–∞–π–¥–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                #             logger.info(f"üåç‚úÖ –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π Twitter —á–µ—Ä–µ–∑ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö: @{global_main_twitter}")
                #         else:
                #             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ—É–¥–∞—á–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                #             cache_key = f"global_search_{symbol}"
                #             cached_result = self.twitter_check_cache.get(cache_key, {})
                #             error_reason = cached_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
                            
                #             if error_reason and 'TimeoutError' in str(error_reason):
                #                 logger.error(f"üåçüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è {symbol} —É–ø–∞–ª —Å TimeoutError - –ë–û–¢ –ü–†–û–ü–£–°–ö–ê–ï–¢ –¢–û–ö–ï–ù–´!")
                #                 logger.error(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ Nitter –∏ –ø—Ä–æ–∫—Å–∏!")
                #             else:
                #                 logger.warning(f"üåçüö´ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ù–ï –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π Twitter –¥–ª—è {symbol} (–ø—Ä–∏—á–∏–Ω–∞: {error_reason})")
                
                # ‚ö†Ô∏è –°–ú–Ø–ì–ß–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π Twitter –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                if not group.main_twitter:
                    logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {symbol} —Å–æ–∑–¥–∞–Ω–∞ –ë–ï–ó –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ - —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è, –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–Ω—Å–∞")
                    
                    # üöÄ –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ –í –§–û–ù–ï (–ë–ï–ó –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø)
                    group.official_announcement = None
                    group.sheet_url = None
                    group.message_id = None  # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –±–µ–∑ –∞–Ω–æ–Ω—Å–∞
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
                    self.groups[group_key] = group
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–¥–∞–∂–µ –±–µ–∑ Twitter)
                    self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                    
                    logger.info(f"üêõüìä WORMSTER –°–û–ó–î–ê–õ –°–ö–†–´–¢–£–Æ –ì–†–£–ü–ü–£ {symbol} –ë–ï–ó TELEGRAM –°–û–û–ë–©–ï–ù–ò–Ø! –ö–æ–ø–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ! üìä")
                    return True
                
                # üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–∫–∏–ø–∞–µ–º –≥—Ä—É–ø–ø—É
                has_contracts = await self._check_contracts_in_twitter(group.main_twitter)
                if has_contracts:
                    logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {symbol} –ù–ï —Å–æ–∑–¥–∞–Ω–∞: –≤ –≥–ª–∞–≤–Ω–æ–º Twitter @{group.main_twitter} –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
                    return False
                
                # üîç –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç –∫–∞–∫ –∞–Ω–æ–Ω—Å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —Å–∏–º–≤–æ–ª–æ–º)
                oldest_mention = await self._find_oldest_announcement(group.main_twitter, symbol)
                if oldest_mention:
                    group.official_announcement = oldest_mention
                    logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ {symbol} –æ—Ç {oldest_mention['date']}")
                else:
                    group.official_announcement = None
                    logger.warning(f"üêõ‚ùå WORMSTER –ù–ï –ù–ê–®–Å–õ –ê–ù–û–ù–° –í @{group.main_twitter}! –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–æ–Ω—Å–∞! üö´")
                
                # üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º —Ç–∞–±–ª–∏—Ü–∞ –≤ —Ñ–æ–Ω–µ
                logger.info(f"üìä –ì—Ä—É–ø–ø–∞ {symbol} —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
                
                # üö´ –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
                group.sheet_url = None  # –ü–æ–∫–∞ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
                if group.official_announcement:
                    # üö´ –û–¢–ö–õ–Æ–ß–ï–ù–´ –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
                    group.message_id = await self._send_group_message(group)
                    if group.message_id:
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä—É–ø–ø–µ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (–µ—Å—Ç—å –∞–Ω–æ–Ω—Å)")
                    else:
                        logger.warning(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä—É–ø–ø–µ {symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Twitter")
                else:
                    group.message_id = None  # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–æ–Ω—Å–∞
                    logger.info(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä—É–ø–ø–µ {symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –∞–Ω–æ–Ω—Å–∞)")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
                self.groups[group_key] = group
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)
                self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                
                logger.info(f"üêõüéâ WORMSTER –°–û–ó–î–ê–õ –ù–û–í–£–Æ –û–•–û–¢–ù–ò–ß–¨–Æ –°–¢–ê–Æ {symbol}! –¢–µ–ø–µ—Ä—å –∫–æ–ø–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ! üìä")
                return True
                
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —Å —Ç–æ—á–Ω—ã–º –∫–ª—é—á–æ–º
                group = self.groups[group_key]
                
                # üö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–∫–∏–ø–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                if group.main_twitter:
                    has_contracts = await self._check_contracts_in_twitter(group.main_twitter)
                    if has_contracts:
                        logger.warning(f"üêõüö´ WORMSTER –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –¢–û–ö–ï–ù {symbol}: –ì–ª–∞–≤–Ω—ã–π Twitter @{group.main_twitter} —Å–≤–µ—Ç–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã! –ù–µ –ª—é–±–∏–º —Å–ø–æ–π–ª–µ—Ä—ã! ü§¨")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
                existing_ids = [t.get('id') for t in group.tokens]
                if token_id in existing_ids:
                    logger.debug(f"üîÑ –¢–æ–∫–µ–Ω {token_id[:8]}... —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group_key}")
                    # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º latest_added_token –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å
                    group.latest_added_token = self._enrich_token_with_date(token_data)  # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –ë–î!
                    group.last_updated = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–æ–Ω—Å)
                    if group.official_announcement and group.message_id:
                        await self._update_group_message(group)
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                group.tokens.append(token_data)
                group.latest_added_token = self._enrich_token_with_date(token_data)  # üéØ –û–±–æ–≥–∞—â–∞–µ–º –¥–∞—Ç–æ–π –∏–∑ –ë–î!
                group.last_updated = datetime.now()
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                new_main_twitter = await self.determine_main_twitter(group.tokens)
                if new_main_twitter != group.main_twitter:
                    # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π Twitter –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    if new_main_twitter:
                        has_contracts = await self._check_contracts_in_twitter(new_main_twitter)
                        if has_contracts:
                            logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {symbol} —Å–∫–∏–ø–∞–µ—Ç—Å—è: –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π Twitter @{new_main_twitter} —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
                            return False
                    
                    group.main_twitter = new_main_twitter
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ Google Sheets –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    priority = 0 if group.message_id else 1  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
                    sheets_manager.update_main_twitter_async(group_key, new_main_twitter, priority=priority)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –≥–ª–∞–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    if new_main_twitter:
                        oldest_mention = await self._find_oldest_announcement(new_main_twitter, symbol)
                        group.official_announcement = oldest_mention
                        
                        # üöÄ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∞–Ω–æ–Ω—Å –Ω–∞–π–¥–µ–Ω –≤–ø–µ—Ä–≤—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if oldest_mention and not group.message_id:
                            # üö´ –û–¢–ö–õ–Æ–ß–ï–ù–´ –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
                            group.message_id = await self._send_group_message(group)
                            if group.message_id:
                                logger.info(f"‚úÖ –í–ø–µ—Ä–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} (–Ω–æ–≤—ã–π Twitter —Å –∞–Ω–æ–Ω—Å–æ–º)")
                            else:
                                logger.warning(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Twitter")
                
                # üîç –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –∞–Ω–æ–Ω—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø–µ
                if group.main_twitter and not group.official_announcement:
                    logger.info(f"üêõüîç WORMSTER –ù–ê–®–Å–õ –ì–†–£–ü–ü–£ {symbol} –ë–ï–ó –ê–ù–û–ù–°–ê! –ö–æ–ø–∞–µ–º –≥–ª—É–±–∂–µ –≤ @{group.main_twitter}...")
                    oldest_mention = await self._find_oldest_announcement(group.main_twitter, symbol)
                    if oldest_mention:
                        group.official_announcement = oldest_mention
                        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω –∞–Ω–æ–Ω—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã {symbol} –æ—Ç {oldest_mention['date']}")
                        
                        # üöÄ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∞–Ω–æ–Ω—Å –Ω–∞–π–¥–µ–Ω –≤–ø–µ—Ä–≤—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if not group.message_id:
                            # üö´ –û–¢–ö–õ–Æ–ß–ï–ù–´ –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
                            group.message_id = await self._send_group_message(group)
                            if group.message_id:
                                logger.info(f"‚úÖ –í–ø–µ—Ä–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} (–Ω–∞–π–¥–µ–Ω –∞–Ω–æ–Ω—Å)")
                            else:
                                logger.warning(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Twitter")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} —Å {len(group.tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏...")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–æ–Ω—Å –∏ message_id
                if group.official_announcement and group.message_id:
                    self._create_sheet_and_update_message_async(group_key, group.tokens, group.main_twitter)
                else:
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    if group.main_twitter:
                        sheets_manager.add_tokens_batch(group_key, group.tokens, group.main_twitter)
                        if group.is_global_search_group:
                            logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–Ω–µ—Ç –∞–Ω–æ–Ω—Å–∞)")
                        else:
                            logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ—Ç –∞–Ω–æ–Ω—Å–∞)")
                
                logger.info(f"üêõ‚úÖ WORMSTER –ü–û–ü–û–õ–ù–ò–õ –ö–û–õ–õ–ï–ö–¶–ò–Æ! –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É (–≤—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(group.tokens)}) üéØ")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
    
    def _enrich_token_with_date(self, token_data: Dict) -> Dict:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑ –ë–î"""
        try:
            db_manager = get_db_manager()
            session = db_manager.Session()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            from database import Token
            main_token = session.query(Token).filter_by(mint=token_data.get('id')).first()
            dup_token = session.query(DuplicateToken).filter_by(mint=token_data.get('id')).first()
            
            session.close()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é token_data –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            enriched_token = token_data.copy()
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–∫–µ–Ω –≤ –ë–î –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            if main_token and main_token.created_at:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç —Å Z —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                created_at_str = main_token.created_at.strftime('%Y-%m-%dT%H:%M:%SZ')
                
                # –û–±–æ–≥–∞—â–∞–µ–º firstPool –¥–∞–Ω–Ω—ã–º–∏
                if 'firstPool' not in enriched_token:
                    enriched_token['firstPool'] = {}
                
                enriched_token['firstPool']['createdAt'] = created_at_str
                
                logger.debug(f"‚úÖ –¢–æ–∫–µ–Ω {token_data.get('id', '')[:8]}... –æ–±–æ–≥–∞—â–µ–Ω –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è: {created_at_str}")
            else:
                logger.debug(f"‚ö†Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_data.get('id', '')[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if dup_token and dup_token.first_seen:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç —Å Z —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                first_seen_str = dup_token.first_seen.strftime('%Y-%m-%dT%H:%M:%SZ')
                enriched_token['first_seen'] = first_seen_str
                
                logger.debug(f"‚úÖ –¢–æ–∫–µ–Ω {token_data.get('id', '')[:8]}... –æ–±–æ–≥–∞—â–µ–Ω –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {first_seen_str}")
            else:
                logger.debug(f"‚ö†Ô∏è –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_data.get('id', '')[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            return enriched_token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–∞—Ç–æ–π: {e}")
            return token_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    def _load_tokens_from_db(self, symbol: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Ç–æ–∫–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã tokens —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        try:
            db_manager = get_db_manager()
            session = db_manager.Session()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã tokens —Å JOIN –∫ duplicate_tokens –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            tokens = session.query(Token, DuplicateToken).outerjoin(
                DuplicateToken, Token.mint == DuplicateToken.mint
            ).filter(
                Token.symbol == symbol.upper()  # –°–∏–º–≤–æ–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            ).order_by(Token.created_at.desc()).all()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            
            session.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Jupiter API
            token_list = []
            for token, dup_token in tokens:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è Jupiter API —Ñ–æ—Ä–º–∞—Ç–∞
                created_at_str = None
                if token.created_at:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç —Å Z —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                    created_at_str = token.created_at.strftime('%Y-%m-%dT%H:%M:%SZ')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                first_seen_str = None
                if dup_token and dup_token.first_seen:
                    first_seen_str = dup_token.first_seen.strftime('%Y-%m-%dT%H:%M:%SZ')
                
                token_dict = {
                    'id': token.mint,
                    'name': token.name or 'Unknown',
                    'symbol': token.symbol,
                    'icon': getattr(token, 'icon', None),
                    'twitter': getattr(token, 'twitter', None),
                    'telegram': getattr(token, 'telegram', None),
                    'website': getattr(token, 'website', None),
                    'decimals': getattr(token, 'decimals', 6),
                    'firstPool': {
                        'createdAt': created_at_str
                    },
                    'first_seen': first_seen_str  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                }
                token_list.append(token_dict)
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_list)} —Ç–æ–∫–µ–Ω–æ–≤ {symbol} –∏–∑ –û–°–ù–û–í–ù–û–ô —Ç–∞–±–ª–∏—Ü—ã tokens —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
            return token_list
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ë–î: {e}")
            return []
    
    async def _send_group_message(self, group: 'GroupData') -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ Telegram —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        try:
            message_text = await self._format_group_message(group)
            
            # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Twitter) - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if not message_text:
                logger.warning(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Twitter")
                return None
            
            inline_keyboard = self._create_group_keyboard(group)
            
            payload = {
                "chat_id": self.target_chat_id,
                "message_thread_id": self.message_thread_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }
            
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            future = asyncio.Future()
            
            def callback(success: bool, result):
                if success:
                    message_id = result['result']['message_id']
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å (ID: {message_id})")
                    future.set_result(message_id)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    future.set_result(None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.send_message(payload, callback)
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                return result
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _send_private_group_message(self, group: 'GroupData') -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ Twitter)"""
        try:
            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)
            
            payload = {
                "chat_id": self.private_chat_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }
            
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            future = asyncio.Future()
            
            def callback(success: bool, result):
                if success:
                    message_id = result['result']['message_id']
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–ò–ß–ù–´–ô –ß–ê–¢ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å (ID: {message_id})")
                    future.set_result(message_id)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    future.set_result(None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.send_message(payload, callback)
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                return result
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç: {e}")
            return None
    
    async def _update_private_group_message(self, group: 'GroupData') -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
                return False

            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)

            payload = {
                "chat_id": self.private_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            future = asyncio.Future()

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –õ–ò–ß–ù–û–ú –ß–ê–¢–ï —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                    future.set_result(True)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    future.set_result(False)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)

            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                return result
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ: {e}")
            return False
    
    async def _update_group_message(self, group: 'GroupData') -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False

            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)

            payload = {
                "chat_id": self.target_chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            future = asyncio.Future()

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                    future.set_result(True)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    future.set_result(False)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)

            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                return result
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def _parse_jupiter_date(self, date_string: str) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ Jupiter API —Ñ–æ—Ä–º–∞—Ç–∞ '2025-07-05T16:03:59Z' –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if not date_string:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ UTC –¥–∞—Ç—ã —Å Z-—Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            if date_string.endswith('Z'):
                # –ó–∞–º–µ–Ω—è–µ–º Z –Ω–∞ +00:00 –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è UTC
                date_string = date_string.replace('Z', '+00:00')
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
            created_date = datetime.fromisoformat(date_string)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            return created_date.strftime('%d.%m.%Y %H:%M')
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Jupiter –¥–∞—Ç—ã '{date_string}': {e}")
            return str(date_string)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É

    async def _format_group_message(self, group: 'GroupData') -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
        try:
            # –ü–†–û–°–¢–û–ô –ó–ê–ì–û–õ–û–í–û–ö
            message = f"üêõüí∞ <b>–ù–û–í–´–ô –ó–ê–ü–£–°–ö –ú–û–ù–ï–¢–´: ${group.symbol.upper()}!</b>\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter –∞–∫–∫–∞—É–Ω—Ç–µ
            if group.main_twitter:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º Twitter
                main_twitter_info = await self._format_twitter_profile_info(group.main_twitter, is_main=True)
                
                # üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if not main_twitter_info:
                    logger.warning(f"üö´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter @{group.main_twitter} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {group.symbol}")
                    return None
                
                message += main_twitter_info
                
                # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç)
                if group.official_announcement:
                    message += f"üì¢ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–û–ù–°:</b>\n"
                    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_announcement['date']}\n"
                    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    announcement_text = group.official_announcement['text']
                    if len(announcement_text) > 150:
                        announcement_text = announcement_text[:150] + "..."
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –∞–Ω–æ–Ω—Å–∞
                    import html
                    announcement_text = html.escape(announcement_text)
                    message += f"<blockquote>{announcement_text}</blockquote>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                additional_accounts = await self._get_additional_twitter_accounts(group)
                if additional_accounts:
                    message += f"\nüîó <b>–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï TWITTER –ê–ö–ö–ê–£–ù–¢–´:</b>\n"
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    max_additional = 3
                    for i, account in enumerate(additional_accounts[:max_additional]):
                        additional_info = await self._format_twitter_profile_info(account, is_main=False)
                        if additional_info:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                            message += f"‚Ä¢ {additional_info}\n"
                    
                    if len(additional_accounts) > max_additional:
                        remaining = len(additional_accounts) - max_additional
                        message += f"‚Ä¢ –∏ –µ—â–µ {remaining} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)\n"
                    
                    message += "\n"
                else:
                    message += "\n"
            else:
                message += f"üê¶ <b>TWITTER –û–°–ù–û–í–ê–¢–ï–õ–Ø:</b> –ü–æ–∏—Å–∫...\n\n"
            
            # –°–¢–ê–¢–£–° –û–•–û–¢–´
            if group.official_contract:
                message += f"‚úÖ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù!</b>\n"
                message += f"üíé <b>–ê–¥—Ä–µ—Å:</b> <code>{group.official_contract['address']}</code>\n"
                message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_contract['date']}\n\n"
            else:
                message += f"üîç <b>WORMSTER –ü–†–û–î–û–õ–ñ–ê–ï–¢ –û–•–û–¢–£...</b>\n"
                message += f"üëÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë –Ω–µ –≤—ã—à–µ–ª. –í—Ä–µ–º—è –æ—Ö–æ—Ç—ã!\n\n"
            
            # –ú–ï–¢–ö–ê –í–†–ï–ú–ï–ù–ò
            utc_time = datetime.utcnow()
            message += f"üïê <b>Wormster –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ:</b> {utc_time.strftime('%d.%m.%Y %H:%M:%S')} UTC\n"
            message += f"üéØ <b>–ü–û–ú–ù–ò:</b> –†–∞–Ω–Ω–∏–µ –ø—Ç–∏—Ü—ã –ª–æ–≤—è—Ç –ª—É—á—à–∏–µ –∏–∫—Å—ã! –ù–µ –ø—Ä–æ—Å–ø–∏ –∞–ª—å—Ñ—É! üí∞üêõ"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return None
    
    def _create_group_keyboard(self, group: 'GroupData') -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets"""
        try:
            buttons = []
            
            # üìä –ö–ù–û–ü–ö–ê GOOGLE SHEETS - –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–≥–¥–∞ URL –≥–æ—Ç–æ–≤
            if group.sheet_url and group.sheet_url.strip():
                buttons.append([{
                    "text": "üìä –°–º–æ—Ç—Ä–µ—Ç—å –≤ Google Sheets",
                    "url": group.sheet_url
                }])
                logger.debug(f"‚úÖ –ö–Ω–æ–ø–∫–∞ Google Sheets –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}: {group.sheet_url}")
            else:
                logger.debug(f"üìä –ö–Ω–æ–ø–∫–∞ Google Sheets –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol} (—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è)")
            
            # –ö–Ω–æ–ø–∫–∞ "–û–∫–µ–π" –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if group.official_contract:
                buttons.append([{
                    "text": "‚úÖ –û–∫–µ–π",
                    "callback_data": f"delete_group:{group.group_key}"
                }])
            
            return {"inline_keyboard": buttons}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥—Ä—É–ø–ø—ã: {e}")
            return {"inline_keyboard": []}
    
    def _has_links(self, token_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ —É —Ç–æ–∫–µ–Ω–∞"""
        link_fields = ['twitter', 'telegram', 'website']
        return any(token_data.get(field) for field in link_fields)
    
    async def _get_additional_twitter_accounts(self, group: 'GroupData') -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–∏—Å–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—ã–π)"""
        try:
            additional_accounts = set()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            for token in group.tokens:
                accounts = self.extract_twitter_accounts(token)
                for account in accounts:
                    # –ò—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                    if account and account != group.main_twitter:
                        additional_accounts.add(account)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            filtered_accounts = []
            for account in additional_accounts:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
                    mentions_symbol = await self._check_symbol_mentions_in_twitter(account, group.symbol)
                    if mentions_symbol:
                        filtered_accounts.append(account)
                        logger.debug(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{account} —É–ø–æ–º–∏–Ω–∞–µ—Ç {group.symbol} - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫")
                    else:
                        logger.debug(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{account} –ù–ï —É–ø–æ–º–∏–Ω–∞–µ—Ç {group.symbol} - –∏—Å–∫–ª—é—á–∞–µ–º")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è {group.symbol} –≤ @{account}: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            return sorted(filtered_accounts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []
    
    def _get_additional_twitter_accounts_sync(self, group: 'GroupData') -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)"""
        try:
            additional_accounts = set()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            for token in group.tokens:
                accounts = self.extract_twitter_accounts(token)
                for account in accounts:
                    # –ò—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
                    if account and account != group.main_twitter:
                        additional_accounts.add(account)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            return sorted(list(additional_accounts))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {e}")
            return []
    
    def _create_sheet_and_update_message_async(self, group_key: str, tokens: List[Dict], main_twitter: str):
        """üî• –°–£–ü–ï–† –ë–´–°–¢–†–û–ï –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü—ã –±–∞—Ç—á–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
        def create_sheet_task():
            try:
                logger.info(f"üî• –°–æ–∑–¥–∞–µ–º Google Sheets —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –ë–ê–¢–ß–ï–ú ({len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤)...")
                logger.info(f"üîç DEBUG: main_twitter = {main_twitter}, group_key = {group_key}")
                
                # üî• –°–£–ü–ï–† –ë–´–°–¢–†–û: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
                if tokens:
                    logger.info(f"üìã DEBUG: –í—ã–∑—ã–≤–∞–µ–º add_tokens_batch –¥–ª—è {group_key} —Å {len(tokens)} —Ç–æ–∫–µ–Ω–∞–º–∏")
                    table_created = sheets_manager.add_tokens_batch(group_key, tokens, main_twitter)
                    logger.info(f"üìä DEBUG: add_tokens_batch –¥–ª—è {group_key} –≤–µ—Ä–Ω—É–ª: {table_created}")
                    
                    if table_created:
                        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã
                        logger.info(f"üîó DEBUG: –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {group_key}")
                        sheet_url = sheets_manager.get_sheet_url(group_key)
                        logger.info(f"üîó DEBUG: get_sheet_url –¥–ª—è {group_key} –≤–µ—Ä–Ω—É–ª: {sheet_url}")
                        
                        if sheet_url and group_key in self.groups:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
                            group = self.groups[group_key]
                            group.sheet_url = sheet_url
                            
                            logger.info(f"üî• –ë–ê–¢–ß–ï–í–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {group_key}, URL: {sheet_url}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
                            if group.message_id:
                                try:
                                    logger.info(f"üì± DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {group.message_id} –¥–ª—è {group_key}")
                                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è async –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Twitter
                                    self._schedule_async_message_update(group)
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            else:
                                logger.debug(f"üìä –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–µ—Å—Ç —Ä–µ–∂–∏–º)")
                            
                            logger.info(f"‚úÖ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å!")
                        else:
                            if not sheet_url:
                                logger.error(f"‚ùå get_sheet_url –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π URL –¥–ª—è {group_key}")
                            if group_key not in self.groups:
                                logger.error(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_key} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ self.groups!")
                                logger.info(f"üîç DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {list(self.groups.keys())}")
                    else:
                        logger.error(f"‚ùå add_tokens_batch –≤–µ—Ä–Ω—É–ª False –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                else:
                    logger.error(f"‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {group_key}")
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ –¥–ª—è {group_key}: {e}")
                import traceback
                logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–†–ò–û–†–ò–¢–ï–¢: –í—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ–±—ã—á–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö
        group = self.groups.get(group_key)
        if group and group.message_id:
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            priority = 0
            priority_msg = "üî• –í–´–°–û–ö–ò–ô (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)"
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö/–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
            priority = 1
            priority_msg = "‚è≥ –û–ë–´–ß–ù–´–ô (—Ç–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞)"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ Google Sheets —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        logger.info(f"üì§ DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É create_sheet_task –¥–ª—è {group_key} –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority_msg}")
        sheets_manager._queue_task(create_sheet_task, priority=priority)
    
    def _format_group_message_sync(self, group: 'GroupData') -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        try:
            # –ü–†–û–°–¢–û–ô –ó–ê–ì–û–õ–û–í–û–ö
            message = f"üêõüí∞ <b>–ù–û–í–´–ô –ó–ê–ü–£–°–ö –ú–û–ù–ï–¢–´: ${group.symbol.upper()}!</b>\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º Twitter –∞–∫–∫–∞—É–Ω—Ç–µ
            if group.main_twitter:
                message += f"üê¶ <b>TWITTER –û–°–ù–û–í–ê–¢–ï–õ–Ø:</b> @{group.main_twitter}\n"
                
                # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–≤–∏—Ç)
                if group.official_announcement:
                    message += f"üì¢ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–û–ù–°:</b>\n"
                    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_announcement['date']}\n"
                    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    announcement_text = group.official_announcement['text']
                    if len(announcement_text) > 150:
                        announcement_text = announcement_text[:150] + "..."
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –∞–Ω–æ–Ω—Å–∞
                    import html
                    announcement_text = html.escape(announcement_text)
                    message += f"<blockquote>{announcement_text}</blockquote>\n"
                    
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                additional_accounts = self._get_additional_twitter_accounts_sync(group)
                if additional_accounts:
                    if len(additional_accounts) <= 3:
                        accounts_str = ", ".join([f"@{account}" for account in additional_accounts])
                        message += f"üîó <b>–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï TWITTER:</b> {accounts_str}\n\n"
                    else:
                        first_three = ", ".join([f"@{account}" for account in additional_accounts[:3]])
                        remaining = len(additional_accounts) - 3
                        message += f"üîó <b>–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï TWITTER:</b> {first_three} –∏ –µ—â–µ {remaining}\n\n"
                else:
                    message += "\n"
            else:
                message += f"üê¶ <b>TWITTER –û–°–ù–û–í–ê–¢–ï–õ–Ø:</b> –ü–æ–∏—Å–∫...\n\n"
            
            # –°–¢–ê–¢–£–° –û–•–û–¢–´
            if group.official_contract:
                message += f"‚úÖ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù!</b>\n"
                message += f"üíé <b>–ê–¥—Ä–µ—Å:</b> <code>{group.official_contract['address']}</code>\n"
                message += f"üìÖ <b>–î–∞—Ç–∞:</b> {group.official_contract['date']}\n\n"
            else:
                message += f"üîç <b>WORMSTER –ü–†–û–î–û–õ–ñ–ê–ï–¢ –û–•–û–¢–£...</b>\n"
                message += f"üëÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë –Ω–µ –≤—ã—à–µ–ª. –í—Ä–µ–º—è –æ—Ö–æ—Ç—ã!\n\n"
            
            # –ú–ï–¢–ö–ê –í–†–ï–ú–ï–ù–ò
            utc_time = datetime.utcnow()
            message += f"üïê <b>Wormster –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ:</b> {utc_time.strftime('%d.%m.%Y %H:%M:%S')} UTC\n"
            message += f"üéØ <b>–ü–û–ú–ù–ò:</b> –†–∞–Ω–Ω–∏–µ –ø—Ç–∏—Ü—ã –ª–æ–≤—è—Ç –ª—É—á—à–∏–µ –∏–∫—Å—ã! –ù–µ –ø—Ä–æ—Å–ø–∏ –∞–ª—å—Ñ—É! üí∞üêõ"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}"

    def _schedule_async_message_update(self, group: 'GroupData') -> bool:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç async –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Twitter (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        try:
            import asyncio
            import threading
            
            def run_async_update():
                """–ó–∞–ø—É—Å–∫–∞–µ—Ç async –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º async –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    result = loop.run_until_complete(self._update_message_with_sheet_button(group))
                    
                    if result:
                        logger.info(f"‚úÖ Async –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {group.symbol} —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π Twitter –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    else:
                        logger.error(f"‚ùå Async –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {group.symbol} –Ω–µ —É–¥–∞–ª–æ—Å—å")
                    
                    loop.close()
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ async –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {group.symbol}: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            update_thread = threading.Thread(target=run_async_update, daemon=True)
            update_thread.start()
            
            logger.info(f"üì§ Async –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è async –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def _update_message_with_sheet_button_sync(self, group: 'GroupData') -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False

            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ await)
            message_text = self._format_group_message_sync(group)
            inline_keyboard = self._create_group_keyboard(group)

            # üåç –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—á–Ω—ã–π —á–∞—Ç
            chat_id = self.private_chat_id if group.is_global_search_group else self.target_chat_id
            
            payload = {
                "chat_id": chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)
            
            logger.info(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            return False

    async def _update_message_with_sheet_button(self, group: 'GroupData') -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
        try:
            if not group.message_id:
                logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.group_key} –Ω–µ –∏–º–µ–µ—Ç message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False

            message_text = await self._format_group_message(group)
            inline_keyboard = self._create_group_keyboard(group)

            # üåç –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—á–Ω—ã–π —á–∞—Ç
            chat_id = self.private_chat_id if group.is_global_search_group else self.target_chat_id

            payload = {
                "chat_id": chat_id,
                "message_id": group.message_id,
                "text": message_text,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
                "reply_markup": inline_keyboard
            }

            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_container = {'success': False}

            def callback(success: bool, result):
                if success:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                    result_container['success'] = True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                    result_container['success'] = False

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.telegram_queue.edit_message(payload, callback)
            
            # –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å)
            logger.info(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol} —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            return False
    
    async def check_official_contract(self, group_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            if not group.main_twitter:
                return False
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤–µ—Ä–Ω–µ—Ç False
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∏—Å–∫–∞ –≤ Twitter –∏–∑ pump_bot.py
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è @{group.main_twitter} - –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return False
    
    async def mark_official_contract_found(self, group_key: str, contract_address: str, found_date: str = None) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            group.official_contract = {
                'address': contract_address,
                'date': found_date or datetime.now().strftime('%d.%m.%Y %H:%M'),
                'found_at': datetime.now()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            if group.main_twitter:
                sheets_manager.check_official_contract_in_twitter(
                    group_key, group.main_twitter, contract_address
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._update_group_message(group)
            
            logger.info(f"‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç {contract_address[:8]}... –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return False
    
    async def delete_group(self, group_key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram)"""
        try:
            if group_key not in self.groups:
                return False
            
            group = self.groups[group_key]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
            if group.message_id:
                # üåç –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - —É–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
                chat_id = self.private_chat_id if group.is_global_search_group else self.target_chat_id
                
                payload = {
                    "chat_id": chat_id,
                    "message_id": group.message_id
                }
                
                # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                future = asyncio.Future()
                
                def callback(success: bool, result):
                    if success:
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
                        future.set_result(True)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group.symbol} —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å: {result}")
                        future.set_result(False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                self.telegram_queue.delete_message(payload, callback)
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(future, timeout=30.0)
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group.symbol}")
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–∞–º—è—Ç–∏
            del self.groups[group_key]
            
            logger.info(f"üêõüí• WORMSTER –£–ù–ò–ß–¢–û–ñ–ò–õ –ì–†–£–ü–ü–£ {group.symbol}! –û—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéØ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def get_group_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º"""
        try:
            total_groups = len(self.groups)
            total_tokens = sum(len(group.tokens) for group in self.groups.values())
            groups_with_official = sum(1 for group in self.groups.values() if group.official_contract)
            
            return {
                'total_groups': total_groups,
                'total_tokens': total_tokens,
                'groups_with_official_contracts': groups_with_official,
                'active_groups': [
                    {
                        'symbol': group.symbol,
                        'tokens_count': len(group.tokens),
                        'main_twitter': group.main_twitter,
                        'has_official': bool(group.official_contract),
                        'sheet_url': group.sheet_url
                    }
                    for group in self.groups.values()
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø: {e}")
            return {}
    
    async def _handle_nitter_block(self, session, proxy, cookie, headers, url, context_name, html_content):
        """üîÑ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ Nitter —Å Anubis challenge"""
        try:
            logger.warning(f"üö´ Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è {context_name} - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            
            # –°–ù–ê–ß–ê–õ–ê –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å Anubis challenge —Å —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–æ–∫—Å–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞!)
            logger.warning(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge –¥–ª—è {context_name}, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
                class SimpleDomainRotator:
                    def get_next_domain(self):
                        return get_next_nitter_domain()
                
                domain_rotator = SimpleDomainRotator()
                anubis_cookies = await handle_anubis_challenge_for_session(session, url, html_content, nitter_domain_rotator=domain_rotator)
                
                if anubis_cookies:
                    logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω –¥–ª—è {context_name}, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –∫—É–∫–∏")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                    updated_cookies = update_cookies_in_string(headers.get('Cookie', ''), anubis_cookies)
                    headers['Cookie'] = updated_cookies
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏
                    request_kwargs = {}
                    if proxy:
                        request_kwargs['proxy'] = proxy
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—à–µ–Ω–Ω—ã–º challenge
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                    await self._apply_global_rate_limit()
                    
                    # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø ANUBIS
                    anubis_response = await network_retry_wrapper(session, 'get', url, 
                                                                headers=headers, timeout=15, **request_kwargs)
                    if anubis_response.status == 200:
                        anubis_html = await anubis_response.text()
                        anubis_soup = BeautifulSoup(anubis_html, 'html.parser')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ challenge –±–æ–ª—å—à–µ –Ω–µ—Ç
                        anubis_title = anubis_soup.find('title')
                        anubis_has_challenge_text = anubis_title and 'Making sure you\'re not a bot!' in anubis_title.get_text()
                        anubis_has_anubis_script = 'id="anubis_challenge"' in anubis_html
                        
                        if anubis_has_challenge_text or anubis_has_anubis_script:
                            logger.warning(f"‚ö†Ô∏è Challenge –Ω–µ —Ä–µ—à–µ–Ω —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏")
                            # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                            return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                        
                        logger.info(f"üéâ {context_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è challenge")
                        return anubis_soup
                    elif anubis_response.status == 429:
                        # –ü—Ä–∏ 429 –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω, –∞ –Ω–µ –ø—Ä–æ–∫—Å–∏
                        logger.warning(f"üî• HTTP 429 –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è challenge –¥–ª—è {context_name} - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω")
                        return await self._fallback_with_new_domain(session, proxy, cookie, headers, url, context_name)
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è challenge –¥–ª—è {context_name}: HTTP {anubis_response.status}")
                        # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                        return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏")
                    # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                    return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                    
            except Exception as anubis_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge –¥–ª—è {context_name}: {anubis_error}")
                # Fallback: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                return await self._fallback_with_new_proxy(session, proxy, cookie, headers, url, context_name)
                
        except Exception as e:
            error_msg = str(e) if str(e).strip() else f"{type(e).__name__} (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {context_name}: {error_msg}")
            return None
    
    async def _fallback_with_new_domain(self, session, proxy, cookie, headers, url, context_name):
        """Fallback —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º Nitter –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ"""
        try:
            logger.info(f"üåê Fallback: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω Nitter –¥–ª—è {context_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏
            from nitter_domain_rotator import get_next_nitter_domain
            new_domain = get_next_nitter_domain()
            
            if not new_domain:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –¥–ª—è {context_name}")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
            from urllib.parse import urlparse
            parsed_url = urlparse(url)
            new_base_url = format_nitter_url(new_domain)
            new_url = f"{new_base_url}{parsed_url.path}"
            if parsed_url.query:
                new_url += f"?{parsed_url.query}"
            
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º: {new_domain}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–∫—Å–∏ (–ù–ï –º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏!)
            request_kwargs = {}
            if proxy:
                request_kwargs['proxy'] = proxy
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
            await self._apply_global_rate_limit()
            
            # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –° –ù–û–í–´–ú –î–û–ú–ï–ù–û–ú (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π timeout)
            retry_response = await network_retry_wrapper(session, 'get', new_url, 
                                                    headers=headers, timeout=15, **request_kwargs)
            if retry_response.status == 200:
                retry_html = await retry_response.text()
                retry_soup = BeautifulSoup(retry_html, 'html.parser')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                retry_title = retry_soup.find('title')
                has_challenge_text = retry_title and 'Making sure you\'re not a bot!' in retry_title.get_text()
                has_anubis_script = 'id="anubis_challenge"' in retry_html
                
                if has_challenge_text or has_anubis_script:
                    logger.warning(f"ü§ñ –ù–æ–≤—ã–π –¥–æ–º–µ–Ω —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç challenge –¥–ª—è {context_name}, —Ä–µ—à–∞–µ–º...")
                    
                    # –†–µ—à–∞–µ–º challenge —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
                        class SimpleDomainRotator:
                            def get_next_domain(self):
                                return get_next_nitter_domain()
                        
                        domain_rotator = SimpleDomainRotator()
                        anubis_cookies = await handle_anubis_challenge_for_session(session, new_url, retry_html, nitter_domain_rotator=domain_rotator)
                        
                        if anubis_cookies:
                            logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                            updated_cookies = update_cookies_in_string(headers.get('Cookie', ''), anubis_cookies)
                            headers['Cookie'] = updated_cookies
                            
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—à–µ–Ω–Ω—ã–º challenge
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                            await self._apply_global_rate_limit()
                            
                            # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø –§–ò–ù–ê–õ–¨–ù–û–ô –ü–û–ü–´–¢–ö–ò
                            final_response = await network_retry_wrapper(session, 'get', new_url, 
                                                                    headers=headers, timeout=15, **request_kwargs)
                            if final_response.status == 200:
                                final_html = await final_response.text()
                                final_soup = BeautifulSoup(final_html, 'html.parser')
                                
                                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                                final_title = final_soup.find('title')
                                final_has_challenge = final_title and 'Making sure you\'re not a bot!' in final_title.get_text()
                                final_has_anubis = 'id="anubis_challenge"' in final_html
                                
                                if final_has_challenge or final_has_anubis:
                                    logger.error(f"‚ùå Challenge –≤—Å—ë –µ—â—ë –Ω–µ —Ä–µ—à–µ–Ω —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name}")
                                    return None
                                
                                logger.info(f"üéâ {context_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –¥–æ–º–µ–Ω–∞ –∏ —Ä–µ—à–µ–Ω–∏—è challenge")
                                return final_soup
                            elif final_response.status == 429:
                                logger.warning(f"üî• HTTP 429 –¥–∞–∂–µ —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name} - –ø—Ä–æ–±—É–µ–º –µ—â—ë –æ–¥–∏–Ω –¥–æ–º–µ–Ω")
                                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                                return await self._fallback_with_new_domain(session, proxy, cookie, headers, url, context_name)
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name}: HTTP {final_response.status}")
                                return None
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name}")
                            return None
                            
                    except Exception as anubis_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name}: {anubis_error}")
                        return None
                else:
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –¥–æ–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {context_name}")
                    return retry_soup
            elif retry_response.status == 429:
                logger.warning(f"üî• HTTP 429 –¥–∞–∂–µ —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name} - –ø—Ä–æ–±—É–µ–º –µ—â—ë –æ–¥–∏–Ω –¥–æ–º–µ–Ω")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                return await self._fallback_with_new_domain(session, proxy, cookie, headers, url, context_name)
            else:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º –¥–æ–º–µ–Ω–æ–º –¥–ª—è {context_name}: HTTP {retry_response.status}")
                return None
                
        except Exception as e:
            error_msg = str(e) if str(e).strip() else f"{type(e).__name__} (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –¥–æ–º–µ–Ω–∞ –¥–ª—è {context_name}: {error_msg}")
            return None
    
    async def _fallback_with_new_proxy(self, session, old_proxy, old_cookie, headers, url, context_name):
        """Fallback —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ challenge –Ω–µ —Ä–µ—à–∏–ª—Å—è"""
        try:
            logger.info(f"üîÑ Fallback: –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            from dynamic_cookie_rotation import mark_proxy_temp_blocked
            mark_proxy_temp_blocked(old_proxy, old_cookie)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏ cookie
            new_proxy, new_cookie = await get_next_proxy_cookie_async(session)
            
            if new_proxy != old_proxy or new_cookie != old_cookie:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º cookie
                headers['Cookie'] = new_cookie
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                request_kwargs = {}
                if new_proxy:
                    request_kwargs['proxy'] = new_proxy
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                await self._apply_global_rate_limit()
                
                # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø FALLBACK
                retry_response = await network_retry_wrapper(session, 'get', url, 
                                                        headers=headers, timeout=15, **request_kwargs)
                    
                if retry_response.status == 200:
                    retry_html = await retry_response.text()
                    retry_soup = BeautifulSoup(retry_html, 'html.parser')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    retry_title = retry_soup.find('title')
                    has_challenge_text = retry_title and 'Making sure you\'re not a bot!' in retry_title.get_text()
                    has_anubis_script = 'id="anubis_challenge"' in retry_html
                    
                    if has_challenge_text or has_anubis_script:
                        logger.warning(f"ü§ñ –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç challenge –¥–ª—è {context_name}, —Ä–µ—à–∞–µ–º...")
                        
                        # –†–µ—à–∞–µ–º challenge —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                        try:
                            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
                            class SimpleDomainRotator:
                                def get_next_domain(self):
                                    return get_next_nitter_domain()
                            
                            domain_rotator = SimpleDomainRotator()
                            anubis_cookies = await handle_anubis_challenge_for_session(session, url, retry_html, nitter_domain_rotator=domain_rotator)
                            
                            if anubis_cookies:
                                logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                                updated_cookies = update_cookies_in_string(headers.get('Cookie', ''), anubis_cookies)
                                headers['Cookie'] = updated_cookies
                                
                                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—à–µ–Ω–Ω—ã–º challenge
                                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                                await self._apply_global_rate_limit()
                                
                                # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø –§–ò–ù–ê–õ–¨–ù–û–ô –ü–û–ü–´–¢–ö–ò
                                final_response = await network_retry_wrapper(session, 'get', url, 
                                                                        headers=headers, timeout=15, **request_kwargs)
                                    
                                if final_response.status == 200:
                                    final_html = await final_response.text()
                                    final_soup = BeautifulSoup(final_html, 'html.parser')
                                    
                                    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                                    final_title = final_soup.find('title')
                                    final_has_challenge = final_title and 'Making sure you\'re not a bot!' in final_title.get_text()
                                    final_has_anubis = 'id="anubis_challenge"' in final_html
                                    
                                    if final_has_challenge or final_has_anubis:
                                        logger.error(f"‚ùå Challenge –≤—Å—ë –µ—â—ë –Ω–µ —Ä–µ—à–µ–Ω –¥–ª—è {context_name}")
                                        return None
                                    
                                    logger.info(f"üéâ {context_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ fallback —Ä–µ—à–µ–Ω–∏—è challenge")
                                    return final_soup
                                else:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {context_name}: HTTP {final_response.status}")
                                    return None
                            else:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                                return None
                                
                        except Exception as anubis_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}: {anubis_error}")
                            return None
                    else:
                        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {context_name}")
                        return retry_soup
                else:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}: HTTP {retry_response.status}")
                    return None
            else:
                logger.warning(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è {context_name}")
                return None
                
        except Exception as e:
            error_msg = str(e) if str(e).strip() else f"{type(e).__name__} (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –¥–ª—è {context_name}: {error_msg}")
            return None

    async def cleanup_groups_with_contracts(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ, –≥–¥–µ –≥–ª–∞–≤–Ω—ã–π Twitter —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã"""
        results = {}
        groups_to_delete = []
        
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
            
            for group_key, group in self.groups.items():
                if group.main_twitter:
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É {group.symbol} (@{group.main_twitter})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º Twitter
                    has_contracts = await self._check_contracts_in_twitter(group.main_twitter)
                    
                    if has_contracts:
                        logger.warning(f"üö´ –ì—Ä—É–ø–ø–∞ {group.symbol} –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ @{group.main_twitter}")
                        groups_to_delete.append(group_key)
                        results[group.symbol] = True
                    else:
                        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group.symbol} —á–∏—Å—Ç–∞—è: –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ @{group.main_twitter}")
                        results[group.symbol] = False
                else:
                    logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.symbol} –±–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ Twitter - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    results[group.symbol] = False
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
            for group_key in groups_to_delete:
                group = self.groups[group_key]
                logger.warning(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É {group.symbol} —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏...")
                await self.delete_group(group_key)
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups_to_delete)}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥—Ä—É–ø–ø: {e}")
            return results

    async def restore_groups_from_sheets_and_update_messages(self) -> Dict[str, bool]:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—ã –∏–∑ Google Sheets –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏–∑ Google Sheets...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            from google_sheets_manager import sheets_manager
            if not sheets_manager:
                logger.error("‚ùå Google Sheets manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
            
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –∫—ç—à
            logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫—ç—à...")
            loaded_sheets = sheets_manager.load_all_duplicate_sheets()
            
            if not loaded_sheets:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                return {}
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_sheets)} —Ç–∞–±–ª–∏—Ü –≤ –∫—ç—à")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            existing_sheets = sheets_manager.spreadsheets
            if not existing_sheets:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                return {}
            
            results = {}
            
            for group_key, spreadsheet in existing_sheets.items():
                try:
                    logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É {group_key}...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    worksheet = spreadsheet.sheet1
                    all_data = worksheet.get_all_values()
                    
                    if len(all_data) <= 1:
                        logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {group_key} –ø—É—Å—Ç–∞")
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    tokens = []
                    symbol = None
                    name = None
                    main_twitter = None
                    
                    for row in all_data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        if len(row) >= 4:
                            if not symbol:
                                symbol = row[0]  # –°–∏–º–≤–æ–ª
                            if not name:
                                name = row[1]  # –ù–∞–∑–≤–∞–Ω–∏–µ
                            
                            # –ò—â–µ–º –≥–ª–∞–≤–Ω—ã–π Twitter (—Å—Ç–∞—Ç—É—Å "üéØ –ì–õ–ê–í–ù–´–ô")
                            if len(row) >= 8 and row[7] == "üéØ –ì–õ–ê–í–ù–´–ô":
                                twitter_cell = row[2]
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç
                                if twitter_cell and twitter_cell.startswith('@'):
                                    main_twitter = twitter_cell[1:]  # –£–±–∏—Ä–∞–µ–º @
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
                            token_data = {
                                'symbol': row[0],
                                'name': row[1],
                                'id': row[3],  # –ö–æ–Ω—Ç—Ä–∞–∫—Ç
                                'twitter': row[2] if len(row) > 2 else None,
                                'firstPool': {
                                    'createdAt': row[4] if len(row) > 4 else None
                                }
                            }
                            tokens.append(token_data)
                    
                    if not tokens or not symbol:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                    group = self.GroupData(group_key, symbol, name or symbol)
                    group.tokens = tokens
                    group.main_twitter = main_twitter
                    group.sheet_url = spreadsheet.url
                    group.latest_added_token = tokens[-1] if tokens else None
                    
                    # –ò—â–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å –µ—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π Twitter
                    if main_twitter:
                        oldest_mention = await self._find_oldest_announcement(main_twitter, symbol)
                        group.official_announcement = oldest_mention
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
                    self.groups[group_key] = group
                    
                    logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_key} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤, –≥–ª–∞–≤–Ω—ã–π Twitter: @{main_twitter or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'})")
                    results[group_key] = True
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_key}: {e}")
                    results[group_key] = False
            
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(results)} –≥—Ä—É–ø–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
            return {}

    async def update_existing_messages_with_buttons(self, chat_id: int, thread_id: int = None) -> Dict[str, bool]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ Google Sheets"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
            restored_groups = await self.restore_groups_from_sheets_and_update_messages()
            if not restored_groups:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return {}
            
            results = {}
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            for group_key, group in self.groups.items():
                try:
                    if not group.sheet_url:
                        logger.warning(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group_key} –Ω–µ –∏–º–µ–µ—Ç URL —Ç–∞–±–ª–∏—Ü—ã")
                        continue
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
                    logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}...")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    group.message_id = await self._send_group_message(group)
                    
                    if group.message_id:
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol} —Å –∫–Ω–æ–ø–∫–æ–π Google Sheets")
                        results[group_key] = True
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.symbol}")
                        results[group_key] = False
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}: {e}")
                    results[group_key] = False
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(results)} –≥—Ä—É–ø–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}

    async def _get_twitter_profile_info(self, twitter_account: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Twitter –ø—Ä–æ—Ñ–∏–ª–µ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 20  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ–ø—ã—Ç–æ–∫
        attempt = 0
        
        while attempt < max_attempts:
            try:
                attempt += 1
                logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å @{twitter_account}")
                
                # üîÑ –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ü–ê–†–°–ï–† –î–õ–Ø –ö–ê–ñ–î–û–ô –ü–û–ü–´–¢–ö–ò (—Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏!)
                async with TwitterProfileParser() as parser:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    result = await parser.get_profile_with_replies_multi_page(twitter_account, max_pages=1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
                    if result and len(result) == 3:
                        profile_data, all_tweets, tweets_with_contracts = result
                    elif result and len(result) == 2:
                        profile_data, all_tweets = result
                        tweets_with_contracts = []
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è @{twitter_account}: {result}")
                        profile_data = None
                    
                    if profile_data and profile_data.get('followers_count') is not None:
                        logger.info(f"‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}: {profile_data.get('followers_count', 0)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                        return profile_data
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}")
                        
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            if attempt < max_attempts:
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 5, 10, 20, 40, 60, 60, 60...
                delay = min(60, 5 * (2 ** (attempt - 1)))
                logger.info(f"‚è≥ –ñ–¥–µ–º {delay}—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1} (–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏)...")
                await asyncio.sleep(delay)
        
        logger.error(f"üíÄ –í–°–ï {max_attempts} –ü–û–ü–´–¢–û–ö –ò–°–ß–ï–†–ü–ê–ù–´ –¥–ª—è @{twitter_account}! –í–æ–∑–≤—Ä–∞—â–∞–µ–º None")
        return None

    def _format_number(self, number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (1.2K, 15M –∏ —Ç.–¥.)"""
        if number >= 1_000_000:
            return f"{number / 1_000_000:.1f}M"
        elif number >= 1_000:
            return f"{number / 1_000:.1f}K"
        else:
            return str(number)

    async def _format_twitter_profile_info(self, twitter_account: str, is_main: bool = False) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Twitter –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
        try:
            profile_info = await self._get_twitter_profile_info(twitter_account)
            
            if not profile_info:
                logger.warning(f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ @{twitter_account} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return None
            
            if is_main:
                # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                display_name = profile_info.get('display_name', twitter_account)
                bio = profile_info.get('bio', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                join_date = profile_info.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                is_verified = profile_info.get('is_verified', False)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                tweets = self._format_number(profile_info.get('tweets_count', 0))
                followers = self._format_number(profile_info.get('followers_count', 0))
                following = self._format_number(profile_info.get('following_count', 0))
                likes = self._format_number(profile_info.get('likes_count', 0))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                verified_badge = "‚úÖ" if is_verified else ""
                
                info = f"üê¶ <b>–ì–õ–ê–í–ù–´–ô TWITTER:</b> <code>{twitter_account}</code> {verified_badge}\n"
                info += f"üìã <b>–ò–º—è:</b> {display_name}\n"
                
                if bio and bio != '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è':
                    # Bio –≤ –≤–∏–¥–µ —Ü–∏—Ç–∞—Ç—ã, –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    bio_short = bio[:200] + "..." if len(bio) > 200 else bio
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ bio
                    import html
                    bio_short = html.escape(bio_short)
                    info += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{bio_short}</blockquote>\n"
                
                info += f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {join_date}\n"
                info += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {tweets} —Ç–≤–∏—Ç–æ–≤ ‚Ä¢ {followers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Ä¢ {following} –ø–æ–¥–ø–∏—Å–æ–∫ ‚Ä¢ {likes} –ª–∞–π–∫–æ–≤\n"
                
                return info
            else:
                # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                display_name = profile_info.get('display_name', twitter_account)
                followers = self._format_number(profile_info.get('followers_count', 0))
                is_verified = profile_info.get('is_verified', False)
                
                verified_badge = "‚úÖ" if is_verified else ""
                return f"@{twitter_account} {verified_badge} ({display_name}, {followers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è @{twitter_account}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
# –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
_duplicate_groups_manager = None

def get_duplicate_groups_manager():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤"""
    global _duplicate_groups_manager
    return _duplicate_groups_manager

def initialize_duplicate_groups_manager(telegram_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤"""
    global _duplicate_groups_manager
    _duplicate_groups_manager = DuplicateGroupsManager(telegram_token)
    logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def shutdown_duplicate_groups_manager():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤"""
    global _duplicate_groups_manager
    if _duplicate_groups_manager:
        _duplicate_groups_manager.stop()
        _duplicate_groups_manager = None
        logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —É–¥–∞–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_duplicate_groups_manager() 