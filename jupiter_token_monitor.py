#!/usr/bin/env python3
"""
Jupiter Token Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter WebSocket
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Padre WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏ —Ö–æ–ª–¥–µ—Ä–∞—Ö
"""

import asyncio
import json
import logging
import websockets
import ssl
import threading
from typing import Dict, Optional, Any
from dataclasses import dataclass
from token_behavior_monitor import TokenBehaviorMonitor
from padre_websocket_client import ImprovedPadreClient, BundlerDataExtractor, PadreMessageDecoder
import base64
from datetime import datetime
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('token_behavior_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

@dataclass
class TokenBundlerData:
    """–î–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö —Ç–æ–∫–µ–Ω–∞"""
    mint_address: str
    symbol: str
    bundler_count: int = 0
    total_holders: int = 0
    bundler_percentage: float = 0.0
    market_cap: Optional[float] = None
    price: Optional[float] = None
    volume: Optional[float] = None
    trade_count: Optional[int] = None
    suspicious_patterns: list = None
    
    def __post_init__(self):
        if self.suspicious_patterns is None:
            self.suspicious_patterns = []

class PadreTokenDataCollector:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö —á–µ—Ä–µ–∑ Padre WebSocket"""
    
    def __init__(self):
        self.padre_client = None
        self.message_decoder = PadreMessageDecoder()
        self.bundler_extractor = BundlerDataExtractor()
        self.pending_tokens = {}  # mint -> TokenBundlerData
        self.data_callbacks = []  # callbacks –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.running = False
        
    def add_data_callback(self, callback):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö"""
        self.data_callbacks.append(callback)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Padre WebSocket –∫–ª–∏–µ–Ω—Ç"""
        try:
            self.running = True
            self.padre_client = ImprovedPadreClient()
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–¥–ª–µ—Ä–æ–≤
            self.padre_client.process_bundler_data = self._process_padre_bundler_data
            
            logger.info("üîó –ó–∞–ø—É—Å–∫–∞–µ–º Padre WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            await self.padre_client.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Padre –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç"""
        self.running = False
        if self.padre_client:
            await self.padre_client.stop()
            
    async def request_token_data(self, mint_address: str, symbol: str):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ —á–µ—Ä–µ–∑ Padre"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            token_data = TokenBundlerData(
                mint_address=mint_address,
                symbol=symbol
            )
            self.pending_tokens[mint_address] = token_data
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Padre WebSocket
            await self._send_token_request(mint_address)
            
            logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol} ({mint_address[:8]}...)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ {symbol}: {e}")
            
    async def _send_token_request(self, mint_address: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Padre WebSocket"""
        try:
            if not self.padre_client or not self.padre_client.websocket:
                logger.warning("‚ö†Ô∏è Padre WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            # –§–æ—Ä–º–∞—Ç URL –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Ç–æ–º—É —á—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            request_url = f"/trade/solana/{mint_address}"
            encoded_request = base64.b64encode(request_url.encode()).decode()
            
            await self.padre_client.websocket.send(encoded_request.encode())
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {mint_address[:8]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {mint_address}: {e}")
            
    async def _process_padre_bundler_data(self, bundler_info: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –æ—Ç Padre"""
        try:
            contract_address = bundler_info.get('contract_address')
            if not contract_address:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
            if contract_address not in self.pending_tokens:
                # –í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ {contract_address[:8]}...")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            token_data = self.pending_tokens[contract_address]
            token_data.bundler_count = bundler_info.get('bundler_count', 0)
            token_data.market_cap = bundler_info.get('market_cap')
            token_data.price = bundler_info.get('price')
            token_data.volume = bundler_info.get('volume')
            token_data.trade_count = bundler_info.get('trade_count')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
            if token_data.bundler_count > 0:
                token_data.bundler_percentage = self.bundler_extractor.calculate_bundler_percentage(
                    token_data.bundler_count,
                    token_data.total_holders
                )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            await self._analyze_suspicious_patterns(token_data)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {token_data.symbol}: "
                       f"ü§ñ –ë–∞–Ω–¥–ª–µ—Ä—ã: {token_data.bundler_count} ({token_data.bundler_percentage:.1f}%)")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.data_callbacks:
                try:
                    await callback(token_data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            del self.pending_tokens[contract_address]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {e}")
            
    async def _analyze_suspicious_patterns(self, token_data: TokenBundlerData):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        try:
            patterns = []
            
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
            if token_data.bundler_percentage >= 20.0:
                patterns.append(f"ü§ñ –í—ã—Å–æ–∫–∏–π % –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {token_data.bundler_percentage:.1f}%")
                
            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
            if (token_data.trade_count and token_data.bundler_count and 
                token_data.trade_count < token_data.bundler_count * 2):
                patterns.append("üìâ –ú–∞–ª–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ –º–Ω–æ–≥–∏—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö")
                
            # –°—Ç—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            if (token_data.volume and token_data.market_cap and 
                token_data.volume > token_data.market_cap * 5):
                patterns.append("üí∞ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º")
                
            token_data.suspicious_patterns = patterns
            
            if patterns:
                logger.warning(f"üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –≤ {token_data.symbol}!")
                for pattern in patterns:
                    logger.warning(f"   {pattern}")
                logger.warning("üéØ –í–æ–∑–º–æ–∂–Ω–æ volume bot marketing!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

class JupiterTokenMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter WebSocket —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Padre"""
    
    def __init__(self):
        self.active_monitors = {}  # mint -> task
        self.monitor_instances = {}  # mint -> TokenBehaviorMonitor
        self.successful_monitors = 0
        self.failed_monitors = 0
        self.processed_tokens = 0
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Padre –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö
        self.padre_collector = PadreTokenDataCollector()
        self.padre_collector.add_data_callback(self._handle_padre_token_data)
        
    async def start_padre_collector(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Padre WebSocket –∫–ª–∏–µ–Ω—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Padre –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            padre_task = asyncio.create_task(self.padre_collector.start())
            logger.info("üîó Padre WebSocket –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await asyncio.sleep(3)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Padre –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    async def _handle_padre_token_data(self, token_data: TokenBundlerData):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –æ—Ç Padre"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç Padre –¥–ª—è {token_data.symbol}:")
            logger.info(f"   ü§ñ –ë–∞–Ω–¥–ª–µ—Ä—ã: {token_data.bundler_count} ({token_data.bundler_percentage:.1f}%)")
            
            if token_data.market_cap:
                logger.info(f"   üí∞ Market Cap: ${token_data.market_cap:,.0f}")
            if token_data.volume:
                logger.info(f"   üìà Volume: ${token_data.volume:,.0f}")
            if token_data.trade_count:
                logger.info(f"   üîÑ Trades: {token_data.trade_count}")
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if token_data.suspicious_patterns:
                await self._send_bundler_alert(token_data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Padre: {e}")
    
    async def _send_bundler_alert(self, token_data: TokenBundlerData):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            alert_message = f"üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –¢–û–ö–ï–ù: {token_data.symbol}\n"
            alert_message += f"üìç Mint: {token_data.mint_address}\n"
            alert_message += f"ü§ñ –ë–∞–Ω–¥–ª–µ—Ä—ã: {token_data.bundler_count} ({token_data.bundler_percentage:.1f}%)\n"
            
            if token_data.market_cap:
                alert_message += f"üí∞ Market Cap: ${token_data.market_cap:,.0f}\n"
            
            alert_message += "‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
            for pattern in token_data.suspicious_patterns:
                alert_message += f"   ‚Ä¢ {pattern}\n"
            
            alert_message += "\nüéØ –í–æ–∑–º–æ–∂–Ω–æ volume bot marketing!"
            
            logger.warning(alert_message)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
            # await send_telegram_alert(alert_message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def start_token_monitoring(self, mint: str, symbol: str, name: str = ""):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Padre WebSocket"""
        try:
            if mint in self.active_monitors:
                logger.debug(f"üîÑ –¢–æ–∫–µ–Ω {symbol} —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è")
                return True
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Padre
            await self.padre_collector.request_token_data(mint, symbol)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            task = asyncio.create_task(self._monitor_token_padre(mint, symbol, name))
            self.active_monitors[mint] = task
            
            logger.info(f"üéØ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ {symbol} —á–µ—Ä–µ–∑ Padre")
            self.processed_tokens += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {symbol}: {str(e)}")
            self.failed_monitors += 1
            return False
    
    async def _monitor_token_padre(self, mint: str, symbol: str, name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ç–æ–∫–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥, –æ–∂–∏–¥–∞—è –¥–∞–Ω–Ω—ã–µ –æ—Ç Padre"""
        try:
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Padre
            await asyncio.sleep(30)
            
            logger.info(f"üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥")
            self.successful_monitors += 1
            
        except asyncio.CancelledError:
            logger.debug(f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –æ—Ç–º–µ–Ω–µ–Ω")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {symbol}: {str(e)}")
            self.failed_monitors += 1
        finally:
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            if mint in self.active_monitors:
                del self.active_monitors[mint]
    
    async def stop_token_monitoring(self, mint: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if mint not in self.active_monitors:
                logger.debug(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {mint[:8]}... –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è")
                return False
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            task = self.active_monitors[mint]
            task.cancel()
            
            try:
                await task
            except asyncio.CancelledError:
                pass
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del self.active_monitors[mint]
            if mint in self.monitor_instances:
                del self.monitor_instances[mint]
            
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ {mint[:8]}...")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {mint[:8]}...: {str(e)}")
            return False
    
    def get_monitoring_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'active_monitors': len(self.active_monitors),
            'total_processed': self.processed_tokens,
            'successful': self.successful_monitors,
            'failed': self.failed_monitors,
            'padre_pending': len(self.padre_collector.pending_tokens) if self.padre_collector else 0
        }
    
    async def handle_new_jupiter_token(self, token_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç Jupiter"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            mint = token_data.get('mint') or token_data.get('id')
            base_asset = token_data.get('baseAsset', {})
            
            if not mint:
                logger.debug("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–µ–∑ mint –∞–¥—Ä–µ—Å–∞")
                return
            
            symbol = base_asset.get('symbol', 'UNK')
            name = base_asset.get('name', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            if not await self._should_monitor_token(token_data):
                logger.info(f"üö´ –¢–æ–∫–µ–Ω {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Padre
            await self.start_token_monitoring(mint, symbol, name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    async def _should_monitor_token(self, token_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è"""
        try:
            base_asset = token_data.get('baseAsset', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Twitter
            twitter = base_asset.get('twitter')
            if not twitter or '/status/' in twitter:
                logger.debug(f"üö´ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ Twitter")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Market Cap (–µ—Å–ª–∏ –µ—Å—Ç—å)
            market_cap = base_asset.get('marketCap', 0)
            if market_cap > 1000000:  # –ë–æ–ª—å—à–µ $1M - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É—Å—Ç–æ—è–≤—à–∏–π—Å—è —Ç–æ–∫–µ–Ω
                logger.debug(f"üö´ Market Cap —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π: ${market_cap:,.0f}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–∏–º–≤–æ–ª–∞
            symbol = base_asset.get('symbol', '')
            if len(symbol) > 20:
                logger.debug(f"üö´ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    async def handle_message(self, message: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Jupiter WebSocket"""
        try:
            data = json.loads(message)
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            pools = data.get('pools', [])
            
            for pool_data in pools:
                pool_type = pool_data.get('poolType', '')
                
                # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ pump.fun, letsbonk.fun –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—É–ª–∞—Ö
                if any(pt in pool_type.lower() for pt in ['pump', 'bonk', 'flux']):
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                    base_asset = pool_data.get('baseAsset', {})
                    symbol = base_asset.get('symbol', 'UNK')
                    name = base_asset.get('name', 'Unknown')
                    mint = pool_data.get('mint') or pool_data.get('id')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–ª–∞
                    if 'pumpfun' in pool_type.lower():
                        pool_source = "pump.fun" if pool_type == "pumpfun" else "swap.pump.fun"
                    elif 'bonk' in pool_type.lower():
                        pool_source = "letsbonk.fun"
                    elif 'flux' in pool_type.lower():
                        pool_source = "FluxBeam"
                    else:
                        pool_source = pool_type
                    
                    logger.info(f"üöÄ –ù–û–í–´–ô –¢–û–ö–ï–ù: {name} ({symbol}) —á–µ—Ä–µ–∑ {pool_source}")
                    logger.info(f"   üìä Mint: {mint}")
                    logger.info(f"   üè∑Ô∏è –¢–∏–ø –ø—É–ª–∞: {pool_type}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
                    await self.handle_new_jupiter_token(pool_data)
                    
        except json.JSONDecodeError:
            logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
            for mint in list(self.active_monitors.keys()):
                await self.stop_token_monitoring(mint)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Padre –∫–ª–∏–µ–Ω—Ç
            if self.padre_collector:
                await self.padre_collector.stop()
                
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
        jupiter_monitor = JupiterTokenMonitor()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Padre WebSocket –∫–ª–∏–µ–Ω—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        await jupiter_monitor.start_padre_collector()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        last_stats_time = asyncio.get_event_loop().time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Cookie': 'cf_clearance=example_clearance_token'
        }
        
        retry_count = 0
        max_retries = 5
        
        while retry_count < max_retries:
            try:
                logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Jupiter WebSocket (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})...")
                
                async with websockets.connect(
                    "wss://trench-stream.jup.ag/ws",
                    ssl=ssl_context,
                    extra_headers=headers,
                    ping_interval=30,
                    ping_timeout=10
                ) as websocket:
                    
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Jupiter!")
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                    subscribe_recent = json.dumps({"method": "subscribe", "params": ["recent"]})
                    await websocket.send(subscribe_recent)
                    logger.info("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ recent —Å–æ–±—ã—Ç–∏—è")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—É–ª—ã
                    subscribe_pools = json.dumps({
                        "method": "subscribe", 
                        "params": ["pool:HZ1znC9XBasm9AMDhGocd9EHSyH8Pyj1EUdiPb4WnZjo"]
                    })
                    await websocket.send(subscribe_pools)
                    logger.info("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ pool —Å–æ–±—ã—Ç–∏—è")
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                    while True:
                        try:
                            message = await asyncio.wait_for(websocket.recv(), timeout=30)
                            await jupiter_monitor.handle_message(message)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                            current_time = asyncio.get_event_loop().time()
                            if current_time - last_stats_time >= 60:
                                stats = jupiter_monitor.get_monitoring_stats()
                                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {stats['active_monitors']}, "
                                          f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}, "
                                          f"–£—Å–ø–µ—à–Ω–æ: {stats['successful']}, "
                                          f"–û—à–∏–±–æ–∫: {stats['failed']}, "
                                          f"–û–∂–∏–¥–∞—é—Ç Padre: {stats['padre_pending']}")
                                last_stats_time = current_time
                                
                        except asyncio.TimeoutError:
                            logger.debug("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
                            continue
                        except websockets.exceptions.ConnectionClosed:
                            logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                            break
                            
            except Exception as e:
                retry_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}): {e}")
                
                if retry_count < max_retries:
                    wait_time = min(2 ** retry_count, 60)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.info(f"‚è±Ô∏è –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
                    
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'jupiter_monitor' in locals():
            await jupiter_monitor.cleanup()

if __name__ == "__main__":
    asyncio.run(main()) 