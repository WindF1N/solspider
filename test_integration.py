#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Axiom —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π SolSpider
"""

import asyncio
import logging
from pump_bot import execute_automatic_purchase

async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s: %(message)s',
        datefmt='%H:%M:%S'
    )
    
    logger = logging.getLogger(__name__)
    
    logger.info("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AXIOM –¢–†–ï–ô–î–ï–†–ê")
    logger.info("="*50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_contract = "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"  # BONK
    test_username = "MoriCoinCrypto"
    test_tweet = "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω BONK! üöÄ"
    
    logger.info(f"üìç –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {test_contract}")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{test_username}")
    logger.info(f"üì± –¢–≤–∏—Ç: {test_tweet}")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏
        result = await execute_automatic_purchase(
            contract_address=test_contract,
            twitter_username=test_username,
            tweet_text=test_tweet
        )
        
        logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
        logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
        
        if result['success']:
            logger.info(f"   üí∞ –°—É–º–º–∞: ${result.get('amount_usd', 0)}")
            logger.info(f"   ü™ô SOL: {result.get('sol_amount', 0):.6f}")
            logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {result.get('response', {}).get('status', 'N/A')}")
        else:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        logger.info("\n" + "="*50)
        logger.info("üìä –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
        return result['success']
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AXIOM –¢–†–ï–ô–î–ï–†–ê –° SOLSPIDER")
    print("="*55)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!")
    print("üí∞ –°—É–º–º–∞: ~$1062.5 (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è @MoriCoinCrypto)")
    print("ü™ô –¢–æ–∫–µ–Ω: BONK (—Ç–µ—Å—Ç–æ–≤—ã–π)")
    print("‚ö° –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Axiom.trade")
    print("="*55)
    
    confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏? (yes/no): ").lower().strip()
    
    if confirm in ['yes', 'y', '–¥–∞', '–¥']:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n")
        
        success = asyncio.run(test_integration())
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print("üéâ Axiom —Ç—Ä–µ–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SolSpider!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º") 