#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–≥–æ–≤
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_full_address_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')][:5]
    
    print(f"üîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ù–û–ì–û –ê–î–†–ï–°–ê –¢–û–ö–ï–ù–ê")
    print(f"="*70)
    
    for i, log_file in enumerate(log_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        short_id = log_file.replace('.log', '')
        
        print(f"{i}. –§–ê–ô–õ: {log_file}")
        print(f"   –ö–æ—Ä–æ—Ç–∫–∏–π ID: {short_id}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
        full_address = None
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞
                    if '/tokenAddress/' in line:
                        import re
                        match = re.search(r'/tokenAddress/([A-Za-z0-9]{32,})', line)
                        if match:
                            full_address = match.group(1)
                            print(f"   ‚úÖ –ü–û–õ–ù–´–ô –ê–î–†–ï–°: {full_address}")
                            print(f"   üìç –ù–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
                            break
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
                    elif "'tokenAddress':" in line:
                        match = re.search(r"'tokenAddress':\s*'([A-Za-z0-9]{32,})'", line)
                        if match:
                            full_address = match.group(1)
                            print(f"   ‚úÖ –ü–û–õ–ù–´–ô –ê–î–†–ï–°: {full_address}")
                            print(f"   üìç –ù–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {line_num} (alt)")
                            break
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–µ—Ä–≤—ã–º–∏ 100 —Å—Ç—Ä–æ–∫–∞–º–∏
                    if line_num > 100:
                        break
                        
            if not full_address:
                print(f"   ‚ùå –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ù–ï –ù–ê–ô–î–ï–ù")
                
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    print("="*70)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("üìä –¢–µ–ø–µ—Ä—å –≤ –ª–æ–≥–∞—Ö –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    print("üîç –§–æ—Ä–º–∞—Ç: TOKEN: 2Bi9HXbaJWaJxiWY3ZzrLTcyp4QqKcBugR5DaexLzhwx")

if __name__ == "__main__":
    asyncio.run(test_full_address_extraction())