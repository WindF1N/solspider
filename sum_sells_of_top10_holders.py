import os
import glob
import re
from collections import defaultdict

def analyze_top10_changes_before_telegram(log_dir="tokens_logs_0"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–û–ü-10 —Å–ª–∏–≤–æ–≤ —Ç–æ–ª—å–∫–æ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    –£–º–µ–Ω—å—à–µ–Ω–∏—è = –ø—Ä–æ–¥–∞–∂–∏, –£–≤–µ–ª–∏—á–µ–Ω–∏—è = –ø–æ–∫—É–ø–∫–∏
    –°—á–∏—Ç–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏
    """
    results = []
    
    # –ò—â–µ–º –≤—Å–µ .log —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    log_files = glob.glob(os.path.join(log_dir, "*.log"))
    
    for file_path in log_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            telegram_line_index = None
            for i, line in enumerate(lines):
                if 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram:' in line:
                    telegram_line_index = i
                    break

            if telegram_line_index == None:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É no_sent –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                no_sent_dir = os.path.join(log_dir, "no_sent")
                os.makedirs(no_sent_dir, exist_ok=True)
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ no_sent
                new_path = os.path.join(no_sent_dir, os.path.basename(file_path))
                os.rename(file_path, new_path)
                print(f"–§–∞–π–ª {os.path.basename(file_path)} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ no_sent")
                continue
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¢–û–ü-10 –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            top10_records = []
            first_sale_found = False
            first_sale_line_index = None
            
            for i, line in enumerate(lines):
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if telegram_line_index is not None and i >= telegram_line_index:
                    break
                
                # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¢–û–ü-10
                top10_match = re.search(r'üèÜ –¢–û–ü-10: ([\d\.]+)%', line)
                if top10_match:
                    top10_value = float(top10_match.group(1))
                    top10_records.append({
                        'line_index': i,
                        'value': top10_value,
                        'is_sale': False,
                        'is_purchase': False,
                        'is_after_first_sale': False
                    })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¢–û–ü-10
            changes = []
            purchases_after_first_sale = 0
            purchases_after_sale_list = []
            
            if len(top10_records) >= 2:
                is_sold = False
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                for i in range(1, len(top10_records)):
                    prev_value = top10_records[i-1]['value']
                    curr_value = top10_records[i]['value']
                    
                    if curr_value < prev_value:
                        # –£–ú–ï–ù–¨–®–ï–ù–ò–ï - –ø—Ä–æ–¥–∞–∂–∞
                        change_amount = prev_value - curr_value
                        change = {
                            'line_index': top10_records[i]['line_index'],
                            'from': prev_value,
                            'to': curr_value,
                            'amount': change_amount,
                            'type': 'sale',
                            'is_after_first_sale': False
                        }
                        changes.append(change)
                        top10_records[i]['is_sale'] = True
                        is_sold = True

                    elif curr_value > prev_value and is_sold:
                        # –£–í–ï–õ–ò–ß–ï–ù–ò–ï - –ø–æ–∫—É–ø–∫–∞
                        change_amount = curr_value - prev_value
                        change = {
                            'line_index': top10_records[i]['line_index'],
                            'from': prev_value,
                            'to': curr_value,
                            'amount': change_amount,
                            'type': 'purchase',
                            'is_after_first_sale': False
                        }
                        changes.append(change)
                        top10_records[i]['is_purchase'] = True
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–¥–∞–∂—É
            first_sale_change = None
            for change in changes:
                if change['type'] == 'sale':
                    first_sale_change = change
                    break
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏
            if first_sale_change:
                first_sale_line_index = first_sale_change['line_index']
                for change in changes:
                    if (change['type'] == 'purchase' and 
                        change['line_index'] > first_sale_line_index):
                        change['is_after_first_sale'] = True
                        purchases_after_first_sale += 1
                        purchases_after_sale_list.append(change)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            decreases = [c for c in changes if c['type'] == 'sale']
            increases = [c for c in changes if c['type'] == 'purchase']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
            decrease_values = [f"{c['from']}%‚Üí{c['to']}% (Œî-{c['amount']:.1f}%)" for c in decreases]
            increase_values = [f"{c['from']}%‚Üí{c['to']}% (Œî+{c['amount']:.1f}%)" for c in increases]
            purchases_after_sale_values = [f"{c['from']}%‚Üí{c['to']}% (Œî+{c['amount']:.1f}%)" for c in purchases_after_sale_list]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'file': os.path.basename(file_path),
                'total_top10_records': len(top10_records),
                'total_changes': len(changes),
                'decreases_count': len(decreases),
                'increases_count': len(increases),
                'decreases_list': ', '.join(decrease_values),
                'increases_list': ', '.join(increase_values),
                'purchases_after_sale_list': ', '.join(purchases_after_sale_values),
                'first_value': top10_records[0]['value'] if top10_records else 0,
                'last_value': top10_records[-1]['value'] if top10_records else 0,
                'max_value': max(r['value'] for r in top10_records) if top10_records else 0,
                'min_value': min(r['value'] for r in top10_records) if top10_records else 0,
                'total_decrease_amount': sum(c['amount'] for c in decreases),
                'total_increase_amount': sum(c['amount'] for c in increases),
                'has_telegram_send': telegram_line_index is not None,
                'has_sales': len(decreases) > 0,
                'first_sale_line_index': first_sale_line_index,
                'purchases_after_first_sale': purchases_after_first_sale,
                'total_purchases': len(increases)
            }
            
            results.append(result)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
    
    return results

def is_rag_file(analysis_result):
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–≥–æ–≤
    """
    # 1. –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞ –∫ –∫–æ–Ω—Ü—É (>30% –æ—Ç –ø–∏–∫–∞)
    if analysis_result['last_value'] < analysis_result['max_value'] * 0.7:
        return True
    
    # 2. –û—á–µ–Ω—å –º–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –ø—Ä–æ–¥–∞–∂ (>30)
    if analysis_result['decreases_count'] > 30:
        return True
    
    # 3. –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ > —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∫—É–ø–∫–∏
    avg_sale = analysis_result['total_decrease_amount'] / analysis_result['decreases_count']
    avg_purchase = analysis_result['total_increase_amount'] / analysis_result['increases_count']
    if avg_sale > avg_purchase * 1.2:
        return True
    
    # 4. –ù–∏–∑–∫–æ–µ –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º—É–º–∞
    if analysis_result['last_value'] < 25 and analysis_result['max_value'] > 35:
        return True
    
    return False

def save_analysis_to_file(results, output_file="result_analysis_before_telegram.txt"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¢–û–ü-10 –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("–ê–Ω–∞–ª–∏–∑ –ò–ó–ú–ï–ù–ï–ù–ò–ô –¢–û–ü-10 —Å–ª–∏–≤–æ–≤ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram\n")
        f.write("–£–º–µ–Ω—å—à–µ–Ω–∏—è = –ø—Ä–æ–¥–∞–∂–∏, –£–≤–µ–ª–∏—á–µ–Ω–∏—è = –ø–æ–∫—É–ø–∫–∏\n")
        f.write("–ü–æ–∫—É–ø–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏\n")
        f.write("=" * 100 + "\n\n")
        
        for result in results:
            f.write(f"–§–∞–π–ª: {result['file']}\n")
            f.write(f"–ó–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {'–î–∞' if result['has_telegram_send'] else '–ù–µ—Ç'}\n")
            f.write(f"–ü—Ä–æ–¥–∞–∂–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {'–î–∞' if result['has_sales'] else '–ù–µ—Ç'}\n")
            f.write(f"–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏: {result['first_sale_line_index'] if result['first_sale_line_index'] is not None else '–ù–µ—Ç –ø—Ä–æ–¥–∞–∂'}\n")
            f.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¢–û–ü-10: {result['total_top10_records']}\n")
            f.write(f"–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¢–û–ü-10: {result['total_changes']}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ (—É–º–µ–Ω—å—à–µ–Ω–∏–π): {result['decreases_count']}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ (—É–≤–µ–ª–∏—á–µ–Ω–∏–π): {result['increases_count']}\n")
            f.write(f"–ü–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏: {result['purchases_after_first_sale']}\n")
            f.write(f"–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {result['total_decrease_amount']:.2f}%\n")
            f.write(f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {result['total_increase_amount']:.2f}%\n")
            f.write(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {result['first_value']}%\n")
            f.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['last_value']}%\n")
            f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {result['max_value']}%\n")
            f.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {result['min_value']}%\n")
            
            if result['decreases_count'] > 0:
                f.write(f"–ü—Ä–æ–¥–∞–∂–∏ (—É–º–µ–Ω—å—à–µ–Ω–∏—è) –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:\n")
                decreases = result['decreases_list'].split(', ')
                for decrease in decreases:
                    f.write(f"  ‚Ä¢ {decrease}\n")
            else:
                f.write("–ü—Ä–æ–¥–∞–∂ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
            
            if result['purchases_after_first_sale'] > 0:
                f.write(f"–ü–æ–∫—É–ø–∫–∏ –ü–û–°–õ–ï –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏:\n")
                purchases = result['purchases_after_sale_list'].split(', ')
                for purchase in purchases:
                    f.write(f"  ‚Ä¢ {purchase}\n")
            elif result['has_sales']:
                f.write("–ü–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")

            # f.write(f"RAG: {is_rag_file(result)}\n")
                
            f.write("-" * 100 + "\n\n")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == "__main__":
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–û–ü-10 —Å–ª–∏–≤–æ–≤ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
    print("–£–º–µ–Ω—å—à–µ–Ω–∏—è = –ø—Ä–æ–¥–∞–∂–∏, –£–≤–µ–ª–∏—á–µ–Ω–∏—è = –ø–æ–∫—É–ø–∫–∏")
    print("–ü–æ–∫—É–ø–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏")
    
    results = analyze_top10_changes_before_telegram()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    results.sort(key=lambda x: x['purchases_after_first_sale'], reverse=True)
    
    save_analysis_to_file(results)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    files_with_telegram = sum(1 for r in results if r['has_telegram_send'])
    files_with_sales = sum(1 for r in results if r['has_sales'])
    total_sales = sum(r['decreases_count'] for r in results)
    total_purchases = sum(r['increases_count'] for r in results)
    total_purchases_after_sale = sum(r['purchases_after_first_sale'] for r in results)
    total_sale_amount = sum(r['total_decrease_amount'] for r in results)
    total_purchase_amount = sum(r['total_increase_amount'] for r in results)
    
    print(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ result_analysis_before_telegram.txt")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
    print(f"–§–∞–π–ª–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram: {files_with_telegram}")
    print(f"–§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: {files_with_sales}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {total_sales}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏: {total_purchases_after_sale}")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sale_amount:.2f}%")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {total_purchase_amount:.2f}%")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if files_with_sales > 0:
        avg_purchases_after_sale = total_purchases_after_sale / files_with_sales
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ñ–∞–π–ª: {avg_purchases_after_sale:.2f}")
    
    if total_sales > 0:
        sale_to_purchase_ratio = total_purchases_after_sale / total_sales
        print(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂: {sale_to_purchase_ratio:.2f}")