#!/usr/bin/env python3
"""
üì± TELEGRAM VIP MONITOR (TELETHON) üì±
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VIP Telegram —á–∞—Ç–æ–≤ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import os
import asyncio
import logging
import time
import re
from datetime import datetime
from typing import Dict, List, Optional, Set

from telethon import TelegramClient, events
from telethon.tl.types import Message, User, Channel, Chat

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {env_file}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_env_file()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from telegram_vip_config import (
        TELEGRAM_API_CREDENTIALS, VIP_TELEGRAM_CHATS, TELEGRAM_MONITOR_SETTINGS,
        TELEGRAM_NOTIFICATION_CONFIG, MESSAGE_FILTERS, format_telegram_message,
        get_active_telegram_chats, get_auto_buy_telegram_chats, should_process_message,
        update_telegram_stats, get_telegram_stats_summary
    )
    from vip_config import get_gas_fee, get_gas_description, create_keyboard
except ImportError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã telegram_vip_config.py –∏ vip_config.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, TELEGRAM_MONITOR_SETTINGS.get('log_level', 'INFO')),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_vip_telethon.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramVIPTelethon')

class TelegramVipTelethon:
    """VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telethon"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.telegram_chats = VIP_TELEGRAM_CHATS
        self.monitor_settings = TELEGRAM_MONITOR_SETTINGS
        self.notification_config = TELEGRAM_NOTIFICATION_CONFIG
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API
        self.api_credentials = TELEGRAM_API_CREDENTIALS
        
        # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient(
            self.api_credentials['session_name'],
            self.api_credentials['api_id'],
            self.api_credentials['api_hash']
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_bot_token = self.notification_config['bot_token']
        self.notification_chat_id = os.getenv(self.notification_config['chat_id_env_var'])
        
        # –ö—ç—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_cache: Set[str] = set()
        
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        self.active_chats = get_active_telegram_chats()
        self.chat_ids = [config['chat_id'] for config in self.active_chats.values()]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_telegram_stats('start')
        
        logger.info(f"üì± Telegram VIP Telethon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.active_chats)}")
        logger.info(f"üí∞ –ß–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–æ–π: {len(get_auto_buy_telegram_chats())}")
        logger.info(f"üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —á–∞—Ç—ã: {self.chat_ids}")
        
        if not self.notification_chat_id:
            logger.error(f"‚ùå {self.notification_config['chat_id_env_var']} –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    def extract_contracts_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text:
            return []
        
        all_contracts = []
        
        # 1. –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ Solana (32-44 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        basic_contracts = re.findall(r'\b[A-Za-z0-9]{32,44}\b', text)
        all_contracts.extend(basic_contracts)
        
        # 2. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ URL pump.fun –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        pump_contracts = re.findall(r'pump\.fun/coin/([A-Za-z0-9]{32,44})', text, re.IGNORECASE)
        all_contracts.extend(pump_contracts)
        
        # 3. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ dexscreener URL
        dex_contracts = re.findall(r'dexscreener\.com/solana/([A-Za-z0-9]{32,44})', text, re.IGNORECASE)
        all_contracts.extend(dex_contracts)
        
        # 4. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ birdeye URL
        birdeye_contracts = re.findall(r'birdeye\.so/token/([A-Za-z0-9]{32,44})', text, re.IGNORECASE)
        all_contracts.extend(birdeye_contracts)
        
        # 5. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ jupiter URL
        jupiter_contracts = re.findall(r'jup\.ag/swap/[A-Za-z0-9]+-([A-Za-z0-9]{32,44})', text, re.IGNORECASE)
        all_contracts.extend(jupiter_contracts)
        
        # 6. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ raydium URL
        raydium_contracts = re.findall(r'raydium\.io/swap/\?([A-Za-z0-9]{32,44})', text, re.IGNORECASE)
        all_contracts.extend(raydium_contracts)
        
        # 7. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ—Å–ª–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        prefix_patterns = [
            r'(?:contract|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|ca|address|–∞–¥—Ä–µ—Å)[:=\s]+([A-Za-z0-9]{32,44})(?:\s|$)',
            r'(?:token|—Ç–æ–∫–µ–Ω)[:=\s]+([A-Za-z0-9]{32,44})(?:\s|$)',
            r'\b([A-Za-z0-9]{32,44})(?:\s*(?:pump|–ø–∞–º–ø–∏–º|buy|–ø–æ–∫—É–ø–∞–µ–º))(?:\s|$)'
        ]
        
        for pattern in prefix_patterns:
            prefix_contracts = re.findall(pattern, text, re.IGNORECASE)
            all_contracts.extend(prefix_contracts)
        
        # 8. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ Markdown —Å—Å—ã–ª–∫–∞—Ö –∏ –∫–æ–¥–µ
        markdown_contracts = re.findall(r'`([A-Za-z0-9]{32,44})`', text)
        all_contracts.extend(markdown_contracts)
        
        # 9. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö (—Ü–∏—Ç–∞—Ç—ã)
        quote_contracts = re.findall(r'\[([A-Za-z0-9]{32,44})\]', text)
        all_contracts.extend(quote_contracts)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        clean_contracts = []
        for contract in all_contracts:
            if not contract:
                continue
                
            # –£–±–∏—Ä–∞–µ–º "pump" —Å –∫–æ–Ω—Ü–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if contract.endswith('pump'):
                contract = contract[:-4]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Solana –∞–¥—Ä–µ—Å
            if 32 <= len(contract) <= 44 and contract.isalnum():
                # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                if not contract.startswith('0000') and not contract.endswith('0000'):
                    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã (SOL, USDC –∏ —Ç.–¥.)
                    excluded_tokens = [
                        'So11111111111111111111111111111111111111112',  # SOL
                        'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',  # USDC
                        'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',  # USDT
                    ]
                    
                    if contract not in excluded_tokens:
                        clean_contracts.append(contract)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        seen = set()
        final_contracts = []
        for contract in clean_contracts:
            if contract not in seen:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                is_substring = False
                for other_contract in clean_contracts:
                    if other_contract != contract and other_contract.startswith(contract):
                        is_substring = True
                        break
                
                if not is_substring:
                    seen.add(contract)
                    final_contracts.append(contract)
        
        if final_contracts:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(final_contracts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {final_contracts}")
        
        return final_contracts
    
    async def send_telegram_notification(self, message: str, keyboard: Optional[List] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            import requests
            
            payload = {
                "chat_id": self.notification_chat_id,
                "text": message,
                "parse_mode": self.notification_config['parse_mode'],
                "disable_web_page_preview": self.notification_config['disable_web_page_preview']
            }
            
            if keyboard:
                payload["reply_markup"] = {"inline_keyboard": keyboard}
            
            url = f"https://api.telegram.org/bot{self.notification_bot_token}/sendMessage"
            response = requests.post(url, json=payload, timeout=self.notification_config['timeout'])
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_telegram_photo_notification(self, photo_url: str, caption: str, keyboard: Optional[List] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –≤ Telegram"""
        try:
            import requests
            
            payload = {
                "chat_id": self.notification_chat_id,
                "photo": photo_url,
                "caption": caption,
                "parse_mode": self.notification_config['parse_mode']
            }
            
            if keyboard:
                payload["reply_markup"] = {"inline_keyboard": keyboard}
            
            url = f"https://api.telegram.org/bot{self.notification_bot_token}/sendPhoto"
            response = requests.post(url, json=payload, timeout=self.notification_config['timeout'])
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram —Ñ–æ—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç: {response.text}")
                return await self.send_telegram_notification(caption, keyboard)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ñ–æ—Ç–æ: {e}")
            return await self.send_telegram_notification(caption, keyboard)
    
    async def execute_automatic_purchase(self, contract: str, chat_id: int, message_text: str, 
                                       amount_sol: float, chat_config: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–∞ —Å ULTRA –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        logger.info(f"üöÄ TELEGRAM –ê–í–¢–û–ü–û–ö–£–ü–ö–ê: {contract} –Ω–∞ {amount_sol} SOL –∏–∑ —á–∞—Ç–∞ {chat_id}")
        
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Axiom —Ç—Ä–µ–π–¥–µ—Ä
            from axiom_trader import execute_axiom_purchase
            
            # üî• –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —á–∞—Ç–∞
            chat_priority = chat_config.get('priority', 'HIGH')
            if chat_priority == 'ULTRA':
                gas_type = 'ultra_vip'  # $5 –≥–∞–∑ –¥–ª—è ULTRA –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            else:
                gas_type = 'vip_signals'  # $2 –≥–∞–∑ –¥–ª—è HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            
            vip_gas_fee = get_gas_fee(gas_type)
            gas_description = get_gas_description(gas_type)
            gas_usd = vip_gas_fee * 140  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
            
            logger.info(f"üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º {gas_description}")
            logger.info(f"‚ö° Telegram VIP Gas fee: {vip_gas_fee} SOL (~${gas_usd:.2f})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Axiom.trade
            result = await execute_axiom_purchase(
                contract_address=contract,
                twitter_username=f"TelegramVIP_Chat_{abs(chat_id)}",
                tweet_text=f"–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –∏–∑ Telegram —á–∞—Ç–∞: {message_text[:100]}...",
                sol_amount=amount_sol,
                slippage=15,
                priority_fee=vip_gas_fee  # üî• ULTRA VIP –≥–∞–∑ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            )
            
            execution_time = time.time() - start_time
            
            if result.get('success', False):
                logger.info(f"‚úÖ Telegram –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! TX: {result.get('tx_hash', 'N/A')}")
                update_telegram_stats('purchase_success')
                
                return {
                    'success': True,
                    'tx_hash': result.get('tx_hash', 'N/A'),
                    'sol_amount': amount_sol,
                    'execution_time': execution_time,
                    'status': f'Axiom.trade - –ø–æ–∫—É–ø–∫–∞ {amount_sol:.6f} SOL',
                    'platform': 'Axiom.trade',
                    'gas_fee': vip_gas_fee,
                    'gas_usd': gas_usd
                }
            else:
                error_msg = result.get('error', 'Unknown error from Axiom')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {error_msg}")
                update_telegram_stats('purchase_failed')
                
                return {
                    'success': False,
                    'error': error_msg,
                    'execution_time': execution_time,
                    'gas_fee': vip_gas_fee,
                    'gas_usd': gas_usd
                }
                
        except ImportError:
            logger.error("‚ùå axiom_trader –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Axiom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            update_telegram_stats('purchase_failed')
            return {
                'success': False,
                'error': 'axiom_trader module not found',
                'execution_time': time.time() - start_time
            }
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {e}")
            update_telegram_stats('purchase_failed')
            return {
                'success': False,
                'error': f'Critical error: {str(e)}',
                'execution_time': execution_time
            }
    
    def get_chat_config(self, chat_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —á–∞—Ç–∞ –ø–æ ID"""
        for config in self.active_chats.values():
            if config['chat_id'] == chat_id:
                return config
        return None
    
    def get_author_name(self, message: Message) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.sender:
            return "Unknown"
            
        if hasattr(message.sender, 'username') and message.sender.username:
            return f"@{message.sender.username}"
        elif hasattr(message.sender, 'first_name') and message.sender.first_name:
            name = message.sender.first_name
            if hasattr(message.sender, 'last_name') and message.sender.last_name:
                name += f" {message.sender.last_name}"
            return name
        else:
            return f"User_{message.sender.id}" if hasattr(message.sender, 'id') else "Unknown"
    
    def extract_full_text_from_message(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        try:
            all_text_parts = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.text:
                all_text_parts.append(message.text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ entities (—Å—Å—ã–ª–∫–∏, –º–æ–Ω–æ—à—Ä–∏—Ñ—Ç, –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ç.–¥.)
            if hasattr(message, 'entities') and message.entities:
                from telethon.tl.types import (
                    MessageEntityUrl, MessageEntityTextUrl, MessageEntityMention, 
                    MessageEntityCode, MessageEntityPre, MessageEntityBold,
                    MessageEntityItalic, MessageEntityUnderline, MessageEntityStrike,
                    MessageEntityCashtag, MessageEntityHashtag, MessageEntityPhone,
                    MessageEntityEmail, MessageEntityBankCard, MessageEntitySpoiler,
                    MessageEntityCustomEmoji, MessageEntityBlockquote
                )
                
                for entity in message.entities:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ entity
                    start = entity.offset
                    end = entity.offset + entity.length
                    entity_text = message.text[start:end] if message.text else ""
                    
                    # üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–ö–†–´–¢–û–ì–û –¢–ï–ö–°–¢–ê (SPOILER)
                    if isinstance(entity, MessageEntitySpoiler):
                        if entity_text and entity_text not in all_text_parts:
                            all_text_parts.append(entity_text)
                            logger.info(f"üëÅÔ∏è –ù–∞–π–¥–µ–Ω —Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç (spoiler): {entity_text[:50]}...")
                    
                    # üìú –û–ë–†–ê–ë–û–¢–ö–ê –¶–ò–¢–ê–¢/–ë–õ–û–ö–û–í
                    elif isinstance(entity, MessageEntityBlockquote):
                        if entity_text and entity_text not in all_text_parts:
                            all_text_parts.append(entity_text)
                            logger.info(f"üìú –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤ —Ü–∏—Ç–∞—Ç–µ: {entity_text[:50]}...")
                    
                    # üíª –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–î–ê –ò –ü–†–ï-–ë–õ–û–ö–û–í  
                    elif isinstance(entity, (MessageEntityCode, MessageEntityPre)):
                        if entity_text and entity_text not in all_text_parts:
                            all_text_parts.append(entity_text)
                            logger.info(f"üíª –ù–∞–π–¥–µ–Ω –∫–æ–¥: {entity_text[:50]}...")
                    
                    # üîó –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• ENTITIES
                    else:
                        if entity_text and entity_text not in all_text_parts:
                            all_text_parts.append(entity_text)
                    
                    # –î–ª—è URL entities –ø–æ–ª—É—á–∞–µ–º —Å–∞–º URL
                    if isinstance(entity, MessageEntityTextUrl) and hasattr(entity, 'url'):
                        if entity.url not in all_text_parts:
                            all_text_parts.append(entity.url)
                            logger.info(f"üîó –ù–∞–π–¥–µ–Ω URL: {entity.url[:50]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(message, 'reply_markup') and message.reply_markup:
                from telethon.tl.types import ReplyInlineMarkup
                if isinstance(message.reply_markup, ReplyInlineMarkup):
                    for row in message.reply_markup.rows:
                        for button in row.buttons:
                            if hasattr(button, 'text') and button.text:
                                all_text_parts.append(button.text)
                            if hasattr(button, 'url') and button.url:
                                all_text_parts.append(button.url)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
            if hasattr(message, 'message') and message.message:
                if message.message not in all_text_parts:
                    all_text_parts.append(message.message)
            
            # üì§ –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–ï–°–õ–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
            if hasattr(message, 'forward') and message.forward:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                if hasattr(message, 'fwd_from') and message.text:
                    logger.info(f"üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # üñºÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê-–ü–û–î–ü–ò–°–ï–ô
            if hasattr(message, 'media') and message.media:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
                if hasattr(message.media, 'caption') and message.media.caption:
                    if message.media.caption not in all_text_parts:
                        all_text_parts.append(message.media.caption)
                        logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞: {message.media.caption[:50]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª—ã) —Å –ø–æ–¥–ø–∏—Å—å—é
                if hasattr(message.media, 'document') and hasattr(message.media.document, 'attributes'):
                    for attr in message.media.document.attributes:
                        if hasattr(attr, 'file_name') and attr.file_name:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–∞–∂–µ –∏–∑ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                            if attr.file_name not in all_text_parts:
                                all_text_parts.append(attr.file_name)
                                logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {attr.file_name}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            full_text = " ".join(all_text_parts)
            
            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
            full_text = re.sub(r'\s+', ' ', full_text).strip()
            
            logger.debug(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(all_text_parts)} —á–∞—Å—Ç–µ–π): {full_text[:100]}...")
            
            return full_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
            return message.text or message.message or ""
    
    async def process_message_contracts(self, message: Message, chat_config: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        start_time = time.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = self.extract_full_text_from_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not should_process_message(message_text, chat_config):
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update_telegram_stats('message_processed')
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            contracts = self.extract_contracts_from_text(message_text)
            
            if not contracts:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            author_name = self.get_author_name(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            for contract in contracts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
                signal_key = f"tg_{message.chat_id}:{contract}"
                
                if signal_key not in self.signals_cache:
                    self.signals_cache.add(signal_key)
                    update_telegram_stats('contract_found')
                    
                    logger.info(f"üî• TELEGRAM –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù! –ß–∞—Ç {message.chat_id}: {contract}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
                    purchase_result = None
                    if chat_config.get('auto_buy', False):
                        amount_sol = chat_config.get('buy_amount_sol', 0.01)
                        update_telegram_stats('purchase_attempt')
                        
                        purchase_result = await self.execute_automatic_purchase(
                            contract, message.chat_id, message_text, amount_sol, chat_config
                        )
                    
                    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.send_contract_notification(
                        contract, message_text, author_name, message.chat_id, 
                        chat_config, purchase_result
                    )
            
            processing_time = time.time() - start_time
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.2f}—Å, –Ω–∞–π–¥–µ–Ω–æ {len(contracts)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_contract_notification(self, contract: str, message_text: str, author_name: str,
                                       chat_id: int, chat_config: Dict, purchase_result: Optional[Dict] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"""
        try:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message_text) > 200:
                message_text = message_text[:200] + "..."
            
            # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification = format_telegram_message(
                'contract_found',
                description=chat_config['description'],
                chat_id=chat_id,
                author_name=author_name,
                contract=contract,
                message_text=message_text,
                priority=chat_config['priority'],
                timestamp=datetime.now().strftime('%H:%M:%S')
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–µ
            if purchase_result:
                if purchase_result['success']:
                    notification += format_telegram_message(
                        'auto_buy_success',
                        status=purchase_result['status'],
                        sol_amount=purchase_result['sol_amount'],
                        execution_time=purchase_result['execution_time'],
                        tx_hash=purchase_result['tx_hash'],
                        gas_fee=purchase_result.get('gas_fee', 0),
                        gas_usd=purchase_result.get('gas_usd', 0)
                    )
                else:
                    notification += format_telegram_message(
                        'auto_buy_error',
                        error=purchase_result['error'][:100]
                    )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = create_keyboard(contract)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ)
            photo_url = f"https://axiomtrading.sfo3.cdn.digitaloceanspaces.com/{contract}.webp"
            success = await self.send_telegram_photo_notification(photo_url, notification, keyboard)
            
            if success:
                logger.info(f"üì§ Telegram VIP —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {contract}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram VIP —Å–∏–≥–Ω–∞–ª –¥–ª—è {contract}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telethon"""
        
        @self.client.on(events.NewMessage(chats=self.chat_ids))
        async def new_message_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                message = event.message
                chat_id = message.chat_id
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞
                chat_config = self.get_chat_config(chat_id)
                if not chat_config:
                    return
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ—Ç–æ–≤
                is_bot_chat = chat_config.get('is_bot', False)
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –≤—Å–µ VIP —á–∞—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞)
                if not chat_config.get('monitor_forwards', True) and message.forward:
                    return
                
                # –î–ª—è –±–æ—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
                max_age = self.monitor_settings['max_message_age']
                if message.date:
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    from datetime import timezone
                    now_utc = datetime.now(timezone.utc)
                    message_date = message.date.replace(tzinfo=timezone.utc) if message.date.tzinfo is None else message.date
                    if (now_utc - message_date).total_seconds() > max_age:
                        return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.process_message_contracts(message, chat_config)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        @self.client.on(events.MessageEdited(chats=self.chat_ids))
        async def edited_message_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                message = event.message
                chat_id = message.chat_id
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞
                chat_config = self.get_chat_config(chat_id)
                if not chat_config or not chat_config.get('monitor_edits', True):
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.process_message_contracts(message, chat_config)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telethon –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–∞—Ç–æ–≤"""
        try:
            if not self.notification_chat_id:
                logger.error(f"‚ùå {self.notification_config['chat_id_env_var']} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            logger.info("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —á–µ—Ä–µ–∑ Telethon...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.start()
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ Telegram!")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self.setup_event_handlers()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await self.client.get_me()
            logger.info(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∞–º
            for chat_id in self.chat_ids:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞
                    chat_config = self.get_chat_config(chat_id)
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ—Ç–æ–≤
                    if chat_config and chat_config.get('is_bot', False):
                        try:
                            # –î–ª—è –±–æ—Ç–æ–≤ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ username –∏–ª–∏ ID
                            entity = await self.client.get_entity(chat_id)
                            logger.info(f"ü§ñ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: {chat_id}")
                        except Exception as bot_error:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É {chat_id}: {bot_error}")
                            logger.info(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é: @{chat_id}")
                            continue
                    else:
                        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
                        entity = await self.client.get_entity(chat_id)
                        if hasattr(entity, 'title'):
                            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É: {entity.title} ({chat_id})")
                        else:
                            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É: {chat_id}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {chat_id}: {e}")
                    
                    # –î–ª—è –±–æ—Ç–æ–≤ –¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    chat_config = self.get_chat_config(chat_id)
                    if chat_config and chat_config.get('is_bot', False):
                        logger.info(f"üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º {chat_id}:")
                        logger.info(f"   1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
                        logger.info(f"   2. –ù–∞–∂–º–∏—Ç–µ /start")
                        logger.info(f"   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.monitor_settings.get('send_startup_notification', True):
                active_chats = get_active_telegram_chats()
                auto_buy_chats = get_auto_buy_telegram_chats()
                
                start_message = format_telegram_message(
                    'startup',
                    active_chats=len(active_chats),
                    auto_buy_chats=', '.join([f"Chat_{abs(config['chat_id'])}" for config in auto_buy_chats.values()]),
                    timestamp=datetime.now().strftime('%H:%M:%S %d.%m.%Y')
                )
                
                await self.send_telegram_notification(start_message)
            
            logger.info("üî• Telegram VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - Telethon —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                cleanup_threshold = self.monitor_settings['cache_cleanup_threshold']
                if len(self.signals_cache) > cleanup_threshold:
                    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Telegram —Å–∏–≥–Ω–∞–ª–æ–≤")
                    self.signals_cache.clear()
                
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if self.monitor_settings.get('send_error_notifications', True):
                error_message = format_telegram_message(
                    'connection_error',
                    error=str(e)[:200],
                    delay=self.monitor_settings['reconnect_delay']
                )
                await self.send_telegram_notification(error_message)
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            await asyncio.sleep(self.monitor_settings['reconnect_delay'])
        finally:
            await self.client.disconnect()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        while True:
            try:
                await self.start_monitoring()
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(self.monitor_settings['reconnect_delay'])
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = TelegramVipTelethon()
    await monitor.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Telegram VIP Monitor (Telethon) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Telegram VIP –º–æ–Ω–∏—Ç–æ—Ä–µ") 

