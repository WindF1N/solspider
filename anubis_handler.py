#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Anubis challenge –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã Nitter
"""

import asyncio
import hashlib
import json
import logging
import time
from typing import Dict, Any, Optional, Tuple
from urllib.parse import urlparse, urljoin
import aiohttp
from bs4 import BeautifulSoup

logger = logging.getLogger(__name__)

# üõ°Ô∏è –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–ï–¢–ï–í–´–• –û–®–ò–ë–û–ö –° –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï–ú –î–û–ú–ï–ù–û–í
async def robust_network_request(session: aiohttp.ClientSession, 
                                method: str, 
                                url: str, 
                                max_retries: int = 5,
                                switch_domain_on_network_error: bool = True,
                                **kwargs) -> Optional[aiohttp.ClientResponse]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –¥–æ–º–µ–Ω–æ–≤
    
    Args:
        session: HTTP —Å–µ—Å—Å–∏—è
        method: HTTP –º–µ—Ç–æ–¥ (GET, POST)
        url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        switch_domain_on_network_error: –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –¥–æ–º–µ–Ω—ã –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        HTTP –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    """
    NETWORK_ERRORS = [
        "Server disconnected",
        "Connection reset by peer", 
        "Cannot connect to host",
        "Connection timed out",
        "Timeout",
        "SSL", 
        "Name resolution failed",
        "Network is unreachable",
        "Connection refused",
        "Connection aborted",
        "Broken pipe",
        "No route to host",
        "Host is unreachable",
        "Connection closed",
        "Connection lost",
        "Socket error",
        "ClientConnectorError",
        "ClientError",
        "ServerDisconnectedError",
        "ClientOSError"
    ]
    
    current_url = url
    last_error = None
    
    for attempt in range(max_retries):
        try:
            logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {method} {current_url}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            if method.upper() == 'GET':
                async with session.get(current_url, **kwargs) as response:
                    await response.read()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    return response
            elif method.upper() == 'POST':
                async with session.post(current_url, **kwargs) as response:
                    await response.read()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    return response
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
                
        except Exception as e:
            last_error = e
            error_str = str(e).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
            is_network_error = any(net_err.lower() in error_str for net_err in NETWORK_ERRORS)
            
            if is_network_error:
                logger.warning(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                if switch_domain_on_network_error and attempt < max_retries - 1:
                    try:
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
                        from nitter_domain_rotator import get_next_nitter_domain
                        from duplicate_groups_manager import format_nitter_url
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
                        new_domain = get_next_nitter_domain()
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL —Å —Ç–µ–º –∂–µ –ø—É—Ç–µ–º
                        parsed_url = urlparse(current_url)
                        new_base_url = format_nitter_url(new_domain)
                        current_url = f"{new_base_url}{parsed_url.path}"
                        if parsed_url.query:
                            current_url += f"?{parsed_url.query}"
                        
                        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω: {new_domain}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞
                        if 'headers' in kwargs:
                            from duplicate_groups_manager import add_host_header_if_needed
                            add_host_header_if_needed(kwargs['headers'], new_domain)
                        
                    except Exception as domain_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: {domain_error}")
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                backoff_time = min(30, (attempt + 1) * 2 + (attempt * 0.5))
                logger.info(f"‚è≥ –ñ–¥–µ–º {backoff_time:.1f}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                await asyncio.sleep(backoff_time)
                continue
            else:
                # –ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise e
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(f"üíÄ –í–°–ï {max_retries} –ü–û–ü–´–¢–û–ö –ò–°–ß–ï–†–ü–ê–ù–´. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
    raise last_error

class AnubisHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Anubis challenge –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫–∏"""
    
    def __init__(self, session: Optional[aiohttp.ClientSession] = None, nitter_domain_rotator=None):
        self.session = session
        self.cookies_updated = False
        self.nitter_domain_rotator = nitter_domain_rotator
        
    async def _anubis_network_request(self, url: str, headers: Dict[str, str], params: Dict[str, Any] = None, max_retries: int = 3) -> Optional[aiohttp.ClientResponse]:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ Anubis challenge —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        –ü—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ nitter_domain_rotator
        """
        if not self.session:
            logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π HTTP —Å–µ—Å—Å–∏–∏")
            return None
            
        original_url = url
        current_url = url
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è Anubis –∑–∞–ø—Ä–æ—Å–∞: {current_url}")
                
                if params:
                    response = await self.session.get(current_url, headers=headers, params=params, allow_redirects=False)
                else:
                    response = await self.session.get(current_url, headers=headers)
                    
                logger.info(f"‚úÖ Anubis –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status}")
                return response
                
            except Exception as e:
                error_str = str(e)
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Anubis –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {error_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                network_errors = [
                    "Network is unreachable",
                    "Cannot connect to host",
                    "Connection reset by peer",
                    "Server disconnected",
                    "Connection timeout",
                    "SSL: CERTIFICATE_VERIFY_FAILED",
                    "Can not decode content-encoding: brotli",
                    "503",
                    "502",
                    "bad gateway"
                ]
                
                is_network_error = any(err in error_str for err in network_errors)
                
                if is_network_error and self.nitter_domain_rotator and attempt < max_retries - 1:
                    logger.info(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è Anubis challenge")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
                    new_domain = self.nitter_domain_rotator.get_next_domain()
                    if new_domain:
                        # –ó–∞–º–µ–Ω—è–µ–º –¥–æ–º–µ–Ω –≤ URL
                        parsed_url = urlparse(current_url)
                        new_url = current_url.replace(parsed_url.netloc, new_domain)
                        current_url = new_url
                        
                        logger.info(f"üåê –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –¥–ª—è Anubis: {new_domain}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await asyncio.sleep(1)
                        continue
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Anubis –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {error_str}")
                    return None
                    
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(2 ** attempt)
                
        return None

    async def detect_and_solve_challenge(self, url: str, response_text: str, force_fresh_challenge: bool = True) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç Anubis challenge –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ—Ç –µ–≥–æ
        
        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response_text: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            force_fresh_challenge: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –°–í–ï–ñ–ò–ô challenge (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
            
        Returns:
            Dict —Å –Ω–æ–≤—ã–º–∏ –∫—É–∫–∏ –µ—Å–ª–∏ challenge –±—ã–ª —Ä–µ—à–µ–Ω, –∏–Ω–∞—á–µ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ challenge –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if not self._is_challenge_page(response_text):
                return None
                
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge –Ω–∞ {url}")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ô challenge –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 403 –æ—à–∏–±–æ–∫
            if force_fresh_challenge:
                logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ô challenge (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ challenge –¥–∞—é—Ç 403)")
                
                if not self.session:
                    logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π HTTP —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ challenge")
                    return None
                    
                # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–í–ï–ñ–ï–ì–û challenge
                fresh_headers = {
                    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                }
                
                # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–í–ï–ñ–ï–ì–û challenge —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                fresh_response = await self._anubis_network_request(url, fresh_headers)
                if not fresh_response:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π challenge –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫")
                    return None
                    
                if fresh_response.status != 200:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ challenge: {fresh_response.status}")
                    fresh_response.close()
                    return None
                    
                fresh_html = await fresh_response.text()
                fresh_response.close()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ challenge –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω
                if not self._is_challenge_page(fresh_html):
                    logger.info("üéâ Challenge –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
                    return {}
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ challenge
                response_text = fresh_html
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–≤–µ–∂–∏–π challenge")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ challenge (—Å–≤–µ–∂–∏–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ)
            challenge_data = self._parse_challenge_data(response_text)
            if not challenge_data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ challenge")
                return None
                
            # –õ–æ–≥–∏—Ä—É–µ–º challenge –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            challenge = challenge_data.get('challenge', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            logger.info(f"üéØ Challenge: {challenge}")
                
            # –†–µ—à–∞–µ–º challenge –ù–ï–ú–ï–î–õ–ï–ù–ù–û
            logger.info(f"‚ö° –†–µ—à–∞–µ–º challenge –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...")
            solution = await self._solve_challenge(challenge_data)
            if not solution:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge")
                return None
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ó–ê–î–ï–†–ñ–ï–ö  
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫...")
            result = await self._submit_solution(url, challenge_data, solution)
            if result:
                status = result.get('status')
                cookies = result.get('cookies', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                if status == 302:
                    if cookies:
                        logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω! (302) –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∫—É–∫–∏: {len(cookies)} —à—Ç.")
                    else:
                        logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω! (302) –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –∫—É–∫–∏ –ø—É—Å—Ç—ã–µ")
                    self.cookies_updated = True
                    return result
                elif status == 200:
                    response_text = result.get('response_text', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
                    if "backend temporarily unavailable" in response_text.lower() or "retrying" in response_text.lower():
                        logger.warning(f"üö´ –°–µ—Ä–≤–µ—Ä Nitter –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞—à–µ–≥–æ –∫–æ–¥–∞!")
                        logger.info(f"üìã –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ challenge —Ä–µ—à–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
                        return None  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                    elif cookies:
                        logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω! (200) –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∫—É–∫–∏: {len(cookies)} —à—Ç.")
                        self.cookies_updated = True
                        return result
                    elif "success" in response_text.lower() or "passed" in response_text.lower():
                        logger.info(f"‚úÖ Challenge –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–µ–Ω! (200) –£—Å–ø–µ—Ö –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–æ –∫—É–∫–∏ –ø—É—Å—Ç—ã–µ")
                        self.cookies_updated = True
                        return result
                    else:
                        logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å 200 –Ω–æ –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å–ø–µ—Ö–∞. –¢–µ–∫—Å—Ç: {response_text[:100]}")
                        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                else:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")
                    return None
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Anubis challenge: {e}")
            return None
    
    def _is_challenge_page(self, html_content: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Anubis challenge"""
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π challenge –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ "Making sure you're not a bot!"
        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–∏—è anubis challenge script
        return ('id="anubis_challenge"' in html_content or 
                "Making sure you're not a bot!" in html_content)
    
    def _parse_challenge_data(self, html_content: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ challenge –∏–∑ HTML"""
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ò—â–µ–º script —Å challenge –¥–∞–Ω–Ω—ã–º–∏
            challenge_script = soup.find('script', {'id': 'anubis_challenge'})
            if not challenge_script:
                return None
                
            challenge_data = json.loads(challenge_script.get_text())
            
            # –ò—â–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            base_prefix_script = soup.find('script', {'id': 'anubis_base_prefix'})
            base_prefix = ""
            if base_prefix_script:
                base_prefix = json.loads(base_prefix_script.get_text())
            
            return {
                'challenge': challenge_data.get('challenge'),
                'rules': challenge_data.get('rules', {}),
                'base_prefix': base_prefix
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ challenge: {e}")
            return None
    
    async def _solve_challenge(self, challenge_data: Dict[str, Any]) -> Optional[Tuple[str, int, float]]:
        """–†–µ—à–∞–µ—Ç proof-of-work challenge"""
        try:
            challenge = challenge_data['challenge']
            rules = challenge_data['rules']
            algorithm = rules.get('algorithm', 'fast')
            difficulty = rules.get('difficulty', 2)
            
            if algorithm != 'fast':
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
                return None
            
            logger.info(f"üîß –†–µ—à–∞–µ–º challenge: difficulty={difficulty}")
            start_time = time.time()
            
            # –ü—Ä–æ—Å—Ç–æ–π proof-of-work –∞–ª–≥–æ—Ä–∏—Ç–º
            target = "0" * difficulty
            nonce = 0
            max_iterations = 10_000_000
            
            while nonce < max_iterations:
                # –•–µ—à–∏—Ä—É–µ–º challenge + nonce
                data = f"{challenge}{nonce}".encode('utf-8')
                hash_hex = hashlib.sha256(data).hexdigest()
                
                if hash_hex.startswith(target):
                    elapsed = time.time() - start_time
                    
                    # –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É - challenge –º–æ–∂–µ—Ç –ø—Ä–æ—Ç—É—Ö–Ω—É—Ç—å!
                    logger.info(f"‚ö° –ë–´–°–¢–†–û–ï –†–ï–®–ï–ù–ò–ï: Challenge –º–æ–∂–µ—Ç –ø—Ä–æ—Ç—É—Ö–Ω—É—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
                    
                    logger.info(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {elapsed:.2f}s: nonce={nonce}")
                    return hash_hex, nonce, elapsed
                    
                nonce += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100k –∏—Ç–µ—Ä–∞—Ü–∏–π
                if nonce % 100000 == 0:
                    elapsed = time.time() - start_time
                    speed = nonce / elapsed if elapsed > 0 else 0
                    logger.info(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {nonce} –∏—Ç–µ—Ä–∞—Ü–∏–π, {speed:.0f} H/s")
            
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge –∑–∞ {max_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge: {e}")
            return None
    
    async def _submit_solution(self, original_url: str, challenge_data: Dict[str, Any], 
                             solution: Tuple[str, int, float], original_response: Optional[aiohttp.ClientResponse] = None) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ challenge –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            if not self.session:
                logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π HTTP —Å–µ—Å—Å–∏–∏")
                return None
                
            hash_result, nonce, elapsed_time = solution
            base_prefix = challenge_data.get('base_prefix', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            parsed_url = urlparse(original_url)
            base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
            submit_url = urljoin(base_url, f"{base_prefix}/.within.website/x/cmd/anubis/api/pass-challenge")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω–∏–º—É–º 100ms –∫–∞–∫ –≤ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ)
            elapsed_ms = max(int(elapsed_time * 1000), 100)
            
            params = {
                'response': hash_result,
                'nonce': str(nonce),
                'redir': original_url,
                'elapsedTime': str(elapsed_ms)
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞: {submit_url}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –±—Ä–∞—É–∑–µ—Ä (–∫–∞–∫ –≤ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ)
            challenge_headers = {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br, zstd',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Priority': 'u=0, i',
                'Referer': original_url,  # –í–ê–ñ–ù–û: Referer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Å challenge
                'Sec-CH-UA': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
                'Sec-CH-UA-Mobile': '?0',
                'Sec-CH-UA-Platform': '"Linux"',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'same-origin',
                'Sec-Fetch-User': '?1',  # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º Sec-Fetch-User –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                'Upgrade-Insecure-Requests': '1',
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'
            }
            
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã")
            
            # –ù–ï —Å–ª–µ–¥—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            response = await self._anubis_network_request(submit_url, challenge_headers, params)
            if not response:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ challenge –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫")
                return None
                
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            response_text = await response.text()
            logger.info(f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {response_text[:200]}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            new_cookies = self._extract_cookies_from_response(response)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            if response.status == 302:
                location = response.headers.get('Location')
                logger.info(f"üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {location}")
                
                if new_cookies:
                    logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –±–µ–∑ –Ω–æ–≤—ã—Ö –∫—É–∫–∏")
            elif response.status == 200:
                logger.info(f"üìã –°—Ç–∞—Ç—É—Å 200 - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ success —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
                if "success" in response_text.lower() or "passed" in response_text.lower():
                    logger.info(f"‚úÖ Challenge –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å 200 + —É—Å–ø–µ—Ö –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º)")
                else:
                    logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å 200 –Ω–æ –Ω–µ—è—Å–Ω–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
            
            result = {
                'status': response.status,
                'cookies': new_cookies,
                'url': str(response.url),
                'redirect_location': response.headers.get('Location') if response.status == 302 else None,
                'response_text': response_text[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            }
            
            response.close()
            return result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            return None
    
    def _extract_cookies_from_response(self, response: aiohttp.ClientResponse) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—É–∫–∏ –∏–∑ HTTP –æ—Ç–≤–µ—Ç–∞"""
        cookies = {}
        try:
            if 'Set-Cookie' in response.headers:
                set_cookie_headers = response.headers.getall('Set-Cookie')
                logger.info(f"üç™ –ù–∞–π–¥–µ–Ω–æ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(set_cookie_headers)}")
                
                for i, cookie_header in enumerate(set_cookie_headers):
                    logger.info(f"üç™ Set-Cookie {i+1}: {cookie_header}")
                    
                    # –ü–∞—Ä—Å–∏–º Set-Cookie –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    cookie_parts = cookie_header.split(';')
                    if cookie_parts:
                        cookie_pair = cookie_parts[0].strip()
                        if '=' in cookie_pair:
                            name, value = cookie_pair.split('=', 1)
                            name = name.strip()
                            value = value.strip()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Max-Age - –µ—Å–ª–∏ 0, —Ç–æ –∫—É–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è
                            is_deleted = False
                            for part in cookie_parts[1:]:
                                part = part.strip()
                                if part.lower().startswith('max-age='):
                                    max_age = part.split('=', 1)[1].strip()
                                    if max_age == '0':
                                        is_deleted = True
                                        logger.info(f"üóëÔ∏è –ö—É–∫–∞ {name} —É–¥–∞–ª—è–µ—Ç—Å—è (Max-Age=0)")
                                        break
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                            if not is_deleted and value:
                                cookies[name] = value
                                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫—É–∫–∞: {name}={value[:20]}...")
                            elif is_deleted:
                                # –ï—Å–ª–∏ –∫—É–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, —É–±–∏—Ä–∞–µ–º –µ—ë –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                                cookies.pop(name, None)
                                
            logger.info(f"üì• –ò—Ç–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–∫–∏: {list(cookies.keys())}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—É–∫–∏: {e}")
            
        return cookies
    
    def format_cookies_string(self, cookies: Dict[str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—É–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        return "; ".join([f"{name}={value}" for name, value in cookies.items()])

async def handle_anubis_challenge_for_session(session: aiohttp.ClientSession, 
                                            url: str, 
                                            response_text: str,
                                            force_fresh_challenge: bool = True,
                                            nitter_domain_rotator=None) -> Optional[Dict[str, str]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Anubis challenge –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    
    Args:
        session: –ê–∫—Ç–∏–≤–Ω–∞—è aiohttp —Å–µ—Å—Å–∏—è
        url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å challenge
        response_text: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        force_fresh_challenge: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –°–í–ï–ñ–ò–ô challenge (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        nitter_domain_rotator: –†–æ—Ç–∞—Ç–æ—Ä –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –∫—É–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ challenge –Ω–µ –±—ã–ª —Ä–µ—à–µ–Ω
    """
    handler = AnubisHandler(session, nitter_domain_rotator)
    result = await handler.detect_and_solve_challenge(url, response_text, force_fresh_challenge=force_fresh_challenge)
    
    if result and result.get('cookies'):
        return result['cookies']
    return None

def update_cookies_in_dict(existing_cookies: Dict[str, str], new_cookies: Dict[str, str]) -> Dict[str, str]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∫—É–∫–∏ –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    
    Args:
        existing_cookies: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–∫–∏
        new_cookies: –ù–æ–≤—ã–µ –∫—É–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫—É–∫–∏
    """
    updated = existing_cookies.copy()
    updated.update(new_cookies)
    return updated

def update_cookies_in_string(existing_cookies_string: str, new_cookies: Dict[str, str]) -> str:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∫—É–∫–∏ –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    
    Args:
        existing_cookies_string: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –∫—É–∫–∏
        new_cookies: –ù–æ–≤—ã–µ –∫—É–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫—É–∫–∏
    """
    # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–∫–∏
    existing_dict = {}
    if existing_cookies_string:
        for cookie_pair in existing_cookies_string.split(';'):
            cookie_pair = cookie_pair.strip()
            if '=' in cookie_pair:
                name, value = cookie_pair.split('=', 1)
                existing_dict[name.strip()] = value.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏ –∫—É–∫–∏
    updated_dict = update_cookies_in_dict(existing_dict, new_cookies)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    return "; ".join([f"{name}={value}" for name, value in updated_dict.items()])

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def enhanced_twitter_request_with_anubis(session: aiohttp.ClientSession, 
                                             url: str, 
                                             headers: Dict[str, str],
                                             max_retries: int = 3) -> Optional[aiohttp.ClientResponse]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Twitter —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º Anubis challenge
    
    Args:
        session: HTTP —Å–µ—Å—Å–∏—è
        url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        headers: HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
    Returns:
        HTTP –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    """
    for attempt in range(max_retries):
        try:
            async with session.get(url, headers=headers) as response:
                content = await response.text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Anubis challenge
                if "Making sure you're not a bot!" in content:
                    logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    
                    # –†–µ—à–∞–µ–º challenge
                    new_cookies = await handle_anubis_challenge_for_session(session, url, content)
                    
                    if new_cookies:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                        current_cookies = headers.get('Cookie', '')
                        updated_cookies = update_cookies_in_string(current_cookies, new_cookies)
                        headers['Cookie'] = updated_cookies
                        
                        logger.info(f"‚úÖ –ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å")
                        continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –∫—É–∫–∏
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        
                else:
                    # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                    return response
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if attempt < max_retries - 1:
            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return None

if __name__ == "__main__":
    print("ü§ñ Anubis Challenge Handler - –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è Anubis challenge") 