#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ DEX –±–∏—Ä–∂–∞—Ö –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
"""

import pandas as pd
import aiohttp
import asyncio
from datetime import datetime, timedelta
import logging
import time
from dotenv import load_dotenv
from database import get_db_manager, Token
from logger_config import setup_logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

class DexAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ DEX"""
    
    def __init__(self):
        self.session = None
        self.dexscreener_base = "https://api.dexscreener.com/latest"
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_token_data(self, mint_address):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —Å DexScreener"""
        try:
            url = f"{self.dexscreener_base}/dex/tokens/{mint_address}"
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                elif response.status == 429:
                    logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è {mint_address}, –∂–¥–µ–º...")
                    await asyncio.sleep(2)
                    return await self.get_token_data(mint_address)
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–ª—è {mint_address}: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {mint_address}: {e}")
            return None
    
    async def analyze_token_performance(self, token):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω {token.symbol} ({token.mint})")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å DexScreener
            dex_data = await self.get_token_data(token.mint)
            
            if not dex_data or not dex_data.get('pairs'):
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö DEX –¥–ª—è {token.symbol}")
                return None
            
            # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ª–∏–∫–≤–∏–¥–Ω—É—é –ø–∞—Ä—É
            pairs = dex_data['pairs']
            main_pair = max(pairs, key=lambda x: float(x.get('liquidity', {}).get('usd', 0) or 0))
            
            if not main_pair:
                return None
            
            # –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            detection_time = token.updated_at if token.updated_at else token.created_at
            token_age_hours = (datetime.utcnow() - token.created_at).total_seconds() / 3600
            
            # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_price = float(main_pair.get('priceUsd', 0) or 0)
            current_mcap = float(main_pair.get('marketCap', 0) or 0)
            liquidity_usd = float(main_pair.get('liquidity', {}).get('usd', 0) or 0)
            volume_24h = float(main_pair.get('volume', {}).get('h24', 0) or 0)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            price_change_5m = float(main_pair.get('priceChange', {}).get('m5', 0) or 0)
            price_change_1h = float(main_pair.get('priceChange', {}).get('h1', 0) or 0)
            price_change_6h = float(main_pair.get('priceChange', {}).get('h6', 0) or 0)
            price_change_24h = float(main_pair.get('priceChange', {}).get('h24', 0) or 0)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            entry_amounts = [5, 10, 20, 50, 100, 1000]  # USD
            performance_analysis = {}
            
            for amount in entry_amounts:
                if current_price > 0:
                    tokens_bought = amount / current_price
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
                    scenarios = {
                        '2x': tokens_bought * current_price * 2,
                        '5x': tokens_bought * current_price * 5,
                        '10x': tokens_bought * current_price * 10,
                        '50x': tokens_bought * current_price * 50,
                        '100x': tokens_bought * current_price * 100
                    }
                    
                    performance_analysis[f'${amount}'] = {
                        'tokens_bought': tokens_bought,
                        'scenarios': scenarios
                    }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
            status = "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            if volume_24h > 10000:
                status = "–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–µ–Ω"
            elif volume_24h > 1000:
                status = "–ê–∫—Ç–∏–≤–µ–Ω"
            elif volume_24h > 100:
                status = "–£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω"
            elif volume_24h > 10:
                status = "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            
            # –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            liquidity_status = "–ù–∏–∑–∫–∞—è"
            if liquidity_usd > 100000:
                liquidity_status = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
            elif liquidity_usd > 50000:
                liquidity_status = "–í—ã—Å–æ–∫–∞—è"
            elif liquidity_usd > 10000:
                liquidity_status = "–°—Ä–µ–¥–Ω—è—è"
            elif liquidity_usd > 1000:
                liquidity_status = "–ù–∏–∑–∫–∞—è"
            else:
                liquidity_status = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
            
            result = {
                'token': token,
                'dex_data': main_pair,
                'analysis': {
                    'current_price': current_price,
                    'current_mcap': current_mcap,
                    'liquidity_usd': liquidity_usd,
                    'volume_24h': volume_24h,
                    'price_changes': {
                        '5m': price_change_5m,
                        '1h': price_change_1h,
                        '6h': price_change_6h,
                        '24h': price_change_24h
                    },
                    'status': status,
                    'liquidity_status': liquidity_status,
                    'token_age_hours': token_age_hours,
                    'detection_time': detection_time,
                    'performance_analysis': performance_analysis
                }
            }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ {token.symbol}: {e}")
            return None

async def analyze_contract_tokens():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏"""
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        logger.info("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–≤–∏—Ç–æ–≤
        tokens = session.query(Token).filter(
            Token.twitter_contract_tweets > 0,
            Token.mint.isnot(None),
            Token.symbol.isnot(None)
        ).order_by(Token.twitter_contract_tweets.desc()).limit(50).all()  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        results = []
        
        async with DexAnalyzer() as analyzer:
            for i, token in enumerate(tokens, 1):
                logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ {i}/{len(tokens)}: {token.symbol}")
                
                result = await analyzer.analyze_token_performance(token)
                if result:
                    results.append(result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await asyncio.sleep(0.5)
        
        session.close()
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return []

def create_performance_excel(results):
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"dex_performance_analysis_{timestamp}.xlsx"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        main_data = []
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
        entry_analysis_data = []
        
        for result in results:
            token = result['token']
            analysis = result['analysis']
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            main_row = {
                '–°–∏–º–≤–æ–ª': token.symbol,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': token.name or 'N/A',
                '–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞': token.mint,
                '–¢–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º': token.twitter_contract_tweets,
                '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è': token.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                '–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': analysis['detection_time'].strftime('%Y-%m-%d %H:%M:%S'),
                '–í–æ–∑—Ä–∞—Å—Ç (—á–∞—Å—ã)': f"{analysis['token_age_hours']:.1f}",
                
                # DEX –¥–∞–Ω–Ω—ã–µ
                '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ($)': f"{analysis['current_price']:.10f}" if analysis['current_price'] else 'N/A',
                'Market Cap ($)': f"{analysis['current_mcap']:,.0f}" if analysis['current_mcap'] else 'N/A',
                '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ($)': f"{analysis['liquidity_usd']:,.0f}" if analysis['liquidity_usd'] else 'N/A',
                '–û–±—ä–µ–º 24h ($)': f"{analysis['volume_24h']:,.0f}" if analysis['volume_24h'] else 'N/A',
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 5–º (%)': f"{analysis['price_changes']['5m']:.2f}",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 1—á (%)': f"{analysis['price_changes']['1h']:.2f}",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 6—á (%)': f"{analysis['price_changes']['6h']:.2f}",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á (%)': f"{analysis['price_changes']['24h']:.2f}",
                
                # –°—Ç–∞—Ç—É—Å—ã
                '–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': analysis['status'],
                '–°—Ç–∞—Ç—É—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': analysis['liquidity_status'],
                
                # –°—Å—ã–ª–∫–∏
                'DexScreener': f"https://dexscreener.com/solana/{token.mint}",
                'Pump.fun': f"https://pump.fun/{token.mint}"
            }
            main_data.append(main_row)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
            for entry_amount, data in analysis['performance_analysis'].items():
                for scenario, profit in data['scenarios'].items():
                    entry_row = {
                        '–°–∏–º–≤–æ–ª': token.symbol,
                        '–í—Ö–æ–¥ ($)': entry_amount,
                        '–ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤': f"{data['tokens_bought']:.6f}",
                        '–°—Ü–µ–Ω–∞—Ä–∏–π': scenario,
                        '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å ($)': f"{profit:,.2f}",
                        'ROI (%)': f"{((profit / float(entry_amount.replace('$', ''))) - 1) * 100:.0f}",
                        '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞': f"{analysis['current_price']:.10f}",
                        '–û–±—ä–µ–º 24h': f"{analysis['volume_24h']:,.0f}",
                        '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å': f"{analysis['liquidity_usd']:,.0f}"
                    }
                    entry_analysis_data.append(entry_row)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame'—ã
        main_df = pd.DataFrame(main_data)
        entry_df = pd.DataFrame(entry_analysis_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            main_df.to_excel(writer, sheet_name='–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑', index=False)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
            entry_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤', index=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            stats_data = []
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_stats = main_df['–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].value_counts()
            for status, count in activity_stats.items():
                stats_data.append({
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': status,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(count/len(main_df)*100):.1f}%"
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            liquidity_stats = main_df['–°—Ç–∞—Ç—É—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'].value_counts()
            for status, count in liquidity_stats.items():
                stats_data.append({
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å',
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': status,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(count/len(main_df)*100):.1f}%"
                })
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
                
                # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                worksheet.freeze_panes = 'A2'
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ DEX –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ DEX")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    results = await analyze_contract_tokens()
    
    if not results:
        logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
    filename = create_performance_excel(results)
    
    if filename:
        logger.info(f"üìà –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        logger.info(f"  ‚Ä¢ –§–∞–π–ª: {filename}")
        logger.info(f"  ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_count = sum(1 for r in results if r['analysis']['volume_24h'] > 1000)
        high_liquidity_count = sum(1 for r in results if r['analysis']['liquidity_usd'] > 10000)
        
        logger.info(f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (>$1k –æ–±—ä–µ–º): {active_count}")
        logger.info(f"  ‚Ä¢ –° –≤—ã—Å–æ–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é (>$10k): {high_liquidity_count}")
        
        # –õ—É—á—à–∏–µ –ø–æ —Ä–æ—Å—Ç—É –∑–∞ 24—á
        top_gainers = sorted(results, key=lambda x: x['analysis']['price_changes']['24h'], reverse=True)[:5]
        logger.info(f"üìà –¢–û–ü-5 –ø–æ —Ä–æ—Å—Ç—É –∑–∞ 24—á:")
        for i, r in enumerate(top_gainers, 1):
            change = r['analysis']['price_changes']['24h']
            logger.info(f"  {i}. {r['token'].symbol}: {change:+.2f}%")
    
    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main()) 