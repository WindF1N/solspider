import asyncio
import websockets
import json
import requests
import logging
import os
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import re
import time
import random
import ssl
from logging.handlers import RotatingFileHandler
import colorlog
import threading
import aiohttp
from urllib.parse import quote
from database import get_db_manager, TwitterAuthor, Token, Trade, Migration, TweetMention
from logger_config import setup_logging, log_token_analysis, log_trade_activity, log_database_operation, log_daily_stats
from connection_monitor import connection_monitor
from cookie_rotation import proxy_cookie_rotator, background_proxy_cookie_rotator, cookie_rotator
from twitter_profile_parser import TwitterProfileParser


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π Twitter (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ async —Ñ—É–Ω–∫—Ü–∏—è—Ö)
twitter_parser = None

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID", "YOUR_CHAT_ID")
TELEGRAM_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CHAT_IDS = [
    CHAT_ID,  # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –∏–∑ .env
    "203504880"
]

# WebSocket –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBSOCKET_CONFIG = {
    'ping_interval': 30,     # Ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    'ping_timeout': 20,      # –û–∂–∏–¥–∞–Ω–∏–µ pong 20 —Å–µ–∫—É–Ω–¥ 
    'close_timeout': 15,     # –¢–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
    'max_size': 10**7,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (10MB)
    'max_queue': 32,         # –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    'heartbeat_check': 300,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π 5 –º–∏–Ω—É—Ç
    'health_check_interval': 100  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
}

# Nitter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Twitter
NITTER_COOKIE = "techaro.lol-anubis-auth-for-nitter.tiekoetter.com=eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJhY3Rpb24iOiJDSEFMTEVOR0UiLCJjaGFsbGVuZ2UiOiJiMGEyOWM0YzcwZGM0YzYxMjE2NTNkMzQwYTU0YTNmNTFmZmJlNDIwOGM4MWZkZmUxNDA4MTY2MGNmMDc3ZGY2IiwiZXhwIjoxNzQ5NjAyOTA3LCJpYXQiOjE3NDg5OTgxMDcsIm5iZiI6MTc0ODk5ODA0Nywibm9uY2UiOiIxMzI4MSIsInBvbGljeVJ1bGUiOiJlZDU1ZThhMGJkZjcwNGM4NTFkY2RjMjQ3OWZmMTJlMjM1YzY1Y2Q0NjMwZGYwMTgwNGM4ZTgyMzZjMzU1NzE2IiwicmVzcG9uc2UiOiIwMDAwYWEwZjdmMjBjNGQ0MGU5ODIzMWI4MDNmNWZiMGJlMGZjZmZiOGRhOTIzNDUyNDdhZjU1Yjk1MDJlZWE2In0.615N6HT0huTaYXHffqbBWqlpbpUgb7uVCh__TCoIuZLtGzBkdS3K8fGOPkFxHrbIo2OY3bw0igmtgDZKFesjAg"

# –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ Twitter (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
TWITTER_AUTHOR_BLACKLIST = {
    'launchonpump',    # @LaunchOnPump - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    'fake_aio',        # –°–ø–∞–º-–∞–∫–∫–∞—É–Ω—Ç
    'cheeznytrashiny', # –°–ø–∞–º-–∞–∫–∫–∞—É–Ω—Ç
    'drvfh54737952',   # @drvfh54737952 - —Å–ø–∞–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
    'cvxej15391531',   # @cvxej15391531 - —Å–ø–∞–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Ç–≤–∏—Ç = –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
    'cheeze_devs',
    'h1ghlysk1lled',
    'loafzsol',
    'moonminer100x',
    'mmifh46796833',
    'vkhzb26995951',
    'glvgw57181461',
}
# –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ Twitter
twitter_analysis_queue = asyncio.Queue()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
twitter_analysis_results = {}

def send_telegram(message, inline_keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    success_count = 0
    total_chats = 0
    
    for chat_id in CHAT_IDS:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ chat_id
        if not chat_id or chat_id in ["YOUR_CHAT_ID", ""]:
            continue
            
        total_chats += 1
        
        try:
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": False
            }
            
            if inline_keyboard:
                payload["reply_markup"] = {"inline_keyboard": inline_keyboard}
            
            response = requests.post(TELEGRAM_URL, json=payload)
            if response.status_code == 200:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                success_count += 1
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}: {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    
    if success_count > 0:
        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count}/{total_chats} —á–∞—Ç–æ–≤")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
        return False

def send_telegram_photo(photo_url, caption, inline_keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    success_count = 0
    total_chats = 0
    
    for chat_id in CHAT_IDS:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ chat_id
        if not chat_id or chat_id in ["YOUR_CHAT_ID", ""]:
            continue
            
        total_chats += 1
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            photo_url_to_send = f"https://cf-ipfs.com/ipfs/{photo_url.split('/')[-1]}" if photo_url and not photo_url.startswith('http') else photo_url
            
            payload = {
                "chat_id": chat_id,
                "photo": photo_url_to_send,
                "caption": caption,
                "parse_mode": "HTML"
            }
            
            if inline_keyboard:
                payload["reply_markup"] = {"inline_keyboard": inline_keyboard}
            
            photo_response = requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto", json=payload)
            
            if photo_response.status_code == 200:
                logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                success_count += 1
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç: {photo_response.text}")
                text_payload = {
                    "chat_id": chat_id,
                    "text": caption,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": False
                }
                
                if inline_keyboard:
                    text_payload["reply_markup"] = {"inline_keyboard": inline_keyboard}
                
                text_response = requests.post(TELEGRAM_URL, json=text_payload)
                if text_response.status_code == 200:
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {text_response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
    
    if success_count > 0:
        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count}/{total_chats} —á–∞—Ç–æ–≤")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
        return False

async def search_single_query(query, headers, retry_count=0, use_quotes=False, cycle_cookie=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Nitter —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ 429 –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π cookies"""
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä since (UTC)
    yesterday = (datetime.utcnow() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–∏—Å–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
    url = f"https://nitter.tiekoetter.com/search?f=tweets&q={quote(query)}&since={yesterday}&until=&near="
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏+cookie –¥–ª—è —Ü–∏–∫–ª–∞ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ
    if cycle_cookie:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω cycle_cookie, –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏
        proxy = None
        current_cookie = cycle_cookie
        for pair in proxy_cookie_rotator.proxy_cookie_pairs:
            if pair['cookie'] == cycle_cookie:
                proxy = pair['proxy']
                break
    else:
        proxy, current_cookie = proxy_cookie_rotator.get_next_proxy_cookie()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å cookie
    headers_with_cookie = headers.copy()
    headers_with_cookie['Cookie'] = current_cookie
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        import aiohttp
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        connector = None
        request_kwargs = {}
        if proxy:
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API (aiohttp 3.8+)
                connector = aiohttp.ProxyConnector.from_url(proxy)
                proxy_info = proxy.split('@')[1] if '@' in proxy else proxy
                logger.debug(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ ProxyConnector: {proxy_info}")
            except AttributeError:
                # –î–ª—è aiohttp 3.9.1 - –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ get()
                connector = aiohttp.TCPConnector()
                request_kwargs['proxy'] = proxy
                proxy_info = proxy.split('@')[1] if '@' in proxy else proxy
                logger.debug(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞–ø—Ä—è–º—É—é: {proxy_info}")
        
        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.get(url, headers=headers_with_cookie, timeout=20, **request_kwargs) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Nitter
                    title = soup.find('title')
                    if title and 'Making sure you\'re not a bot!' in title.get_text():
                        logger.error(f"üö´ NITTER –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù! –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏ –¥–ª—è '{query}' –∫—É–∫–∏ '{current_cookie}'")
                        logger.error("üîß –û–±–Ω–æ–≤–∏—Ç–µ –∫—É–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π NITTER_COOKIE")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        alert_message = (
                            f"üö´ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!</b>\n\n"
                            f"ü§ñ <b>Nitter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n"
                            f"üîß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–∫</b>\n\n"
                            f"üìç <b>–ó–∞–ø—Ä–æ—Å:</b> {query}\n"
                            f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> 'Making sure you're not a bot!'\n\n"
                            f"üõ†Ô∏è <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
                            f"1. –û–±–Ω–æ–≤–∏—Ç–µ NITTER_COOKIE\n"
                            f"2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
                            f"‚ùå <b>Twitter –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!</b>"
                        )
                        send_telegram(alert_message)
                        return []
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–≤–∏—Ç—ã
                    tweets = soup.find_all('div', class_='timeline-item')
                    tweet_count = len(tweets)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
                    is_contract_query = len(query) > 20
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–≤–∏—Ç–∞—Ö
                    engagement = 0
                    for tweet in tweets:
                        stats = tweet.find_all('span', class_='tweet-stat')
                        for stat in stats:
                            icon_container = stat.find('div', class_='icon-container')
                            if icon_container:
                                text = icon_container.get_text(strip=True)
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ (–ª–∞–π–∫–∏, —Ä–µ—Ç–≤–∏—Ç—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                                numbers = re.findall(r'\d+', text)
                                if numbers:
                                    engagement += int(numbers[0])
                    
                    quote_status = "—Å –∫–∞–≤—ã—á–∫–∞–º–∏" if use_quotes else "–±–µ–∑ –∫–∞–≤—ã—á–µ–∫"
                    logger.info(f"üîç Nitter –∞–Ω–∞–ª–∏–∑ '{query}' ({quote_status}): {tweet_count} —Ç–≤–∏—Ç–æ–≤, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {engagement}")
                    
                    # –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
                    authors_data = []
                    if is_contract_query and tweet_count > 0:
                        authors_data = await extract_tweet_authors(soup, query, True)
                        if authors_data:
                            logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(authors_data)} –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–≤–∏—Ç—ã —Å –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                    tweet_data = []
                    for tweet in tweets:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–≤–∏—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                        tweet_link = tweet.find('a', class_='tweet-link')
                        tweet_time = tweet.find('span', class_='tweet-date')
                        tweet_text = tweet.find('div', class_='tweet-content')
                        
                        tweet_id = None
                        if tweet_link and 'href' in tweet_link.attrs:
                            tweet_id = tweet_link['href']
                        elif tweet_time and tweet_text:
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ + —Ç–µ–∫—Å—Ç–∞
                            time_text = tweet_time.get_text(strip=True) if tweet_time else ""
                            content_text = tweet_text.get_text(strip=True)[:50] if tweet_text else ""
                            tweet_id = f"{time_text}_{hash(content_text)}"
                        
                        if tweet_id:
                            tweet_data.append({
                                'id': tweet_id,
                                'engagement': 0,  # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
                                'authors': authors_data if is_contract_query else []
                            })
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–≤–∏—Ç–∞—Ö
                    for i, tweet in enumerate(tweets):
                        if i < len(tweet_data):
                            stats = tweet.find_all('span', class_='tweet-stat')
                            for stat in stats:
                                icon_container = stat.find('div', class_='icon-container')
                                if icon_container:
                                    text = icon_container.get_text(strip=True)
                                    numbers = re.findall(r'\d+', text)
                                    if numbers:
                                        tweet_data[i]['engagement'] += int(numbers[0])
                    
                    return tweet_data
                elif response.status == 429:
                    # –û—à–∏–±–∫–∞ 429 - Too Many Requests, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
                    if retry_count < 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º–∏—Å—è –ø–∞—É–∑–∞–º–∏
                        pause_time = 0.1  # –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ø–∞—É–∑–∞ –ø—Ä–∏ 429
                        logger.warning(f"‚ö†Ô∏è Nitter 429 (Too Many Requests) –¥–ª—è '{query}', –∂–¥—ë–º {pause_time}—Å (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/2)")
                        await asyncio.sleep(pause_time)
                        return await search_single_query(query, headers, retry_count + 1, use_quotes, cycle_cookie)
                    else:
                        # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–º–µ—á–∞–µ–º —Å–≤—è–∑–∫—É –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
                        if not cycle_cookie:  # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cycle_cookie
                            proxy_cookie_rotator.mark_pair_failed(proxy, current_cookie)
                            logger.warning(f"‚ùå [PUMP_BOT] –°–≤—è–∑–∫–∞ –ø—Ä–æ–∫—Å–∏+cookie –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ—Å–ª–µ 429 –æ—à–∏–±–æ–∫")
                        logger.error(f"‚ùå Nitter 429 (Too Many Requests) –¥–ª—è '{query}' - –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                        return []
                else:
                    logger.warning(f"‚ùå Nitter –æ—Ç–≤–µ—Ç–∏–ª {response.status} –¥–ª—è '{query}'")
                    return []
                    
    except Exception as e:
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö
        error_type = type(e).__name__
        error_msg = str(e)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if "TimeoutError" in error_type or "timeout" in error_msg.lower():
            logger.error(f"‚è∞ –¢–ê–ô–ú–ê–£–¢ –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "TIMEOUT"
        elif "ConnectionError" in error_type or "connection" in error_msg.lower():
            logger.error(f"üîå –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "CONNECTION"
        elif "429" in error_msg or "too many requests" in error_msg.lower():
            logger.error(f"üö´ –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "RATE_LIMIT"
        elif "blocked" in error_msg.lower() or "bot" in error_msg.lower():
            logger.error(f"ü§ñ –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "BLOCKED"
        else:
            logger.error(f"‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "UNKNOWN"
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö (–Ω–µ —Ç–æ–ª—å–∫–æ 429)
        if retry_count < 3:
            logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è '{query}' –ø–æ—Å–ª–µ {error_category} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/3)")
            return await search_single_query(query, headers, retry_count + 1, use_quotes, cycle_cookie)
        else:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è '{query}' –ø–æ—Å–ª–µ {error_category} - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            return {"error": error_category, "message": error_msg, "type": error_type}

async def analyze_token_sentiment(mint, symbol, cycle_cookie=None):
    """–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–∞ –≤ Twitter —á–µ—Ä–µ–∑ Nitter (2 –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω cookie –¥–ª—è –≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ (2 –∑–∞–ø—Ä–æ—Å–∞)
        if not cycle_cookie:
            _, cycle_cookie = proxy_cookie_rotator.get_cycle_proxy_cookie()
            logger.debug(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–≤—è–∑–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ {symbol}")
            
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ cookie (cookie –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ search_single_query)
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        # 2 –∑–∞–ø—Ä–æ—Å–∞: —Å–∏–º–≤–æ–ª –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —Ç–æ–ª—å–∫–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        search_queries = [
            (f'${symbol}', False),  # –°–∏–º–≤–æ–ª –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
            (mint, False)           # –ö–æ–Ω—Ç—Ä–∞–∫—Ç –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ø–∞—É–∑–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        results = []
        error_details = []
        for i, (query, use_quotes) in enumerate(search_queries):
            try:
                result = await search_single_query(query, headers, use_quotes=use_quotes, cycle_cookie=cycle_cookie)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                if isinstance(result, dict) and "error" in result:
                    error_details.append({
                        "query": query,
                        "error_category": result["error"],
                        "error_message": result["message"],
                        "error_type": result["type"]
                    })
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1} –¥–ª—è '{query}': {result['error']} - {result['message']}")
                    results.append([])  # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                else:
                    results.append(result)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {e}")
                error_details.append({
                    "query": query,
                    "error_category": "UNEXPECTED",
                    "error_message": str(e),
                    "error_type": type(e).__name__
                })
                results.append(e)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–≤–∏—Ç—ã –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        all_tweets = {}
        symbol_tweets_count = 0
        contract_tweets_count = 0
        contract_authors = []  # –ê–≤—Ç–æ—Ä—ã —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
        
        for i, result in enumerate(results):
            if isinstance(result, Exception) or not result:
                continue
                
            for tweet_data in result:
                tweet_id = tweet_data['id']
                engagement = tweet_data['engagement']
                authors = tweet_data.get('authors', [])
                
                # –ï—Å–ª–∏ —Ç–≤–∏—Ç —É–∂–µ –µ—Å—Ç—å, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if tweet_id in all_tweets:
                    all_tweets[tweet_id] = max(all_tweets[tweet_id], engagement)
                else:
                    all_tweets[tweet_id] = engagement
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–≤–∏—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    if i == 0:  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Å–∏–º–≤–æ–ª
                        symbol_tweets_count += 1
                    else:  # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                        contract_tweets_count += 1
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
                        contract_authors.extend(authors)
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–¥—Å—á–µ—Ç—ã
        total_tweets = len(all_tweets)
        total_engagement = sum(all_tweets.values())
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ '{symbol}': {total_tweets} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤ (—Å–∏–º–≤–æ–ª: {symbol_tweets_count}, –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_tweets_count}), –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_engagement}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
        if total_tweets == 0:
                    return {
            'tweets': 0,
            'symbol_tweets': 0,
            'contract_tweets': 0,
            'engagement': 0,
            'score': 0,
            'rating': 'üî¥ –ú–∞–ª–æ –≤–Ω–∏–º–∞–Ω–∏—è',
                'contract_found': False,
                'contract_authors': [],
                'error_details': error_details  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        }
        
        # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ç–≤–∏—Ç
        avg_engagement = total_engagement / total_tweets if total_tweets > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä
        score = (total_tweets * 0.3) + (avg_engagement * 0.7)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if score >= 50:
            rating = 'üü¢ –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å'
        elif score >= 20:
            rating = 'üü° –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å'
        elif score >= 5:
            rating = 'üü† –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å'
        else:
            rating = 'üî¥ –ú–∞–ª–æ –≤–Ω–∏–º–∞–Ω–∏—è'
        
        return {
            'tweets': total_tweets,
            'symbol_tweets': symbol_tweets_count,
            'contract_tweets': contract_tweets_count,
            'engagement': total_engagement,
            'score': round(score, 1),
            'rating': rating,
            'contract_found': contract_tweets_count > 0,
            'contract_authors': contract_authors,
            'error_details': error_details  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return {
            'tweets': 0,
            'symbol_tweets': 0,
            'contract_tweets': 0,
            'engagement': 0,
            'score': 0,
            'rating': '‚ùì –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
            'contract_found': False,
            'contract_authors': [],
            'error_details': [{"query": symbol, "error_category": "SYSTEM_ERROR", "error_message": str(e), "error_type": type(e).__name__}]
        }

async def format_new_token(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ —Å –±—ã—Å—Ç—Ä—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ —Ñ–æ–Ω–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º Twitter"""
    mint = data.get('mint', 'Unknown')
    name = data.get('name', 'Unknown Token')
    symbol = data.get('symbol', 'UNK')
    description = data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    creator = data.get('traderPublicKey', 'Unknown')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ Twitter –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    twitter_analysis = {
        'tweets': 0,
        'symbol_tweets': 0,
        'contract_tweets': 0,
        'engagement': 0,
        'score': 0,
        'rating': '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...',
        'contract_found': False,
        'contract_authors': []
    }
    
    # –ë–´–°–¢–†–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ Twitter
    token_id = None
    try:
        db_manager = get_db_manager()
        saved_token = db_manager.save_token(data, twitter_analysis)
        # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º mint –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        if saved_token:
            token_id = mint  # –ò—Å–ø–æ–ª—å–∑—É–µ–º mint –∫–∞–∫ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ
        logger.info(f"‚ö° –ë–´–°–¢–†–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–∫–µ–Ω {symbol} –≤ –ë–î")
        log_database_operation("SAVE_TOKEN", "tokens", "SUCCESS", f"Symbol: {symbol}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î: {e}")
        log_database_operation("SAVE_TOKEN", "tokens", "ERROR", str(e))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Twitter
    try:
        await twitter_analysis_queue.put(data)
        logger.info(f"üìã –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Twitter")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    uri = data.get('uri', '')
    initial_buy = data.get('initialBuy', 0)
    market_cap = data.get('marketCap', 0)
    creator_percentage = data.get('creatorPercentage', 0)
    twitter = data.get('twitter', '')
    telegram = data.get('telegram', '')
    website = data.get('website', '')
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(description) > 200:
        description = description[:200] + "..."
    
    # –ü–æ–ª—É—á–∞–µ–º bondingCurveKey –¥–ª—è –∫–Ω–æ–ø–æ–∫
    bonding_curve_key = data.get('bondingCurveKey', 'Not available')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
    token_created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    message = (
        f"üöÄ <b>–ù–û–í–´–ô –¢–û–ö–ï–ù –ù–ê PUMP.FUN!</b>\n\n"
        f"<b>üíé <a href='https://pump.fun/{mint}'>{name}</a></b>\n"
        f"<b>üè∑Ô∏è –°–∏–º–≤–æ–ª:</b> {symbol}\n"
        f"<b>üìç Mint:</b> <code>{mint}</code>\n"
        f"<b>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> <code>{creator[:8] if len(creator) > 8 else creator}...</code>\n"
        f"<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> {token_created_at}\n"
        f"<b>üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:</b> {initial_buy} SOL\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º Market Cap —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0
    if market_cap > 0:
        message += f"<b>üìä Market Cap:</b> ${market_cap:,.0f}\n"
    
    message += (
        f"<b>üë®‚Äçüíº –î–æ–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è:</b> {creator_percentage}%\n"
        f"<b>üê¶ Twitter –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {twitter_analysis['rating']}\n"
        f"<b>üìà –¢–≤–∏—Ç—ã:</b> {twitter_analysis['tweets']} | <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {twitter_analysis['engagement']} | <b>–°–∫–æ—Ä:</b> {twitter_analysis['score']}\n"
        f"<b>üîç –ü–æ–∏—Å–∫:</b> –°–∏–º–≤–æ–ª: {twitter_analysis['symbol_tweets']} | –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {twitter_analysis['contract_tweets']} {'‚úÖ' if twitter_analysis['contract_found'] else '‚ùå'}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    if description and description.strip() and description.strip() != "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è":
        message += f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if twitter:
        message += f"<b>üê¶ Twitter:</b> <a href='{twitter}'>–°—Å—ã–ª–∫–∞</a>\n"
    if telegram:
        message += f"<b>üí¨ Telegram:</b> <a href='{telegram}'>–°—Å—ã–ª–∫–∞</a>\n"
    if website:
        message += f"<b>üåê Website:</b> <a href='{website}'>–°—Å—ã–ª–∫–∞</a>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
    if twitter_analysis.get('contract_authors'):
        authors = twitter_analysis['contract_authors']
        total_followers = sum([author.get('followers_count', 0) for author in authors])
        verified_count = sum([1 for author in authors if author.get('is_verified', False)])
        
        message += f"\n\n<b>üë• –ê–í–¢–û–†–´ –¢–í–ò–¢–û–í –° –ö–û–ù–¢–†–ê–ö–¢–û–ú ({len(authors)} –∞–≤—Ç–æ—Ä–æ–≤):</b>\n"
        message += f"   üìä –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        if verified_count > 0:
            message += f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_count}\n"
        message += "\n"
        
        for i, author in enumerate(authors[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∞–≤—Ç–æ—Ä–æ–≤
            username = author.get('username', 'Unknown')
            display_name = author.get('display_name', username)
            followers = author.get('followers_count', 0)
            verified = "‚úÖ" if author.get('is_verified', False) else ""
            tweet_text = author.get('tweet_text', '')  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞
            tweet_date = author.get('tweet_date', '')  # –î–∞—Ç–∞ —Ç–≤–∏—Ç–∞
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–º–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            diversity_percent = author.get('contract_diversity', 0)
            spam_percent = author.get('max_contract_spam', 0)
            diversity_recommendation = author.get('diversity_recommendation', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            spam_analysis = author.get('spam_analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            is_spam_likely = author.get('is_spam_likely', False)
            total_contract_tweets = author.get('total_contract_tweets', 0)
            unique_contracts = author.get('unique_contracts_count', 0)
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∞ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = —Ö–æ—Ä–æ—à–æ)
            spam_indicator = ""
            if spam_percent >= 80:
                spam_indicator = " üî•"  # –í—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            elif spam_percent >= 60:
                spam_indicator = " ‚≠ê"  # –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
            elif spam_percent >= 40:
                spam_indicator = " üü°"  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
            elif is_spam_likely:
                spam_indicator = " üö´"  # –ú–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            
            message += f"{i+1}. <b>@{username}</b> {verified}{spam_indicator}\n"
            if display_name != username:
                message += f"   üìù {display_name}\n"
            
            # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
            following_count = author.get('following_count', 0)
            tweets_count = author.get('tweets_count', 0)
            likes_count = author.get('likes_count', 0)
            join_date = author.get('join_date', '')
            
            if followers > 0 or following_count > 0 or tweets_count > 0:
                message += f"   üë• {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ | {following_count:,} –ø–æ–¥–ø–∏—Å–æ–∫\n"
                message += f"   üìù {tweets_count:,} —Ç–≤–∏—Ç–æ–≤ | ‚ù§Ô∏è {likes_count:,} –ª–∞–π–∫–æ–≤\n"
                if join_date:
                    message += f"   üìÖ –°–æ–∑–¥–∞–Ω: {join_date}\n"
            
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if tweet_date:
                    message += f"   üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_date}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–≤–∏—Ç–∞
                tweet_type = author.get('tweet_type', '–¢–≤–∏—Ç')
                type_emoji = "üí¨" if tweet_type == "–û—Ç–≤–µ—Ç" else "üê¶"
                message += f"   {type_emoji} –¢–∏–ø: {tweet_type}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
                historical_data = db_manager.get_author_historical_data(author.get('username', ''))
                if historical_data and historical_data.get('total_mentions', 0) > 0:
                    total_mentions = historical_data.get('total_mentions', 0)
                    unique_tokens = historical_data.get('unique_tokens', 0)
                    recent_7d = historical_data.get('recent_mentions_7d', 0)
                    recent_30d = historical_data.get('recent_mentions_30d', 0)
                    
                    message += f"   üìä –ò—Å—Ç–æ—Ä–∏—è: {total_mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ({unique_tokens} —Ç–æ–∫–µ–Ω–æ–≤)\n"
                    if recent_7d > 0 or recent_30d > 0:
                        message += f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {recent_7d} –∑–∞ 7–¥, {recent_30d} –∑–∞ 30–¥\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            if total_contract_tweets > 0:
                message += f"   üìä –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {unique_contracts} –∏–∑ {total_contract_tweets} —Ç–≤–∏—Ç–æ–≤ (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {spam_percent:.1f}%)\n"
                message += f"   üéØ –ê–Ω–∞–ª–∏–∑: {spam_analysis}\n"
            
            # –í–µ—Å—å —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞ –≤ —Ü–∏—Ç–∞—Ç–µ
            if tweet_text:
                message += f"   üí¨ <blockquote>{tweet_text}</blockquote>\n"
    
    message += f"\n<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
    
    # –ü–æ–ª—É—á–∞–µ–º bondingCurveKey –¥–ª—è Axiom
    bonding_curve_key = data.get('bondingCurveKey', mint)  # Fallback to mint if no bondingCurveKey
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{bonding_curve_key}"},
            {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{mint}"}
        ],
        [
            {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{mint}"}
        ]
    ]
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –±—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ Twitter –≤ —Ñ–æ–Ω–µ
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Ç - Twitter –∞–Ω–∞–ª–∏–∑ –∏–¥–µ—Ç –≤ —Ñ–æ–Ω–µ
    immediate_notify = False  # –û–¢–ö–õ–Æ–ß–ê–ï–ú –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Å –∞–Ω–∞–ª–∏–∑–æ–º Twitter
    
    # –í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    logger.info(f"‚ö° –¢–æ–∫–µ–Ω {symbol} - –±—ã—Å—Ç—Ä–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, Twitter –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
    
    should_notify = immediate_notify
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞
    log_token_analysis(data, twitter_analysis, should_notify)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É Axiom)
    token_image_url = f"https://axiomtrading.sfo3.cdn.digitaloceanspaces.com/{mint}.webp"
    
    return message, keyboard, should_notify, token_image_url

def format_trade_alert(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω–æ–π —Å–¥–µ–ª–∫–µ"""
    mint = data.get('mint', 'Unknown')
    trader = data.get('traderPublicKey', 'Unknown')
    is_buy = data.get('is_buy', True)
    sol_amount = float(data.get('sol_amount', 0))
    token_amount = data.get('token_amount', 0)
    market_cap = data.get('market_cap', 0)
    
    action = "üü¢ –ü–û–ö–£–ü–ö–ê" if is_buy else "üî¥ –ü–†–û–î–ê–ñ–ê"
    action_emoji = "üìà" if is_buy else "üìâ"
    
    message = (
        f"{action_emoji} <b>{action}</b>\n\n"
        f"<b>üí∞ –°—É–º–º–∞:</b> {sol_amount:.4f} SOL\n"
        f"<b>ü™ô –¢–æ–∫–µ–Ω–æ–≤:</b> {token_amount:,}\n"
        f"<b>üìä Market Cap:</b> ${market_cap:,.0f}\n"
        f"<b>üìç Mint:</b> <code>{mint}</code>\n"
        f"<b>üë§ –¢—Ä–µ–π–¥–µ—Ä:</b> <code>{trader[:8] if len(trader) > 8 else trader}...</code>\n"
        f"<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º bondingCurveKey –¥–ª—è Axiom
    bonding_curve_key = data.get('bondingCurveKey', mint)  # Fallback to mint if no bondingCurveKey
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard = [
        [
            {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{bonding_curve_key}"},
            {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{mint}"}
        ],
        [
            {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{mint}"}
        ]
    ]
    
    return message, keyboard

async def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
    try:
        data = json.loads(message)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        if 'mint' in data and 'name' in data and 'symbol' in data:
            token_name = data.get('name', 'Unknown')
            mint = data.get('mint', 'Unknown')
            symbol = data.get('symbol', 'Unknown')
            logger.info(f"üöÄ –ù–û–í–´–ô –¢–û–ö–ï–ù: {token_name} ({symbol}) - {mint[:8]}...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg, keyboard, should_notify, token_image_url = await format_new_token(data)
            
            if should_notify:
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                send_telegram_photo(token_image_url, msg, keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î
                try:
                    db_manager = get_db_manager()
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ notification_sent
                    log_database_operation("UPDATE_NOTIFICATION", "tokens", "SUCCESS", f"Symbol: {symbol}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            else:
                logger.info(f"‚ùå –¢–æ–∫–µ–Ω {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        elif 'mint' in data and 'traderPublicKey' in data and 'sol_amount' in data:
            sol_amount = float(data.get('sol_amount', 0))
            is_buy = data.get('is_buy', True)
            mint = data.get('mint', 'Unknown')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ë–î
            notification_sent = False
            try:
                db_manager = get_db_manager()
                saved_trade = db_manager.save_trade(data)
                log_database_operation("SAVE_TRADE", "trades", "SUCCESS", 
                                     f"Amount: {sol_amount:.2f} SOL")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î: {e}")
                log_database_operation("SAVE_TRADE", "trades", "ERROR", str(e))
            
            # –¢–û–†–ì–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
            if sol_amount >= 5.0:
                logger.info(f"üí∞ –ö—Ä—É–ø–Ω–∞—è {'–ø–æ–∫—É–ø–∫–∞' if is_buy else '–ø—Ä–æ–¥–∞–∂–∞'}: {sol_amount:.2f} SOL (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
                # msg, keyboard = format_trade_alert(data)
                # notification_sent = send_telegram(msg, keyboard)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_trade_activity(data, notification_sent)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Raydium
        elif 'mint' in data and 'bondingCurveKey' in data and 'liquiditySol' in data:
            logger.info(f"üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê RAYDIUM: {data.get('mint', 'Unknown')[:8]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –ë–î
            try:
                db_manager = get_db_manager()
                saved_migration = db_manager.save_migration(data)
                log_database_operation("SAVE_MIGRATION", "migrations", "SUCCESS", 
                                     f"Mint: {data.get('mint', 'Unknown')[:8]}...")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î: {e}")
                log_database_operation("SAVE_MIGRATION", "migrations", "ERROR", str(e))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def send_daily_stats():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        db_manager = get_db_manager()
        stats = db_manager.get_token_stats()
        
        if stats:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            log_daily_stats(stats)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = (
                f"üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SolSpider</b>\n\n"
                f"üìà <b>–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {stats['total_tokens']:,}\n"
                f"üí∞ <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {stats['total_trades']:,}\n"
                f"üöÄ <b>–ú–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ Raydium:</b> {stats['total_migrations']:,}\n"
                f"üíé <b>–ö—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ 24—á:</b> {stats['big_trades_24h']:,}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ç–æ–∫–µ–Ω—ã –ø–æ Twitter —Å–∫–æ—Ä—É
            if stats['top_tokens']:
                stats_message += "<b>üèÜ –¢–û–ü –¢–û–ö–ï–ù–´ –ø–æ Twitter —Å–∫–æ—Ä—É:</b>\n"
                for i, token in enumerate(stats['top_tokens'][:5], 1):
                    stats_message += f"{i}. {token['symbol']} - {token['score']:.1f}\n"
            
            stats_message += f"\n<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            send_telegram(stats_message)
            logger.info("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def check_connection_health(websocket):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π ping
        pong_waiter = await websocket.ping()
        await asyncio.wait_for(pong_waiter, timeout=5)
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: {e}")
        return False

async def extract_tweet_authors(soup, query, contract_found):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ —Ç–≤–∏—Ç–æ–≤ –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö –ø—Ä–æ—Ñ–∏–ª–∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
    authors_data = []
    
    if not contract_found:
        return authors_data  # –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    
    try:
        tweets = soup.find_all('div', class_='timeline-item')
        retweets_skipped = 0
        
        for tweet in tweets:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ retweet-header - –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —ç—Ç–æ —Ä–µ—Ç–≤–∏—Ç
            retweet_header = tweet.find('div', class_='retweet-header')
            if retweet_header:
                retweets_skipped += 1
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Ç–≤–∏—Ç—ã
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
            author_link = tweet.find('a', class_='username')
            if author_link:
                author_username = author_link.get_text(strip=True).replace('@', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
                if author_username.lower() in TWITTER_AUTHOR_BLACKLIST:
                    logger.info(f"üö´ –ê–≤—Ç–æ—Ä @{author_username} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–≤–∏—Ç–∞ (–æ–±—ã—á–Ω—ã–π —Ç–≤–∏—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç)
                replying_to = tweet.find('div', class_='replying-to')
                tweet_type = "–û—Ç–≤–µ—Ç" if replying_to else "–¢–≤–∏—Ç"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞
                tweet_content = tweet.find('div', class_='tweet-content')
                tweet_text = tweet_content.get_text(strip=True) if tweet_content else ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Ç–≤–∏—Ç–∞
                tweet_date = tweet.find('span', class_='tweet-date')
                tweet_date_text = ""
                if tweet_date:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏–∑ title –∞—Ç—Ä–∏–±—É—Ç–∞ —Å—Å—ã–ª–∫–∏
                    date_link = tweet_date.find('a')
                    if date_link and date_link.get('title'):
                        tweet_date_text = date_link.get('title')
                    else:
                        # –ï—Å–ª–∏ title –Ω–µ—Ç, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç
                        tweet_date_text = tweet_date.get_text(strip=True)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–∏—Ç–∞
                retweets = 0
                likes = 0
                replies = 0
                
                stats = tweet.find_all('span', class_='tweet-stat')
                for stat in stats:
                    icon_container = stat.find('div', class_='icon-container')
                    if icon_container:
                        text = icon_container.get_text(strip=True)
                        numbers = re.findall(r'\d+', text)
                        if numbers:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
                            if 'reply' in str(stat).lower():
                                replies = int(numbers[0])
                            elif 'retweet' in str(stat).lower():
                                retweets = int(numbers[0])
                            elif 'heart' in str(stat).lower() or 'like' in str(stat).lower():
                                likes = int(numbers[0])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
                authors_data.append({
                    'username': author_username,
                    'tweet_text': tweet_text,  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã
                    'tweet_date': tweet_date_text,
                    'tweet_type': tweet_type,  # –¢–∏–ø —Ç–≤–∏—Ç–∞ (–¢–≤–∏—Ç –∏–ª–∏ –û—Ç–≤–µ—Ç)
                    'retweets': retweets,
                    'likes': likes,
                    'replies': replies,
                    'query': query
                })
                
                logger.info(f"üìù –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä —Ç–≤–∏—Ç–∞: @{author_username} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
        
        if retweets_skipped > 0:
            logger.info(f"üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ {retweets_skipped} —Ä–µ—Ç–≤–∏—Ç–æ–≤ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–≤—Ç–æ—Ä–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∞–≤—Ç–æ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        unique_authors = list({author['username']: author for author in authors_data}.values())[:5]
        
        if unique_authors:
            logger.info(f"üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ {len(unique_authors)} –∞–≤—Ç–æ—Ä–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –≤ –ë–î
            db_manager = get_db_manager()
            usernames_to_parse = []
            usernames_to_update = []
            existing_authors = {}
            
            for author in unique_authors:
                username = author['username']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
                session = db_manager.Session()
                try:
                    existing_author = session.query(TwitterAuthor).filter_by(username=username).first()
                    if existing_author:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö (–æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 20 –º–∏–Ω—É—Ç)
                        time_since_update = datetime.utcnow() - existing_author.last_updated
                        minutes_since_update = time_since_update.total_seconds() / 60
                        
                        if minutes_since_update >= 20:
                            # –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                            usernames_to_update.append(username)
                            existing_authors[username] = {
                                'username': existing_author.username,
                                'display_name': existing_author.display_name,
                                'followers_count': existing_author.followers_count,
                                'following_count': existing_author.following_count,
                                'tweets_count': existing_author.tweets_count,
                                'likes_count': existing_author.likes_count,
                                'bio': existing_author.bio,
                                'website': existing_author.website,
                                'join_date': existing_author.join_date,
                                'is_verified': existing_author.is_verified,
                                'avatar_url': existing_author.avatar_url
                            }
                            logger.info(f"üîÑ –ê–≤—Ç–æ—Ä @{username} –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –Ω–æ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ ({minutes_since_update:.1f}–º–∏–Ω) - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                        else:
                            # –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –ë–î
                            existing_authors[username] = {
                                'username': existing_author.username,
                                'display_name': existing_author.display_name,
                                'followers_count': existing_author.followers_count,
                                'following_count': existing_author.following_count,
                                'tweets_count': existing_author.tweets_count,
                                'likes_count': existing_author.likes_count,
                                'bio': existing_author.bio,
                                'website': existing_author.website,
                                'join_date': existing_author.join_date,
                                'is_verified': existing_author.is_verified,
                                'avatar_url': existing_author.avatar_url
                            }
                            logger.info(f"üìã –ê–≤—Ç–æ—Ä @{username} –Ω–∞–π–¥–µ–Ω –≤ –ë–î ({existing_author.followers_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω {minutes_since_update:.1f}–º–∏–Ω –Ω–∞–∑–∞–¥)")
                    else:
                        # –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                        usernames_to_parse.append(username)
                        logger.info(f"üîç –ê–≤—Ç–æ—Ä @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –Ω—É–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞")
                finally:
                    session.close()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
            new_profiles = {}
            updated_profiles = {}
            total_to_load = len(usernames_to_parse) + len(usernames_to_update)
            
            if total_to_load > 0:
                logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {len(usernames_to_parse)} –Ω–æ–≤—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º {len(usernames_to_update)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
                async with TwitterProfileParser() as profile_parser:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    if usernames_to_parse:
                        new_profiles = await profile_parser.get_multiple_profiles(usernames_to_parse)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    if usernames_to_update:
                        updated_profiles = await profile_parser.get_multiple_profiles(usernames_to_update)
            else:
                logger.info(f"‚úÖ –í—Å–µ –∞–≤—Ç–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π")
            
                                # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
            for author in unique_authors:
                username = author['username']
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ > –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ > —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –ë–î
                profile = updated_profiles.get(username) or new_profiles.get(username) or existing_authors.get(username)
                
                if profile and isinstance(profile, dict):
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
                    historical_data = db_manager.get_author_historical_data(username)
                    
                    author.update({
                        'display_name': profile.get('display_name', ''),
                        'followers_count': profile.get('followers_count', 0),
                        'following_count': profile.get('following_count', 0),
                        'tweets_count': profile.get('tweets_count', 0),
                        'likes_count': profile.get('likes_count', 0),
                        'bio': profile.get('bio', ''),
                        'website': profile.get('website', ''),
                        'join_date': profile.get('join_date', ''),
                        'is_verified': profile.get('is_verified', False),
                        'avatar_url': profile.get('avatar_url', ''),
                        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        'historical_data': historical_data
                    })
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–≤–∏—Ç—ã —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    author_tweets_on_page = []
                    for author_data in authors_data:
                        if author_data['username'] == username:
                            author_tweets_on_page.append(author_data['tweet_text'])
                    
                    # –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ @{username} (–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –ø—Ä–æ—Ñ–∏–ª—è)")
                    page_analysis = await analyze_author_page_contracts(username, tweets_on_page=None, load_from_profile=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    total_analyzed_tweets = page_analysis['total_tweets_on_page']
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    if total_analyzed_tweets < 3:
                        if page_analysis['diversity_category'] == '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞':
                            # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ
                            logger.warning(f"üåê @{username}: —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                            page_analysis['is_spam_likely'] = False
                            page_analysis['recommendation'] = "üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
                        else:
                            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –º–∞–ª–æ —Ç–≤–∏—Ç–æ–≤ = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç)
                            logger.info(f"üÜï @{username}: –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å {total_analyzed_tweets} —Ç–≤–∏—Ç–∞–º–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª!")
                            page_analysis['is_spam_likely'] = False  # –ù–ï —Å–ø–∞–º–µ—Ä!
                            page_analysis['spam_analysis'] = f"–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {total_analyzed_tweets} —Ç–≤–∏—Ç–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"
                            page_analysis['recommendation'] = "üÜï –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢ - —Ö–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª"
                    
                    author.update({
                        'contract_diversity': page_analysis['contract_diversity_percent'],
                        'max_contract_spam': page_analysis['max_contract_spam_percent'],
                        'diversity_recommendation': page_analysis['recommendation'],
                        'is_spam_likely': page_analysis['is_spam_likely'],
                        'diversity_category': page_analysis['diversity_category'],
                        'spam_analysis': page_analysis['spam_analysis'],
                        'total_contract_tweets': page_analysis['total_tweets_on_page'],
                        'unique_contracts_count': page_analysis['unique_contracts_on_page']
                    })
                    
                    logger.info(f"üìä @{username}: {page_analysis['total_tweets_on_page']} —Ç–≤–∏—Ç–æ–≤, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {page_analysis['max_contract_spam_percent']:.1f}%, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {page_analysis['contract_diversity_percent']:.1f}% - {page_analysis['recommendation']}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    if username in usernames_to_parse:
                        try:
                            db_manager.save_twitter_author(profile)
                            db_manager.save_tweet_mention({
                                'mint': query if len(query) > 20 else None,  # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —ç—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                                'author_username': username,
                                'tweet_text': author['tweet_text'],
                                'search_query': query,
                                'retweets': author['retweets'],
                                'likes': author['likes'],
                                'replies': author['replies'],
                                'author_followers_at_time': profile.get('followers_count', 0),
                                'author_verified_at_time': profile.get('is_verified', False)
                            })
                            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å @{username} –≤ –ë–î ({profile.get('followers_count', 0):,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è @{username}: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    elif username in usernames_to_update:
                        try:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                            session = db_manager.Session()
                            try:
                                existing_author = session.query(TwitterAuthor).filter_by(username=username).first()
                                if existing_author:
                                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                    old_followers = existing_author.followers_count
                                    new_followers = profile.get('followers_count', 0)
                                    followers_change = new_followers - old_followers
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è
                                    existing_author.display_name = profile.get('display_name', existing_author.display_name)
                                    existing_author.followers_count = new_followers
                                    existing_author.following_count = profile.get('following_count', existing_author.following_count)
                                    existing_author.tweets_count = profile.get('tweets_count', existing_author.tweets_count)
                                    existing_author.likes_count = profile.get('likes_count', existing_author.likes_count)
                                    existing_author.bio = profile.get('bio', existing_author.bio)
                                    existing_author.website = profile.get('website', existing_author.website)
                                    existing_author.join_date = profile.get('join_date', existing_author.join_date)
                                    existing_author.is_verified = profile.get('is_verified', existing_author.is_verified)
                                    existing_author.avatar_url = profile.get('avatar_url', existing_author.avatar_url)
                                    existing_author.last_updated = datetime.utcnow()
                                    
                                    session.commit()
                                    
                                    change_info = f" ({followers_change:+,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)" if followers_change != 0 else ""
                                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å @{username} –≤ –ë–î ({new_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤{change_info})")
                            finally:
                                session.close()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–∏—Ç
                            db_manager.save_tweet_mention({
                                'mint': query if len(query) > 20 else None,
                                'author_username': username,
                                'tweet_text': author['tweet_text'],
                                'search_query': query,
                                'retweets': author['retweets'],
                                'likes': author['likes'],
                                'replies': author['replies'],
                                'author_followers_at_time': profile.get('followers_count', 0),
                                'author_verified_at_time': profile.get('is_verified', False)
                            })
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è @{username}: {e}")
                    
                    # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–≤–∏—Ç
                    else:
                        try:
                            db_manager.save_tweet_mention({
                                'mint': query if len(query) > 20 else None,
                                'author_username': username,
                                'tweet_text': author['tweet_text'],
                                'search_query': query,
                                'retweets': author['retweets'],
                                'likes': author['likes'],
                                'replies': author['replies'],
                                'author_followers_at_time': profile.get('followers_count', 0),
                                'author_verified_at_time': profile.get('is_verified', False)
                            })
                            logger.info(f"üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–≤–∏—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞ @{username} (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–≤–∏—Ç–∞ @{username}: {e}")
                else:
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/–Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å @{username}")
                    author.update({
                        'display_name': f'@{username}',
                        'followers_count': 0,
                        'following_count': 0,
                        'tweets_count': 0,
                        'likes_count': 0,
                        'bio': '',
                        'website': '',
                        'join_date': '',
                        'is_verified': False,
                        'avatar_url': '',
                        'contract_diversity': 0,
                        'max_contract_spam': 0,
                        'diversity_recommendation': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        'is_spam_likely': False,
                        'diversity_category': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'spam_analysis': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        'total_contract_tweets': 0,
                        'unique_contracts_count': 0
                    })
                    
                    # –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–∏—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    try:
                        db_manager.save_tweet_mention({
                            'mint': query if len(query) > 20 else None,
                            'author_username': username,
                            'tweet_text': author['tweet_text'],
                            'search_query': query,
                            'retweets': author['retweets'],
                            'likes': author['likes'],
                            'replies': author['replies'],
                            'author_followers_at_time': 0,
                            'author_verified_at_time': False
                        })
                        logger.info(f"üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–≤–∏—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞ @{username} (–±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è)")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–≤–∏—Ç–∞ @{username}: {e}")
        
        # –ù–û–í–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∏—Å–∫–ª—é—á–∞–µ–º —Å–ø–∞–º–µ—Ä–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        filtered_authors = []
        excluded_count = 0
        
        for author in unique_authors:
            username = author.get('username', 'Unknown')
            
            # –§–ò–õ–¨–¢–† 1 –û–¢–ö–õ–Æ–ß–ï–ù: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ª–∞–π–∫–æ–≤/–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            # if is_account_suspicious_by_metrics(author):
            #     excluded_count += 1
            #     logger.info(f"üö´ –ê–≤—Ç–æ—Ä @{username} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            #     continue
            
            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤ (90%+ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)
            diversity_percent = author.get('contract_diversity', 0)
            spam_percent = author.get('max_contract_spam', 0)
            total_tweets = author.get('total_contract_tweets', 0)
            
            # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –ø–∏—à–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ 90%+ —Å–æ–æ–±—â–µ–Ω–∏–π
            if total_tweets >= 3 and (spam_percent >= 90 or diversity_percent >= 90):
                excluded_count += 1
                logger.info(f"üö´ –ê–≤—Ç–æ—Ä @{username} –∏—Å–∫–ª—é—á–µ–Ω - –ß–ò–°–¢–´–ô –°–ü–ê–ú–ï–† (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ {max(spam_percent, diversity_percent):.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π)")
                continue
            
            # –ê–≤—Ç–æ—Ä –ø—Ä–æ—à–µ–ª —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            filtered_authors.append(author)
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä @{username} –≤–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ {max(spam_percent, diversity_percent):.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        if excluded_count > 0:
            logger.info(f"üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∏—Å–∫–ª—é—á–µ–Ω–æ {excluded_count} —á–∏—Å—Ç—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(filtered_authors)} –∞–≤—Ç–æ—Ä–æ–≤")
        else:
            logger.info(f"üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –≤—Å–µ {len(filtered_authors)} –∞–≤—Ç–æ—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        return filtered_authors
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ—Ä–æ–≤: {e}")
        return []

async def twitter_analysis_worker():
    """–§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Twitter (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º)"""
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ Twitter")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    consecutive_errors = 0
    batch_mode = False
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            token_data = await twitter_analysis_queue.get()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            queue_size = twitter_analysis_queue.qsize()
            if queue_size > 15:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 50 –¥–æ 15 —Ç–æ–∫–µ–Ω–æ–≤
                if not batch_mode:
                    batch_mode = True
                    logger.warning(f"‚ö° –ü–ê–ö–ï–¢–ù–´–ô –†–ï–ñ–ò–ú: –æ—á–µ—Ä–µ–¥—å {queue_size} —Ç–æ–∫–µ–Ω–æ–≤ - —É—Å–∫–æ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            elif queue_size < 8:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 25 –¥–æ 8 —Ç–æ–∫–µ–Ω–æ–≤
                if batch_mode:
                    batch_mode = False
                    logger.info(f"‚úÖ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ—á–µ—Ä–µ–¥—å {queue_size} —Ç–æ–∫–µ–Ω–æ–≤")
            
            if token_data is None:  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                break
                
            mint = token_data['mint']
            symbol = token_data['symbol']
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ {symbol} –≤ Twitter...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ Twitter —Å –±—ã—Å—Ç—Ä—ã–º —Ñ–æ–ª–±—ç–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            try:
                twitter_analysis = await analyze_token_sentiment(mint, symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∏–∑-–∑–∞ Nitter –ø—Ä–æ–±–ª–µ–º
                if twitter_analysis['tweets'] == 0 and twitter_analysis['engagement'] == 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã —Ñ–æ–ª–±—ç–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ error_details –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
                    fallback_reason = "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê"
                    error_details = twitter_analysis.get('error_details', [])
                    
                    if error_details:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
                        error_categories = [err['error_category'] for err in error_details]
                        if 'TIMEOUT' in error_categories:
                            fallback_reason = "–¢–ê–ô–ú–ê–£–¢ (–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)"
                        elif 'RATE_LIMIT' in error_categories:
                            fallback_reason = "429 –û–®–ò–ë–ö–ê (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤)"
                        elif 'BLOCKED' in error_categories:
                            fallback_reason = "–ë–õ–û–ö–ò–†–û–í–ö–ê ('Making sure you're not a bot!')"
                        elif 'CONNECTION' in error_categories:
                            fallback_reason = "–û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                        elif 'SYSTEM_ERROR' in error_categories:
                            fallback_reason = "–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–ª–µ–º–∞)"
                        elif 'UNEXPECTED' in error_categories:
                            fallback_reason = "–ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ Python)"
                        else:
                            fallback_reason = f"–û–®–ò–ë–ö–ò: {', '.join(set(error_categories))}"
                        
                        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        logger.warning(f"‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è {symbol}")
                        logger.warning(f"üìã –ü–†–ò–ß–ò–ù–ê: {fallback_reason}")
                        for err in error_details:
                            logger.warning(f"   üî∏ {err['query']}: {err['error_category']} - {err['error_message']}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç error_details –∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ Nitter –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–∏—Ç—ã
                        if twitter_analysis['rating'] == 'üî¥ –ú–∞–ª–æ –≤–Ω–∏–º–∞–Ω–∏—è':
                            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —Ç–≤–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–æ—Ä–º–∞)")
                        else:
                            logger.warning(f"‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è {symbol} - –ü–†–ò–ß–ò–ù–ê: {fallback_reason}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º analysis –±–µ–∑ error_details –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                    twitter_analysis = {
                        'tweets': 0,
                        'symbol_tweets': 0, 
                        'contract_tweets': 0,
                        'engagement': 0,
                        'score': 0,
                        'rating': 'üî¥ –ú–∞–ª–æ –≤–Ω–∏–º–∞–Ω–∏—è',
                        'contract_found': False,
                        'contract_authors': []
                    }
            except Exception as e:
                # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô
                error_type = type(e).__name__
                error_msg = str(e)
                
                logger.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {error_type}")
                logger.error(f"üìã –î–ï–¢–ê–õ–ò: {error_msg}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if "TimeoutError" in error_type:
                    fallback_reason = "–ì–õ–û–ë–ê–õ–¨–ù–´–ô –¢–ê–ô–ú–ê–£–¢ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)"
                elif "ConnectionError" in error_type:
                    fallback_reason = "–û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
                elif "HTTPError" in error_type:
                    fallback_reason = "HTTP –û–®–ò–ë–ö–ê (–ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)"
                else:
                    fallback_reason = f"–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê ({error_type})"
                
                logger.warning(f"‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è {symbol}")
                logger.warning(f"üìã –ü–†–ò–ß–ò–ù–ê: {fallback_reason}")
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                twitter_analysis = {
                    'tweets': 0,
                    'symbol_tweets': 0,
                    'contract_tweets': 0, 
                    'engagement': 0,
                    'score': 0,
                    'rating': '‚ùì –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
                    'contract_found': False,
                    'contract_authors': []
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            twitter_analysis_results[mint] = twitter_analysis
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            try:
                db_manager = get_db_manager()
                session = db_manager.Session()
                
                # –ò—â–µ–º —Ç–æ–∫–µ–Ω –ø–æ mint –∞–¥—Ä–µ—Å—É
                db_token = session.query(Token).filter_by(mint=mint).first()
                if db_token:
                    # –û–±–Ω–æ–≤–ª—è–µ–º Twitter –¥–∞–Ω–Ω—ã–µ
                    db_token.twitter_score = twitter_analysis['score']
                    db_token.twitter_rating = twitter_analysis['rating']
                    db_token.twitter_tweets = twitter_analysis['tweets']
                    db_token.twitter_engagement = twitter_analysis['engagement']
                    db_token.twitter_symbol_tweets = twitter_analysis['symbol_tweets']
                    db_token.twitter_contract_tweets = twitter_analysis['contract_tweets']
                    db_token.twitter_contract_found = twitter_analysis['contract_found']
                    db_token.updated_at = datetime.utcnow()
                    
                    session.commit()
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã Twitter –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol} –≤ –ë–î")
                    consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {symbol} ({mint}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
                session.close()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if should_send_delayed_notification(twitter_analysis, symbol, mint):
                    await send_delayed_twitter_notification(token_data, twitter_analysis)
                    
                    # –ü–û–ú–ï–ß–ê–ï–ú –ß–¢–û –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û - –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        if db_token:
                            db_token.notification_sent = True
                            session.commit()
                            logger.info(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–ª—è {symbol}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Twitter –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            twitter_analysis_queue.task_done()
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—É–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            if batch_mode:
                # –í –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ - –±–µ–∑ –ø–∞—É–∑
                pass  
            else:
                # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –º–∏–∫—Ä–æ–ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                await asyncio.sleep(0.1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ Twitter: {e}")
            consecutive_errors += 1
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            if consecutive_errors > 5:
                logger.warning(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ({consecutive_errors}) - –≤–æ–∑–º–æ–∂–Ω–æ Nitter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await asyncio.sleep(5)  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
            else:
                await asyncio.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö


def reset_analyzing_tokens_timeout():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (–ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥)"""
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 1 —á–∞—Å–∞)
        two_hours_ago = datetime.utcnow() - timedelta(hours=2)
        
        stuck_tokens = session.query(Token).filter(
            Token.twitter_rating == '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...',
            Token.created_at < two_hours_ago
        ).all()
        
        if stuck_tokens:
            logger.warning(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(stuck_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤")
            
            for token in stuck_tokens:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {token.symbol} (–≤–æ–∑—Ä–∞—Å—Ç: {datetime.utcnow() - token.created_at})")
                
                # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥! –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                retry_data = {
                    'mint': token.mint,
                    'symbol': token.symbol,
                    'name': token.name
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                import asyncio
                try:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    loop = asyncio.get_running_loop()
                    loop.create_task(twitter_analysis_queue.put(retry_data))
                    logger.info(f"üìã {token.symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                except RuntimeError:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logger.warning(f"‚ö†Ô∏è {token.symbol} —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ)")
                    
            logger.info(f"‚úÖ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {len(stuck_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            logger.debug("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞")
        
        session.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")


async def emergency_clear_overloaded_queue():
    """–û–¢–ö–õ–Æ–ß–ï–ù–ê: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–µ
        analyzing_count = session.query(Token).filter(
            Token.twitter_rating == '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...'
        ).count()
        
        # –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –≤ –ø–∞–º—è—Ç–∏
        queue_size = twitter_analysis_queue.qsize()
        
        logger.info(f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ß–ï–†–ï–î–ò:")
        logger.info(f"   üìã –í –ë–î (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è): {analyzing_count} —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"   ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ (–æ–∂–∏–¥–∞–Ω–∏–µ): {queue_size} —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"   üéØ –ü–û–õ–ò–¢–ò–ö–ê: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã, –Ω–∏–∫–æ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º")
        
        # –¢–û–õ–¨–ö–û –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ù–ï —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã!
        if analyzing_count > 1000:
            logger.warning(f"‚ö†Ô∏è –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê: {analyzing_count} —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ")
            logger.warning(f"üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        if queue_size > 60:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 200 –¥–æ 60 —Ç–æ–∫–µ–Ω–æ–≤ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            logger.warning(f"üìä –ë–û–õ–¨–®–ê–Ø –û–ß–ï–†–ï–î–¨: {queue_size} —Ç–æ–∫–µ–Ω–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            
        session.close()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")

async def check_queue_overload():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    try:
        queue_size = twitter_analysis_queue.qsize()
        
        # –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
        if queue_size > 60:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 200 –¥–æ 60 —Ç–æ–∫–µ–Ω–æ–≤ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            logger.warning(f"üìä –ë–û–õ–¨–®–ê–Ø –û–ß–ï–†–ï–î–¨: {queue_size} —Ç–æ–∫–µ–Ω–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            await emergency_clear_overloaded_queue()  # –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")


async def check_and_retry_failed_analysis():
    """–û–¢–ö–õ–Æ–ß–ï–ù–ê: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
        thirty_min_ago = datetime.utcnow() - timedelta(minutes=30)
        
        retry_tokens = session.query(Token).filter(
            Token.twitter_rating == '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...',
            Token.created_at < thirty_min_ago
        ).all()
        
        if retry_tokens:
            logger.info(f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì: {len(retry_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            old_count = len([t for t in retry_tokens if datetime.utcnow() - t.created_at > timedelta(hours=1)])
            very_old_count = len([t for t in retry_tokens if datetime.utcnow() - t.created_at > timedelta(hours=2)])
            
            logger.info(f"   ‚è∞ >30–º–∏–Ω: {len(retry_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
            logger.info(f"   ‚è∞ >1—á–∞—Å: {old_count} —Ç–æ–∫–µ–Ω–æ–≤") 
            logger.info(f"   ‚è∞ >2—á–∞—Å–∞: {very_old_count} —Ç–æ–∫–µ–Ω–æ–≤")
            logger.info(f"   üéØ –ü–û–õ–ò–¢–ò–ö–ê: –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏")
        else:
            logger.debug("‚úÖ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ")
        
        session.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


def is_account_suspicious_by_metrics(author):
    """–û–¢–ö–õ–Æ–ß–ï–ù–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–æ–≤ –∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π"""
    username = author.get('username', 'Unknown')
    
    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–æ–≤ –∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    # –≠—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π –∏ –∏—Å–∫–ª—é—á–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
    logger.debug(f"‚úÖ @{username}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∞–≤—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è")
    
    return False  # –í—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–≤—Ç–æ—Ä–∞

def is_author_spam_by_analysis(author):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä —Å–ø–∞–º–µ—Ä–æ–º –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
    username = author.get('username', 'Unknown')
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    try:
        analysis = analyze_author_contract_diversity(username)
        diversity_percent = analysis.get('contract_diversity_percent', 0)
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å–ø–∞–º–µ—Ä
        if analysis.get('is_spam_likely', False):
            recommendation = analysis.get('recommendation', '')
            
            logger.warning(f"üö´ @{username}: –°–ü–ê–ú–ï–† –ü–û –ê–ù–ê–õ–ò–ó–£ - {recommendation} (—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {diversity_percent:.1f}%)")
            return True
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        if diversity_percent >= 50:  # 50%+ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ = —Ç–æ—á–Ω–æ —Å–ø–∞–º
            logger.warning(f"üö´ @{username}: –í–´–°–û–ö–û–ï –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï –ö–û–ù–¢–†–ê–ö–¢–û–í - {diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞ –¥–ª—è @{username}: {e}")
        return False
    
    return False

def should_notify_based_on_authors_quality(authors):
    """
    –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–∞—Ö,
    –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º (100% —Å–ø–∞–º)
    """
    if not authors:
        logger.info(f"üö´ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Ç–≤–∏—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        return False  # –ù–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    
    pure_spammers = 0  # –ê–≤—Ç–æ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—à—É—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
    total_authors = len(authors)
    
    for author in authors:
        diversity_percent = author.get('contract_diversity', 0)
        spam_percent = author.get('max_contract_spam', 0)
        total_tweets = author.get('total_contract_tweets', 0)
        username = author.get('username', 'Unknown')
        
        # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –ø–∏—à–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ 90%+ —Å–æ–æ–±—â–µ–Ω–∏–π = —á–∏—Å—Ç—ã–π —Å–ø–∞–º–µ—Ä
        if total_tweets >= 3 and (spam_percent >= 90 or diversity_percent >= 90):
            pure_spammers += 1
            logger.info(f"üö´ @{username}: –ß–ò–°–¢–´–ô –°–ü–ê–ú–ï–† - –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ {max(spam_percent, diversity_percent):.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            logger.info(f"‚úÖ @{username}: –ù–û–†–ú–ê–õ–¨–ù–´–ô –ê–í–¢–û–† - –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ {max(spam_percent, diversity_percent):.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –í–°–ï –∞–≤—Ç–æ—Ä—ã - —á–∏—Å—Ç—ã–µ —Å–ø–∞–º–µ—Ä—ã
    should_notify = pure_spammers < total_authors
    
    logger.info(f"üìä –£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–í–¢–û–†–û–í:")
    logger.info(f"   üë• –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤: {total_authors}")
    logger.info(f"   üö´ –ß–∏—Å—Ç—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤ (90%+ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤): {pure_spammers}")
    logger.info(f"   ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {total_authors - pure_spammers}")
    logger.info(f"   üéØ –†–ï–®–ï–ù–ò–ï: {'–û–¢–ü–†–ê–í–ò–¢–¨' if should_notify else '–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨'}")
    
    if not should_notify:
        logger.info(f"üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –í–°–ï –∞–≤—Ç–æ—Ä—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å—Ç—ã–º–∏ —Å–ø–∞–º–µ—Ä–∞–º–∏")
    else:
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ - –µ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–∞—Ö")
    
    return should_notify

def should_send_delayed_notification(twitter_analysis, symbol, mint):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ Twitter
    –û–¢–ü–†–ê–í–õ–Ø–ï–ú –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Twitter
    if not twitter_analysis.get('contract_found', False):
        logger.debug(f"üö´ {symbol}: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Twitter - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
    contract_authors = twitter_analysis.get('contract_authors', [])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–æ–≤
    should_notify = should_notify_based_on_authors_quality(contract_authors)
    
    if should_notify:
        logger.info(f"‚úÖ {symbol}: –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    else:
        logger.info(f"üö´ {symbol}: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –∞–≤—Ç–æ—Ä—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    
    return should_notify

async def send_delayed_twitter_notification(token_data, twitter_analysis):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ Twitter"""
    try:
        mint = token_data['mint']
        symbol = token_data['symbol']
        name = token_data.get('name', 'Unknown Token')
        description = token_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        market_cap = token_data.get('marketCap', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î
        db_manager = get_db_manager()
        session = db_manager.Session()
        try:
            db_token = session.query(Token).filter_by(mint=mint).first()
            if db_token and db_token.created_at:
                token_created_at = db_token.created_at.strftime('%Y-%m-%d %H:%M:%S')
            else:
                token_created_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            token_created_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        finally:
            session.close()
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(description) > 200:
            description = description[:200] + "..."
        
        message = (
            f"üöÄ <b>–ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù –í TWITTER!</b>\n\n"
            f"<b>üíé {name} ({symbol})</b>\n"
            f"<b>üìç Mint:</b> <code>{mint}</code>\n"
            f"<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> {token_created_at}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º Market Cap —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0
        if market_cap > 0:
            message += f"<b>üí∞ Market Cap:</b> ${market_cap:,.0f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        if description and description.strip() and description.strip() != "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è":
            message += f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        
        message += (
            f"\n<b>üê¶ Twitter –∞–Ω–∞–ª–∏–∑:</b> {twitter_analysis['rating']}\n"
            f"<b>üìà –¢–≤–∏—Ç—ã:</b> {twitter_analysis['tweets']} | <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {twitter_analysis['engagement']} | <b>–°–∫–æ—Ä:</b> {twitter_analysis['score']}\n"
            f"<b>üîç –ü–æ–∏—Å–∫:</b> –°–∏–º–≤–æ–ª: {twitter_analysis['symbol_tweets']} | –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {twitter_analysis['contract_tweets']} ‚úÖ\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        if twitter_analysis.get('contract_authors'):
            authors = twitter_analysis['contract_authors']
            total_followers = sum([author.get('followers_count', 0) for author in authors])
            verified_count = sum([1 for author in authors if author.get('is_verified', False)])
            
            message += f"\n<b>üë• –ê–í–¢–û–†–´ –¢–í–ò–¢–û–í –° –ö–û–ù–¢–†–ê–ö–¢–û–ú ({len(authors)} –∞–≤—Ç–æ—Ä–æ–≤):</b>\n"
            message += f"   üìä –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            if verified_count > 0:
                message += f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_count}\n"
            message += "\n"
            
            for i, author in enumerate(authors[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∞–≤—Ç–æ—Ä–æ–≤
                username = author.get('username', 'Unknown')
                display_name = author.get('display_name', username)
                followers = author.get('followers_count', 0)
                verified = "‚úÖ" if author.get('is_verified', False) else ""
                tweet_text = author.get('tweet_text', '')
                tweet_date = author.get('tweet_date', '')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–º–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                diversity_percent = author.get('contract_diversity', 0)
                spam_percent = author.get('max_contract_spam', 0)
                diversity_recommendation = author.get('diversity_recommendation', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                spam_analysis = author.get('spam_analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                is_spam_likely = author.get('is_spam_likely', False)
                total_contract_tweets = author.get('total_contract_tweets', 0)
                unique_contracts = author.get('unique_contracts_count', 0)
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∞ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = —Ö–æ—Ä–æ—à–æ)
                spam_indicator = ""
                if spam_percent >= 80:
                    spam_indicator = " üî•"  # –í—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                elif spam_percent >= 60:
                    spam_indicator = " ‚≠ê"  # –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
                elif spam_percent >= 40:
                    spam_indicator = " üü°"  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
                elif is_spam_likely:
                    spam_indicator = " üö´"  # –ú–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                
                message += f"{i+1}. <b>@{username}</b> {verified}{spam_indicator}\n"
                if display_name != username:
                    message += f"   üìù {display_name}\n"
                
                # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                following_count = author.get('following_count', 0)
                tweets_count = author.get('tweets_count', 0)
                likes_count = author.get('likes_count', 0)
                join_date = author.get('join_date', '')
                
                if followers > 0 or following_count > 0 or tweets_count > 0:
                    message += f"   üë• {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ | {following_count:,} –ø–æ–¥–ø–∏—Å–æ–∫\n"
                    message += f"   üìù {tweets_count:,} —Ç–≤–∏—Ç–æ–≤ | ‚ù§Ô∏è {likes_count:,} –ª–∞–π–∫–æ–≤\n"
                    if join_date:
                        message += f"   üìÖ –°–æ–∑–¥–∞–Ω: {join_date}\n"
                
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if tweet_date:
                message += f"   üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_date}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–≤–∏—Ç–∞
            tweet_type = author.get('tweet_type', '–¢–≤–∏—Ç')
            type_emoji = "üí¨" if tweet_type == "–û—Ç–≤–µ—Ç" else "üê¶"
            message += f"   {type_emoji} –¢–∏–ø: {tweet_type}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
            historical_data = author.get('historical_data', {})
            if historical_data and historical_data.get('total_mentions', 0) > 0:
                total_mentions = historical_data.get('total_mentions', 0)
                unique_tokens = historical_data.get('unique_tokens', 0)
                recent_7d = historical_data.get('recent_mentions_7d', 0)
                recent_30d = historical_data.get('recent_mentions_30d', 0)
                
                message += f"   üìä –ò—Å—Ç–æ—Ä–∏—è: {total_mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ({unique_tokens} —Ç–æ–∫–µ–Ω–æ–≤)\n"
                if recent_7d > 0 or recent_30d > 0:
                    message += f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {recent_7d} –∑–∞ 7–¥, {recent_30d} –∑–∞ 30–¥\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                if total_contract_tweets > 0:
                    message += f"   üìä –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {unique_contracts} –∏–∑ {total_contract_tweets} —Ç–≤–∏—Ç–æ–≤ (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {spam_percent:.1f}%)\n"
                    message += f"   üéØ –ê–Ω–∞–ª–∏–∑: {spam_analysis}\n"
                
                # –í–µ—Å—å —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞ –≤ —Ü–∏—Ç–∞—Ç–µ
                if tweet_text:
                    message += f"   üí¨ <blockquote>{tweet_text}</blockquote>\n"
            
            message += "\n"
        
        message += f"‚ö° <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!</b>\n"
        message += f"<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
        
        # –ö–Ω–æ–ø–∫–∏
        bonding_curve_key = token_data.get('bondingCurveKey', mint)
        keyboard = [
            [
                {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{bonding_curve_key}"},
                {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{mint}"}
            ],
            [
                {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{mint}"}
            ]
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–∫–µ–Ω–∞
        token_image_url = f"https://axiomtrading.sfo3.cdn.digitaloceanspaces.com/{mint}.webp"
        
        send_telegram_photo(token_image_url, message, keyboard)
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {symbol}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def analyze_author_contract_diversity(author_username, db_manager=None):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è pump.fun –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –•–û–†–û–®–ò–ï = –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ (–≤—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    –ü–õ–û–•–ò–ï = –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–Ω–µ—Ç —Ñ–æ–∫—É—Å–∞, –Ω–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å)
    """
    if not db_manager:
        db_manager = get_db_manager()
    
    session = db_manager.Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–≤–∏—Ç—ã –∞–≤—Ç–æ—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
        tweet_mentions = session.query(TweetMention).filter_by(
            author_username=author_username
        ).all()
        
        if not tweet_mentions:
            return {
                'total_tweets': 0,
                'unique_contracts': 0,
                'contract_diversity_percent': 0,
                'max_contract_spam_percent': 0,
                'is_spam_likely': False,
                'recommendation': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–≤–∏—Ç–∞—Ö',
                'contracts_list': [],
                'diversity_category': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'spam_analysis': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ —Ç–≤–∏—Ç–æ–≤
        all_contracts = set()
        contract_mentions = {}  # –∫–æ–Ω—Ç—Ä–∞–∫—Ç -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        for mention in tweet_mentions:
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ —Ç–≤–∏—Ç–∞ (–∞–¥—Ä–µ—Å–∞ –¥–ª–∏–Ω–æ–π 32-44 —Å–∏–º–≤–æ–ª–∞)
            contracts_in_tweet = re.findall(r'\b[A-Za-z0-9]{32,44}\b', mention.tweet_text)
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ –ø–æ–ª—è mint –µ—Å–ª–∏ –µ—Å—Ç—å
            if mention.mint:
                contracts_in_tweet.append(mention.mint)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            for contract in contracts_in_tweet:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Solana –∞–¥—Ä–µ—Å
                if len(contract) >= 32 and contract.isalnum():
                    all_contracts.add(contract)
                    contract_mentions[contract] = contract_mentions.get(contract, 0) + 1
        
        total_tweets = len(tweet_mentions)
        unique_contracts = len(all_contracts)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        if total_tweets == 0:
            diversity_percent = 0
            concentration_percent = 0
        else:
            # –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï = —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã / —Ç–≤–∏—Ç—ã * 100%
            # –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–ø–ª–æ—Ö–æ)
            diversity_percent = (unique_contracts / total_tweets) * 100
            
            # –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø = 100% - —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            # –ß–µ–º –≤—ã—à–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, —Ç–µ–º –º–µ–Ω—å—à–µ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—Ö–æ—Ä–æ—à–æ)
            concentration_percent = 100 - diversity_percent
        
        # –õ–û–ì–ò–ö–ê –î–õ–Ø PUMP.FUN: –ò—â–µ–º –≤—Å–ø—ã—à–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = —Ö–æ—Ä–æ—à–æ)
        is_spam_likely = False
        recommendation = "‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä"
        spam_analysis = ""
        
        if unique_contracts == 0:
            recommendation = "‚ö™ –ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            spam_analysis = "–ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        elif concentration_percent >= 95:  # ‚â§5% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            recommendation = "üî• –û–¢–õ–ò–ß–ù–´–ô - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è!"
            spam_analysis = f"–í–°–ü–´–®–ö–ê! {concentration_percent:.1f}% –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ {diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)"
        elif concentration_percent >= 80:  # ‚â§20% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤  
            recommendation = "‚≠ê –•–û–†–û–®–ò–ô - –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
            spam_analysis = f"–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {concentration_percent:.1f}% ({diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)"
        elif concentration_percent >= 60:  # ‚â§40% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            recommendation = "üü° –°–†–ï–î–ù–ò–ô - —É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
            spam_analysis = f"–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {concentration_percent:.1f}% ({diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)"
        elif diversity_percent >= 80:  # ‚â•80% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            is_spam_likely = True
            recommendation = "üö´ –°–ü–ê–ú–ï–† - –∫–∞–∂–¥—ã–π —Ç–≤–∏—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç!"
            spam_analysis = f"–°–ü–ê–ú! {diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ - —è–≤–Ω—ã–π —Å–ø–∞–º–µ—Ä"
        elif diversity_percent >= 50:  # ‚â•50% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            is_spam_likely = True
            recommendation = "üö´ –ü–õ–û–•–û–ô - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
            spam_analysis = f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ - –Ω–µ—Ç —Ñ–æ–∫—É—Å–∞"
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = —Ö–æ—Ä–æ—à–æ
            if diversity_percent <= 30:  # ‚â§30% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ = —Ö–æ—Ä–æ—à–æ
                is_spam_likely = False
                recommendation = "üü° –ü–†–ò–ï–ú–õ–ï–ú–´–ô - –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
                spam_analysis = f"–ü—Ä–∏–µ–º–ª–µ–º–æ: {diversity_percent:.1f}% —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è - –Ω–∏–∑–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–æ —Ñ–æ–∫—É—Å –µ—Å—Ç—å"
            else:
                is_spam_likely = True
                recommendation = "‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô - –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
                spam_analysis = f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: {diversity_percent:.1f}% —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è - –Ω–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞"
        
        # –¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        top_contracts = sorted(contract_mentions.items(), key=lambda x: x[1], reverse=True)[:5]
        
        return {
            'total_tweets_on_page': total_tweets,
            'unique_contracts_on_page': unique_contracts,
            'contract_diversity_percent': round(diversity_percent, 1),
            'max_contract_spam_percent': round(concentration_percent, 1),
            'is_spam_likely': is_spam_likely,
            'recommendation': recommendation,
            'contracts_list': [{'contract': contract, 'mentions': count} for contract, count in top_contracts],
            'diversity_category': get_diversity_category(concentration_percent),
            'spam_analysis': spam_analysis
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è @{author_username}: {e}")
        return {
            'total_tweets': 0,
            'unique_contracts': 0,
            'contract_diversity_percent': 0,
            'max_contract_spam_percent': 0,
            'is_spam_likely': False,
            'recommendation': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}',
            'contracts_list': [],
            'diversity_category': '–û—à–∏–±–∫–∞',
            'spam_analysis': f'–û—à–∏–±–∫–∞: {e}'
        }
    finally:
        session.close()

def get_diversity_category(concentration_percent):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"""
    if concentration_percent >= 80:
        return "üî• –í—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    elif concentration_percent >= 60:
        return "‚≠ê –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
    elif concentration_percent >= 40:
        return "üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
    elif concentration_percent >= 20:
        return "üü¢ –ù–∏–∑–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
    else:
        return "‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"

async def analyze_author_page_contracts(author_username, tweets_on_page=None, load_from_profile=True):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ï–ö–£–©–ï–ô –°–¢–†–ê–ù–ò–¶–´ —Ç–≤–∏—Ç–æ–≤ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å –ø—Ä–æ—Ñ–∏–ª—è
    tweets_on_page - —Å–ø–∏—Å–æ–∫ —Ç–≤–∏—Ç–æ–≤ —Å —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    load_from_profile - –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ —Ç–≤–∏—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–∏—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è
    if load_from_profile and (not tweets_on_page or len(tweets_on_page) < 5):
        logger.info(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–≤–∏—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è @{author_username} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        profile_load_failed = False
        network_error = False
        
        try:
            from twitter_profile_parser import TwitterProfileParser
            
            async with TwitterProfileParser() as profile_parser:
                profile_data, profile_tweets = await profile_parser.get_profile_with_tweets(author_username)
                
                if profile_tweets:
                    tweets_on_page = profile_tweets
                    logger.info(f"üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(profile_tweets)} —Ç–≤–∏—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª—è @{author_username}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–∏—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è @{author_username}")
                    profile_load_failed = True
                    
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            if ("Cannot connect to host" in str(e) or 
                "Network is unreachable" in str(e) or
                "Connection timeout" in str(e) or
                "TimeoutError" in str(e) or
                "ClientConnectorError" in str(e)):
                logger.warning(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–≤–∏—Ç–æ–≤ @{author_username}: {e}")
                network_error = True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–≤–∏—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª—è @{author_username}: {e}")
            profile_load_failed = True
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–∏—Ç—ã
    if not tweets_on_page:
        if network_error:
            # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return {
                'total_tweets_on_page': 0,
                'unique_contracts_on_page': 0,
                'contract_diversity_percent': 0,
                'max_contract_spam_percent': 0,
                'is_spam_likely': False,
                'recommendation': 'üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ',
                'contracts_list': [],
                'diversity_category': '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞',
                'spam_analysis': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏'
            }
        else:
            # –ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            return {
                'total_tweets_on_page': 0,
                'unique_contracts_on_page': 0,
                'contract_diversity_percent': 0,
                'max_contract_spam_percent': 0,
                'is_spam_likely': False,
                'recommendation': '–ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
                'contracts_list': [],
                'diversity_category': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'spam_analysis': '–ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
            }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    all_contracts = set()
    contract_mentions = {}
    
    for tweet_text in tweets_on_page:
        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ —Ç–≤–∏—Ç–∞ (–∞–¥—Ä–µ—Å–∞ –¥–ª–∏–Ω–æ–π 32-44 —Å–∏–º–≤–æ–ª–∞)
        contracts_in_tweet = re.findall(r'\b[A-Za-z0-9]{32,44}\b', tweet_text)
        
        for contract in contracts_in_tweet:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Solana –∞–¥—Ä–µ—Å
            if len(contract) >= 32 and contract.isalnum():
                all_contracts.add(contract)
                contract_mentions[contract] = contract_mentions.get(contract, 0) + 1
    
    total_tweets = len(tweets_on_page)
    unique_contracts = len(all_contracts)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    if total_tweets == 0:
        diversity_percent = 0
        max_contract_spam_percent = 0
    else:
        diversity_percent = (unique_contracts / total_tweets) * 100
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if contract_mentions:
            max_mentions = max(contract_mentions.values())
            max_contract_spam_percent = (max_mentions / total_tweets) * 100
        else:
            max_contract_spam_percent = 0
    
    # –õ–û–ì–ò–ö–ê –î–õ–Ø PUMP.FUN: –ò—â–µ–º –≤—Å–ø—ã—à–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = —Ö–æ—Ä–æ—à–æ)
    is_spam_likely = False
    recommendation = "‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä"
    spam_analysis = ""
    
    if unique_contracts == 0:
        recommendation = "‚ö™ –ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        spam_analysis = "–ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    elif max_contract_spam_percent >= 80:
        recommendation = "üî• –û–¢–õ–ò–ß–ù–´–ô - –≤—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–± –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ!"
        spam_analysis = f"–í–°–ü–´–®–ö–ê! {max_contract_spam_percent:.1f}% —Ç–≤–∏—Ç–æ–≤ –æ–± –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ"
    elif max_contract_spam_percent >= 60:
        recommendation = "‚≠ê –•–û–†–û–®–ò–ô - –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"
        spam_analysis = f"–•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {max_contract_spam_percent:.1f}% –Ω–∞ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ - –∏–Ω—Ç–µ—Ä–µ—Å —Ä–∞—Å—Ç–µ—Ç"
    elif max_contract_spam_percent >= 40:
        recommendation = "üü° –°–†–ï–î–ù–ò–ô - —É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
        spam_analysis = f"–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {max_contract_spam_percent:.1f}% –Ω–∞ —Ç–æ–ø-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"
    elif diversity_percent >= 80:
        is_spam_likely = True
        recommendation = "üö´ –°–ü–ê–ú–ï–† - –∫–∞–∂–¥—ã–π —Ç–≤–∏—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç!"
        spam_analysis = f"–°–ü–ê–ú! {diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - —è–≤–Ω—ã–π —Å–ø–∞–º–µ—Ä"
    elif diversity_percent >= 50:
        is_spam_likely = True
        recommendation = "üö´ –ü–õ–û–•–û–ô - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
        spam_analysis = f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {diversity_percent:.1f}% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ - –Ω–µ—Ç —Ñ–æ–∫—É—Å–∞"
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = —Ö–æ—Ä–æ—à–æ
        if diversity_percent <= 30:  # ‚â§30% —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ = —Ö–æ—Ä–æ—à–æ
            is_spam_likely = False
            recommendation = "üü° –ü–†–ò–ï–ú–õ–ï–ú–´–ô - –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
            spam_analysis = f"–ü—Ä–∏–µ–º–ª–µ–º–æ: {diversity_percent:.1f}% —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è - –Ω–∏–∑–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–æ —Ñ–æ–∫—É—Å –µ—Å—Ç—å"
        else:
            is_spam_likely = True
            recommendation = "‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô - –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
            spam_analysis = f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: {diversity_percent:.1f}% —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è - –Ω–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞"
    
    # –¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    top_contracts = sorted(contract_mentions.items(), key=lambda x: x[1], reverse=True)[:5]
    
    return {
        'total_tweets_on_page': total_tweets,
        'unique_contracts_on_page': unique_contracts,
        'contract_diversity_percent': round(diversity_percent, 1),
        'max_contract_spam_percent': round(max_contract_spam_percent, 1),
        'is_spam_likely': is_spam_likely,
        'recommendation': recommendation,
        'contracts_list': [{'contract': contract, 'mentions': count} for contract, count in top_contracts],
        'diversity_category': get_diversity_category(max_contract_spam_percent),
        'spam_analysis': spam_analysis
    }

def should_filter_author_by_diversity(author_username, diversity_threshold=30):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    diversity_threshold - –ø–æ—Ä–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∞–≤—Ç–æ—Ä —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è (–º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ = –ø–ª–æ—Ö–æ)
    """
    analysis = analyze_author_contract_diversity(author_username)
    return analysis['contract_diversity_percent'] >= diversity_threshold

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º"""
    uri = "wss://pumpportal.fun/api/data"
    max_retries = 10
    retry_delay = 5
    retry_count = 0
    first_connection = True
    last_stats_day = None
    last_heartbeat = datetime.now()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ Twitter
    twitter_worker_task = asyncio.create_task(twitter_analysis_worker())
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è..." –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    reset_analyzing_tokens_timeout()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    async def retry_analysis_scheduler():
        while True:
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –æ—á–µ—Ä–µ–¥–∏
            await check_queue_overload()
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await check_and_retry_failed_analysis()
            reset_analyzing_tokens_timeout()
    
    retry_task = asyncio.create_task(retry_analysis_scheduler())
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ Twitter")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    consecutive_errors = 0
    batch_mode = False
    
    while True:
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º keepalive
            async with websockets.connect(
                uri,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout'],
                close_timeout=WEBSOCKET_CONFIG['close_timeout'],
                max_size=WEBSOCKET_CONFIG['max_size'],
                max_queue=WEBSOCKET_CONFIG['max_queue'],
                compression=None,   # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                user_agent_header="SolSpider/1.0"  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            ) as websocket:
                logger.info("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ PumpPortal")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connection_monitor.connection_established()
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                subscribe_msg = {"method": "subscribeNewToken"}
                await websocket.send(json.dumps(subscribe_msg))
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã")
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
                migrate_msg = {"method": "subscribeMigration"}
                await websocket.send(json.dumps(migrate_msg))
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if first_connection:
                    start_message = (
                        "üöÄ <b>PUMP.FUN –ë–û–¢ v3.0 –ó–ê–ü–£–©–ï–ù!</b>\n\n"
                        "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ë–ï–ó –ü–û–¢–ï–†–¨\n"
                        "üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Twitter –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ\n"
                        "‚ö° –ù–ò–ö–ê–ö–û–ô –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ\n"
                        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (>5 SOL)\n"
                        "‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏\n\n"
                        "üíé –ù–∏ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!"
                    )
                    send_telegram(start_message)
                    first_connection = False
                else:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    send_telegram("üîÑ <b>–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b>\n‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤")
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ—Ç—Ä–∞–µ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                retry_count = 0
                
                # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                message_count = 0
                async for message in websocket:
                    await handle_message(message)
                    message_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    connection_monitor.message_received()
                    last_heartbeat = datetime.now()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    current_day = datetime.now().strftime('%Y-%m-%d')
                    current_hour = datetime.now().hour
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 12:00
                    if (last_stats_day != current_day and current_hour >= 12):
                        await send_daily_stats()
                        last_stats_day = current_day
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
                    if message_count % 3600 == 0 and message_count > 0:  # –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        connection_stats = connection_monitor.format_stats_message()
                        logger.info("üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                        send_telegram(connection_stats)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                    if message_count % WEBSOCKET_CONFIG['health_check_interval'] == 0:
                        current_time = datetime.now()
                        time_since_heartbeat = (current_time - last_heartbeat).total_seconds()
                        
                        # –ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                        if time_since_heartbeat > WEBSOCKET_CONFIG['heartbeat_check']:
                            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π {time_since_heartbeat:.0f}—Å)")
                            
                            # –í—ã–ø–æ–ª–Ω—è–µ–º ping —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä
                            ping_time = await connection_monitor.ping_test(websocket)
                            if ping_time == -1:
                                logger.warning("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                                break
                            else:
                                logger.info(f"‚úÖ Ping: {ping_time:.0f}ms - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ")
                                last_heartbeat = current_time
                    
        except websockets.exceptions.ConnectionClosed as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            connection_monitor.connection_lost()
            
            if e.code == 1011:
                logger.warning(f"‚ö†Ô∏è Keepalive timeout: {e}")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö keepalive –æ—à–∏–±–æ–∫
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
                send_telegram(f"‚ö†Ô∏è <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ</b>\n–ö–æ–¥: {e.code}\n–ü—Ä–∏—á–∏–Ω–∞: {e.reason}\nüîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        except websockets.exceptions.InvalidStatusCode as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {e}")
            send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n–°—Ç–∞—Ç—É—Å: {e}")
        except websockets.exceptions.WebSocketException as e:
            logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
            # –ù–µ —Å–ø–∞–º–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö WebSocket –æ—à–∏–±–∫–∞—Ö
            if retry_count <= 3:
                send_telegram(f"‚ùå <b>WebSocket –æ—à–∏–±–∫–∞</b>\n{e}")
        except ConnectionResetError as e:
            logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —Å–µ—Ç—å—é: {e}")
            # –û–±—ã—á–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        except OSError as e:
            logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            if retry_count <= 2:
                send_telegram(f"‚ùå <b>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞</b>\n{e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            if retry_count <= 1:
                send_telegram(f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n{e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        retry_count = min(retry_count + 1, max_retries)
        
        if retry_count >= max_retries:
            error_msg = "‚ùå <b>–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.error(error_msg)
            send_telegram(error_msg)
            break
        
        logger.info(f"üîÑ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
        # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è

if __name__ == "__main__":
    asyncio.run(main()) 