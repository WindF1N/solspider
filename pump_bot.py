import asyncio
import websockets
import json
import requests
import logging
import os
from datetime import datetime
from bs4 import BeautifulSoup
import re
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    pass

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from logger_config import setup_logging, log_token_analysis, log_trade_activity, log_database_operation, log_daily_stats
from database import get_db_manager
from connection_monitor import connection_monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID", "YOUR_CHAT_ID")
TELEGRAM_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CHAT_IDS = [
    CHAT_ID,  # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –∏–∑ .env
    "5542434203",  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç 1
    "1424887871"   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç 2
]

# WebSocket –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBSOCKET_CONFIG = {
    'ping_interval': 30,     # Ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    'ping_timeout': 20,      # –û–∂–∏–¥–∞–Ω–∏–µ pong 20 —Å–µ–∫—É–Ω–¥ 
    'close_timeout': 15,     # –¢–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
    'max_size': 10**7,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (10MB)
    'max_queue': 32,         # –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    'heartbeat_check': 300,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π 5 –º–∏–Ω—É—Ç
    'health_check_interval': 100  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
}

# Nitter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Twitter
NITTER_COOKIE = "techaro.lol-anubis-auth-for-nitter.tiekoetter.com=eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJhY3Rpb24iOiJDSEFMTEVOR0UiLCJjaGFsbGVuZ2UiOiJiMGEyOWM0YzcwZGM0YzYxMjE2NTNkMzQwYTU0YTNmNTFmZmJlNDIwOGM4MWZkZmUxNDA4MTY2MGNmMDc3ZGY2IiwiZXhwIjoxNzQ5NjAyOTA3LCJpYXQiOjE3NDg5OTgxMDcsIm5iZiI6MTc0ODk5ODA0Nywibm9uY2UiOiIxMzI4MSIsInBvbGljeVJ1bGUiOiJlZDU1ZThhMGJkZjcwNGM4NTFkY2RjMjQ3OWZmMTJlMjM1YzY1Y2Q0NjMwZGYwMTgwNGM4ZTgyMzZjMzU1NzE2IiwicmVzcG9uc2UiOiIwMDAwYWEwZjdmMjBjNGQ0MGU5ODIzMWI4MDNmNWZiMGJlMGZjZmZiOGRhOTIzNDUyNDdhZjU1Yjk1MDJlZWE2In0.615N6HT0huTaYXHffqbBWqlpbpUgb7uVCh__TCoIuZLtGzBkdS3K8fGOPkFxHrbIo2OY3bw0igmtgDZKFesjAg"

def send_telegram(message, inline_keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    success_count = 0
    total_chats = 0
    
    for chat_id in CHAT_IDS:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ chat_id
        if not chat_id or chat_id in ["YOUR_CHAT_ID", ""]:
            continue
            
        total_chats += 1
        
        try:
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": False
            }
            
            if inline_keyboard:
                payload["reply_markup"] = {"inline_keyboard": inline_keyboard}
            
            response = requests.post(TELEGRAM_URL, json=payload)
            if response.status_code == 200:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                success_count += 1
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}: {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    
    if success_count > 0:
        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count}/{total_chats} —á–∞—Ç–æ–≤")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
        return False

async def search_single_query(query, headers):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Nitter"""
    url = f"https://nitter.tiekoetter.com/search?f=tweets&q=%22{query}%22"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–≤–∏—Ç—ã
                    tweets = soup.find_all('div', class_='timeline-item')
                    tweet_count = len(tweets)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–≤–∏—Ç–∞—Ö
                    engagement = 0
                    for tweet in tweets:
                        stats = tweet.find_all('span', class_='tweet-stat')
                        for stat in stats:
                            icon_container = stat.find('div', class_='icon-container')
                            if icon_container:
                                text = icon_container.get_text(strip=True)
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ (–ª–∞–π–∫–∏, —Ä–µ—Ç–≤–∏—Ç—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                                numbers = re.findall(r'\d+', text)
                                if numbers:
                                    engagement += int(numbers[0])
                    
                    logger.info(f"üîç Nitter –∞–Ω–∞–ª–∏–∑ '{query}': {tweet_count} —Ç–≤–∏—Ç–æ–≤, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {engagement}")
                    return tweet_count, engagement
                else:
                    logger.warning(f"‚ùå Nitter –æ—Ç–≤–µ—Ç–∏–ª {response.status} –¥–ª—è '{query}'")
                    return 0, 0
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nitter –¥–ª—è '{query}': {e}")
        return 0, 0

async def analyze_token_sentiment(mint, symbol):
    """–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–∞ –≤ Twitter —á–µ—Ä–µ–∑ Nitter (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Cookie': NITTER_COOKIE,
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        search_queries = [f'${symbol}', mint]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(
            search_single_query(search_queries[0], headers),  # –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
            search_single_query(search_queries[1], headers),  # –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            return_exceptions=True
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        symbol_tweets, symbol_engagement = results[0] if not isinstance(results[0], Exception) else (0, 0)
        contract_tweets, contract_engagement = results[1] if not isinstance(results[1], Exception) else (0, 0)
        
        total_tweets = symbol_tweets + contract_tweets
        total_engagement = symbol_engagement + contract_engagement
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
        if total_tweets == 0:
                    return {
            'tweets': 0,
            'symbol_tweets': 0,
            'contract_tweets': 0,
            'engagement': 0,
            'score': 0,
            'rating': 'üî¥ –ú–∞–ª–æ –≤–Ω–∏–º–∞–Ω–∏—è',
            'contract_found': False
        }
        
        # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ç–≤–∏—Ç
        avg_engagement = total_engagement / total_tweets if total_tweets > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä
        score = (total_tweets * 0.3) + (avg_engagement * 0.7)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if score >= 50:
            rating = 'üü¢ –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å'
        elif score >= 20:
            rating = 'üü° –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å'
        elif score >= 5:
            rating = 'üü† –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å'
        else:
            rating = 'üî¥ –ú–∞–ª–æ –≤–Ω–∏–º–∞–Ω–∏—è'
        
        return {
            'tweets': total_tweets,
            'symbol_tweets': symbol_tweets,
            'contract_tweets': contract_tweets,
            'engagement': total_engagement,
            'score': round(score, 1),
            'rating': rating,
            'contract_found': contract_tweets > 0
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return {
            'tweets': 0,
            'symbol_tweets': 0,
            'contract_tweets': 0,
            'engagement': 0,
            'score': 0,
            'rating': '‚ùì –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
            'contract_found': False
        }

async def format_new_token(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    mint = data.get('mint', 'Unknown')
    name = data.get('name', 'Unknown Token')
    symbol = data.get('symbol', 'UNK')
    description = data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    creator = data.get('traderPublicKey', 'Unknown')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Twitter
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω {symbol} –≤ Twitter...")
    twitter_analysis = await analyze_token_sentiment(mint, symbol)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db_manager = get_db_manager()
        saved_token = db_manager.save_token(data, twitter_analysis)
        log_database_operation("SAVE_TOKEN", "tokens", "SUCCESS", f"Symbol: {symbol}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î: {e}")
        log_database_operation("SAVE_TOKEN", "tokens", "ERROR", str(e))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    uri = data.get('uri', '')
    initial_buy = data.get('initialBuy', 0)
    market_cap = data.get('marketCap', 0)
    creator_percentage = data.get('creatorPercentage', 0)
    twitter = data.get('twitter', '')
    telegram = data.get('telegram', '')
    website = data.get('website', '')
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(description) > 200:
        description = description[:200] + "..."
    
    # –ü–æ–ª—É—á–∞–µ–º bondingCurveKey
    bonding_curve_key = data.get('bondingCurveKey', 'Not available')
    
    message = (
        f"üöÄ <b>–ù–û–í–´–ô –¢–û–ö–ï–ù –ù–ê PUMP.FUN!</b>\n\n"
        f"<b>üíé <a href='https://pump.fun/{mint}'>{name}</a></b>\n"
        f"<b>üè∑Ô∏è –°–∏–º–≤–æ–ª:</b> {symbol}\n"
        f"<b>üìç Mint:</b> <code>{mint}</code>\n"
        f"<b>üîó Bonding Curve:</b> <code>{bonding_curve_key}</code>\n"
        f"<b>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> <code>{creator[:8] if len(creator) > 8 else creator}...</code>\n"
        f"<b>üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞:</b> {initial_buy} SOL\n"
        f"<b>üìä Market Cap:</b> ${market_cap:,.0f}\n"
        f"<b>üë®‚Äçüíº –î–æ–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è:</b> {creator_percentage}%\n"
        f"<b>üê¶ Twitter –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {twitter_analysis['rating']}\n"
        f"<b>üìà –¢–≤–∏—Ç—ã:</b> {twitter_analysis['tweets']} | <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {twitter_analysis['engagement']} | <b>–°–∫–æ—Ä:</b> {twitter_analysis['score']}\n"
        f"<b>üîç –ü–æ–∏—Å–∫:</b> –°–∏–º–≤–æ–ª: {twitter_analysis['symbol_tweets']} | –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {twitter_analysis['contract_tweets']} {'‚úÖ' if twitter_analysis['contract_found'] else '‚ùå'}\n"
        f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if twitter:
        message += f"<b>üê¶ Twitter:</b> <a href='{twitter}'>–°—Å—ã–ª–∫–∞</a>\n"
    if telegram:
        message += f"<b>üí¨ Telegram:</b> <a href='{telegram}'>–°—Å—ã–ª–∫–∞</a>\n"
    if website:
        message += f"<b>üåê Website:</b> <a href='{website}'>–°—Å—ã–ª–∫–∞</a>\n"
    
    message += f"\n<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
    
    # –ü–æ–ª—É—á–∞–µ–º bondingCurveKey –¥–ª—è Axiom
    bonding_curve_key = data.get('bondingCurveKey', mint)  # Fallback to mint if no bondingCurveKey
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{bonding_curve_key}"},
            {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{mint}"}
        ],
        [
            {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{mint}"}
        ]
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Twitter –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    should_notify = (
        twitter_analysis['contract_found'] and (  # –ù–û–í–´–ô –§–ò–õ–¨–¢–†: –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ Twitter
            twitter_analysis['score'] >= 5 or  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä
            twitter_analysis['tweets'] >= 3 or  # –ú–∏–Ω–∏–º—É–º 3 —Ç–≤–∏—Ç–∞
            '–≤—ã—Å–æ–∫–∏–π' in twitter_analysis['rating'].lower() or  # –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
            '—Å—Ä–µ–¥–Ω–∏–π' in twitter_analysis['rating'].lower()    # –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        )
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if not twitter_analysis['contract_found']:
        logger.info(f"üö´ –¢–æ–∫–µ–Ω {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ Twitter")
    elif not should_notify:
        logger.info(f"üö´ –¢–æ–∫–µ–Ω {symbol} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –Ω–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ Twitter –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞
    log_token_analysis(data, twitter_analysis, should_notify)
    
    return message, keyboard, should_notify

def format_trade_alert(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω–æ–π —Å–¥–µ–ª–∫–µ"""
    mint = data.get('mint', 'Unknown')
    trader = data.get('traderPublicKey', 'Unknown')
    is_buy = data.get('is_buy', True)
    sol_amount = float(data.get('sol_amount', 0))
    token_amount = data.get('token_amount', 0)
    market_cap = data.get('market_cap', 0)
    
    action = "üü¢ –ü–û–ö–£–ü–ö–ê" if is_buy else "üî¥ –ü–†–û–î–ê–ñ–ê"
    action_emoji = "üìà" if is_buy else "üìâ"
    
    message = (
        f"{action_emoji} <b>{action}</b>\n\n"
        f"<b>üí∞ –°—É–º–º–∞:</b> {sol_amount:.4f} SOL\n"
        f"<b>ü™ô –¢–æ–∫–µ–Ω–æ–≤:</b> {token_amount:,}\n"
        f"<b>üìä Market Cap:</b> ${market_cap:,.0f}\n"
        f"<b>üìç Mint:</b> <code>{mint}</code>\n"
        f"<b>üë§ –¢—Ä–µ–π–¥–µ—Ä:</b> <code>{trader[:8] if len(trader) > 8 else trader}...</code>\n"
        f"<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º bondingCurveKey –¥–ª—è Axiom
    bonding_curve_key = data.get('bondingCurveKey', mint)  # Fallback to mint if no bondingCurveKey
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard = [
        [
            {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{bonding_curve_key}"},
            {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{mint}"}
        ],
        [
            {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{mint}"}
        ]
    ]
    
    return message, keyboard

async def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
    try:
        data = json.loads(message)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        if 'mint' in data and 'name' in data and 'symbol' in data:
            token_name = data.get('name', 'Unknown')
            mint = data.get('mint', 'Unknown')
            symbol = data.get('symbol', 'Unknown')
            logger.info(f"üöÄ –ù–û–í–´–ô –¢–û–ö–ï–ù: {token_name} ({symbol}) - {mint[:8]}...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg, keyboard, should_notify = await format_new_token(data)
            
            if should_notify:
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                send_telegram(msg, keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î
                try:
                    db_manager = get_db_manager()
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ notification_sent
                    log_database_operation("UPDATE_NOTIFICATION", "tokens", "SUCCESS", f"Symbol: {symbol}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            else:
                logger.info(f"‚ùå –¢–æ–∫–µ–Ω {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        elif 'mint' in data and 'traderPublicKey' in data and 'sol_amount' in data:
            sol_amount = float(data.get('sol_amount', 0))
            is_buy = data.get('is_buy', True)
            mint = data.get('mint', 'Unknown')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ë–î
            notification_sent = False
            try:
                db_manager = get_db_manager()
                saved_trade = db_manager.save_trade(data)
                log_database_operation("SAVE_TRADE", "trades", "SUCCESS", 
                                     f"Amount: {sol_amount:.2f} SOL")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î: {e}")
                log_database_operation("SAVE_TRADE", "trades", "ERROR", str(e))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö (–±–æ–ª—å—à–µ 5 SOL)
            if sol_amount >= 5.0:
                logger.info(f"üí∞ –ö—Ä—É–ø–Ω–∞—è {'–ø–æ–∫—É–ø–∫–∞' if is_buy else '–ø—Ä–æ–¥–∞–∂–∞'}: {sol_amount:.2f} SOL")
                msg, keyboard = format_trade_alert(data)
                notification_sent = send_telegram(msg, keyboard)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_trade_activity(data, notification_sent)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Raydium
        elif 'mint' in data and 'bondingCurveKey' in data and 'liquiditySol' in data:
            logger.info(f"üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê RAYDIUM: {data.get('mint', 'Unknown')[:8]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –ë–î
            try:
                db_manager = get_db_manager()
                saved_migration = db_manager.save_migration(data)
                log_database_operation("SAVE_MIGRATION", "migrations", "SUCCESS", 
                                     f"Mint: {data.get('mint', 'Unknown')[:8]}...")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î: {e}")
                log_database_operation("SAVE_MIGRATION", "migrations", "ERROR", str(e))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def send_daily_stats():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        db_manager = get_db_manager()
        stats = db_manager.get_token_stats()
        
        if stats:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            log_daily_stats(stats)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = (
                f"üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SolSpider</b>\n\n"
                f"üìà <b>–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {stats['total_tokens']:,}\n"
                f"üí∞ <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {stats['total_trades']:,}\n"
                f"üöÄ <b>–ú–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ Raydium:</b> {stats['total_migrations']:,}\n"
                f"üíé <b>–ö—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ 24—á:</b> {stats['big_trades_24h']:,}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ç–æ–∫–µ–Ω—ã –ø–æ Twitter —Å–∫–æ—Ä—É
            if stats['top_tokens']:
                stats_message += "<b>üèÜ –¢–û–ü –¢–û–ö–ï–ù–´ –ø–æ Twitter —Å–∫–æ—Ä—É:</b>\n"
                for i, token in enumerate(stats['top_tokens'][:5], 1):
                    stats_message += f"{i}. {token['symbol']} - {token['score']:.1f}\n"
            
            stats_message += f"\n<b>üïê –í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            send_telegram(stats_message)
            logger.info("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def check_connection_health(websocket):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π ping
        pong_waiter = await websocket.ping()
        await asyncio.wait_for(pong_waiter, timeout=10)
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º"""
    uri = "wss://pumpportal.fun/api/data"
    max_retries = 10
    retry_delay = 5
    retry_count = 0
    first_connection = True
    last_stats_day = None
    last_heartbeat = datetime.now()
    
    while True:
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º keepalive
            async with websockets.connect(
                uri,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout'],
                close_timeout=WEBSOCKET_CONFIG['close_timeout'],
                max_size=WEBSOCKET_CONFIG['max_size'],
                max_queue=WEBSOCKET_CONFIG['max_queue'],
                compression=None,   # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                user_agent_header="SolSpider/1.0"  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            ) as websocket:
                logger.info("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ PumpPortal")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connection_monitor.connection_established()
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                subscribe_msg = {"method": "subscribeNewToken"}
                await websocket.send(json.dumps(subscribe_msg))
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã")
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
                migrate_msg = {"method": "subscribeMigration"}
                await websocket.send(json.dumps(migrate_msg))
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if first_connection:
                    start_message = (
                        "üöÄ <b>PUMP.FUN –ë–û–¢ –ó–ê–ü–£–©–ï–ù!</b>\n\n"
                        "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å Twitter –∞–Ω–∞–ª–∏–∑–æ–º\n"
                        "‚úÖ –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º—É—Å–æ—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n"
                        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (>5 SOL)\n"
                        "‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏\n\n"
                        "üíé –ì–æ—Ç–æ–≤ –ª–æ–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã!"
                    )
                    send_telegram(start_message)
                    first_connection = False
                else:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    send_telegram("üîÑ <b>–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b>\n‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤")
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ—Ç—Ä–∞–µ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                retry_count = 0
                
                # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                message_count = 0
                async for message in websocket:
                    await handle_message(message)
                    message_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    connection_monitor.message_received()
                    last_heartbeat = datetime.now()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    current_day = datetime.now().strftime('%Y-%m-%d')
                    current_hour = datetime.now().hour
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 12:00
                    if (last_stats_day != current_day and current_hour >= 12):
                        await send_daily_stats()
                        last_stats_day = current_day
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
                    if message_count % 3600 == 0 and message_count > 0:  # –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        connection_stats = connection_monitor.format_stats_message()
                        logger.info("üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                        send_telegram(connection_stats)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                    if message_count % WEBSOCKET_CONFIG['health_check_interval'] == 0:
                        current_time = datetime.now()
                        time_since_heartbeat = (current_time - last_heartbeat).total_seconds()
                        
                        # –ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                        if time_since_heartbeat > WEBSOCKET_CONFIG['heartbeat_check']:
                            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π {time_since_heartbeat:.0f}—Å)")
                            
                            # –í—ã–ø–æ–ª–Ω—è–µ–º ping —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä
                            ping_time = await connection_monitor.ping_test(websocket)
                            if ping_time == -1:
                                logger.warning("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                                break
                            else:
                                logger.info(f"‚úÖ Ping: {ping_time:.0f}ms - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ")
                                last_heartbeat = current_time
                    
        except websockets.exceptions.ConnectionClosed as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            connection_monitor.connection_lost()
            
            if e.code == 1011:
                logger.warning(f"‚ö†Ô∏è Keepalive timeout: {e}")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö keepalive –æ—à–∏–±–æ–∫
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
                send_telegram(f"‚ö†Ô∏è <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ</b>\n–ö–æ–¥: {e.code}\n–ü—Ä–∏—á–∏–Ω–∞: {e.reason}\nüîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        except websockets.exceptions.InvalidStatusCode as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {e}")
            send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n–°—Ç–∞—Ç—É—Å: {e}")
        except websockets.exceptions.WebSocketException as e:
            logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
            # –ù–µ —Å–ø–∞–º–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö WebSocket –æ—à–∏–±–∫–∞—Ö
            if retry_count <= 3:
                send_telegram(f"‚ùå <b>WebSocket –æ—à–∏–±–∫–∞</b>\n{e}")
        except ConnectionResetError as e:
            logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —Å–µ—Ç—å—é: {e}")
            # –û–±—ã—á–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        except OSError as e:
            logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            if retry_count <= 2:
                send_telegram(f"‚ùå <b>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞</b>\n{e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            if retry_count <= 1:
                send_telegram(f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n{e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        retry_count = min(retry_count + 1, max_retries)
        
        if retry_count >= max_retries:
            error_msg = "‚ùå <b>–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.error(error_msg)
            send_telegram(error_msg)
            break
        
        logger.info(f"üîÑ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
        # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è

if __name__ == "__main__":
    asyncio.run(main()) 