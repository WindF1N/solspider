#!/usr/bin/env python3
"""
üåü VIP TWITTER MONITOR üåü
–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–∞—Ä—Å–µ—Ä VIP –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Twitter –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VIP Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Ç–≤–∏—Ç–∞—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
- –û—Ç–ø—Ä–∞–≤–∫–∞ VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã SolSpider
"""

import os
import asyncio
import aiohttp
import requests
import logging
import time
from datetime import datetime
from bs4 import BeautifulSoup
from typing import Dict, List, Optional, Set, Tuple
import re
import json

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –∫—É–∫–∏ —Å Anubis handler
from dynamic_cookie_rotation import get_background_proxy_cookie_async
from anubis_handler import handle_anubis_challenge_for_session

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {env_file}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_env_file()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from vip_config import (
        VIP_TWITTER_ACCOUNTS, VIP_MONITOR_SETTINGS, VIP_TELEGRAM_CONFIG,
        VIP_NITTER_COOKIES, VIP_PROXIES, AUTO_BUY_CONFIG, format_vip_message, create_keyboard,
        get_active_accounts, get_auto_buy_accounts, get_gas_fee, get_gas_description
    )
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å vip_config.py")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª vip_config.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, VIP_MONITOR_SETTINGS.get('log_level', 'INFO')),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vip_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('VIPMonitor')

class VipTwitterMonitor:
    """–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VIP Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.VIP_ACCOUNTS = VIP_TWITTER_ACCOUNTS
        self.monitor_settings = VIP_MONITOR_SETTINGS
        self.telegram_config = VIP_TELEGRAM_CONFIG
        self.auto_buy_config = AUTO_BUY_CONFIG
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram VIP –±–æ—Ç–∞
        self.VIP_BOT_TOKEN = self.telegram_config['bot_token']
        self.VIP_CHAT_ID = os.getenv(self.telegram_config['chat_id_env_var'])
        
        # –ö—ç—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_cache: Set[str] = set()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.check_interval = self.monitor_settings['default_check_interval']
        self.max_retries = self.monitor_settings['max_retries']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –∫—É–∫–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö VIP_NITTER_COOKIES
        self.proxies = VIP_PROXIES
        self.current_proxy_index = 0
        
        active_count = sum(1 for config in self.VIP_ACCOUNTS.values() if config.get('enabled', False))
        proxy_count = len([p for p in self.proxies if p is not None])
        
        logger.info(f"üåü VIP Twitter Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {active_count} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –∫—É–∫–∏ + {proxy_count} –ø—Ä–æ–∫—Å–∏ ({len(self.proxies)} –≤—Å–µ–≥–æ)")
        
        if not self.VIP_CHAT_ID:
            logger.error(f"‚ùå {self.telegram_config['chat_id_env_var']} –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    async def get_next_cookie_async(self, session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ cookies —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º Anubis challenge"""
        return await get_background_proxy_cookie_async(session)
    
    def get_next_proxy(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏"""
        proxy = self.proxies[self.current_proxy_index]
        self.current_proxy_index = (self.current_proxy_index + 1) % len(self.proxies)
        return proxy
    
    def get_proxy_connector(self, proxy_url: Optional[str]):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–∫—Å–∏-–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è aiohttp"""
        if not proxy_url:
            return None
            
        try:
            import aiohttp_socks
            from aiohttp_socks import ProxyType, ProxyConnector
            
            if proxy_url.startswith('socks5://'):
                # SOCKS5 –ø—Ä–æ–∫—Å–∏
                proxy_parts = proxy_url.replace('socks5://', '').split('@')
                if len(proxy_parts) == 2:
                    auth_part, host_part = proxy_parts
                    user, password = auth_part.split(':')
                    host, port = host_part.split(':')
                    return ProxyConnector(
                        proxy_type=ProxyType.SOCKS5,
                        host=host,
                        port=int(port),
                        username=user,
                        password=password
                    )
                else:
                    host, port = proxy_parts[0].split(':')
                    return ProxyConnector(
                        proxy_type=ProxyType.SOCKS5,
                        host=host,
                        port=int(port)
                    )
            elif proxy_url.startswith('http://'):
                # HTTP –ø—Ä–æ–∫—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± aiohttp
                return None  # –î–ª—è HTTP –ø—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä proxy –≤ session.get()
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏: {proxy_url}")
                return None
                
        except ImportError:
            logger.warning("‚ö†Ô∏è aiohttp-socks –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, SOCKS –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏-–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {e}")
            return None
    
    def extract_contracts_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ç–≤–∏—Ç–∞"""
        if not text:
            return []
        
        # –ò—â–µ–º –∞–¥—Ä–µ—Å–∞ Solana (32-44 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        contracts = re.findall(r'\b[A-Za-z0-9]{32,44}\b', text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º
        clean_contracts = []
        for contract in contracts:
            # –£–±–∏—Ä–∞–µ–º "pump" —Å –∫–æ–Ω—Ü–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if contract.endswith('pump'):
                contract = contract[:-4]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Solana –∞–¥—Ä–µ—Å
            if 32 <= len(contract) <= 44 and contract.isalnum():
                clean_contracts.append(contract)
        
        return list(set(clean_contracts))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def extract_clean_text(self, element) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–≤–∏—Ç–∞ –≤–∫–ª—é—á–∞—è –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã"""
        try:
            all_text_parts = []
            
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            main_text = element.get_text(separator=' ', strip=True)
            if main_text:
                all_text_parts.append(main_text)
            
            # 2. üîó –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–ï–ö–°–¢ –ò–ó –í–°–ï–• –°–°–´–õ–û–ö
            for link in element.find_all('a'):
                # –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                link_text = link.get_text(strip=True)
                if link_text and link_text not in all_text_parts:
                    all_text_parts.append(link_text)
                
                # href –∞—Ç—Ä–∏–±—É—Ç —Å—Å—ã–ª–∫–∏
                href = link.get('href', '')
                if href and href not in all_text_parts:
                    all_text_parts.append(href)
                    logger.debug(f"üîó –ù–∞–π–¥–µ–Ω href: {href[:50]}...")
                
                # title –∞—Ç—Ä–∏–±—É—Ç —Å—Å—ã–ª–∫–∏
                title = link.get('title', '')
                if title and title not in all_text_parts:
                    all_text_parts.append(title)
            
            # 3. üñºÔ∏è –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            for img in element.find_all('img'):
                # alt —Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                alt_text = img.get('alt', '')
                if alt_text and alt_text not in all_text_parts:
                    all_text_parts.append(alt_text)
                    logger.debug(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω alt: {alt_text[:50]}...")
                
                # src –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –∏–º–µ–Ω–∏)
                src = img.get('src', '')
                if src and src not in all_text_parts:
                    all_text_parts.append(src)
                
                # data-url –∞—Ç—Ä–∏–±—É—Ç—ã
                data_url = img.get('data-url', '')
                if data_url and data_url not in all_text_parts:
                    all_text_parts.append(data_url)
            
            # 4. üé¨ –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –í–ò–î–ï–û
            for video in element.find_all('video'):
                # poster –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
                poster = video.get('poster', '')
                if poster and poster not in all_text_parts:
                    all_text_parts.append(poster)
                
                # data-url –≤–∏–¥–µ–æ
                data_url = video.get('data-url', '')
                if data_url and data_url not in all_text_parts:
                    all_text_parts.append(data_url)
                    logger.debug(f"üé¨ –ù–∞–π–¥–µ–Ω video data-url: {data_url[:50]}...")
            
            # 5. üìã –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –ö–ê–†–¢–û–ß–ï–ö
            for card in element.find_all('div', class_='card'):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
                card_title = card.find('h2', class_='card-title')
                if card_title:
                    title_text = card_title.get_text(strip=True)
                    if title_text and title_text not in all_text_parts:
                        all_text_parts.append(title_text)
                
                # –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                card_desc = card.find('p', class_='card-description')
                if card_desc:
                    desc_text = card_desc.get_text(strip=True)
                    if desc_text and desc_text not in all_text_parts:
                        all_text_parts.append(desc_text)
                
                # URL –∫–∞—Ä—Ç–æ—á–∫–∏
                card_link = card.find('a', class_='card-container')
                if card_link:
                    card_href = card_link.get('href', '')
                    if card_href and card_href not in all_text_parts:
                        all_text_parts.append(card_href)
                        logger.debug(f"üìã –ù–∞–π–¥–µ–Ω card href: {card_href[:50]}...")
            
            # 6. üè∑Ô∏è –ò–ó–í–õ–ï–ö–ê–ï–ú –í–°–ï DATA-–ê–¢–†–ò–ë–£–¢–´
            for elem in element.find_all():
                for attr_name, attr_value in elem.attrs.items():
                    if attr_name.startswith('data-') and isinstance(attr_value, str):
                        if attr_value and attr_value not in all_text_parts:
                            all_text_parts.append(attr_value)
                            logger.debug(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω {attr_name}: {attr_value[:50]}...")
            
            # 7. üìé –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–ï–ö–°–¢ –ò–ó ATTACHMENTS
            attachments = element.find_all('div', class_='attachments')
            for attachment in attachments:
                attachment_text = attachment.get_text(strip=True)
                if attachment_text and attachment_text not in all_text_parts:
                    all_text_parts.append(attachment_text)
            
            # 8. üîç –ò–ó–í–õ–ï–ö–ê–ï–ú –°–ö–†–´–¢–´–ô –¢–ï–ö–°–¢ –ò–ó SPAN –ò DIV
            for span in element.find_all(['span', 'div']):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã title, aria-label –∏ –¥—Ä—É–≥–∏–µ
                for attr in ['title', 'aria-label', 'data-original-title']:
                    attr_value = span.get(attr, '')
                    if attr_value and attr_value not in all_text_parts:
                        all_text_parts.append(attr_value)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            for link in element.find_all('a'):
                if link.string:
                    if link.previous_sibling and not str(link.previous_sibling).endswith(' '):
                        link.insert_before(' ')
                    if link.next_sibling and not str(link.next_sibling).startswith(' '):
                        link.insert_after(' ')
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            full_text = " ".join(all_text_parts)
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            full_text = re.sub(r'\s+', ' ', full_text).strip()
            
            logger.debug(f"üîç Twitter: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(all_text_parts)} —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞: {full_text[:100]}...")
            
            return full_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Twitter —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
            return element.get_text(strip=True)
    
    async def send_vip_notification(self, message: str, keyboard: Optional[List] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            payload = {
                "chat_id": self.VIP_CHAT_ID,
                "text": message,
                "parse_mode": self.telegram_config['parse_mode'],
                "disable_web_page_preview": self.telegram_config['disable_web_page_preview']
            }
            
            if keyboard:
                payload["reply_markup"] = {"inline_keyboard": keyboard}
            
            url = f"https://api.telegram.org/bot{self.VIP_BOT_TOKEN}/sendMessage"
            response = requests.post(url, json=payload, timeout=self.telegram_config['timeout'])
            
            if response.status_code == 200:
                logger.info("‚úÖ VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_vip_photo_notification(self, photo_url: str, caption: str, keyboard: Optional[List] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –≤ Telegram"""
        try:
            payload = {
                "chat_id": self.VIP_CHAT_ID,
                "photo": photo_url,
                "caption": caption,
                "parse_mode": self.telegram_config['parse_mode']
            }
            
            if keyboard:
                payload["reply_markup"] = {"inline_keyboard": keyboard}
            
            url = f"https://api.telegram.org/bot{self.VIP_BOT_TOKEN}/sendPhoto"
            response = requests.post(url, json=payload, timeout=self.telegram_config['timeout'])
            
            if response.status_code == 200:
                logger.info("‚úÖ VIP —Ñ–æ—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç: {response.text}")
                return await self.send_vip_notification(caption, keyboard)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ VIP —Ñ–æ—Ç–æ: {e}")
            return await self.send_vip_notification(caption, keyboard)
    
    async def execute_automatic_purchase(self, contract: str, username: str, tweet_text: str, amount_sol: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–∞"""
        logger.info(f"üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ö–£–ü–ö–ê: {contract} –Ω–∞ {amount_sol} SOL –æ—Ç @{username}")
        
        import time
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
        if self.auto_buy_config.get('simulate_only', True):
            logger.info("üí° –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ - —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
            try:
                await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                
                # –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                import random
                success = random.choice([True, False])
                
                if success:
                    return {
                        'success': True,
                        'tx_hash': f"mock_tx_{int(time.time())}",
                        'sol_amount': amount_sol,
                        'execution_time': 2.0,
                        'status': '–°–∏–º—É–ª—è—Ü–∏—è - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
                    }
                else:
                    return {
                        'success': False,
                        'error': 'Mock error: insufficient balance',
                        'execution_time': 2.0
                    }
                    
            except Exception as e:
                return {
                    'success': False,
                    'error': f'Critical error: {str(e)}',
                    'execution_time': 0
                }
        else:
            # üöÄ –†–ï–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ü–û–ö–£–ü–ö–ê —á–µ—Ä–µ–∑ Axiom.trade
            logger.info(f"üí∞ –í–´–ü–û–õ–ù–Ø–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ü–û–ö–£–ü–ö–£ —á–µ—Ä–µ–∑ {self.auto_buy_config.get('trading_platform', 'axiom')}")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SOL –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                sol_amount = amount_sol
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Axiom —Ç—Ä–µ–π–¥–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
                try:
                    from axiom_trader import execute_axiom_purchase
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Axiom.trade
                    # üî• –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ VIP –∞–∫–∫–∞—É–Ω—Ç–∞
                    account_priority = account_config.get('priority', 'HIGH')
                    if account_priority == 'ULTRA':
                        gas_type = 'ultra_vip'  # $5 –≥–∞–∑ –¥–ª—è ULTRA –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    else:
                        gas_type = 'vip_signals'  # $2 –≥–∞–∑ –¥–ª—è HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    
                    vip_gas_fee = get_gas_fee(gas_type)
                    gas_description = get_gas_description(gas_type)
                    
                    logger.info(f"üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º {gas_description}")
                    logger.info(f"‚ö° VIP Gas fee: {vip_gas_fee} SOL (~${vip_gas_fee * 140:.2f})")
                    
                    result = await execute_axiom_purchase(
                        contract_address=contract,
                        twitter_username=username,
                        tweet_text=tweet_text,
                        sol_amount=sol_amount,
                        slippage=self.auto_buy_config.get('slippage_percent', 15),
                        priority_fee=vip_gas_fee  # üî• VIP –≥–∞–∑ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    )
                    
                    execution_time = time.time() - start_time
                    
                    if result.get('success', False):
                        logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! TX: {result.get('tx_hash', 'N/A')}")
                        return {
                            'success': True,
                            'tx_hash': result.get('tx_hash', 'N/A'),
                            'sol_amount': sol_amount,
                            'execution_time': execution_time,
                            'status': f'Axiom.trade - –ø–æ–∫—É–ø–∫–∞ {sol_amount:.6f} SOL',
                            'platform': 'Axiom.trade'
                        }
                    else:
                        error_msg = result.get('error', 'Unknown error from Axiom')
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {error_msg}")
                        return {
                            'success': False,
                            'error': error_msg,
                            'execution_time': execution_time
                        }
                        
                except ImportError:
                    logger.error("‚ùå axiom_trader –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Axiom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
                    return {
                        'success': False,
                        'error': 'axiom_trader module not found',
                        'execution_time': time.time() - start_time
                    }
                    
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {e}")
                return {
                    'success': False,
                    'error': f'Critical error: {str(e)}',
                    'execution_time': execution_time
                }
    
    async def check_twitter_account(self, username: str, account_config: Dict) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫—É–∫–∏ –∏ Anubis handler"""
        contracts_found = []
        
        try:
            proxy_url = self.get_next_proxy()
            
            logger.info(f"üåü –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP –∞–∫–∫–∞—É–Ω—Ç @{username}... (–ø—Ä–æ–∫—Å–∏: {'‚úÖ' if proxy_url else '‚ùå'})")
            
            # URL –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ Nitter
            url = f"https://nitter.tiekoetter.com/{username}"
            timeout = self.monitor_settings['request_timeout']
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            connector = self.get_proxy_connector(proxy_url)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è session
            session_kwargs = {}
            if connector:
                session_kwargs['connector'] = connector
            
            async with aiohttp.ClientSession(**session_kwargs) as session:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ cookies —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                dynamic_proxy, cookies_string = await self.get_next_cookie_async(session)
                
                if not cookies_string:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cookies –¥–ª—è @{username}")
                    return contracts_found
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É cookies –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è aiohttp
                cookies = {}
                try:
                    for cookie_part in cookies_string.split(';'):
                        if '=' in cookie_part:
                            key, value = cookie_part.strip().split('=', 1)
                            cookies[key] = value
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cookies –¥–ª—è @{username}: {e}")
                    return contracts_found
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = {
                    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1'
                }
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                request_kwargs = {
                    'headers': headers,
                    'cookies': cookies,
                    'timeout': timeout
                }
                
                # –î–ª—è HTTP –ø—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä proxy
                if proxy_url and proxy_url.startswith('http://'):
                    request_kwargs['proxy'] = proxy_url
                
                async with session.get(url, **request_kwargs) as response:
                    html = await response.text()
                    
                    # üîç –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê ANUBIS CHALLENGE
                    if ('id="anubis_challenge"' in html or "Making sure you're not a bot!" in html):
                        logger.warning(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge –¥–ª—è @{username} - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ–º...")
                        
                        try:
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ–º challenge
                            new_cookies = await handle_anubis_challenge_for_session(
                                session, url, html, force_fresh_challenge=True
                            )
                            
                            if new_cookies:
                                logger.info(f"‚úÖ Challenge —Ä–µ—à–µ–Ω –¥–ª—è @{username}, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º cookies –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                                for key, value in new_cookies.items():
                                    cookies[key] = value
                                request_kwargs['cookies'] = cookies
                                    
                                async with session.get(url, **request_kwargs) as retry_response:
                                    if retry_response.status == 200:
                                        html = await retry_response.text()
                                        logger.info(f"‚úÖ VIP –∞–∫–∫–∞—É–Ω—Ç @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è challenge")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ challenge @{username}: {retry_response.status}")
                                        return contracts_found
                            else:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å challenge –¥–ª—è @{username}")
                                return contracts_found
                                
                        except Exception as challenge_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è challenge –¥–ª—è @{username}: {challenge_error}")
                            return contracts_found
                    
                    elif response.status != 200:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ @{username}: HTTP {response.status}")
                        return contracts_found
                    
                    # –ü–∞—Ä—Å–∏–º HTML –∏ –∏—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–≤–∏—Ç—ã
                    tweets = soup.find_all('div', class_='timeline-item')
                    logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ —É @{username}")
                    
                    for tweet in tweets:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Ç–≤–∏—Ç—ã
                        if tweet.find('div', class_='retweet-header'):
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–≤–∏—Ç–∞
                        tweet_content = tweet.find('div', class_='tweet-content')
                        if not tweet_content:
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                        tweet_text = self.extract_clean_text(tweet_content)
                        
                        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                        contracts = self.extract_contracts_from_text(tweet_text)
                        
                        for contract in contracts:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
                            signal_key = f"{username}:{contract}"
                            
                            if signal_key not in self.signals_cache:
                                self.signals_cache.add(signal_key)
                                contracts_found.append({
                                    'contract': contract,
                                    'tweet_text': tweet_text,
                                    'username': username,
                                    'account_config': account_config
                                })
                                logger.info(f"üî• VIP –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù! @{username}: {contract}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ @{username}: {e}")
        
        return contracts_found
    
    async def process_contract_signal(self, signal_data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        contract = signal_data['contract']
        tweet_text = signal_data['tweet_text']
        username = signal_data['username']
        account_config = signal_data['account_config']
        
        logger.info(f"üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º VIP —Å–∏–≥–Ω–∞–ª: {contract} –æ—Ç @{username}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        purchase_result = None
        if account_config.get('auto_buy', False):
            amount_sol = account_config.get('buy_amount_sol', self.auto_buy_config['default_amount_sol'])
            purchase_result = await self.execute_automatic_purchase(
                contract, username, tweet_text, amount_sol
            )
        
        # –°–æ–∑–¥–∞–µ–º VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω
        message = self.format_vip_signal_message(
            contract, username, tweet_text, account_config, purchase_result
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_keyboard(contract)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ)
        photo_url = f"https://axiomtrading.sfo3.cdn.digitaloceanspaces.com/{contract}.webp"
        success = await self.send_vip_photo_notification(photo_url, message, keyboard)
        
        if success:
            logger.info(f"üì§ VIP —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {contract} –æ—Ç @{username}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å VIP —Å–∏–≥–Ω–∞–ª –¥–ª—è {contract}")
    
    def format_vip_signal_message(self, contract: str, username: str, tweet_text: str, 
                                 account_config: Dict, purchase_result: Optional[Dict] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç VIP —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω"""
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–≤–∏—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(tweet_text) > 200:
            tweet_text = tweet_text[:200] + "..."
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_vip_message(
            'contract_found',
            description=account_config['description'],
            username=username,
            contract=contract,
            tweet_text=tweet_text,
            priority=account_config['priority'],
            timestamp=datetime.now().strftime('%H:%M:%S')
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–µ
        if purchase_result:
            if purchase_result['success']:
                message += format_vip_message(
                    'auto_buy_success',
                    status=purchase_result['status'],
                    sol_amount=purchase_result['sol_amount'],
                    execution_time=purchase_result['execution_time'],
                    tx_hash=purchase_result['tx_hash']
                )
            else:
                message += format_vip_message(
                    'auto_buy_error',
                    error=purchase_result['error'][:100]
                )
        elif account_config.get('auto_buy', False):
            message += format_vip_message('auto_buy_enabled')
        
        return message
    
    async def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ VIP –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        while True:
            try:
                start_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ VIP –∞–∫–∫–∞—É–Ω—Ç—ã
                tasks = []
                for username, config in self.VIP_ACCOUNTS.items():
                    if config.get('enabled', False):
                        task = self.check_twitter_account(username, config)
                        tasks.append(task)
                
                if tasks:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    for result in results:
                        if isinstance(result, list):
                            for signal_data in result:
                                await self.process_contract_signal(signal_data)
                        elif isinstance(result, Exception):
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {result}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
                cycle_time = time.time() - start_time
                logger.info(f"üîÑ VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f}—Å. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                cleanup_threshold = self.monitor_settings['cache_cleanup_threshold']
                if len(self.signals_cache) > cleanup_threshold:
                    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
                    self.signals_cache.clear()
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.VIP_CHAT_ID:
            logger.error(f"‚ùå {self.telegram_config['chat_id_env_var']} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.monitor_settings.get('send_startup_notification', True):
            active_accounts = get_active_accounts()
            auto_buy_accounts = get_auto_buy_accounts()
            
            start_message = format_vip_message(
                'startup',
                active_accounts=len(active_accounts),
                auto_buy_accounts=', '.join([f'@{name}' for name in auto_buy_accounts.keys()]),
                timestamp=datetime.now().strftime('%H:%M:%S %d.%m.%Y')
            )
            
            await self.send_vip_notification(start_message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        await self.monitor_loop()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = VipTwitterMonitor()
    await monitor.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë VIP Twitter Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ VIP –º–æ–Ω–∏—Ç–æ—Ä–µ")