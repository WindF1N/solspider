#!/usr/bin/env python3
"""
üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤ Nitter

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏ –ø—Ä–∏ 429 –æ—à–∏–±–∫–∞—Ö
–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏.
"""

import asyncio
import time
import random
import logging
from typing import List, Dict, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from collections import defaultdict

logger = logging.getLogger(__name__)

@dataclass
class DomainStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω—É"""
    domain: str
    total_requests: int = 0
    successful_requests: int = 0
    rate_limit_errors: int = 0  # 429 –æ—à–∏–±–∫–∏
    timeout_errors: int = 0  # timeout/connection –æ—à–∏–±–∫–∏
    last_rate_limit: Optional[datetime] = None
    last_timeout: Optional[datetime] = None
    consecutive_429s: int = 0
    consecutive_timeouts: int = 0
    avg_response_time: float = 0.0
    is_available: bool = True
    cooldown_until: Optional[datetime] = None

class NitterDomainRotator:
    """–†–æ—Ç–∞—Ç–æ—Ä –¥–æ–º–µ–Ω–æ–≤ Nitter —Å —É–º–Ω—ã–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        # –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–æ–º–µ–Ω—ã (–≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏)
        self.domains = [
            "nitter.tiekoetter.com",        # –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π (0.29s) —Å Anubis
            "89.252.140.174"                # –ü—Ä—è–º–æ–π IP nitter.space (1.14s) –±–µ–∑ Anubis
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
        self.domain_stats: Dict[str, DomainStats] = {}
        for domain in self.domains:
            self.domain_stats[domain] = DomainStats(domain=domain)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        self.current_index = random.randint(0, len(self.domains) - 1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ cooldown –¥–ª—è 429 –æ—à–∏–±–æ–∫
        self.rate_limit_cooldown = 30  # —Å–µ–∫—É–Ω–¥ cooldown –ø–æ—Å–ª–µ 429
        self.max_consecutive_429s = 3  # –º–∞–∫—Å–∏–º—É–º –ø–æ–¥—Ä—è–¥ 429 –¥–æ –¥–æ–ª–≥–æ–≥–æ cooldown
        self.long_cooldown = 300  # 5 –º–∏–Ω—É—Ç –¥–æ–ª–≥–æ–≥–æ cooldown
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ cooldown –¥–ª—è timeout –æ—à–∏–±–æ–∫
        self.timeout_cooldown = 60  # —Å–µ–∫—É–Ω–¥ cooldown –ø–æ—Å–ª–µ timeout
        self.max_consecutive_timeouts = 3  # –º–∞–∫—Å–∏–º—É–º –ø–æ–¥—Ä—è–¥ timeout –¥–æ –¥–æ–ª–≥–æ–≥–æ cooldown
        self.timeout_long_cooldown = 180  # 3 –º–∏–Ω—É—Ç—ã –¥–æ–ª–≥–æ–≥–æ cooldown
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        self.response_time_weight = 0.3  # –≤–µ—Å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–º–µ–Ω–∞
        self.success_rate_weight = 0.7   # –≤–µ—Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞
        
        logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–æ—Ç–∞—Ç–æ—Ä –¥–æ–º–µ–Ω–æ–≤: {', '.join(self.domains)}")
        logger.info(f"üé≤ –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {self.current_index} (–¥–æ–º–µ–Ω: {self.domains[self.current_index]})")
    
    def get_next_domain(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –∫—Ä—É–≥–æ–≤–∞—è —Ä–æ—Ç–∞—Ü–∏—è)"""
        
        # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ—Å—Ç–æ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω—ã
        domain = self.domains[self.current_index % len(self.domains)]
        selected_index = self.current_index % len(self.domains)
        self.current_index = (self.current_index + 1) % len(self.domains)
        
        logger.debug(f"üéØ –í—ã–±—Ä–∞–Ω –¥–æ–º–µ–Ω: {domain} (–∏–Ω–¥–µ–∫—Å: {selected_index})")
        return domain
    
    def _select_best_domain(self, available_domains: List[str]) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ–º–µ–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        
        if len(available_domains) == 1:
            return available_domains[0]
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—â–µ –º–∞–ª–æ
        total_requests = sum(self.domain_stats[d].total_requests for d in available_domains)
        if total_requests < 10:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –≤–º–µ—Å—Ç–æ –∫—Ä—É–≥–æ–≤–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –¥–æ–º–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
            domain = random.choice(available_domains)
            logger.debug(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –¥–æ–º–µ–Ω–∞ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–ª–æ): {domain}")
            return domain
        
        # –£–º–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        best_domain = None
        best_score = -1
        best_domains = []  # –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ —Å –ª—É—á—à–∏–º score
        
        for domain in available_domains:
            stats = self.domain_stats[domain]
            score = self._calculate_domain_score(stats)
            
            logger.debug(f"üìä {domain}: score={score:.3f}")
            
            if score > best_score:
                best_score = score
                best_domain = domain
                best_domains = [domain]  # –ù–æ–≤—ã–π –ª—É—á—à–∏–π score
            elif score == best_score:
                best_domains.append(domain)  # –¢–∞–∫–æ–π –∂–µ score
        
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–º–µ–Ω–æ–≤ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ª—É—á—à–∏–π score, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
        if len(best_domains) > 1:
            selected = random.choice(best_domains)
            logger.debug(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ {len(best_domains)} –¥–æ–º–µ–Ω–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º score: {selected}")
            return selected
        
        return best_domain or available_domains[0]
    
    def _calculate_domain_score(self, stats: DomainStats) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –¥–æ–º–µ–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        
        if stats.total_requests == 0:
            return 1.0  # –ù–æ–≤—ã–π –¥–æ–º–µ–Ω –ø–æ–ª—É—á–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ (–±–µ–∑ —É—á–µ—Ç–∞ 429 –æ—à–∏–±–æ–∫)
        non_rate_limit_requests = stats.total_requests - stats.rate_limit_errors
        if non_rate_limit_requests > 0:
            success_rate = stats.successful_requests / non_rate_limit_requests
        else:
            success_rate = 0.0
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–¥–∞–≤–Ω–∏–µ 429 –æ—à–∏–±–∫–∏
        rate_limit_penalty = 0.0
        if stats.last_rate_limit:
            minutes_since_429 = (datetime.now() - stats.last_rate_limit).total_seconds() / 60
            if minutes_since_429 < 5:  # –®—Ç—Ä–∞—Ñ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                rate_limit_penalty = 0.5 * (5 - minutes_since_429) / 5
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_time_penalty = 0.0
        if stats.avg_response_time > 1.0:  # –ï—Å–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
            response_time_penalty = min(0.3, (stats.avg_response_time - 1.0) * 0.1)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        score = success_rate - rate_limit_penalty - response_time_penalty
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–º–∞–ª–æ 429 –æ—à–∏–±–æ–∫)
        if stats.total_requests > 10:
            rate_limit_ratio = stats.rate_limit_errors / stats.total_requests
            if rate_limit_ratio < 0.1:  # –ú–µ–Ω—å—à–µ 10% rate limit –æ—à–∏–±–æ–∫
                score += 0.2
        
        return max(0.0, score)
    
    def record_request_result(self, domain: str, success: bool, response_time: float, 
                            status_code: Optional[int] = None) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if domain not in self.domain_stats:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω: {domain}")
            return
        
        stats = self.domain_stats[domain]
        stats.total_requests += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if stats.total_requests == 1:
            stats.avg_response_time = response_time
        else:
            stats.avg_response_time = (stats.avg_response_time * (stats.total_requests - 1) + response_time) / stats.total_requests
        
        if success:
            stats.successful_requests += 1
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            stats.consecutive_429s = 0
            stats.consecutive_timeouts = 0
            
        elif status_code == 429:
            stats.rate_limit_errors += 1
            stats.last_rate_limit = datetime.now()
            stats.consecutive_429s += 1
            
            # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
            if stats.consecutive_429s >= self.max_consecutive_429s:
                logger.warning(f"üö´ {domain}: {stats.consecutive_429s} –ø–æ–¥—Ä—è–¥ 429 –æ—à–∏–±–æ–∫! (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)")
            else:
                logger.warning(f"‚è∏Ô∏è {domain}: 429 –æ—à–∏–±–∫–∞! (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)")
            
            # –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown –∏ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
            # stats.cooldown_until = datetime.now() + timedelta(seconds=cooldown_duration)
            # stats.is_available = False
        
        elif status_code is None or status_code == 502:  # Timeout/Connection/502 –æ—à–∏–±–∫–∏
            stats.timeout_errors += 1
            stats.last_timeout = datetime.now()
            stats.consecutive_timeouts += 1
            
            # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
            if stats.consecutive_timeouts >= self.max_consecutive_timeouts:
                logger.warning(f"‚è∞ {domain}: {stats.consecutive_timeouts} –ø–æ–¥—Ä—è–¥ timeout –æ—à–∏–±–æ–∫! (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)")
            else:
                logger.warning(f"‚è∞ {domain}: timeout –æ—à–∏–±–∫–∞! (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)")
            
            # –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown –∏ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
            # stats.cooldown_until = datetime.now() + timedelta(seconds=cooldown_duration)
            # stats.is_available = False
        
        logger.debug(f"üìà {domain}: {stats.successful_requests}/{stats.total_requests} —É—Å–ø–µ—Ö, "
                    f"429: {stats.rate_limit_errors}, timeout: {stats.timeout_errors}, –≤—Ä–µ–º—è: {stats.avg_response_time:.2f}—Å")
    
    def get_domain_statistics(self) -> Dict[str, Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –¥–æ–º–µ–Ω–∞–º"""
        
        result = {}
        now = datetime.now()
        
        for domain, stats in self.domain_stats.items():
            success_rate = (stats.successful_requests / max(stats.total_requests, 1)) * 100
            
            cooldown_remaining = 0
            if stats.cooldown_until and now < stats.cooldown_until:
                cooldown_remaining = (stats.cooldown_until - now).total_seconds()
            
            result[domain] = {
                'total_requests': stats.total_requests,
                'successful_requests': stats.successful_requests,
                'success_rate': f"{success_rate:.1f}%",
                'rate_limit_errors': stats.rate_limit_errors,
                'timeout_errors': stats.timeout_errors,
                'consecutive_429s': stats.consecutive_429s,
                'consecutive_timeouts': stats.consecutive_timeouts,
                'avg_response_time': f"{stats.avg_response_time:.2f}s",
                'is_available': stats.is_available,
                'cooldown_remaining': f"{cooldown_remaining:.1f}s" if cooldown_remaining > 0 else "none",
                'score': f"{self._calculate_domain_score(stats):.3f}"
            }
        
        return result
    
    def reset_domain_stats(self, domain: Optional[str] = None) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–µ–Ω–∞ –∏–ª–∏ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤"""
        
        if domain:
            if domain in self.domain_stats:
                self.domain_stats[domain] = DomainStats(domain=domain)
                logger.info(f"üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {domain} —Å–±—Ä–æ—à–µ–Ω–∞")
        else:
            for d in self.domains:
                self.domain_stats[d] = DomainStats(domain=d)
            logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def force_enable_domain(self, domain: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–º–µ–Ω (—É–±–∏—Ä–∞–µ—Ç cooldown)"""
        
        if domain not in self.domain_stats:
            return False
        
        stats = self.domain_stats[domain]
        stats.cooldown_until = None
        stats.consecutive_429s = 0
        stats.consecutive_timeouts = 0
        stats.is_available = True
        
        logger.info(f"üîì –î–æ–º–µ–Ω {domain} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω")
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—Ç–∞—Ç–æ—Ä–∞
domain_rotator = NitterDomainRotator()

def reload_domain_rotator():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—Ç–∞—Ç–æ—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏"""
    global domain_rotator
    domain_rotator = NitterDomainRotator()
    logger.info("üîÑ –†–æ—Ç–∞—Ç–æ—Ä –¥–æ–º–µ–Ω–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏")

def get_next_nitter_domain() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω Nitter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return domain_rotator.get_next_domain()

def record_nitter_request_result(domain: str, success: bool, response_time: float, 
                                status_code: Optional[int] = None) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Nitter –¥–æ–º–µ–Ω—É"""
    domain_rotator.record_request_result(domain, success, response_time, status_code)

def get_nitter_domain_stats() -> Dict[str, Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–º–µ–Ω–∞–º Nitter"""
    return domain_rotator.get_domain_statistics()

def reset_nitter_domain_stats(domain: Optional[str] = None) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–µ–Ω–æ–≤ Nitter"""
    domain_rotator.reset_domain_stats(domain)

def force_enable_nitter_domain(domain: str) -> bool:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–º–µ–Ω Nitter"""
    return domain_rotator.force_enable_domain(domain)

def get_all_nitter_domains() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ Nitter"""
    return domain_rotator.domains.copy()

def get_best_nitter_domains(limit: int = 5) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –¥–æ–º–µ–Ω–æ–≤ Nitter –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    stats = domain_rotator.get_domain_statistics()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å + —Å–∫–æ—Ä–æ—Å—Ç—å)
    sorted_domains = []
    for domain, domain_stats in stats.items():
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É is_available - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        # if not domain_stats.get('is_available', True):
        #     continue
            
        total_requests = domain_stats.get('total_requests', 0)
        successful_requests = domain_stats.get('successful_requests', 0)
        avg_response_time = domain_stats.get('avg_response_time', 999.0)
        consecutive_429s = domain_stats.get('consecutive_429s', 0)
        consecutive_timeouts = domain_stats.get('consecutive_timeouts', 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        if total_requests == 0:
            # –ù–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã –ø–æ–ª—É—á–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            score = 50.0
        else:
            success_rate = successful_requests / total_requests
            # –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
            speed_penalty = min(avg_response_time / 10.0, 50.0)  # –ú–∞–∫—Å–∏–º—É–º 50 –æ—á–∫–æ–≤ —à—Ç—Ä–∞—Ñ–∞
            error_penalty = (consecutive_429s + consecutive_timeouts) * 5
            
            score = (success_rate * 100) - speed_penalty - error_penalty
        
        sorted_domains.append((domain, score))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    sorted_domains.sort(key=lambda x: x[1], reverse=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    return [domain for domain, score in sorted_domains[:limit]]

def get_domain_count() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤ Nitter"""
    return len(domain_rotator.domains) 