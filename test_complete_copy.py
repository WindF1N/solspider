#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –ª–æ–≥–∏–∫–∏ bundle_analyzer.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_complete_copy_logic():
    """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    all_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    test_files = all_files[:5]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º 5 —Ç–æ–∫–µ–Ω–æ–≤
    
    print(f"üîß –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ö–û–ü–ò–ò BUNDLE_ANALYZER.PY")
    print(f"="*70)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:")
    print(f"   ‚úÖ TokenMetrics –∫–ª–∞—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω")
    print(f"   ‚úÖ max_holders_pcnt —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ")
    print(f"   ‚úÖ time_ok –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞")
    print(f"   ‚úÖ bundlers —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç TokenMetrics")
    print(f"   ‚úÖ can_notify –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã")
    print(f"   ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–± —É–ø—Ä–æ—â–µ–Ω–∏–∏ —É–±—Ä–∞–Ω—ã")
    print()
    
    results = {
        'success': 0,
        'errors': 0,
        'would_send': 0,
        'would_reject': 0
    }
    
    for i, log_file in enumerate(test_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        token_id = log_file.replace('.log', '')
        
        print(f"{i:2d}. üîç {token_id[:20]}...")
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '')
            snapshots = result.get('snapshots_checked', 0)
            
            if decision == 'ERROR':
                results['errors'] += 1
                print(f"     üí• ERROR: {reason[:50]}")
            elif decision == 'WOULD_SEND':
                results['would_send'] += 1
                results['success'] += 1
                snap_num = result.get('snapshot_number', 0)
                print(f"     ‚úÖ WOULD_SEND –Ω–∞ —Å–Ω–∞–ø—à–æ—Ç–µ #{snap_num} ({snapshots} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
                if 'all_conditions_passed' in result:
                    print(f"        üéØ –ü—Ä–æ—à–µ–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è activity + –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
                if 'token_address' in result:
                    print(f"        üìç –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {result['token_address'][:12]}...")
                    
            elif decision == 'WOULD_REJECT':
                results['would_reject'] += 1
                results['success'] += 1
                print(f"     ‚ùå WOULD_REJECT ({snapshots} —Å–Ω–∞–ø—à–æ—Ç–æ–≤)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ª—É—á—à–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
                if 'best_snapshot_passed' in reason:
                    best_match = reason.find('‚úÖ')
                    if best_match != -1:
                        best_info = reason[best_match:best_match+100]
                        print(f"        üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_info}")
                        
            else:
                results['success'] += 1
                print(f"     ‚ÑπÔ∏è {decision}: {reason[:50]}")
                
        except Exception as e:
            results['errors'] += 1
            print(f"     üí• EXCEPTION: {e}")
    
    print()
    print("="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ü–û–õ–ù–û–ô –ö–û–ü–ò–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['success']}")
    print(f"üöÄ –¢–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –±—ã: {results['would_send']}")
    print(f"üõë –¢–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏—Å—å –±—ã: {results['would_reject']}")
    print(f"üí• –û—à–∏–±–∫–∏: {results['errors']}")
    
    if results['errors'] == 0:
        print(f"\nüéâ –í–°–ï –£–ü–†–û–©–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"‚úÖ test_filter.py —Ç–µ–ø–µ—Ä—å –ü–û–õ–ù–ê–Ø –ö–û–ü–ò–Ø bundle_analyzer.py")
        print(f"üöÄ –í—Å–µ 17 —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:")
        print(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –∫–ª–∞—Å—Å TokenMetrics")
        print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ max_holders_pcnt")
        print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ time_ok")
        print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
        print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ can_notify")
        print(f"   ‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–± —É–ø—Ä–æ—â–µ–Ω–∏–∏")
        print(f"   ‚Ä¢ –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        print(f"   ‚Ä¢ –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ rapid_exit")
        print(f"   ‚Ä¢ TokenMetrics –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏")
    else:
        print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ test_filter.log")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
    return results['errors'] == 0

if __name__ == "__main__":
    success = asyncio.run(test_complete_copy_logic())
    exit(0 if success else 1)