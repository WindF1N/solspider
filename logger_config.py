import os
import logging
import logging.handlers
from datetime import datetime
import colorlog

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: {log_dir}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger = logging.getLogger()
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    root_logger.setLevel(logging.DEBUG)
    
    # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è –ª–æ–≥–æ–≤
    detailed_format = '[%(asctime)s] %(name)s.%(funcName)s:%(lineno)d %(levelname)s: %(message)s'
    simple_format = '%(asctime)s %(levelname)s: %(message)s'
    color_format = '%(log_color)s[%(asctime)s] %(levelname)s%(reset)s: %(message)s'
    
    # 1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = colorlog.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_formatter = colorlog.ColoredFormatter(
        color_format,
        datefmt='%H:%M:%S',
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red,bg_white',
        }
    )
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)
    
    # 2. –û–±—â–∏–π –ª–æ–≥ —Ñ–∞–π–ª (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è) - –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –•–†–ê–ù–ï–ù–ò–ï
    general_log_file = os.path.join(log_dir, 'solspider.log')
    general_handler = logging.handlers.RotatingFileHandler(
        general_log_file,
        maxBytes=50 * 1024 * 1024,  # 50 MB
        backupCount=50,  # –£–í–ï–õ–ò–ß–ï–ù–û: —Ö—Ä–∞–Ω–∏–º 50 —Ñ–∞–π–ª–æ–≤ = ~2.5GB –ª–æ–≥–æ–≤
        encoding='utf-8'
    )
    general_handler.setLevel(logging.DEBUG)
    general_formatter = logging.Formatter(detailed_format, datefmt='%Y-%m-%d %H:%M:%S')
    general_handler.setFormatter(general_formatter)
    root_logger.addHandler(general_handler)
    
    # 3. –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫ - –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –•–†–ê–ù–ï–ù–ò–ï
    error_log_file = os.path.join(log_dir, 'errors.log')
    error_handler = logging.handlers.RotatingFileHandler(
        error_log_file,
        maxBytes=20 * 1024 * 1024,  # 20 MB
        backupCount=20,  # –£–í–ï–õ–ò–ß–ï–ù–û: —Ö—Ä–∞–Ω–∏–º 20 —Ñ–∞–π–ª–æ–≤
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_formatter = logging.Formatter(detailed_format, datefmt='%Y-%m-%d %H:%M:%S')
    error_handler.setFormatter(error_formatter)
    root_logger.addHandler(error_handler)
    
    # 4. –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï
    tokens_log_file = os.path.join(log_dir, 'tokens.log')
    tokens_handler = logging.handlers.RotatingFileHandler(
        tokens_log_file,
        maxBytes=100 * 1024 * 1024,  # 100 MB
        backupCount=100,  # –£–í–ï–õ–ò–ß–ï–ù–û: —Ö—Ä–∞–Ω–∏–º 100 —Ñ–∞–π–ª–æ–≤ = ~10GB –ª–æ–≥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        encoding='utf-8'
    )
    tokens_handler.setLevel(logging.INFO)
    tokens_formatter = logging.Formatter(simple_format, datefmt='%Y-%m-%d %H:%M:%S')
    tokens_handler.setFormatter(tokens_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    tokens_logger = logging.getLogger('tokens')
    tokens_logger.addHandler(tokens_handler)
    tokens_logger.setLevel(logging.INFO)
    tokens_logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ª–æ–≥–≥–µ—Ä
    
    # 4.1. –ù–û–í–´–ô! –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Ä–µ—à–µ–Ω–∏–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º - –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
    token_decisions_log_file = os.path.join(log_dir, 'token_decisions.log')
    token_decisions_handler = logging.handlers.RotatingFileHandler(
        token_decisions_log_file,
        maxBytes=200 * 1024 * 1024,  # 200 MB
        backupCount=200,  # 200 —Ñ–∞–π–ª–æ–≤ = ~40GB –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        encoding='utf-8'
    )
    token_decisions_handler.setLevel(logging.DEBUG)
    token_decisions_formatter = logging.Formatter(
        '[%(asctime)s] DECISION: %(message)s', 
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    token_decisions_handler.setFormatter(token_decisions_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    token_decisions_logger = logging.getLogger('token_decisions')
    token_decisions_logger.addHandler(token_decisions_handler)
    token_decisions_logger.setLevel(logging.DEBUG)
    token_decisions_logger.propagate = False
    
    # 5. –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π - –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –•–†–ê–ù–ï–ù–ò–ï
    trades_log_file = os.path.join(log_dir, 'trades.log')
    trades_handler = logging.handlers.RotatingFileHandler(
        trades_log_file,
        maxBytes=50 * 1024 * 1024,  # 50 MB
        backupCount=30,  # –£–í–ï–õ–ò–ß–ï–ù–û: —Ö—Ä–∞–Ω–∏–º 30 —Ñ–∞–π–ª–æ–≤
        encoding='utf-8'
    )
    trades_handler.setLevel(logging.INFO)
    trades_formatter = logging.Formatter(simple_format, datefmt='%Y-%m-%d %H:%M:%S')
    trades_handler.setFormatter(trades_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    trades_logger = logging.getLogger('trades')
    trades_logger.addHandler(trades_handler)
    trades_logger.setLevel(logging.INFO)
    trades_logger.propagate = False
    
    # 6. –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –•–†–ê–ù–ï–ù–ò–ï
    database_log_file = os.path.join(log_dir, 'database.log')
    database_handler = logging.handlers.RotatingFileHandler(
        database_log_file,
        maxBytes=30 * 1024 * 1024,  # 30 MB
        backupCount=20,  # –£–í–ï–õ–ò–ß–ï–ù–û: —Ö—Ä–∞–Ω–∏–º 20 —Ñ–∞–π–ª–æ–≤
        encoding='utf-8'
    )
    database_handler.setLevel(logging.DEBUG)
    database_formatter = logging.Formatter(detailed_format, datefmt='%Y-%m-%d %H:%M:%S')
    database_handler.setFormatter(database_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –ë–î
    database_logger = logging.getLogger('database')
    database_logger.addHandler(database_handler)
    database_logger.setLevel(logging.DEBUG)
    database_logger.propagate = False
    
    # 7. –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π)
    today = datetime.now().strftime('%Y-%m-%d')
    stats_log_file = os.path.join(log_dir, f'stats_{today}.log')
    stats_handler = logging.FileHandler(stats_log_file, encoding='utf-8')
    stats_handler.setLevel(logging.INFO)
    stats_formatter = logging.Formatter(simple_format, datefmt='%Y-%m-%d %H:%M:%S')
    stats_handler.setFormatter(stats_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_logger = logging.getLogger('stats')
    stats_logger.addHandler(stats_handler)
    stats_logger.setLevel(logging.INFO)
    stats_logger.propagate = False
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    logging.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É: {os.path.abspath(log_dir)}")
    logging.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã:")
    logging.info(f"  ‚Ä¢ solspider.log - –æ–±—â–∏–π –ª–æ–≥ (50 —Ñ–∞–π–ª–æ–≤, ~2.5GB)")
    logging.info(f"  ‚Ä¢ errors.log - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ (20 —Ñ–∞–π–ª–æ–≤)")
    logging.info(f"  ‚Ä¢ tokens.log - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö (100 —Ñ–∞–π–ª–æ–≤, ~10GB)")
    logging.info(f"  ‚Ä¢ token_decisions.log - –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–®–ï–ù–ò–Ø –ø–æ —Ç–æ–∫–µ–Ω–∞–º (200 —Ñ–∞–π–ª–æ–≤, ~40GB)")
    logging.info(f"  ‚Ä¢ trades.log - —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (30 —Ñ–∞–π–ª–æ–≤)")
    logging.info(f"  ‚Ä¢ database.log - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î (20 —Ñ–∞–π–ª–æ–≤)")
    logging.info(f"  ‚Ä¢ stats_{today}.log - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")
    logging.info("üî• –õ–û–ì–ò –ù–ï –û–ß–ò–©–ê–Æ–¢–°–Ø! –í—Å–µ —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!")
    
    return {
        'tokens_logger': tokens_logger,
        'token_decisions_logger': token_decisions_logger,
        'trades_logger': trades_logger,
        'database_logger': database_logger,
        'stats_logger': stats_logger
    }

def get_token_logger():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤"""
    return logging.getLogger('tokens')

def get_token_decisions_logger():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º"""
    return logging.getLogger('token_decisions')

def get_trades_logger():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    return logging.getLogger('trades')

def get_database_logger():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return logging.getLogger('database')

def get_stats_logger():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return logging.getLogger('stats')

def log_token_decision(step, token_symbol, mint, details):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
    decisions_logger = get_token_decisions_logger()
    
    log_message = f"{step} | Token: {token_symbol} | Mint: {mint[:12]}... | {details}"
    decisions_logger.info(log_message)

def log_token_analysis(token_data, twitter_analysis, should_notify):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ —Å –î–ï–¢–ê–õ–¨–ù–´–ú–ò —Ä–µ—à–µ–Ω–∏—è–º–∏"""
    tokens_logger = get_token_logger()
    decisions_logger = get_token_decisions_logger()
    
    symbol = token_data.get('symbol', 'UNK')
    mint = token_data.get('mint', 'Unknown')
    score = twitter_analysis.get('score', 0)
    rating = twitter_analysis.get('rating', 'Unknown')
    contract_found = twitter_analysis.get('contract_found', False)
    contract_tweets = twitter_analysis.get('contract_tweets', 0)
    symbol_tweets = twitter_analysis.get('symbol_tweets', 0)
    total_tweets = twitter_analysis.get('total_tweets', 0)
    engagement = twitter_analysis.get('engagement', 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filter_reason = "PASSED"
    if not contract_found:
        filter_reason = "FILTERED_NO_CONTRACT"
    elif not should_notify:
        filter_reason = "FILTERED_LOW_ACTIVITY"
    
    # –ö–†–ê–¢–ö–ò–ô –ª–æ–≥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤
    log_message = (
        f"TOKEN_ANALYSIS | "
        f"Symbol: {symbol} | "
        f"Mint: {mint[:8]}... | "
        f"Twitter_Score: {score} | "
        f"Rating: {rating} | "
        f"Contract_Found: {'YES' if contract_found else 'NO'} | "
        f"Contract_Tweets: {contract_tweets} | "
        f"Result: {filter_reason} | "
        f"Notified: {'YES' if should_notify else 'NO'} | "
        f"Market_Cap: ${token_data.get('marketCap', 0):,.0f}"
    )
    tokens_logger.info(log_message)
    
    # –î–ï–¢–ê–õ–¨–ù–´–ô –ª–æ–≥ –≤ —Ñ–∞–π–ª —Ä–µ—à–µ–Ω–∏–π —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    decision_message = (
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê: {symbol} ({mint})\n"
        f"üìä Market Cap: ${token_data.get('marketCap', 0):,.2f}\n"
        f"üè∑Ô∏è Pool Type: {token_data.get('pool_type', 'Unknown')}\n"
        f"üìÖ Created: {token_data.get('created_timestamp', 'Unknown')}\n"
        f"üåê DEX: {token_data.get('dex', 'Unknown')}\n"
        f"üîó Twitter: {token_data.get('twitter', 'None')}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üê¶ TWITTER –ê–ù–ê–õ–ò–ó:\n"
        f"   ‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: {score} ({rating})\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_tweets}\n"
        f"   ‚Ä¢ –¢–≤–∏—Ç—ã —Å —Å–∏–º–≤–æ–ª–æ–º: {symbol_tweets}\n"
        f"   ‚Ä¢ –¢–≤–∏—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º: {contract_tweets}\n"
        f"   ‚Ä¢ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {engagement}\n"
        f"   ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Twitter: {'–î–ê' if contract_found else '–ù–ï–¢'}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚öñÔ∏è –†–ï–®–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê:\n"
        f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {filter_reason}\n"
        f"   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {'–î–ê' if should_notify else '–ù–ï–¢'}\n"
        f"   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: "
    )
    
    if filter_reason == "FILTERED_NO_CONTRACT":
        decision_message += "–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Twitter –ø–æ—Å—Ç–∞—Ö"
    elif filter_reason == "FILTERED_LOW_ACTIVITY":
        decision_message += f"–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (score: {score}, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ)"
    else:
        decision_message += "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        
    decision_message += f"\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    decisions_logger.info(decision_message)

def log_trade_activity(trade_data, notification_sent=False):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    trades_logger = get_trades_logger()
    
    action = "BUY" if trade_data.get('is_buy', True) else "SELL"
    sol_amount = trade_data.get('sol_amount', 0)
    mint = trade_data.get('mint', 'Unknown')
    trader = trade_data.get('traderPublicKey', 'Unknown')
    
    log_message = (
        f"TRADE_ACTIVITY | "
        f"Action: {action} | "
        f"Amount: {sol_amount:.4f} SOL | "
        f"Mint: {mint[:8]}... | "
        f"Trader: {trader[:8]}... | "
        f"Notified: {'YES' if notification_sent else 'NO'}"
    )
    
    trades_logger.info(log_message)

def log_database_operation(operation, table, result, details=""):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    database_logger = get_database_logger()
    
    log_message = f"DB_OPERATION | Operation: {operation} | Table: {table} | Result: {result}"
    if details:
        log_message += f" | Details: {details}"
    
    database_logger.info(log_message)

def log_daily_stats(stats):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_logger = get_stats_logger()
    
    stats_message = (
        f"DAILY_STATS | "
        f"Tokens: {stats.get('total_tokens', 0)} | "
        f"Trades: {stats.get('total_trades', 0)} | "
        f"Migrations: {stats.get('total_migrations', 0)} | "
        f"Big_Trades_24h: {stats.get('big_trades_24h', 0)}"
    )
    
    stats_logger.info(stats_message) 