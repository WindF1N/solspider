#!/usr/bin/env python3
"""
Bundle Analyzer Integration Module
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å pump_bot.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
"""

import asyncio
import json
import logging
import websockets
import ssl
from datetime import datetime
from typing import Dict, Optional, Any
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bundle_analyzer
from bundle_analyzer import MultiplePadreManager, TokenMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)



class JupiterTokenListener:
    """–°–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Jupiter WebSocket (–∫–∞–∫ –≤ pump_bot.py)"""
    
    def __init__(self, token_monitor: TokenMonitor):
        self.token_monitor = token_monitor
        self.websocket = None
        self.running = False
        self.token_gotten = False
        
    async def connect_to_jupiter(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jupiter WebSocket (–ª–æ–≥–∏–∫–∞ –∏–∑ pump_bot.py)"""
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL Jupiter WebSocket –∏–∑ pump_bot.py
            jupiter_ws_url = "wss://trench-stream.jup.ag/ws"
            
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Jupiter (–∫–∞–∫ –≤ pump_bot.py)
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Jupiter WebSocket —Å CloudFlare –∫—É–∫–∞–º–∏ (–∏–∑ pump_bot.py)
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
                "Origin": "https://jup.ag",
                "Cookie": "cf_clearance=m5O0sYyORJM.bb3A3eQGse7P6aa2c9BLgMOt6tm8Mu8-1750902546-1.2.1.1-eRyDtqC_4lkjfCnREIIEQ2LwdV3qMnJqeI4wGFZQpuYfpbLyKuz44QurDH1nnhmPo8.KF9u1vlQRddXKKWdQu7RfJR17j1kgpQeNYY.jUsbLeIYkwgDGlTRWwMeYD0FVitXxJkK6sMtKIXMVdfsdL.M.shrsRtlhuLmZCfVWjhZ89pZrBn5TpZjB98akJAOSGRl3qnsP352Q77oTOsMdnggp5fjO2wlfXqHY.TAjkHKJ0Frk.EtzUKw1sESan_pPne_jbfJRu4CVKkTi52mko5DFlrC5QuAiCntW0a11t2LSqLLkxcXM6jxDKV5IhHpPq79qXtne2PmwiweC_QucapNUyyA_0bFh33Lx4ahcYRc"
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ websockets
            import websockets
            websockets_version = websockets.__version__
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            connect_params = {
                "ssl": ssl_context,
                "close_timeout": 15,
                "max_size": 10**7,
                "max_queue": 32,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏
            if int(websockets_version.split('.')[0]) >= 12:
                # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (12.x+) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç additional_headers
                connect_params["additional_headers"] = headers
            else:
                # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è (11.x –∏ –Ω–∏–∂–µ) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç extra_headers
                connect_params["extra_headers"] = headers
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Jupiter
            self.websocket = await websockets.connect(jupiter_ws_url, **connect_params)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ recent –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ pump_bot.py)
            recent_msg = {"type": "subscribe:recent"}
            await self.websocket.send(json.dumps(recent_msg))
            logger.debug("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ recent –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            await asyncio.sleep(1)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø—É–ª—ã (–ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞) - –∏–∑ pump_bot.py
            pools_msg_1 = {
                "type": "subscribe:pool",
                "pools": [
                    "7ydCvqmPj42msz3mm2W28a4hXKaukF7XNpRjNXNhbonk",
                    "29F4jaxGYGCP9oqJxWn7BRrXDCXMQYFEirSHQjhhpump"
                ]
            }
            await self.websocket.send(json.dumps(pools_msg_1))
            logger.debug("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –ø—É–ª–æ–≤")
            
            return True
            
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jupiter: {e}")
            if hasattr(self, 'websocket') and self.websocket:
                try:
                    await self.websocket.close()
                except:
                    pass
                self.websocket = None
            return False
    
    async def listen_for_new_tokens(self):
        """–°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ Jupiter"""
        try:
            while self.running and self.websocket:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Jupiter WebSocket
                    message = await asyncio.wait_for(self.websocket.recv(), timeout=30)
                    
                    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    token_data = await self.parse_jupiter_message(message)
                    
                    if token_data:
                        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                        await self.token_monitor.add_token_for_analysis(token_data)
                        
                except asyncio.TimeoutError:
                    logger.debug("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Jupiter")
                    continue
                except websockets.exceptions.ConnectionClosed:
                    logger.warning("üîå Jupiter WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                except websockets.exceptions.InvalidURI:
                    logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URI Jupiter WebSocket")
                    break
                except websockets.exceptions.InvalidHandshake:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ handshake —Å Jupiter WebSocket")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Jupiter: {e}")
                    # –ü—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ Jupiter: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ü–∏–∫–ª–∞
            if hasattr(self, 'websocket') and self.websocket:
                try:
                    await self.websocket.close()
                except:
                    pass
                self.websocket = None
    
    async def parse_jupiter_message(self, message: str) -> Optional[dict]:
        """–ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Jupiter (–ª–æ–≥–∏–∫–∞ –∏–∑ pump_bot.py)"""
        try:
            data = json.loads(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ
            # –õ–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å handle_new_jupiter_token –∏–∑ pump_bot.py
            if data.get('type') == 'updates' and 'data' in data:
                updates = data['data']
                
                for update in updates:
                    update_type = update.get('type')
                    pool_data = update.get('pool', {})

                    if pool_data.get('dex') not in ['pump.fun', 'letsbonk.fun']:
                        continue

                    if update_type == 'new' and pool_data:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ
                        base_asset = pool_data.get('baseAsset', {})
                        
                        token_data = {
                            'mint': base_asset.get('id', pool_data.get('id')),
                            'symbol': base_asset.get('symbol', 'Unknown'),
                            'name': base_asset.get('name', base_asset.get('symbol', 'Unknown')),
                            'dex_source': pool_data.get('dex', 'Jupiter'),
                            'pool_type': pool_data.get('type', 'Unknown'),
                            'market_cap': base_asset.get('marketCap', 0),
                            'created_timestamp': pool_data.get('createdAt'),
                            'address': base_asset.get('id')  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        }

                        logger.info(f"–î–∞—Ç–∞ —Å–µ—Ç —Ç–æ–∫–µ–Ω–∞ Jupiter: {update}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç–æ–∫–µ–Ω–∞ –µ—Å—Ç—å –∞–¥—Ä–µ—Å
                        if token_data.get('mint') and len(token_data['mint']) > 30:
                            logger.info(f"üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter: {token_data['symbol']} ({token_data['mint'][:8]}...)")
                            return token_data
            
            return None
            
        except json.JSONDecodeError:
            logger.debug("üîç –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Jupiter –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
            return None
        except Exception as e:
            logger.debug(f"üîç –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Jupiter: {e}")
            return None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å Jupiter —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        self.running = True
        
        retry_count = 0
        max_retries = float('inf')  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        while self.running:
            try:
                retry_count += 1
                logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Jupiter WebSocket (–ø–æ–ø—ã—Ç–∫–∞ {retry_count})...")
                
                if await self.connect_to_jupiter():
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Jupiter")
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    
                    await self.listen_for_new_tokens()
                    
                    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ
                    logger.warning("üîå Jupiter WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Jupiter")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jupiter: {e}")
            
            if self.running:
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                wait_time = 5  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                logger.info(f"‚è±Ô∏è –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
                await asyncio.sleep(wait_time)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å Jupiter"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Jupiter WebSocket —Å–ª—É—à–∞—Ç–µ–ª—å...")
        self.running = False
        
        if hasattr(self, 'websocket') and self.websocket:
            try:
                await self.websocket.close()
                logger.info("‚úÖ Jupiter WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")
            finally:
                self.websocket = None

class PumpFunTokenListener:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è pump.fun (–µ—Å–ª–∏ Jupiter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
    
    def __init__(self, token_monitor: TokenMonitor):
        self.token_monitor = token_monitor
        self.running = False
        
    async def simulate_new_tokens(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            test_tokens = [
                {
                    'mint': '26KHEk6Y1F3tY2Lum4fCiTiHC1AtQ6Cneg5yP4TLbonk',
                    'symbol': 'TEST1',
                    'name': 'Test Token 1',
                    'dex_source': 'pump.fun',
                    'market_cap': 50000,
                    'address': '26KHEk6Y1F3tY2Lum4fCiTiHC1AtQ6Cneg5yP4TLbonk'
                },
                {
                    'mint': '7GuYTEVSsqnRMzsRy2u2Zj9HjduEJRj2mWSBN4D9T3ZA', 
                    'symbol': 'TEST2',
                    'name': 'Test Token 2',
                    'dex_source': 'pump.fun',
                    'market_cap': 75000,
                    'address': '7GuYTEVSsqnRMzsRy2u2Zj9HjduEJRj2mWSBN4D9T3ZA'
                }
            ]
            
            while self.running:
                for token in test_tokens:
                    if not self.running:
                        break
                        
                    logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {token['symbol']}")
                    await self.token_monitor.add_token_for_analysis(token)
                    
                    # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
                    await asyncio.sleep(60)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é"""
        self.running = True
        await self.simulate_new_tokens()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é"""
        self.running = False

async def main_integration():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Bundle Analyzer —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
    padre_client = MultiplePadreManager()
    token_monitor = TokenMonitor(padre_client)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
    use_jupiter = os.getenv("USE_JUPITER", "true").lower() == "true"
    use_padre = os.getenv("USE_PADRE", "true").lower() == "true"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω
    
    if use_jupiter:
        token_listener = JupiterTokenListener(token_monitor)
        logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º Jupiter –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤")
    else:
        token_listener = PumpFunTokenListener(token_monitor)
        logger.info("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤")
    
    try:
        if use_padre:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                padre_client.start(),  # –°–ª—É—à–∞–µ–º trade.padre.gg –¥–ª—è –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                token_listener.start()  # –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            )
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Jupiter –±–µ–∑ padre.gg
            logger.info("‚ö†Ô∏è Trade.padre.gg –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            await token_listener.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        if use_padre:
            await padre_client.stop()
        await token_listener.stop()
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Bundle Analyzer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    if not telegram_token or telegram_token == "YOUR_TELEGRAM_BOT_TOKEN":
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_TOKEN!")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    asyncio.run(main_integration()) 