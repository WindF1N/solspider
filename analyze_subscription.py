#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ fast-stats
"""

import base64
import msgpack

def analyze_original_message():
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ base64 —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
    original_b64 = "kwQB2gI1L2Zhc3Qtc3RhdHMvZW5jb2RlZC10b2tlbnMvc29sYW5hLTI2S0hFazZZMUYzdFkyTHVtNGZDaVRpSEMxQXRRNkNuZWc1eVA0VExib25rX3NvbGFuYS0zTGk4YUFnRGJhRjJpV2FGdGViR3FLQU03dEdzaDl4WTZ2bWhLdlNrcHVtcF9zb2xhbmEtM3hMdXVHaEY4OFlvUjcxNEZvZkU1TmFBYllxYlZHdEJENWQ1dDZteXB1bXBfc29sYW5hLTdGZG9UZWNBWncyc0NaQ0xwNmdrWTM0WG5LeE4yNlZCaU5qWkVjN3BwdW1wX3NvbGFuYS03U0ZtZThoZ1R4VGl4R0w4WWRNem5ua0FqUzJOS1BLVHltNEdyOEc1cHVtcF9zb2xhbmEtQWlyd1F1QW53V0JLbzRuNWJLaFkxM04zY1ZvMXRCVVF6QjRyYjJ4UnB1bXBfc29sYW5hLUVoTGJ3bmpnM2dFeWs4d01XQjZCWGd2cVVwc1hOVWdUcDRucUQ2S3pib25rX3NvbGFuYS1IYUx5WFZqUlFmWjMyWktudDk4S3FjMTNFS0tvM2lyWkYxeUd0VlRnQkFHU19zb2xhbmEtWDY5R0tCMmZMTjh0U1V4TlRNbmVHQVF3NzlxRHc5S2NQUXAzUm9BazljZl9zb2xhbmEtcXFndjFpUDk0U1NHZlN6bTFwQWJFYVZGSDVBQm9WTXRaS1FYclBocnU4QS9vbi1mYXN0LXN0YXRzLXVwZGF0ZQ=="
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    print("="*60)
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
    decoded_bytes = base64.b64decode(original_b64)
    print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(decoded_bytes)} –±–∞–π—Ç")
    print(f"üî§ –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç –≤ hex: {decoded_bytes[:20].hex()}")
    print(f"üî§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç –≤ hex: {decoded_bytes[-20:].hex()}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    try:
        # MessagePack –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ
        for i in range(0, min(10, len(decoded_bytes))):
            try:
                header = decoded_bytes[:i]
                payload = decoded_bytes[i:]
                text_payload = payload.decode('utf-8', errors='ignore')
                
                if '/fast-stats' in text_payload:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª–∏–Ω–æ–π {i} –±–∞–π—Ç: {header.hex()}")
                    print(f"üìù Payload: {text_payload[:100]}...")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ MessagePack
                    try:
                        if len(header) > 0:
                            mp_data = msgpack.unpackb(header, raw=False)
                            print(f"üéØ MessagePack –∑–∞–≥–æ–ª–æ–≤–æ–∫: {mp_data}")
                    except:
                        pass
                    
                    break
            except:
                continue
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
    print(f"\nüî¨ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –í–µ—Å—å –º–∞—Å—Å–∏–≤ –∫–∞–∫ MessagePack
    try:
        mp_full = msgpack.unpackb(decoded_bytes, raw=False)
        print(f"üéØ –ü–æ–ª–Ω—ã–π MessagePack: {mp_full}")
    except Exception as e:
        print(f"‚ùå –ù–µ –ø–æ–ª–Ω—ã–π MessagePack: {e}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏
    try:
        text_part = decoded_bytes.decode('utf-8', errors='ignore')
        fast_stats_pos = text_part.find('/fast-stats')
        if fast_stats_pos > 0:
            binary_prefix = decoded_bytes[:fast_stats_pos]
            print(f"üîß –ë–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {binary_prefix.hex()}")
            print(f"üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å: {text_part[fast_stats_pos:fast_stats_pos+50]}...")
    except:
        pass

def create_correct_subscription(tokens):
    """–°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
    print("="*60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    tokens_part = "_".join([f"solana-{token}" for token in tokens])
    path = f"/fast-stats/encoded-tokens/{tokens_part}/on-fast-stats-update"
    
    print(f"üì° –ü—É—Ç—å: {path[:100]}...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    prefixes_to_try = [
        b'\x93\x04\x01\xda\x02\x35',  # –ù–∞—à–∞ —Ç–µ–∫—É—â–∞—è –¥–æ–≥–∞–¥–∫–∞
        b'\x93\x04\x01',             # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        b'\x93\x04',                 # –ï—â—ë –ø—Ä–æ—â–µ
        b'\x94\x04\x01\xda\x02\x35', # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        b'',                         # –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    ]
    
    for i, prefix in enumerate(prefixes_to_try, 1):
        try:
            message_bytes = prefix + path.encode('utf-8')
            message_b64 = base64.b64encode(message_bytes).decode('utf-8')
            
            print(f"\nüß™ –í–∞—Ä–∏–∞–Ω—Ç {i}:")
            print(f"   Prefix: {prefix.hex() if prefix else 'None'}")
            print(f"   Size: {len(message_bytes)} bytes")
            print(f"   Base64: {message_b64[:50]}...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i}: {e}")

if __name__ == "__main__":
    analyze_original_message()
    
    # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    test_tokens = [
        "6C2dwLGLf9yHdSiiaie9PsHsF23WJx3pSinEPLybonk",
        "4bGgiWAaThSceVAbFc5JTrLv7yVYcWvtwBm2C527pump"
    ]
    create_correct_subscription(test_tokens) 