#!/usr/bin/env python3
"""
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pump_bot import analyze_token_sentiment

def test_realistic_filter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
    test_cases = [
        {
            "name": "–¢–µ—Å—Ç 1: –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å (–Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏—Å—å)",
            "mint": "aBc123XyZ999NotRealAddress000111222333444",
            "symbol": "NEWTEST"
        },
        {
            "name": "–¢–µ—Å—Ç 2: –°–ª—É—á–∞–π–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏—Å—å)",  
            "mint": "9999888777666555444333222111000TestAddr",
            "symbol": "RANDOM"
        },
        {
            "name": "–¢–µ—Å—Ç 3: –û—á–µ–Ω—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å (–Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏—Å—å)",
            "mint": "zZzNewTokenAddressNotInTwitterYet12345678",
            "symbol": "FRESH"
        }
    ]
    
    results_summary = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"{'='*60}")
        print(f"üìä {test_case['name']}")
        print(f"üè∑Ô∏è –°–∏–º–≤–æ–ª: {test_case['symbol']}")
        print(f"üìç Mint: {test_case['mint']}")
        print("-" * 60)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            result = analyze_token_sentiment(test_case['mint'], test_case['symbol'])
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤: {result['tweets']}")
            print(f"  ‚Ä¢ –¢–≤–∏—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É: {result['symbol_tweets']}")
            print(f"  ‚Ä¢ –¢–≤–∏—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {result['contract_tweets']}")
            print(f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {result['engagement']}")
            print(f"  ‚Ä¢ –°–∫–æ—Ä: {result['score']}")
            print(f"  ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {result['rating']}")
            print(f"  ‚Ä¢ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {'‚úÖ –î–ê' if result['contract_found'] else '‚ùå –ù–ï–¢'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
            would_notify_old = (
                result['score'] >= 5 or
                result['tweets'] >= 3 or
                '–≤—ã—Å–æ–∫–∏–π' in result['rating'].lower() or
                '—Å—Ä–µ–¥–Ω–∏–π' in result['rating'].lower()
            )
            
            would_notify_new = (
                result['contract_found'] and (
                    result['score'] >= 5 or
                    result['tweets'] >= 3 or
                    '–≤—ã—Å–æ–∫–∏–π' in result['rating'].lower() or
                    '—Å—Ä–µ–¥–Ω–∏–π' in result['rating'].lower()
                )
            )
            
            print(f"\nüéØ –†–µ—à–µ–Ω–∏–µ –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:")
            print(f"  ‚Ä¢ –°—Ç–∞—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä: {'‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨' if would_notify_old else '‚ùå –ù–ï –û–¢–ü–†–ê–í–õ–Ø–¢–¨'}")
            print(f"  ‚Ä¢ –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: {'‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨' if would_notify_new else '‚ùå –ù–ï –û–¢–ü–†–ê–í–õ–Ø–¢–¨'}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if would_notify_old != would_notify_new:
                print(f"  üö® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª' if not would_notify_new else '—Ä–∞–∑—Ä–µ—à–∏–ª'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
                if not result['contract_found']:
                    print(f"  üìù –ü—Ä–∏—á–∏–Ω–∞: –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ Twitter")
                    print(f"  üéØ –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –º—ã —Ö–æ—Ç–µ–ª–∏ - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")
            else:
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –æ–±–æ–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–≤–æ–¥–∫–∏
            results_summary.append({
                'symbol': test_case['symbol'],
                'contract_found': result['contract_found'],
                'old_notify': would_notify_old,
                'new_notify': would_notify_new,
                'filtered': would_notify_old and not would_notify_new
            })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            results_summary.append({
                'symbol': test_case['symbol'],
                'error': str(e)
            })
        
        print(f"\n")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"{'='*60}")
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 60)
    
    total_tested = len([r for r in results_summary if 'error' not in r])
    filtered_count = len([r for r in results_summary if r.get('filtered', False)])
    no_contract_count = len([r for r in results_summary if not r.get('contract_found', True)])
    
    for result in results_summary:
        if 'error' not in result:
            status = "üö´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù" if result['filtered'] else "‚úÖ –ü–†–û–®–ï–õ"
            contract_status = "‚ùå –ù–ï –ù–ê–ô–î–ï–ù" if not result['contract_found'] else "‚úÖ –ù–ê–ô–î–ï–ù"
            print(f"  {result['symbol']:8} | –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_status:12} | {status}")
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_tested}")
    print(f"  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {no_contract_count}")
    print(f"  ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º: {filtered_count}")
    print(f"  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞: {(filtered_count/total_tested*100) if total_tested > 0 else 0:.1f}%")
    
    print(f"\n‚úÖ –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    print("üéØ –¢–æ–∫–µ–Ω—ã –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–π–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")

if __name__ == "__main__":
    test_realistic_filter() 