#!/usr/bin/env python3
"""
–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è Nitter
"""

import pymysql
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

load_dotenv()

def calculate_nitter_requirements():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ Nitter –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    
    try:
        connection = pymysql.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            user=os.getenv('DB_USER', 'root'),
            password=os.getenv('DB_PASSWORD', ''),
            database=os.getenv('DB_NAME', 'solspider'),
            charset='utf8mb4'
        )
        
        cursor = connection.cursor()
        
        print("üîç –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò SolSpider...")
        print("=" * 50)
        
        # –¢–æ–∫–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute("SELECT COUNT(*) FROM tokens WHERE created_at >= NOW() - INTERVAL 24 HOUR")
        tokens_24h = cursor.fetchone()[0]
        
        # –¢–æ–∫–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        cursor.execute("SELECT COUNT(*) FROM tokens WHERE created_at >= NOW() - INTERVAL 1 HOUR")
        tokens_1h = cursor.fetchone()[0]
        
        # –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cursor.execute("""
            SELECT HOUR(created_at) as hour, COUNT(*) as count 
            FROM tokens 
            WHERE created_at >= NOW() - INTERVAL 7 DAY 
            GROUP BY DATE(created_at), HOUR(created_at) 
            ORDER BY count DESC 
            LIMIT 1
        """)
        peak_result = cursor.fetchone()
        peak_tokens_per_hour = peak_result[1] if peak_result else 0
        
        # –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
        cursor.execute("""
            SELECT AVG(hourly_count) as avg_per_hour FROM (
                SELECT COUNT(*) as hourly_count 
                FROM tokens 
                WHERE created_at >= NOW() - INTERVAL 7 DAY 
                GROUP BY DATE(created_at), HOUR(created_at)
            ) as hourly_stats
        """)
        avg_result = cursor.fetchone()
        avg_tokens_per_hour = int(avg_result[0]) if avg_result and avg_result[0] else 0
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê–ì–†–£–ó–ö–ò:")
        print(f"‚Ä¢ –¢–æ–∫–µ–Ω—ã –∑–∞ 24—á: {tokens_24h:,}")
        print(f"‚Ä¢ –¢–æ–∫–µ–Ω—ã –∑–∞ 1—á: {tokens_1h:,}")
        print(f"‚Ä¢ –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {peak_tokens_per_hour:,} —Ç–æ–∫–µ–Ω–æ–≤/—á–∞—Å")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg_tokens_per_hour:,} —Ç–æ–∫–µ–Ω–æ–≤/—á–∞—Å")
        print()
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        peak_per_second = peak_tokens_per_hour / 3600
        avg_per_second = avg_tokens_per_hour / 3600
        
        print(f"‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"‚Ä¢ –ü–∏–∫–æ–≤–∞—è: {peak_per_second:.2f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {avg_per_second:.2f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
        print()
        
        # Twitter API –ª–∏–º–∏—Ç—ã
        print(f"üö´ –õ–ò–ú–ò–¢–´ TWITTER API:")
        print(f"‚Ä¢ –ü–æ–∏—Å–∫: 300 –∑–∞–ø—Ä–æ—Å–æ–≤ / 15 –º–∏–Ω = 20 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω = 0.33 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫")
        print(f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏: 900 –∑–∞–ø—Ä–æ—Å–æ–≤ / 15 –º–∏–Ω = 60 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω = 1 –∑–∞–ø—Ä–æ—Å/—Å–µ–∫")
        print(f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: ~75 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç")
        print()
        
        # –†–∞—Å—á–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
        # –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω = 2 –ø–æ–∏—Å–∫–∞ (—Å –∞–¥—Ä–µ—Å–æ–º –∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
        searches_per_second_peak = peak_per_second * 2
        searches_per_second_avg = avg_per_second * 2
        
        # Twitter –ª–∏–º–∏—Ç: 300 –ø–æ–∏—Å–∫–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç = 0.33 –ø–æ–∏—Å–∫–∞/—Å–µ–∫ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        twitter_search_limit_per_second = 300 / (15 * 60)  # 0.33
        
        accounts_needed_peak = int(searches_per_second_peak / twitter_search_limit_per_second) + 1
        accounts_needed_avg = int(searches_per_second_avg / twitter_search_limit_per_second) + 1
        
        print(f"üéØ –†–ê–°–ß–ï–¢ –ê–ö–ö–ê–£–ù–¢–û–í –î–õ–Ø –ü–û–ò–°–ö–ê:")
        print(f"‚Ä¢ –ü–æ–∏—Å–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—É (–ø–∏–∫): {searches_per_second_peak:.2f}")
        print(f"‚Ä¢ –ü–æ–∏—Å–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—É (—Å—Ä–µ–¥–Ω): {searches_per_second_avg:.2f}")
        print(f"‚Ä¢ –õ–∏–º–∏—Ç Twitter: {twitter_search_limit_per_second:.2f} –ø–æ–∏—Å–∫–æ–≤/—Å–µ–∫/–∞–∫–∫–∞—É–Ω—Ç")
        print(f"‚Ä¢ –ù—É–∂–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–∏–∫): {accounts_needed_peak}")
        print(f"‚Ä¢ –ù—É–∂–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å—Ä–µ–¥–Ω): {accounts_needed_avg}")
        print()
        
        # Background Monitor - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        cursor.execute("SELECT COUNT(*) FROM tokens WHERE created_at >= NOW() - INTERVAL 1 HOUR")
        tokens_to_monitor = cursor.fetchone()[0]
        
        # Background Monitor –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        monitor_frequency = 5  # —Å–µ–∫—É–Ω–¥
        tokens_per_check = tokens_to_monitor
        
        # –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ = 1 –ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        monitor_searches_per_second = tokens_per_check / monitor_frequency
        accounts_needed_monitor = int(monitor_searches_per_second / twitter_search_limit_per_second) + 1
        
        print(f"üîÑ BACKGROUND MONITOR:")
        print(f"‚Ä¢ –¢–æ–∫–µ–Ω—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ: {tokens_to_monitor:,}")
        print(f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ {monitor_frequency} —Å–µ–∫")
        print(f"‚Ä¢ –ü–æ–∏—Å–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—É: {monitor_searches_per_second:.2f}")
        print(f"‚Ä¢ –ù—É–∂–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_needed_monitor}")
        print()
        
        # –û–±—â–∏–π —Ä–∞—Å—á–µ—Ç
        total_accounts_peak = max(accounts_needed_peak, accounts_needed_monitor)
        total_accounts_avg = max(accounts_needed_avg, accounts_needed_monitor)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å 50% –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        safety_margin = 1.5
        recommended_accounts = int(total_accounts_peak * safety_margin)
        
        print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–∏–∫–∞: {total_accounts_peak} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print(f"‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ: {total_accounts_avg} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print(f"‚Ä¢ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: {recommended_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å –∑–∞–ø–∞—Å–æ–º 50%)")
        print()
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏
        print(f"üí∞ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò:")
        print(f"‚Ä¢ {recommended_accounts} –ø—Ä–æ–∫—Å–∏ x $3/–º–µ—Å—è—Ü = ${recommended_accounts * 3}/–º–µ—Å—è—Ü")
        print(f"‚Ä¢ {recommended_accounts} Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ)")
        print()
        
        # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        max_performance = recommended_accounts * twitter_search_limit_per_second
        print(f"üöÄ –û–ñ–ò–î–ê–ï–ú–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∏—Å–∫–æ–≤: {max_performance:.1f}/—Å–µ–∫ = {max_performance * 60:.0f}/–º–∏–Ω")
        print(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {max_performance/2:.1f}/—Å–µ–∫ = {max_performance * 30:.0f}/–º–∏–Ω")
        print(f"‚Ä¢ –£–°–ö–û–†–ï–ù–ò–ï –≤ {max_performance/peak_per_second:.0f}x —Ä–∞–∑!")
        
        connection.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    calculate_nitter_requirements() 