import asyncio
import time
import logging
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Optional

logger = logging.getLogger(__name__)

@dataclass
class ConnectionStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    connected_at: datetime
    total_messages: int = 0
    last_message_at: Optional[datetime] = None
    disconnections: int = 0
    reconnections: int = 0
    
    def update_message_received(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.total_messages += 1
        self.last_message_at = datetime.now()
    
    def get_uptime(self) -> timedelta:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return datetime.now() - self.connected_at
    
    def get_messages_per_minute(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É"""
        uptime_minutes = self.get_uptime().total_seconds() / 60
        if uptime_minutes > 0:
            return self.total_messages / uptime_minutes
        return 0.0

class ConnectionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    
    def __init__(self):
        self.stats = None
        self.connection_quality = "unknown"
        self.quality_history = []
        
    def connection_established(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.stats = ConnectionStats(connected_at=datetime.now())
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
    
    def connection_lost(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.stats:
            self.stats.disconnections += 1
            uptime = self.stats.get_uptime()
            logger.info(f"üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –ø–æ—Å–ª–µ {uptime}")
    
    def message_received(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.stats:
            self.stats.update_message_received()
    

    
    def assess_connection_quality(self) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.stats:
            return "unknown"
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.stats.last_message_at:
            time_since_message = (datetime.now() - self.stats.last_message_at).total_seconds()
            if time_since_message > 300:  # 5 –º–∏–Ω—É—Ç
                issues.append("no_messages")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π
        msg_per_min = self.stats.get_messages_per_minute()
        if msg_per_min < 0.1:  # –ú–µ–Ω—å—à–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 10 –º–∏–Ω—É—Ç
            issues.append("low_activity")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if len(issues) == 0:
            quality = "excellent"
        elif len(issues) <= 1:
            quality = "good"
        elif len(issues) <= 2:
            quality = "fair"
        else:
            quality = "poor"
        
        self.connection_quality = quality
        self.quality_history.append({
            'time': datetime.now(),
            'quality': quality,
            'issues': issues.copy()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.quality_history) > 100:
            self.quality_history = self.quality_history[-50:]
        
        return quality
    
    def get_stats_summary(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.stats:
            return {"status": "disconnected"}
        
        uptime = self.stats.get_uptime()
        quality = self.assess_connection_quality()
        
        return {
            "status": "connected",
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": str(uptime).split('.')[0],  # –ë–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
            "total_messages": self.stats.total_messages,
            "messages_per_minute": round(self.stats.get_messages_per_minute(), 2),
            "disconnections": self.stats.disconnections,
            "connection_quality": quality,
            "last_message_ago": (
                (datetime.now() - self.stats.last_message_at).total_seconds()
                if self.stats.last_message_at else None
            )
        }
    
    def format_stats_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        stats = self.get_stats_summary()
        
        if stats["status"] == "disconnected":
            return "‚ùå <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>"
        
        quality_emoji = {
            "excellent": "üü¢",
            "good": "üü°", 
            "fair": "üü†",
            "poor": "üî¥"
        }
        
        emoji = quality_emoji.get(stats["connection_quality"], "‚ö™")
        
        message = (
            f"{emoji} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\n"
            f"‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {stats['uptime_formatted']}\n"
            f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {stats['total_messages']:,}\n"
            f"üìä <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {stats['messages_per_minute']} —Å–æ–æ–±—â/–º–∏–Ω\n"
            f"üîÑ <b>–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:</b> {stats['disconnections']}\n"
            f"üéØ <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {stats['connection_quality']}"
        )
        
        if stats["last_message_ago"]:
            message += f"\nüì• <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {stats['last_message_ago']:.0f}—Å –Ω–∞–∑–∞–¥"
        
        return message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
connection_monitor = ConnectionMonitor() 