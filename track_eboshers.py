#!/usr/bin/env python3
"""
Track Eboshers - WebSocket client for monitoring eboshers activity
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ–±–æ—à–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ padre.gg

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª eboshers_v5.txt —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –µ–±–æ—à–µ—Ä–æ–≤
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python track_eboshers.py
3. –°–∫—Ä–∏–ø—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ Padre WebSocket –∏ –Ω–∞—á–Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–π–¥—ã –µ–±–æ—à–µ—Ä–æ–≤

–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Padre WebSocket
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å JWT —Ç–æ–∫–µ–Ω–æ–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏
- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ tracked-trades/wallet-groups
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è)
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º —Ç–æ–∫–µ–Ω–æ–≤
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫–æ–ø–ª–µ–Ω–∏–π –µ–±–æ—à–µ—Ä–æ–≤
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º (4+ –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞ —á–∞—Å)

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
- –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü—Ä–∏ –≤–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫–æ–ø–ª–µ–Ω–∏–π –ø–æ –æ–±—ä–µ–º—É ‚â• $2000 –ò –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ—à–µ–ª—å–∫–æ–≤ ‚â• 4
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ 1 —á–∞—Å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–±—ä–µ–º–∞
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º

–ö–û–ú–ê–ù–î–´:
- Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
"""

import asyncio
import websockets
import json
import base64
import struct
import os
import sys
import logging
import subprocess
import aiohttp
import msgpack
from datetime import datetime
from typing import Dict, List, Optional, Any, Set
import requests
from urllib.parse import quote
import re
import ssl
import time
import traceback
from dotenv import load_dotenv
import numpy as np
from scipy.stats import linregress
import uuid
import random
import threading

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ "–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —Ä–∞–≥–∏"
GENIUS_RUG_BLACKLIST = set()

# –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
EBOSHERS_LOGS_DIR = "eboshers_logs"

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
OLD_METRICS_LOG_FILE = "eboshers_old_metrics_find.log"
BLACKLIST_FILE = "genius_rug_blacklist.txt"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
SENT_TOKENS_FILE = "sent_tokens.json"
MAX_SENT_TOKENS = 300

def j8(e=None, t=None, n=None):
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π randomUUID –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã t –∏ e
    if hasattr(uuid, 'uuid4') and t is None and (e is None or e == {}):
        return str(uuid.uuid4())

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 16 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç (–∞–Ω–∞–ª–æ–≥ O8())
    if e is None:
        e = {}

    if 'random' in e:
        r = e['random']
    elif 'rng' in e:
        r = e['rng']()
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 16 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç (0-255)
        r = [random.randint(0, 255) for _ in range(16)]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    r[6] = (15 & r[6]) | 64  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é 4
    r[8] = (63 & r[8]) | 128 # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç 10 (RFC 4122)

    if t is not None:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±—É—Ñ–µ—Ä t - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–π—Ç—ã
        n = n or 0
        for i in range(16):
            t[n + i] = r[i]
        return t

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É UUID
    def format_bytes(bytes_arr, offset=0):
        hex_chars = "0123456789abcdef"
        result = []

        for i in range(16):
            if i in [4, 6, 8, 10]:
                result.append('-')
            byte_val = bytes_arr[offset + i]
            result.append(hex_chars[byte_val >> 4])
            result.append(hex_chars[byte_val & 0x0F])

        return ''.join(result)

    return format_bytes(r)

def load_blacklist():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    global GENIUS_RUG_BLACKLIST
    try:
        if os.path.exists(BLACKLIST_FILE):
            with open(BLACKLIST_FILE, 'r') as f:
                GENIUS_RUG_BLACKLIST = set(line.strip() for line in f if line.strip())
            print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(GENIUS_RUG_BLACKLIST)} —Ç–æ–∫–µ–Ω–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

def save_blacklist():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(BLACKLIST_FILE, 'w') as f:
            for token in sorted(GENIUS_RUG_BLACKLIST):
                f.write(f"{token}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

def load_sent_tokens():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global sent_tokens
    try:
        if os.path.exists(SENT_TOKENS_FILE):
            with open(SENT_TOKENS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_SENT_TOKENS —Ç–æ–∫–µ–Ω–æ–≤ (FIFO)
                tokens_list = data.get('tokens', [])
                if len(tokens_list) > MAX_SENT_TOKENS:
                    tokens_list = tokens_list[-MAX_SENT_TOKENS:]
                sent_tokens = set(tokens_list)
            print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(sent_tokens)}")
        else:
            print("üìù –§–∞–π–ª —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            sent_tokens = set()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        sent_tokens = set()

def save_sent_tokens():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    global sent_tokens
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
        tokens_list = list(sent_tokens)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ MAX_SENT_TOKENS (FIFO)
        if len(tokens_list) > MAX_SENT_TOKENS:
            tokens_list = tokens_list[-MAX_SENT_TOKENS:]

        data = {
            'tokens': tokens_list,
            'last_updated': datetime.now().isoformat(),
            'max_tokens': MAX_SENT_TOKENS
        }

        with open(SENT_TOKENS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens_list)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")

def add_sent_token(token_address: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö"""
    global sent_tokens
    if token_address and token_address not in sent_tokens:
        sent_tokens.add(token_address)
        save_sent_tokens()

def is_token_sent(token_address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"""
    return token_address in sent_tokens

# –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_blacklist()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_sent_tokens()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('track_eboshers.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–æ–ø–ª–µ–Ω–∏–π –µ–±–æ—à–µ—Ä–æ–≤
ebosher_clusters = {}  # {token_address: {'wallets': {wallet: timestamp}, 'first_detection': timestamp, 'cluster_size': int, 'last_market_cap': float}}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º (4+ –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞ —á–∞—Å)
old_metrics_clusters = {}  # {token_address: {'wallets': {wallet: timestamp}, 'first_detection': timestamp, 'cluster_size': int}}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
sent_tokens = set()

def create_token_logger(token_address: str) -> logging.Logger:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        tokens_logs_dir = 'tokens_logs'
        if not os.path.exists(tokens_logs_dir):
            os.makedirs(tokens_logs_dir)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–µ—Ä–≤—ã–µ 12 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
        safe_token_name = token_address[:12] if token_address else "unknown"
        log_filename = os.path.join(tokens_logs_dir, f'{safe_token_name}.log')

        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        token_logger = logging.getLogger(f'token_{token_address}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if token_logger.handlers:
            return token_logger

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        token_logger.setLevel(logging.INFO)

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        file_handler = logging.FileHandler(log_filename, encoding='utf-8')
        file_handler.setFormatter(formatter)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
        token_logger.addHandler(file_handler)

        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ª–æ–≥–≥–µ—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        token_logger.propagate = False

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]} -> {log_filename}")

        return token_logger

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return logger

def get_token_logger(token_address: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
    if not token_address:
        return logger
    return create_token_logger(token_address)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è mapping —Ç–æ–∫–µ–Ω–æ–≤ –∫ market_id
TOKEN_TO_MARKET_CACHE = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –∑–∞–ø—Ä–æ—Å–æ–≤ market_id
PENDING_MARKET_ID_REQUESTS = {}

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {token_address: {'activity': timestamp, 'pump': timestamp}}
SENT_NOTIFICATIONS = {}

# –°–ø–∏—Å–æ–∫ –±—ç–∫–µ–Ω–¥–æ–≤ Padre –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
PADRE_BACKENDS = [
    "wss://backend1.padre.gg/_heavy_multiplex",
    "wss://backend2.padre.gg/_heavy_multiplex",
    "wss://backend3.padre.gg/_heavy_multiplex",
    "wss://backend.padre.gg/_heavy_multiplex"
]

# –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –±—ç–∫–µ–Ω–¥–æ–≤
_backend_counter = 0

def get_next_padre_backend() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±—ç–∫–µ–Ω–¥ Padre –≤ —Ä–µ–∂–∏–º–µ round-robin"""
    global _backend_counter
    backend = PADRE_BACKENDS[_backend_counter % len(PADRE_BACKENDS)]
    _backend_counter += 1
    return backend

class AuthenticationPolicyViolation(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ 1008)"""
    pass

async def request_market_id_via_websocket(websocket, token_address: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket (–Ω–µ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç)"""
    try:
        token_logger = get_token_logger(token_address)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            return True

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å market_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ MessagePack
        request_data = [8, token_address]
        message_bytes = msgpack.packb(request_data)

        await websocket.send(message_bytes)
        token_logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å market_id –¥–ª—è {token_address[:8]}")

        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ pending
        PENDING_MARKET_ID_REQUESTS[token_address] = time.time()

        return True

    except Exception as e:
        token_logger = get_token_logger(token_address)
        token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ market_id –¥–ª—è {token_address[:8]}: {e}")
        return False

def process_markets_per_token_response(payload: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç markets-per-token –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à"""
    try:
        if not isinstance(payload, dict):
            return

        if 'markets' in payload and 'SOLANA' in payload['markets']:
            solana_markets = payload['markets']['SOLANA']

            for token_address, markets_list in solana_markets.items():
                if markets_list and isinstance(markets_list, list) and len(markets_list) > 0:
                    market_info = markets_list[0]
                    market_id = market_info.get('marketId')

                    if market_id:
                        TOKEN_TO_MARKET_CACHE[token_address] = market_id
                        logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω market_id –¥–ª—è {token_address[:8]}: {market_id}")

                        # –£–¥–∞–ª—è–µ–º –∏–∑ pending –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
                        if token_address in PENDING_MARKET_ID_REQUESTS:
                            del PENDING_MARKET_ID_REQUESTS[token_address]

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markets-per-token –æ—Ç–≤–µ—Ç–∞: {e}")

async def get_market_id_for_token_cached(token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if token_address in TOKEN_TO_MARKET_CACHE:
            return TOKEN_TO_MARKET_CACHE[token_address]

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ –∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        if token_address not in PENDING_MARKET_ID_REQUESTS:
            logger.info(f"üîç Market_id –¥–ª—è {token_address[:8]} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å...")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ market_id
            try:
                ssl_context = ssl.create_default_context()
                ssl_context.check_hostname = False
                ssl_context.verify_mode = ssl.CERT_NONE

                headers = {
                    'Cookie': 'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel=%7B%22distinct_id%22%3A%20%22tg_7705971216%22%2C%22%24device_id%22%3A%20%2219946bc0c961188-06db4de430e72a8-4c657b58-1fa400-19946bc0c9727d3%22%2C%22%24user_id%22%3A%20%22tg_7705971216%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D',
                    'Origin': 'https://trade.padre.gg',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 OPR/122.0.0.0 (Edition Yx 08)'
                }

                async with websockets.connect(
                    get_next_padre_backend(),
                    extra_headers=headers,
                    ping_interval=None,
                    ping_timeout=None,
                    ssl=ssl_context
                ) as websocket:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    if await request_market_id_via_websocket(websocket, token_address):
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
                        try:
                            response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                            if isinstance(response, bytes):
                                decoded_data = decode_padre_message(response)
                                if decoded_data:
                                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç market_id: {decoded_data}")
                                    process_markets_per_token_response(decoded_data)
                        except asyncio.TimeoutError:
                            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ market_id –¥–ª—è {token_address[:8]}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è market_id: {e}")

        return TOKEN_TO_MARKET_CACHE.get(token_address)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market_id –¥–ª—è {token_address}: {e}")
        return None

async def get_token_metadata(token_address: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Axiom API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        axiom_api_domains = [
            "https://api.axiom.trade",
            "https://api2.axiom.trade",
            "https://api3.axiom.trade",
            "https://api6.axiom.trade",
            "https://api7.axiom.trade",
            "https://api8.axiom.trade",
            "https://api9.axiom.trade",
            "https://api10.axiom.trade",
        ]

        last_used_api_domain = 0

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{axiom_api_domains[last_used_api_domain]}/token-info?pairAddress={token_address}", headers={
                'accept': '*/*',
                'cookie': 'auth-refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW5JZCI6IjdhN2JhN2E3LWY4NDktNDVlNC05ZDI4LWY2MjRhNjUzY2YyYiIsImlhdCI6MTc1Mzk5MDE5Mn0.m825JgO7TNs6LR1RfmWs2y_O0qSZfQi3Tug04qdVKMw; auth-access-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoZW50aWNhdGVkVXNlcklkIjoiMzVlNjc3YzMtMjY4Zi00YTFmLWI5M2ItN2VkOGJjN2IzYjU0IiwiaWF0IjoxNzU1NTM1MjU2LCJleHAiOjE3NTU1MzYyMTZ9.ruxPC8uhIx_13OrcmlBtigIWWkCU2gl_MK9SIeoU0S8'
            }, timeout=aiohttp.ClientTimeout(total=5)) as response:
                try:
                    data = await response.json(content_type=None)
                    return data
                except Exception as e:
                    logger.error(f"Failed to parse JSON from token-info: {e}")
                    return {}

        last_used_api_domain = (last_used_api_domain + 1) % len(axiom_api_domains)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}: {e}")
        return {}

async def get_market_id_for_token(token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        metadata = await get_token_metadata(token_address)

        if metadata and 'pairAddress' in metadata:
            market_id = metadata['pairAddress']
            TOKEN_TO_MARKET_CACHE[token_address] = market_id
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω market_id –¥–ª—è {token_address[:8]}: {market_id}")
            return market_id

        return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market_id –¥–ª—è {token_address}: {e}")
        return None

async def get_market_address_via_smart_query(websocket, token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –º–∞—Ä–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ smart query"""
    try:
        # –°–æ–∑–¥–∞–µ–º smart query –∑–∞–ø—Ä–æ—Å
        smart_query = {
            "operationName": "GetMarketByBaseTokenAddress",
            "variables": {
                "address": token_address,
                "chain": "SOLANA"
            },
            "query": """
            query GetMarketByBaseTokenAddress($address: String!, $chain: Chain!) {
                markets(
                    filters: {
                        baseTokenAddress: { equalTo: $address }
                        chain: { equalTo: $chain }
                    }
                    pagination: { limit: 1 }
                ) {
                    id
                    baseTokenAddress
                    quoteTokenAddress
                }
            }
            """
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        query_bytes = msgpack.packb([7, smart_query])
        await websocket.send(query_bytes)

        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        response = await websocket.recv()
        if isinstance(response, bytes):
            decoded_data = decode_padre_message(response)
            if decoded_data and 'data' in decoded_data:
                markets = decoded_data['data'].get('markets', [])
                if markets:
                    market_id = markets[0].get('id')
                    if market_id:
                        TOKEN_TO_MARKET_CACHE[token_address] = market_id
                        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω market_id —á–µ—Ä–µ–∑ smart query –¥–ª—è {token_address[:8]}: {market_id}")
                        return market_id

        return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ smart query –¥–ª—è {token_address[:8]}: {e}")
        return None

def decode_padre_message(message_bytes: bytes) -> Optional[dict]:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç padre.gg WebSocket
    """
    try:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º MessagePack
        unpacked = msgpack.unpackb(message_bytes, strict_map_key=False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Padre)
        if isinstance(unpacked, dict):
            return unpacked

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        elif isinstance(unpacked, list):
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")

            if len(unpacked) < 3:
                print(f"‚ùå –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(unpacked)}")
                print(unpacked)
                return None

            message_type = unpacked[0]
            payload = unpacked[1]

            # –†–∞–∑–±–∏—Ä–∞–µ–º payload –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_type == 4:  # tracked-trades subscription responses
                # –î–ª—è tracked-trades –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                return {'type': 'tracked_trades', 'raw_data': unpacked}
            elif message_type == 9:  # markets-per-token
                if isinstance(payload, dict):
                    return payload
            elif message_type in [5, 8]:  # fast-stats updates –∏–ª–∏ –¥—Ä—É–≥–∏–µ
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–º (—á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                if len(unpacked) > 2 and isinstance(unpacked[2], dict):
                    return unpacked[2]
                # –ï—Å–ª–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ payload
                elif isinstance(payload, dict):
                    return payload
            elif message_type in [1, 2, 3]:  # auth responses, subscription confirmations
                return {'type': 'system', 'message_type': message_type, 'payload': payload}
            elif message_type == 6:  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                print(f"üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: message_type={message_type}, payload={payload}")
                print("üîÑ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket")
                return {'type': 'reconnect_required', 'message_type': message_type, 'payload': payload}
            else:
                print(f"üìã message_type: {message_type}")
                print(f"üìã payload: {payload}")
                print(f"üìã payload type: {type(payload)}")
                print(unpacked[2])

            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return {'type': 'unknown', 'raw_data': unpacked}

        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(unpacked)}")
            return None

    except Exception as e:
        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
TARGET_CHAT_ID = -1002680160752  # ID –≥—Ä—É–ø–ø—ã –∏–∑ https://t.me/c/2680160752/13134
SPECIAL_CHAT_ID = -1002731055130  # –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
SPECIAL_DUPLICATE_CHAT_ID = -1002538268724  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
NEW_ADDITIONAL_CHANNEL_ID = -1003084764631 # –ù–æ–≤—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
STANDARD_CHAT_ID = -1002837160729  # –ö–∞–Ω–∞–ª –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
SPECIAL_PATTERN_THREAD_ID = 19879  # ID –≤–µ—Ç–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ https://t.me/c/2680160752/19879
TARGET_THREAD_ID = 13134  # ID —Ç–µ–º—ã
MIN_BUNDLER_PERCENTAGE = float(os.getenv("MIN_BUNDLER_PERCENTAGE", "10"))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤

# WebSocket URL –¥–ª—è trade.padre.gg
PADRE_WS_URL = get_next_padre_backend()

# –ö—É–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ padre
PADRE_COOKIES = {
    'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel': '%7B%22distinct_id%22%3A%20%22tg_7705971216%22%2C%22%24device_id%22%3A%20%2219946bc0c961188-06db4de430e72a8-4c657b58-1fa400-19946bc0c9727d3%22%2C%22%24user_id%22%3A%20%22tg_7705971216%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
pending_tokens: Dict[str, dict] = {}  # {contract_address: token_data}
bundler_results: Dict[str, dict] = {}  # {contract_address: bundler_data}
sended_tokens: Dict[str, bool] = {}  # {contract_address: bool}

class TokenMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–∞"""

    def __init__(self, token_address: str, creation_time: int):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–∞"""
        self.token_address = token_address
        self.creation_time = creation_time
        self.metrics_history = []
        self.last_notification_type = None
        self.last_notification_time = 0
        self.max_dev_percent = 0
        self.dev_exit_time = None
        self.max_bundlers_after_dev_exit = 0

    def can_send_notification(self, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        current_time = time.time()
        cooldowns = {
            'activity': 300,  # 5 –º–∏–Ω—É—Ç
            'pump': 600,      # 10 –º–∏–Ω—É—Ç
            'special_pattern': 1800,  # 30 –º–∏–Ω—É—Ç
            'bundler': 900,   # 15 –º–∏–Ω—É—Ç
        }

        cooldown = cooldowns.get(notification_type, 300)

        if (self.last_notification_type == notification_type and
            current_time - self.last_notification_time < cooldown):
            return False

        return True

    def add_metrics(self, metrics: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        timestamp = int(time.time())
        metrics_entry = {
            'timestamp': timestamp,
            'total_holders': metrics.get('total_holders', 0),
            'dev_percent': float(metrics.get('devHoldingPcnt', 0) or 0),
            'bundlers_percent': float(metrics.get('bundlesHoldingPcnt', {}).get('current', 0) or 0),
            'snipers_percent': float(metrics.get('snipersHoldingPcnt', 0) or 0),
            'insiders_percent': float(metrics.get('insidersHoldingPcnt', 0) or 0),
            'liquidity': float(metrics.get('liquidityInUsdUi', 0) or 0),
            'market_cap': float(metrics.get('totalSupply', 0) or 0) / (10 ** 9) * float(metrics.get('basePriceInUsdUi', 0) or 0) * 1000,
        }

        self.metrics_history.append(metrics_entry)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞
        if metrics_entry['dev_percent'] > self.max_dev_percent:
            self.max_dev_percent = metrics_entry['dev_percent']

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥ –¥–µ–≤–∞
        if (self.dev_exit_time is None and
            self.max_dev_percent > 5 and
            metrics_entry['dev_percent'] < 2):
            self.dev_exit_time = timestamp

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
        if (self.dev_exit_time is not None and
            metrics_entry['bundlers_percent'] > self.max_bundlers_after_dev_exit):
            self.max_bundlers_after_dev_exit = metrics_entry['bundlers_percent']

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∑–∞–ø–∏—Å—è–º–∏
        if len(self.metrics_history) > 1000:
            self.metrics_history = self.metrics_history[-1000:]

    def get_growth_rates(self) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if len(self.metrics_history) < 2:
            return {}

        current = self.metrics_history[-1]
        previous = self.metrics_history[-2]

        time_diff = current['timestamp'] - previous['timestamp']
        if time_diff <= 0:
            return {}

        growth_rates = {}

        for metric in ['total_holders', 'dev_percent', 'bundlers_percent', 'snipers_percent',
                      'insiders_percent', 'liquidity', 'market_cap']:
            if metric in current and metric in previous:
                current_value = current[metric] or 0
                previous_value = previous[metric] or 0
                if previous_value != 0:
                    rate_per_second = (current_value - previous_value) / time_diff
                    growth_rates[metric] = rate_per_second

        return growth_rates

    def check_snipers_bundlers_correlation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏"""
        if len(self.metrics_history) < 20:
            return False

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
        recent_data = self.metrics_history[-20:]

        snipers_values = [entry['snipers_percent'] for entry in recent_data]
        bundlers_values = [entry['bundlers_percent'] for entry in recent_data]

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        correlation = self._calculate_correlation(snipers_values, bundlers_values)

        # –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è > 0.7, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        return correlation > 0.7

    def check_snipers_insiders_correlation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º–∏"""
        if len(self.metrics_history) < 20:
            return False

        recent_data = self.metrics_history[-20:]

        snipers_values = [entry['snipers_percent'] for entry in recent_data]
        insiders_values = [entry['insiders_percent'] for entry in recent_data]

        correlation = self._calculate_correlation(snipers_values, insiders_values)

        return correlation > 0.7

    def check_bundlers_snipers_exit_correlation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –≤—ã—Ö–æ–¥–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤"""
        if len(self.metrics_history) < 30:
            return False

        recent_data = self.metrics_history[-30:]

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –±–∞–Ω–¥–ª–µ—Ä—ã –≤—ã—Ö–æ–¥—è—Ç, –∑–∞—Ç–µ–º —Å–Ω–∞–π–ø–µ—Ä—ã
        bundlers_exiting = False
        snipers_exiting = False

        for i in range(1, len(recent_data)):
            bundlers_change = recent_data[i]['bundlers_percent'] - recent_data[i-1]['bundlers_percent']
            snipers_change = recent_data[i]['snipers_percent'] - recent_data[i-1]['snipers_percent']

            if bundlers_change < -1.0:  # –ë–∞–Ω–¥–ª–µ—Ä—ã –≤—ã—Ö–æ–¥—è—Ç
                bundlers_exiting = True
            if snipers_change < -1.0 and bundlers_exiting:  # –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                snipers_exiting = True

        return bundlers_exiting and snipers_exiting

    async def check_holders_correlation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤"""
        if len(self.metrics_history) < 20:
            return False

        recent_data = self.metrics_history[-20:]

        dev_values = [entry['dev_percent'] for entry in recent_data]
        insiders_values = [entry['insiders_percent'] for entry in recent_data]
        snipers_values = [entry['snipers_percent'] for entry in recent_data]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É dev –∏ insiders
        dev_insiders_corr = self._calculate_correlation(dev_values, insiders_values)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É dev –∏ snipers
        dev_snipers_corr = self._calculate_correlation(dev_values, snipers_values)

        # –ï—Å–ª–∏ dev —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å insiders –∏–ª–∏ snipers, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        return dev_insiders_corr > 0.8 or dev_snipers_corr > 0.8

    def _calculate_correlation(self, series1: list, series2: list) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–µ—Ä–∏—è–º–∏"""
        if len(series1) != len(series2) or len(series1) < 2:
            return 0.0

        try:
            n = len(series1)
            sum1 = sum(series1)
            sum2 = sum(series2)
            sum1_sq = sum(x**2 for x in series1)
            sum2_sq = sum(x**2 for x in series2)
            sum12 = sum(x*y for x, y in zip(series1, series2))

            numerator = n * sum12 - sum1 * sum2
            denominator = ((n * sum1_sq - sum1**2) * (n * sum2_sq - sum2**2)) ** 0.5

            if denominator == 0:
                return 0.0

            return numerator / denominator

        except (ZeroDivisionError, ValueError):
            return 0.0

    def check_rapid_exit(self, metric_name: str, ratio: float = 3.0, max_seconds: int = 120) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏"""
        if len(self.metrics_history) < 3:
            return False

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö max_seconds
        current_time = time.time()
        recent_data = [entry for entry in self.metrics_history
                      if current_time - entry['timestamp'] <= max_seconds]

        if len(recent_data) < 3:
            return False

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        values = [entry[metric_name] for entry in recent_data if metric_name in entry]
        if len(values) < 3:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ
        if values[-1] < values[0] * (1 - ratio/100):  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ —á–µ–º ratio%
            return True

        return False

    def check_rapid_exit_average_holders(self, metric_name: str, ratio: float = 3.0, max_seconds: int = 120) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –¥–æ–ª–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤"""
        if len(self.metrics_history) < 10:
            return False

        current_time = time.time()
        recent_data = [entry for entry in self.metrics_history
                      if current_time - entry['timestamp'] <= max_seconds]

        if len(recent_data) < 10:
            return False

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_holders = sum(entry.get('total_holders', 0) for entry in recent_data) / len(recent_data)
        current_holders = recent_data[-1].get('total_holders', 0)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥
        if current_holders < avg_holders * (1 - ratio/100):
            return True

        return False


class EboshersTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–±–æ—à–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket"""

    def __init__(self):
        self.websocket = None
        self.running = False
        self.logger = logger
        self.JWT_TOKEN = "eyJhbGciOiJSUzI1NiIsImtpZCI6ImVmMjQ4ZjQyZjc0YWUwZjk0OTIwYWY5YTlhMDEzMTdlZjJkMzVmZTEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoid29ya2VyMTAwMHgiLCJoYXV0aCI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tL3BhZHJlLTQxNzAyMCIsImF1ZCI6InBhZHJlLTQxNzAyMCIsImF1dGhfdGltZSI6MTc1NTY0ODA3OCwidXNlcl9pZCI6InRnXzc4OTE1MjQyNDQiLCJzdWIiOiJ0Z183ODkxNTI0MjQ0IiwiaWF0IjoxNzU3MDA2NTAwLCJleHAiOjE3NTcwMTAxMDAsImZpcmViYXNlIjp7ImlkZW50aXRpZXMiOnt9LCJzaWduX2luX3Byb3ZpZGVyIjoiY3VzdG9tIn19.Sf8Yvoh-yRpPo6_hohrvVCz5nj15XD_TwJOwUgHUwuJ5R-R-C22Ldqw-VrI6JV6iD1cvhV_T0iQbDLd-tGnGveoPSk7-G7h6xfchq_08H5skEmKFLK8PFBKV_X8V7MJVn7b4hqYdESaMP4TBJ2IdsFCTu-7kwof2qKMDXojdn5PajvqinmtgCFEVlJEdLYnYLdh4KEn9aFdgLRHrV6ORCXreKAbbrh1_KG6ID1TmCARVx6gJnyqhu-1cQLb3NXezaiL_A2SO5RrrWljpxmr2oKOZiVLoOVU6vHtpGmXY_3b5-VzgWsWe6rzZQMWWDWy_av-oPTq-1_3KRoI5gCLTeA"

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ tracked trades –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.last_tracked_trade_time = None
        self.tracked_trade_timeout = 60  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç
        self.connection_established_time = None  # –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
        self.last_message_time = None
        self.message_timeout = 60  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç –±–µ–∑ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∫–æ–ø–ª–µ–Ω–∏–π –µ–±–æ—à–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ebosher_clusters

        # –¢–∞–π–º–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        self.connection_start_time = None
        self.connection_duration = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.reconnect_delay = 0  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            backend_url = get_next_padre_backend()
            self.logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {backend_url}")

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers = {
                'Cookie': 'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel=' + PADRE_COOKIES['mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel'],
                'Origin': 'https://trade.padre.gg',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0'
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ SSL
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE

            self.logger.info("üîå –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            self.websocket = await websockets.connect(
                backend_url,
                extra_headers=headers,
                ping_interval=None,
                ping_timeout=None,
                ssl=ssl_context
            )
            self.logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.connection_start_time = time.time()
            self.connection_established_time = time.time()

            self.logger.info("üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_auth_message()
            self.logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

            self.logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ tracked-trades
            await self.send_subscription_message()
            self.logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await asyncio.sleep(0.5)
            self.logger.info("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π")

            self.logger.info(f"‚è∞ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –Ω–∞ {self.connection_duration // 60} –º–∏–Ω—É—Ç")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if hasattr(self, 'last_connection_time'):
                self.last_connection_time = time.time()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ tracked trade —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            self.last_tracked_trade_time = None

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            self.last_message_time = time.time()

            return True

        except AuthenticationPolicyViolation as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–∫–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.logger.warning(f"üîê –¢–æ–∫–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        except websockets.exceptions.InvalidURI as e:
            self.logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URI: {e}")
            return False
        except websockets.exceptions.ConnectionClosedError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: {type(e).__name__}: {e}")
            return False

    async def send_auth_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º auth message –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1, JWT_TOKEN, suffix]
            auth_message = [
                1,
                self.JWT_TOKEN,
                j8()[:13]
            ]
            auth_bytes = msgpack.packb(auth_message)

            self.logger.info("üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            self.logger.info(f"üì® Auth message: {auth_message}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Binary Message)
            await self.websocket.send(auth_bytes)
            self.logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                response = await asyncio.wait_for(self.websocket.recv(), timeout=10.0)
                self.logger.info(f"üì® –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(response)} –±–∞–π—Ç")

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if isinstance(response, bytes):
                    decoded_response = decode_padre_message(response)
                    self.logger.info(f"üì® –û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {decoded_response}")

            except asyncio.TimeoutError:
                self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

        except websockets.exceptions.ConnectionClosedError as e:
            if e.code == 1008:  # Policy violation - —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ 1008): {e}")
                self.logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω...")

                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ padre_get_access_token.py
                new_token = None
                try:
                    self.logger.info("üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ padre_get_access_token.py...")
                    new_token = await self.request_new_token_from_user()
                except Exception as token_error:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ padre_get_access_token.py: {token_error}")

                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º
                if not new_token:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º...")
                    return

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                if new_token and new_token.strip():
                    self.JWT_TOKEN = new_token.strip()
                    self.logger.info("‚úÖ –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

                    # –í–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é, –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    # —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    self.logger.info("üîÑ –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
                    raise AuthenticationPolicyViolation("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º")

            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise

    async def send_subscription_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ tracked-trades (–¥–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏)"""
        try:
            # –ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ tracked-trades/wallet-groups
            subscription_message_1 = [
                4,
                1,
                '/tracked-trades/wallet-groups/cba0b62d-a37f-4ecf-8672-56f857d56055/subscribe?encodedFilter=%7B%22tradeType%22%3A%5B0%2C1%2C3%2C2%5D%2C%22amountInUsd%22%3A%7B%7D%2C%22mcapInUsd%22%3A%7B%7D%2C%22tokenAgeSeconds%22%3A%7B%7D%7D'
            ]

            subscription_bytes_1 = msgpack.packb(subscription_message_1)

            self.logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ tracked-trades...")
            self.logger.info(f"üì® Subscription message 1: {subscription_message_1}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.websocket.send(subscription_bytes_1)
            self.logger.info("‚úÖ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                response1 = await asyncio.wait_for(self.websocket.recv(), timeout=5.0)
                self.logger.info(f"üì® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {len(response1)} –±–∞–π—Ç")
            except asyncio.TimeoutError:
                self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

            # –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            await asyncio.sleep(0.2)

            # –í—Ç–æ—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ tracked-trades/wallet-groups (–¥—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞)
            subscription_message_2 = [
                4,
                2,
                '/tracked-trades/wallet-groups/14b924db-1808-475b-8320-362baa22f92b/subscribe?encodedFilter=%7B%22tradeType%22%3A%5B0%2C1%2C3%2C2%5D%2C%22amountInUsd%22%3A%7B%7D%2C%22mcapInUsd%22%3A%7B%7D%2C%22tokenAgeSeconds%22%3A%7B%7D%7D'
            ]

            subscription_bytes_2 = msgpack.packb(subscription_message_2)

            self.logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
            self.logger.info(f"üì® Subscription message 2: [4, 34, '/tracked-trades/...']")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.websocket.send(subscription_bytes_2)
            self.logger.info("‚úÖ –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                response2 = await asyncio.wait_for(self.websocket.recv(), timeout=5.0)
                self.logger.info(f"üì® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {len(response2)} –±–∞–π—Ç")
            except asyncio.TimeoutError:
                self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

            # –í—Ç–æ—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ tracked-trades/wallet-groups (–¥—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞)
            subscription_message_3 = [
                4,
                3,
                '/tracked-trades/wallet-groups/c1031d6c-1e8f-4b03-82c5-863df244aaf5/subscribe?encodedFilter=%7B%22tradeType%22%3A%5B0%2C1%2C3%2C2%5D%2C%22amountInUsd%22%3A%7B%7D%2C%22mcapInUsd%22%3A%7B%7D%2C%22tokenAgeSeconds%22%3A%7B%7D%7D'
            ]

            subscription_bytes_3 = msgpack.packb(subscription_message_3)

            self.logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
            self.logger.info(f"üì® Subscription message 3: [4, 35, '/tracked-trades/...']")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.websocket.send(subscription_bytes_3)
            self.logger.info("‚úÖ –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                response3 = await asyncio.wait_for(self.websocket.recv(), timeout=5.0)
                self.logger.info(f"üì® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {len(response3)} –±–∞–π—Ç")
            except asyncio.TimeoutError:
                self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            raise

    async def request_new_token_from_user(self) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ padre_get_access_token.py"""
        try:
            self.logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ padre_get_access_token.py...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º executor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞
            loop = asyncio.get_event_loop()
            token = await loop.run_in_executor(None, self._sync_get_token_from_script)

            if token:
                self.logger.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
                return token
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None

    def _sync_log_trade(self, token_address: str, log_entry: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Ç—Ä–µ–π–¥–∞ –≤ —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists(EBOSHERS_LOGS_DIR):
                os.makedirs(EBOSHERS_LOGS_DIR)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            log_filename = f"{EBOSHERS_LOGS_DIR}/{token_address}.log"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(log_filename, 'a', encoding='utf-8') as f:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                f.write(f"[{timestamp}] {log_entry}\n")
                f.flush()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –¥–ª—è {token_address}: {e}")

    async def log_trade_to_file(self, token_address: str, wallet_address: str, amount_usd: float, timestamp: int, token_name: str, trade_type: int, market_cap: float):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            log_entry = (
                f"[{wallet_address}] {'-' if trade_type > 1 else ''}${amount_usd:.2f} | "
                f"{token_name} | mc: {round(market_cap, 2)} | "
                f"Time: {datetime.fromtimestamp(timestamp)}"
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self._sync_log_trade, token_address, log_entry)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞ –¥–ª—è {token_address}: {e}")

    def _sync_log_old_metrics_cluster(self, token_address: str, token_name: str, cluster_data: dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
            wallets = cluster_data['wallets']
            wallet_count = len(wallets)
            min_time = min(wallets.values())
            max_time = max(wallets.values())
            time_span = max_time - min_time

            log_entry = (
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
                f"–°–¢–ê–†–´–ï –ú–ï–¢–†–ò–ö–ò: {token_address} | "
                f"{token_name} | "
                f"–ö–æ—à–µ–ª—å–∫–æ–≤: {wallet_count} | "
                f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: {time_span} —Å–µ–∫ | "
                f"–ö–æ—à–µ–ª—å–∫–∏: {', '.join([f'{w[:8]}...' for w in wallets.keys()])}"
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(OLD_METRICS_LOG_FILE, 'a', encoding='utf-8') as f:
                f.write(f"{log_entry}\n")
                f.flush()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {token_address}: {e}")

    async def log_old_metrics_cluster(self, token_address: str, token_name: str, cluster_data: dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self._sync_log_old_metrics_cluster, token_address, token_name, cluster_data)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {token_address}: {e}")

    def _sync_get_token_from_script(self) -> Optional[str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ padre_get_access_token.py"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç padre_get_access_token.py
            script_path = os.path.join(os.path.dirname(__file__), "padre_get_access_token.py")
            result = subprocess.run(
                ["python", script_path],
                capture_output=True,
                text=True,
                cwd=os.path.dirname(__file__)
            )

            if result.returncode == 0:
                print("‚úÖ –°–∫—Ä–∏–ø—Ç padre_get_access_token.py –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ token.txt
                token_file = os.path.join(os.path.dirname(__file__), "token.txt")
                if os.path.exists(token_file):
                    with open(token_file, 'r') as f:
                        token = f.read().strip()

                    if token and token.startswith('eyJ'):
                        return token
                    else:
                        print("‚ùå –¢–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                        return None
                else:
                    print("‚ùå –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return None

    async def listen_for_messages(self):
        """–°–ª—É—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        self.logger.info("üëÇ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
        messages_processed = 0

        while self.running:
            self.logger.debug(f"üîÑ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞, running={self.running}")
            try:
                if not self.websocket:
                    self.logger.warning("‚ö†Ô∏è WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                    if self.running:
                        await self.force_reconnect()
                        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                        continue
                    else:
                        self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)")
                        break

                self.logger.info(f"üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Ç–µ—Ä–∞—Ü–∏—è #{messages_processed})...")
                iteration_start = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
                if not hasattr(self, 'connection_start_time') or self.connection_start_time is None or (time.time() - self.connection_start_time) > 600:  # –ë–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
                    self.logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–¥–ø–∏—Å–∫—É...")
                    try:
                        self.logger.info("üîê –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                        await self.send_auth_message()
                        self.logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

                        self.logger.info("üì° –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...")
                        await self.send_subscription_message()
                        self.logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        self.connection_start_time = time.time()
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–ø–æ–¥–ø–∏—Å–∫–µ: {e}")
                        if self.running:
                            await self.force_reconnect()
                            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –±–µ–∑ –≤—ã—Ö–æ–¥–∞
                            continue
                        else:
                            self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
                            break

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    await asyncio.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if self.websocket.closed:
                        self.logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                        if self.running:
                            await self.force_reconnect()
                            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –±–µ–∑ –≤—ã—Ö–æ–¥–∞
                            continue
                        else:
                            self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
                            break
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                    if self.running:
                        await self.force_reconnect()
                        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –±–µ–∑ –≤—ã—Ö–æ–¥–∞
                        continue
                    else:
                        self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
                        break

                messages_in_iteration = 0
                async for message in self.websocket:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç tracked trades –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    current_time = time.time()
                    if (self.connection_established_time is not None and
                        current_time - self.connection_established_time > 120 and  # 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        self.last_tracked_trade_time is not None and
                        current_time - self.last_tracked_trade_time > self.tracked_trade_timeout):
                        self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç tracked trades: {self.tracked_trade_timeout} —Å–µ–∫ –±–µ–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ tracked trades...")
                        await self.force_reconnect()
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

                    if isinstance(message, bytes):
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        decoded_data = decode_padre_message(message)

                        if decoded_data:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self.process_message(decoded_data)
                            messages_processed += 1
                            messages_in_iteration += 1
                        else:
                            self.logger.debug(f"üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(message)} –±–∞–π—Ç")

                    elif isinstance(message, str):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.last_message_time = time.time()
                        self.logger.info(f"üì® –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å
                iteration_duration = time.time() - iteration_start
                self.logger.info(f"üîö –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {messages_in_iteration} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {iteration_duration:.1f} —Å–µ–∫")

                # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π –∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                if iteration_duration < 1.0 and messages_in_iteration == 0:
                    self.logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 2 —Å–µ–∫...")
                    await asyncio.sleep(2)

            except websockets.exceptions.ConnectionClosed:
                iteration_duration = time.time() - iteration_start
                self.logger.warning(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ {iteration_duration:.1f} —Å–µ–∫")
                if self.running:
                    await self.force_reconnect()
                    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                    continue
                else:
                    self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (ConnectionClosed)")
                    break

            except websockets.exceptions.ConnectionClosedError as e:
                iteration_duration = time.time() - iteration_start
                self.logger.warning(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ {iteration_duration:.1f} —Å–µ–∫: {e}")
                if self.running:
                    await self.force_reconnect()
                    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                    continue
                else:
                    self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (ConnectionClosedError)")
                    break

            except KeyboardInterrupt:
                self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏")
                self.running = False
                self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ KeyboardInterrupt")
                break
            except AuthenticationPolicyViolation as e:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π
                iteration_duration = time.time() - iteration_start
                self.logger.warning(f"üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ {iteration_duration:.1f} —Å–µ–∫: {e}")
                if self.running:
                    await self.force_reconnect()
                    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                    continue
                else:
                    self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (AuthenticationPolicyViolation)")
                    break
            except Exception as e:
                iteration_duration = time.time() - iteration_start
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ {iteration_duration:.1f} —Å–µ–∫: {e}")
                if self.running:
                    await self.force_reconnect()
                    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                    continue
                else:
                    self.logger.info(f"üìä –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏–∑-–∑–∞ running=False (Exception)")
                    break

        self.logger.info(f"üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {messages_processed} —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: running={self.running}")

    async def process_message(self, message_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
            self.last_message_time = time.time()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Padre —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'type' in message_data and message_data['type'] == 'msg':
                conn_id = message_data.get('connId', '')
                payload = message_data.get('payload', {})

                if payload.get('type') == 'init' and 'snapshot' in payload:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ tracked trade —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ snapshot
                    self.last_tracked_trade_time = time.time()

                    snapshot = payload['snapshot']

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–π–¥—ã –∏–∑ snapshot
                    if 'trades' in snapshot:
                        await self.process_tracked_trades(snapshot['trades'])

                elif payload.get('type') == 'update' and 'update' in payload:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ tracked trade —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.last_tracked_trade_time = time.time()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤
                    update_data = payload['update']
                    if 'newTrades' in update_data:
                        await self.process_tracked_trades(update_data['newTrades'])

                self.logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ connId={conn_id}, —Ç–∏–ø={payload.get('type', 'unknown')}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä—è–º–æ–π —Å–ª–æ–≤–∞—Ä—å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ payload –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
            elif isinstance(message_data, dict) and message_data.get('type') == 'init' and 'snapshot' in message_data:
                self.last_tracked_trade_time = time.time()
                snapshot = message_data['snapshot']
                if 'trades' in snapshot:
                    await self.process_tracked_trades(snapshot['trades'])
                self.logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (init snapshot), —Ç–∏–ø={message_data.get('type', 'unknown')}")

            elif isinstance(message_data, dict) and message_data.get('type') == 'update' and 'update' in message_data:
                self.last_tracked_trade_time = time.time()
                update_data = message_data['update']
                if 'newTrades' in update_data:
                    await self.process_tracked_trades(update_data['newTrades'])
                self.logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (update), —Ç–∏–ø={message_data.get('type', 'unknown')}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ tracked_trades —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç decode_padre_message)
            elif 'type' in message_data and message_data['type'] == 'tracked_trades':
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ tracked trade —Å–æ–æ–±—â–µ–Ω–∏—è
                self.last_tracked_trade_time = time.time()

                raw_data = message_data.get('raw_data', [])
                if len(raw_data) >= 2:
                    conn_id = raw_data[1]  # connection id
                    self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ tracked_trades —Å–æ–æ–±—â–µ–Ω–∏–µ, connId={conn_id}")

                    # tracked_trades —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–π–¥–∞—Ö
                    # –û–±—ã—á–Ω–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if len(raw_data) >= 3:
                        payload = raw_data[2]
                        if isinstance(payload, dict):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–π–¥–∞—Ö
                            if 'trades' in payload:
                                await self.process_tracked_trades(payload['trades'])
                            elif 'snapshot' in payload and 'trades' in payload['snapshot']:
                                await self.process_tracked_trades(payload['snapshot']['trades'])
                            else:
                                self.logger.debug(f"üì¶ tracked_trades payload –±–µ–∑ —Ç—Ä–µ–π–¥–æ–≤: {payload}")

                            # –ï—Å–ª–∏ –≤ payload –µ—Å—Ç—å —Ç—Ä–µ–π–¥—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if 'trades' in payload or ('snapshot' in payload and 'trades' in payload['snapshot']):
                                self.last_tracked_trade_time = time.time()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            elif 'type' in message_data and message_data['type'] == 'reconnect_required':
                message_type = message_data.get('message_type', 0)
                payload = message_data.get('payload', 0)
                self.logger.warning(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: message_type={message_type}, payload={payload}")
                self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...")
                await self.force_reconnect()
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            elif 'type' in message_data and message_data['type'] == 'system':
                message_type = message_data.get('message_type', 0)
                self.logger.debug(f"üì® –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message_type}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            elif 'type' in message_data and message_data['type'] == 'unknown':
                raw_data = message_data.get('raw_data', [])
                if len(raw_data) >= 1:
                    message_type = raw_data[0]
                    self.logger.debug(f"üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message_type}: {raw_data}")

            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                self.logger.debug(f"üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            self.logger.error(f"üìã Traceback: {traceback.format_exc()}")

    async def process_tracked_trades(self, trades_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ tracked trades"""
        try:
            if not trades_data:
                return

            self.logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tracked trades: {len(trades_data)} –∑–∞–ø–∏—Å–µ–π")

            for trade in trades_data:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç—Ä–µ–π–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if isinstance(trade, list) and len(trade) >= 18:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    timestamp = trade[1]  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
                    wallet_address = trade[3]  # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
                    amount_usd = trade[4]  # –°—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                    token_address = trade[12]  # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
                    token_name = trade[17] if len(trade) > 17 else 'Unknown'  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                    trade_type = trade[7]

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º market cap (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤ –º–∏–ª–ª–∏–∞—Ä–¥–∞—Ö)
                    market_cap_raw = trade[8] if len(trade) > 8 else 0
                    market_cap = market_cap_raw * 1000000000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã

                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–π–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    self.logger.debug(f"üìä –¢—Ä–µ–π–¥: amount={amount_usd:.2f}, market_cap_raw={market_cap_raw}, market_cap={market_cap:.0f}, token={token_name}")

                    # –§–ò–õ–¨–¢–†: —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ü–û–ö–£–ü–ö–ò (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
                    if amount_usd <= 0:
                        self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω —Ç—Ä–µ–π–¥: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ {amount_usd}")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∏ –Ω—É–ª–µ–≤—ã–µ —Å—É–º–º—ã

                    # –§–ò–õ–¨–¢–†: market cap –æ—Ç 50k –¥–æ 300k
                    if market_cap < 50000 or market_cap > 300000:
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω —Ç—Ä–µ–π–¥: market_cap {market_cap:.0f} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 50k-300k")
                        continue

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–π–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    await self.process_trade(wallet_address, token_address, amount_usd, timestamp, token_name, market_cap, trade_type)

                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π
                    self.logger.debug(f"üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–π–¥–∞: {trade}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ tracked trades: {e}")
            import traceback
            self.logger.error(f"üìã Traceback: {traceback.format_exc()}")

    async def process_trade(self, wallet_address: str, token_address: str, amount_usd: float, timestamp: int, token_name: str, market_cap: float = 0, trade_type: int = 0):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–π–¥ –µ–±–æ—à–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫–æ–ø–ª–µ–Ω–∏—è"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
            if token_address in ebosher_clusters:
                ebosher_clusters[token_address]['last_market_cap'] = market_cap

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            await self.log_trade_to_file(token_address, wallet_address, amount_usd, timestamp, token_name, trade_type, market_cap)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫–æ–ø–ª–µ–Ω–∏–µ –µ–±–æ—à–µ—Ä–æ–≤
            await self.check_ebosher_cluster(wallet_address, token_address, amount_usd, timestamp, token_name)

            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º (4+ –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞ —á–∞—Å)
            await self.check_old_metrics_cluster(wallet_address, token_address, timestamp, token_name)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–∞ {wallet_address[:8]}: {e}")

    async def check_ebosher_cluster(self, wallet_address: str, token_address: str, amount_usd: float, timestamp: int, token_name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫–æ–ø–ª–µ–Ω–∏–µ –µ–±–æ—à–µ—Ä–æ–≤ –≤ —Ç–æ–∫–µ–Ω–µ –ø–æ –æ–±—ä–µ–º—É –ü–ï–†–í–´–• –ü–û–ö–£–ü–û–ö (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞)"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–æ–ø–ª–µ–Ω–∏—è
            VOLUME_THRESHOLD_USD = 2000  # –ú–∏–Ω–∏–º—É–º 2000 –¥–æ–ª–ª–∞—Ä–æ–≤ –æ–±—â–∏–π –æ–±—ä–µ–º
            TIME_WINDOW_SECONDS = 120  # 2 –º–∏–Ω—É—Ç—ã - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            CLEANUP_TIME_SECONDS = 300  # –û—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —á–∞—Å

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if token_address not in ebosher_clusters:
                ebosher_clusters[token_address] = {
                    'wallets': {},  # wallet -> {'amount': usd, 'timestamp': time}
                    'total_volume': 0,
                    'first_detection': timestamp,
                    'last_update': timestamp,
                    'token_name': token_name,
                    'detected': False,
                    'last_market_cap': 0  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                }

            cluster = ebosher_clusters[token_address]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –∫–ª–∞—Å—Ç–µ—Ä (–¢–û–õ–¨–ö–û –ü–ï–†–í–ê–Ø –ü–û–ö–£–ü–ö–ê)
            if wallet_address not in cluster['wallets']:
                cluster['wallets'][wallet_address] = {
                    'amount': amount_usd,
                    'timestamp': timestamp
                }
                cluster['total_volume'] += amount_usd
            else:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç —Ç–æ–≥–æ –∂–µ –∫–æ—à–µ–ª—å–∫–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                self.logger.debug(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞ {wallet_address[:8]} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è –∫–ª–∞—Å—Ç–µ—Ä

            cluster['last_update'] = timestamp

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–∫–æ—à–µ–ª—å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞–ª–∏)
            current_time = timestamp
            wallets_to_remove = []
            volume_to_remove = 0

            for wallet, wallet_data in cluster['wallets'].items():
                if current_time - wallet_data['timestamp'] > CLEANUP_TIME_SECONDS:
                    wallets_to_remove.append(wallet)
                    volume_to_remove += wallet_data['amount']

            for wallet in wallets_to_remove:
                del cluster['wallets'][wallet]
                cluster['total_volume'] -= volume_to_remove

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∫–æ–ø–ª–µ–Ω–∏–µ–º –ø–æ –æ–±—ä–µ–º—É –ò –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ—à–µ–ª—å–∫–æ–≤
            WALLET_THRESHOLD = 10  # –ú–∏–Ω–∏–º—É–º 10 –∫–æ—à–µ–ª—å–∫–∞
            if (cluster['total_volume'] >= VOLUME_THRESHOLD_USD and len(cluster['wallets']) >= WALLET_THRESHOLD) and not cluster['detected']:
                # –°–ö–û–ü–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û! (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞)
                cluster['detected'] = True

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–æ–≤
                wallet_timestamps = [data['timestamp'] for data in cluster['wallets'].values()]
                if wallet_timestamps:
                    min_time = min(wallet_timestamps)
                    max_time = max(wallet_timestamps)
                    time_span = max_time - min_time
                else:
                    min_time = timestamp
                    max_time = timestamp
                    time_span = 0

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                detection_reason = f"–ü–ï–†–í–´–ï –ü–û–ö–£–ü–ö–ò: –û–ë–™–ï–ú ‚â• ${VOLUME_THRESHOLD_USD} + –ö–û–®–ï–õ–¨–ö–ò ‚â• {WALLET_THRESHOLD}"

                self.logger.info("üö® " + "="*60)
                self.logger.info("üéØ –°–ö–û–ü–õ–ï–ù–ò–ï –ï–ë–û–®–ï–†–û–í –û–ë–ù–ê–†–£–ñ–ï–ù–û!")
                self.logger.info(f"üìä –ö–†–ò–¢–ï–†–ò–ô: {detection_reason}")
                self.logger.info("üö® " + "="*60)
                self.logger.info(f"ü™ô –¢–û–ö–ï–ù: {token_name}")
                self.logger.info(f"üìç –ê–î–†–ï–°: {token_address}")
                self.logger.info(f"üí∞ –û–ë–©–ò–ô –û–ë–™–ï–ú: ${cluster['total_volume']:,.2f}")
                self.logger.info(f"üë• –ö–û–®–ï–õ–¨–ö–û–í: {len(cluster['wallets'])}")
                self.logger.info(f"‚è±Ô∏è  –í–†–ï–ú–ï–ù–ù–û–ô –ü–†–û–ú–ï–ñ–£–¢–û–ö: {time_span} —Å–µ–∫")
                self.logger.info(f"üïí –ü–ï–†–í–´–ô –í–•–û–î: {datetime.fromtimestamp(min_time)}")
                self.logger.info(f"üïí –ü–û–°–õ–ï–î–ù–ò–ô –í–•–û–î: {datetime.fromtimestamp(max_time)}")

                # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å —Å—É–º–º–∞–º–∏
                self.logger.info("üìã –ö–û–®–ï–õ–¨–ö–ò:")
                for i, (wallet, wallet_data) in enumerate(sorted(cluster['wallets'].items(), key=lambda x: x[1]['timestamp']), 1):
                    time_diff = wallet_data['timestamp'] - min_time
                    self.logger.info(f"   {i}. {wallet[:12]}... ${wallet_data['amount']:.2f} (–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ {time_diff} —Å–µ–∫)")

                self.logger.info("üö® " + "="*60)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                await self.notify_ebosher_cluster(token_address, token_name, cluster)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–∫–æ–ø–ª–µ–Ω–∏–∏
                self.logger.info("‚úÖ –°–ö–û–ü–õ–ï–ù–ò–ï –ï–ë–û–®–ï–†–û–í –ù–ê–ô–î–ï–ù–û!")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ–ø–ª–µ–Ω–∏—è –¥–ª—è {token_address[:8]}: {e}")

    async def check_old_metrics_cluster(self, wallet_address: str, token_address: str, timestamp: int, token_name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫–æ–ø–ª–µ–Ω–∏–µ –µ–±–æ—à–µ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º (4+ –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞ —á–∞—Å)"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
            OLD_METRICS_WALLET_THRESHOLD = 4  # –ú–∏–Ω–∏–º—É–º 4 –∫–æ—à–µ–ª—å–∫–∞
            OLD_METRICS_TIME_WINDOW = 1800     # –ø–æ–ª—á–∞—Å–∞
            OLD_METRICS_CLEANUP_TIME = 3600   # –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if token_address not in old_metrics_clusters:
                old_metrics_clusters[token_address] = {
                    'wallets': {},
                    'first_detection': timestamp,
                    'cluster_size': 0,
                    'last_update': timestamp,
                    'token_name': token_name,
                    'detected': False
                }

            cluster = old_metrics_clusters[token_address]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –∫–ª–∞—Å—Ç–µ—Ä
            if wallet_address not in cluster['wallets']:
                cluster['wallets'][wallet_address] = timestamp
                cluster['cluster_size'] += 1
                cluster['last_update'] = timestamp

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–∫–æ—à–µ–ª—å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞–ª–∏)
            current_time = timestamp
            wallets_to_remove = []
            for wallet, wallet_timestamp in cluster['wallets'].items():
                if current_time - wallet_timestamp > OLD_METRICS_CLEANUP_TIME:
                    wallets_to_remove.append(wallet)

            for wallet in wallets_to_remove:
                del cluster['wallets'][wallet]
                cluster['cluster_size'] -= 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∫–æ–ø–ª–µ–Ω–∏–µ–º –ø–æ —Å—Ç–∞—Ä—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
            if cluster['cluster_size'] >= OLD_METRICS_WALLET_THRESHOLD and not cluster['detected']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –≤–æ—à–ª–∏ –≤ —á–∞—Å–æ–≤–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
                wallet_timestamps = list(cluster['wallets'].values())
                if wallet_timestamps:
                    min_time = min(wallet_timestamps)
                    max_time = max(wallet_timestamps)
                    time_span = max_time - min_time

                    if time_span <= OLD_METRICS_TIME_WINDOW:
                        # –°–ö–û–ü–õ–ï–ù–ò–ï –ü–û –°–¢–ê–†–´–ú –ú–ï–¢–†–ò–ö–ê–ú –û–ë–ù–ê–†–£–ñ–ï–ù–û!
                        cluster['detected'] = True

                        self.logger.info("üìä " + "="*50)
                        self.logger.info("üéØ –°–ö–û–ü–õ–ï–ù–ò–ï –ü–û –°–¢–ê–†–´–ú –ú–ï–¢–†–ò–ö–ê–ú!")
                        self.logger.info("üìä " + "="*50)
                        self.logger.info(f"ü™ô –¢–û–ö–ï–ù: {token_name}")
                        self.logger.info(f"üìç –ê–î–†–ï–°: {token_address}")
                        self.logger.info(f"üë• –ö–û–®–ï–õ–¨–ö–û–í: {cluster['cluster_size']}")
                        self.logger.info(f"‚è±Ô∏è  –í–†–ï–ú–ï–ù–ù–û–ô –ü–†–û–ú–ï–ñ–£–¢–û–ö: {time_span} —Å–µ–∫")

                        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram)
                        await self.log_old_metrics_cluster(token_address, token_name, cluster)

                        self.logger.info("‚úÖ –°–ö–û–ü–õ–ï–ù–ò–ï –ü–û –°–¢–ê–†–´–ú –ú–ï–¢–†–ò–ö–ê–ú –ó–ê–õ–û–ì–ò–†–û–í–ê–ù–û!")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {token_address[:8]}: {e}")

    async def send_telegram_message(self, message: str, keyboard=None, chat_id=None, thread_id=None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            current_time = time.time()
            if hasattr(self, 'last_telegram_time'):
                time_since_last = current_time - self.last_telegram_time
                if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(3 - time_since_last)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chat_id –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            chat_id = chat_id or TARGET_CHAT_ID

            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown",
                "disable_web_page_preview": True
            }

            # –î–æ–±–∞–≤–ª—è–µ–º thread_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω (–¥–ª—è –≥—Ä—É–ø–ø —Å –≤–µ—Ç–∫–∞–º–∏)
            if thread_id is not None:
                data["message_thread_id"] = thread_id

            if keyboard:
                data["reply_markup"] = {"inline_keyboard": keyboard}

            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: chat={chat_id}, thread={thread_id}")

            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 429:  # Too Many Requests
                        retry_after = (await response.json()).get('parameters', {}).get('retry_after', 30)
                        self.logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ñ–¥–µ–º {retry_after} —Å–µ–∫.")
                        await asyncio.sleep(retry_after)
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                        async with session.post(url, json=data) as retry_response:
                            if retry_response.status != 200:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {retry_response.status} - {await retry_response.text()}")
                                return False
                    elif response.status != 200:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                        return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_telegram_time = time.time()
            self.logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

    async def notify_ebosher_cluster(self, token_address: str, token_name: str, cluster_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ–ø–ª–µ–Ω–∏–∏ –µ–±–æ—à–µ—Ä–æ–≤ –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            if is_token_sent(token_address):
                self.logger.info(f"‚è≠Ô∏è  –¢–æ–∫–µ–Ω {token_address[:8]} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            wallets = cluster_data['wallets']
            wallet_timestamps = [data['timestamp'] for data in wallets.values()]
            min_time = min(wallet_timestamps)
            max_time = max(wallet_timestamps)
            time_span = max_time - min_time
            total_volume = cluster_data['total_volume']

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            last_market_cap = cluster_data.get('last_market_cap', 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Å–æ–±—É—é –≤–µ—Ç–∫—É
            special_wallets = {
                "8znHBwV5wSBWDg7ruwYkHeMDNXQ2BPiwBzkTDJeUy1rP",
                "niggerd597QYedtvjQDVHZTCCGyJrwHNm2i49dkm5zS"
            }

            special_wallet_qualified_high_value = False
            qualified_special_wallet_high_value = None
            special_wallet_qualified_low_value = False
            qualified_special_wallet_low_value = None # To log which low value special wallet triggered it

            for wallet, wallet_data in wallets.items():
                if wallet in special_wallets:
                    amount = wallet_data['amount']
                    if amount > 3000:
                        special_wallet_qualified_high_value = True
                        qualified_special_wallet_high_value = wallet
                        self.logger.info(f"üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ {wallet[:8]}... –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–≤—ã—Å–æ–∫–∞—è —Å—É–º–º–∞): ${amount:.2f} > $3000")
                    elif amount > 0 and amount <= 3000:
                        special_wallet_qualified_low_value = True
                        qualified_special_wallet_low_value = wallet
                        self.logger.info(f"üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ {wallet[:8]}... –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–Ω–∏–∑–∫–∞—è —Å—É–º–º–∞): ${amount:.2f} <= $3000")


            # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ª–æ–≥–∏–∫–∞ –¥–ª—è high_value_special_wallet)
            selected_chat_id = STANDARD_CHAT_ID
            selected_thread_id = None

            if special_wallet_qualified_high_value and len(wallets) == 10 and total_volume >= 3000:
                selected_chat_id = SPECIAL_CHAT_ID  # –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                selected_thread_id = None  # –í –∫–∞–Ω–∞–ª–∞—Ö –Ω–µ—Ç –≤–µ—Ç–æ–∫
                self.logger.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {selected_chat_id} (—Å–ø–µ—Ü. –∫–æ—à–µ–ª–µ–∫: {qualified_special_wallet_high_value[:8]}...)")
            else:
                if not special_wallet_qualified_high_value:
                    self.logger.debug(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (–Ω–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü. –∫–æ—à–µ–ª—å–∫–∞ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)")
                elif len(wallets) != 10:
                    self.logger.debug(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (–∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets)} != 10)")
                elif total_volume < 3000:
                    self.logger.debug(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (–æ–±—ä–µ–º: ${total_volume:.2f} < $3000)")


            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            message = (
                f"**–ø–∞–º–ø –º–æ–Ω–µ—Ç—ã –æ—Ç —Ç–æ–ø–æ–≤**\n\n"
                f"**{token_name}**\n"
                f"`{token_address}`\n\n"
                f"mc: ${last_market_cap:,.0f}\n\n"
                f"[axiom](https://axiom.trade/t/{token_address}) | "
                f"[padre](https://trade.padre.gg/trade/solana/{token_address}) |"
                f"[gmgn](https://gmgn.ai/sol/token/{token_address})\n\n"
                f"*üöÄ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} ¬© **by Wormster***"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏
            keyboard = [[{
                "text": "‚ö° QUICK BUY",
                "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{token_address}"
            }]]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            success_main = await self.send_telegram_message(message, keyboard, selected_chat_id, selected_thread_id)
            duplicate_info_for_log = ""
            success_duplicate_special = True # Assume true if not sent

            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏), –¥—É–±–ª–∏—Ä—É–µ–º –≤ SPECIAL_DUPLICATE_CHAT_ID
            if special_wallet_qualified_high_value and selected_chat_id == SPECIAL_CHAT_ID:
                success_duplicate_special = await self.send_telegram_message(message, keyboard, SPECIAL_DUPLICATE_CHAT_ID, None)
                if success_duplicate_special:
                    self.logger.info(f"üì¢ –î—É–±–ª–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {SPECIAL_DUPLICATE_CHAT_ID}")
                    duplicate_info_for_log += " (—Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º –≤ SPECIAL_DUPLICATE)"
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {SPECIAL_DUPLICATE_CHAT_ID}")

            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –∑–∞—à–µ–ª –Ω–∞ —Å—É–º–º—É <= $3000, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ NEW_ADDITIONAL_CHANNEL_ID
            success_duplicate_new_additional = True # Assume true if not sent
            if special_wallet_qualified_low_value:
                self.logger.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {NEW_ADDITIONAL_CHANNEL_ID} (—Å–ø–µ—Ü. –∫–æ—à–µ–ª–µ–∫: {qualified_special_wallet_low_value[:8]}... —Å –Ω–∏–∑–∫–æ–π —Å—É–º–º–æ–π)")
                success_duplicate_new_additional = await self.send_telegram_message(message, keyboard, NEW_ADDITIONAL_CHANNEL_ID, None)
                if success_duplicate_new_additional:
                    self.logger.info(f"üì¢ –î—É–±–ª–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {NEW_ADDITIONAL_CHANNEL_ID}")
                    duplicate_info_for_log += " (—Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º –≤ NEW_ADDITIONAL_CHANNEL)"
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –≤ –Ω–æ–≤—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {NEW_ADDITIONAL_CHANNEL_ID}")


            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if success_main:
                channel_type = "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª" if selected_chat_id == SPECIAL_CHAT_ID else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                self.logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ–ø–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {token_address[:8]} –≤ {channel_type}{duplicate_info_for_log}")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
                add_sent_token(token_address)
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ–ø–ª–µ–Ω–∏–∏ –¥–ª—è {token_address[:8]}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ–ø–ª–µ–Ω–∏–∏: {e}")

    async def print_eboshers_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –µ–±–æ—à–µ—Ä–∞–º"""
        try:
            if not self.eboshers_stats:
                self.logger.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –µ–±–æ—à–µ—Ä–∞—Ö")
                return

            self.logger.info("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ï–ë–û–®–ï–†–û–í ===")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –µ–±–æ—à–µ—Ä–æ–≤ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ (–æ—Ç —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π –∫ —Å–∞–º–æ–π –º–µ–¥–ª–µ–Ω–Ω–æ–π)
            sorted_eboshers = sorted(
                self.eboshers_stats.items(),
                key=lambda x: x[1]['entry_speed_seconds'],
                reverse=True
            )

            for wallet, stats in sorted_eboshers:
                entry_speed = stats['entry_speed_seconds']
                trade_count = stats['trade_count']
                total_volume = stats['total_volume_usd']
                tokens_count = len(stats['tokens_traded'])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (–±—ã—Å—Ç—Ä—ã–π/—Å—Ä–µ–¥–Ω–∏–π/–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—Ö–æ–¥)
                if entry_speed == 0:
                    speed_category = "‚ö° –ù–û–í–´–ô"
                elif entry_speed < 60:
                    speed_category = "‚ö° –û–ß–ï–ù–¨ –ë–´–°–¢–†–´–ô"
                elif entry_speed < 300:
                    speed_category = "üöÄ –ë–´–°–¢–†–´–ô"
                elif entry_speed < 1800:
                    speed_category = "üèÉ –°–†–ï–î–ù–ò–ô"
                else:
                    speed_category = "üêå –ú–ï–î–õ–ï–ù–ù–´–ô"

                self.logger.info(f"üë®‚Äçüíº {wallet[:8]}...: {speed_category}")
                self.logger.info(f"   ‚è±Ô∏è  –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {entry_speed} —Å–µ–∫")
                self.logger.info(f"   üìä –¢—Ä–µ–π–¥–æ–≤: {trade_count}")
                self.logger.info(f"   üí∞ –û–±—ä–µ–º: ${total_volume:,.2f}")
                self.logger.info(f"   ü™ô –¢–æ–∫–µ–Ω–æ–≤: {tokens_count}")

            self.logger.info("üìä === –ö–û–ù–ï–¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ–±–æ—à–µ—Ä–æ–≤: {e}")

    async def stats_monitor_task(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            while self.running:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if self.running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
                    await self.print_eboshers_stats()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def should_reconnect(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)"""
        if not self.connection_start_time:
            return False

        elapsed = time.time() - self.connection_start_time
        return elapsed >= self.connection_duration

    def get_remaining_connection_time(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.connection_start_time:
            return self.connection_duration

        elapsed = time.time() - self.connection_start_time
        return max(0, self.connection_duration - elapsed)

    async def connection_timer_task(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            while self.running:
                if self.should_reconnect():
                    self.logger.info("‚è∞ –í—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (10 –º–∏–Ω), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...")
                    await self.force_reconnect()
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(30)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ç–∞–π–º–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    async def message_timeout_task(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            while self.running:
                current_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (self.last_message_time is not None and
                    self.connection_established_time is not None and
                    current_time - self.connection_established_time > 30 and  # –ñ–¥–µ–º –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    current_time - self.last_message_time > self.message_timeout):

                    self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_timeout} —Å–µ–∫ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–æ–∫...")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–æ–∫
                    await self.force_reconnect()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def force_reconnect(self):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not hasattr(self, 'reconnect_attempts'):
                self.reconnect_attempts = 0
                self.last_connection_time = 0

            self.reconnect_attempts += 1
            current_time = time.time()

            self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts})...")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.websocket:
                try:
                    await self.websocket.close()
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                self.websocket = None

            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if self.last_connection_time > 0:
                time_since_last_connection = current_time - self.last_connection_time
                if time_since_last_connection < 5:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
                    delay = 5 - time_since_last_connection
                    self.logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ñ–¥–µ–º {delay:.1f} —Å–µ–∫...")
                    await asyncio.sleep(delay)

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if self.reconnect_attempts > 5:
                # –ü–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                delay = min(30, self.reconnect_attempts * 2)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                self.logger.warning(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ñ–¥–µ–º {delay} —Å–µ–∫...")
                await asyncio.sleep(delay)
            elif self.reconnect_attempts > 15:
                # –ü–æ—Å–ª–µ 15 –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
                self.logger.error("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
                self.running = False
                return
            else:
                # –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ø—ã—Ç–æ–∫ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
            try:
                connect_result = await self.connect()
                if connect_result:
                    self.logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                    self.reconnect_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    self.last_connection_time = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{self.reconnect_attempts} –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                    await asyncio.sleep(1)
            except AuthenticationPolicyViolation as e:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–∫–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self.logger.info(f"üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è
                await asyncio.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ #{self.reconnect_attempts}: {e}")
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(2)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            await asyncio.sleep(5)

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Eboshers Tracker...")
            self.logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–æ–ø–ª–µ–Ω–∏–π –µ–±–æ—à–µ—Ä–æ–≤")
            self.running = True

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)
            connected = await self.connect()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            timer_task = asyncio.create_task(self.connection_timer_task())
            message_timeout_task = asyncio.create_task(self.message_timeout_task())
            listen_task = asyncio.create_task(self.listen_for_messages())

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [listen_task, timer_task, message_timeout_task],
                return_when=asyncio.FIRST_COMPLETED
            )

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        except KeyboardInterrupt:
            self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
            self.running = False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
            import traceback
            self.logger.error(f"üìã Traceback: {traceback.format_exc()}")
        finally:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä...")
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self.running = False
        if self.websocket:
            try:
                await self.websocket.close()
                self.logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            self.websocket = None


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–±–æ—à–µ—Ä–æ–≤"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Eboshers Tracker...")
        logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Padre WebSocket –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–æ–ø–ª–µ–Ω–∏–π –µ–±–æ—à–µ—Ä–æ–≤")
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é —Å–∫–æ–ø–ª–µ–Ω–∏–π")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
        tracker = EboshersTracker()
        await tracker.start()

    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
