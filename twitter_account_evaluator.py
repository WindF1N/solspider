#!/usr/bin/env python3
"""
–°–ö–†–ò–ü–¢ –û–¶–ï–ù–ö–ò TWITTER –ê–ö–ö–ê–£–ù–¢–û–í
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Å–ø–∞–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–≤–∏—Ç–æ–≤
"""

import asyncio
import sys
import argparse
from datetime import datetime
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from pump_bot import analyze_author_page_contracts, should_notify_based_on_authors_unified
from logger_config import setup_logging
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger('twitter_evaluator')

class TwitterAccountEvaluator:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = []
        
    async def evaluate_single_account(self, username, load_from_profile=True):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–¥–∏–Ω Twitter –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ @{username}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ pump_bot —Ñ—É–Ω–∫—Ü–∏—é
            result = await analyze_author_page_contracts(username, load_from_profile=load_from_profile)
            
            # –î–æ–±–∞–≤–ª—è–µ–º username –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            result['username'] = username
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            # –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç contract_diversity –∏ total_contract_tweets
            unified_author_data = {
                'username': username,
                'contract_diversity': result.get('contract_diversity_percent', 0),
                'total_contract_tweets': result.get('total_tweets_on_page', 0),
                'max_contract_spam': result.get('max_contract_spam_percent', 0),
                'tweet_text': ''  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º-–±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            should_notify = should_notify_based_on_authors_unified([unified_author_data])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
            quality_category = self._get_quality_category(result, should_notify)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            evaluation = {
                'username': username,
                'timestamp': datetime.now().isoformat(),
                'total_tweets': result.get('total_tweets_on_page', 0),
                'unique_contracts': result.get('unique_contracts_on_page', 0),
                'diversity_percent': result.get('contract_diversity_percent', 0),
                'max_spam_percent': result.get('max_contract_spam_percent', 0),
                'is_spam': result.get('is_spam_likely', False),
                'should_notify': should_notify,
                'quality_category': quality_category,
                'recommendation': result.get('recommendation', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                'analysis': result.get('spam_analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                'adaptive_threshold': self._get_adaptive_threshold(result.get('total_tweets_on_page', 0)),
                'top_contracts': result.get('contracts_list', [])[:5]  # –¢–æ–ø-5 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            }
            
            self.results.append(evaluation)
            return evaluation
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ @{username}: {e}")
            error_result = {
                'username': username,
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'quality_category': 'ERROR',
                'should_notify': False
            }
            self.results.append(error_result)
            return error_result
    
    def _get_adaptive_threshold(self, total_tweets):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–≤–∏—Ç–æ–≤"""
        if total_tweets < 10:
            return 50  # –ú—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫
        elif total_tweets < 20:
            return 30  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –≤—ã–±–æ—Ä–æ–∫
        else:
            return 40  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–æ–∫
    
    def _get_quality_category(self, result, should_notify):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if result.get('error'):
            return 'ERROR'
        
        diversity_percent = result.get('contract_diversity_percent', 0)
        total_tweets = result.get('total_tweets_on_page', 0)
        
        if not should_notify:
            return 'SPAM'
        
        if total_tweets == 0:
            return 'NO_DATA'
        
        if diversity_percent == 0:
            return 'NO_CONTRACTS'
        
        if diversity_percent < 10:
            return 'EXCELLENT'  # –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = —Ñ–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
        elif diversity_percent < 20:
            return 'GOOD'       # –ù–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        elif diversity_percent < 30:
            return 'AVERAGE'    # –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        else:
            return 'POOR'       # –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    
    async def evaluate_multiple_accounts(self, usernames, load_from_profile=True):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(usernames)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [self.evaluate_single_account(username, load_from_profile) for username in usernames]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        return results
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print("\n" + "="*100)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–¶–ï–ù–ö–ò TWITTER –ê–ö–ö–ê–£–ù–¢–û–í")
        print("="*100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for result in self.results:
            category = result.get('quality_category', 'UNKNOWN')
            categories[category] = categories.get(category, 0) + 1
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        category_labels = {
            'EXCELLENT': 'üü¢ –û–¢–õ–ò–ß–ù–´–ï',
            'GOOD': 'üîµ –•–û–†–û–®–ò–ï', 
            'AVERAGE': 'üü° –°–†–ï–î–ù–ò–ï',
            'POOR': 'üü† –ü–õ–û–•–ò–ï',
            'SPAM': 'üî¥ –°–ü–ê–ú',
            'NO_CONTRACTS': '‚ö™ –ë–ï–ó –ö–û–ù–¢–†–ê–ö–¢–û–í',
            'NO_DATA': '‚ö´ –ù–ï–¢ –î–ê–ù–ù–´–•',
            'ERROR': '‚ùå –û–®–ò–ë–ö–ò'
        }
        
        for category, count in sorted(categories.items()):
            label = category_labels.get(category, category)
            percentage = (count / len(self.results)) * 100
            print(f"   {label}: {count} ({percentage:.1f}%)")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 100)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–ª—É—á—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        quality_order = ['EXCELLENT', 'GOOD', 'AVERAGE', 'POOR', 'NO_CONTRACTS', 'NO_DATA', 'SPAM', 'ERROR']
        sorted_results = sorted(self.results, key=lambda x: quality_order.index(x.get('quality_category', 'ERROR')))
        
        for result in sorted_results:
            self._print_account_result(result)
    
    def _print_account_result(self, result):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        username = result.get('username', 'Unknown')
        category = result.get('quality_category', 'UNKNOWN')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_emoji = {
            'EXCELLENT': 'üü¢',
            'GOOD': 'üîµ', 
            'AVERAGE': 'üü°',
            'POOR': 'üü†',
            'SPAM': 'üî¥',
            'NO_CONTRACTS': '‚ö™',
            'NO_DATA': '‚ö´',
            'ERROR': '‚ùå'
        }
        
        emoji = category_emoji.get(category, '‚ùì')
        
        if result.get('error'):
            print(f"{emoji} @{username:20} | {category:12} | –û–®–ò–ë–ö–ê: {result['error']}")
            return
        
        total_tweets = result.get('total_tweets', 0)
        unique_contracts = result.get('unique_contracts', 0)
        diversity = result.get('diversity_percent', 0)
        threshold = result.get('adaptive_threshold', 0)
        should_notify = result.get('should_notify', False)
        
        notify_status = "‚úÖ –†–ê–ó–†–ï–®–Å–ù" if should_notify else "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù"
        
        print(f"{emoji} @{username:20} | {category:12} | {total_tweets:3} —Ç–≤–∏—Ç–æ–≤ | {unique_contracts:3} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ | {diversity:5.1f}% | –ü–æ—Ä–æ–≥: {threshold}% | {notify_status}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if category in ['EXCELLENT', 'GOOD'] and result.get('top_contracts'):
            contracts = result['top_contracts'][:3]  # –¢–æ–ø-3
            contract_info = ", ".join([f"{c['contract'][:8]}...({c['mentions']})" for c in contracts])
            print(f"   üîó –¢–æ–ø-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {contract_info}")
    
    def save_results(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"twitter_evaluation_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
    parser.add_argument('usernames', nargs='+', help='–°–ø–∏—Å–æ–∫ username –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ @)')
    parser.add_argument('--no-profile', action='store_true', help='–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)')
    parser.add_argument('--save', type=str, help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª')
    parser.add_argument('--quiet', '-q', action='store_true', help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)')
    
    args = parser.parse_args()
    
    if not args.quiet:
        print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–ê–ß–ï–°–¢–í–ê TWITTER –ê–ö–ö–ê–£–ù–¢–û–í")
        print("="*50)
        print(f"üìã –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {', '.join('@' + u for u in args.usernames)}")
        print(f"‚ö° –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π (–±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π)' if args.no_profile else '–ü–æ–ª–Ω—ã–π (—Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏)'}")
        print()
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ü–µ–Ω—â–∏–∫
    evaluator = TwitterAccountEvaluator()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    load_profiles = not args.no_profile
    await evaluator.evaluate_multiple_accounts(args.usernames, load_from_profile=load_profiles)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    evaluator.print_summary()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.save:
        evaluator.save_results(args.save)
    elif len(args.usernames) > 1:  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        evaluator.save_results()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 