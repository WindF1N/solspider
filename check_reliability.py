#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Nitter
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–æ–≤—Ç–æ—Ä—ã, —Ä–æ—Ç–∞—Ü–∏—é –¥–æ–º–µ–Ω–æ–≤, –ø—Ä–æ–∫—Å–∏, –∫—É–∫–∏, timeout handling
"""

import os
import sys
import json
from datetime import datetime

def check_twitter_analysis_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ Twitter –∞–Ω–∞–ª–∏–∑"""
    print("üîç –ü–†–û–í–ï–†–ö–ê 1: –°—Ç–∞—Ç—É—Å Twitter –∞–Ω–∞–ª–∏–∑–∞")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    contract_search_disabled = os.getenv('CONTRACT_SEARCH_DISABLED', 'false').lower() == 'true'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ pump_bot.py –Ω–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
    try:
        with open('pump_bot.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        hardcoded_disabled = '# –û–¢–ö–õ–Æ–ß–ï–ù: Twitter –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω' in content
        
        print(f"üìä CONTRACT_SEARCH_DISABLED: {contract_search_disabled}")
        print(f"üìä –ñ–µ—Å—Ç–∫–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–¥–µ: {hardcoded_disabled}")
        
        if hardcoded_disabled:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Twitter –∞–Ω–∞–ª–∏–∑ –∂–µ—Å—Ç–∫–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–¥–µ!")
            print("üîß –†–ï–®–ï–ù–ò–ï: –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–∑ pump_bot.py")
            return False
        elif contract_search_disabled:
            print("‚ö†Ô∏è Twitter –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        else:
            print("‚úÖ Twitter –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def check_domain_rotation_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–æ–º–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏"""
    print("\nüîÑ –ü–†–û–í–ï–†–ö–ê 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏")
    print("-" * 50)
    
    files_to_check = {
        'pump_bot.py': ['get_next_nitter_domain', 'record_nitter_request_result'],
        'duplicate_groups_manager.py': ['get_next_nitter_domain'],
        'background_monitor.py': ['get_next_nitter_domain']
    }
    
    integration_status = {}
    
    for filename, functions in files_to_check.items():
        if not os.path.exists(filename):
            print(f"‚ö†Ô∏è {filename}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            integration_status[filename] = False
            continue
            
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            file_integrated = all(func in content for func in functions)
            integration_status[filename] = file_integrated
            
            if file_integrated:
                print(f"‚úÖ {filename}: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"‚ùå {filename}: –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                missing = [func for func in functions if func not in content]
                print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing)}")
                
        except Exception as e:
            print(f"‚ùå {filename}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
            integration_status[filename] = False
    
    return integration_status

def check_retry_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    print("\nüîÅ –ü–†–û–í–ï–†–ö–ê 3: –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤")
    print("-" * 35)
    
    try:
        with open('pump_bot.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤
        retry_patterns = [
            'retry_count < 3',
            'retry_count + 1',
            'await search_single_query.*retry_count',
            'if retry_count <'
        ]
        
        found_patterns = []
        for pattern in retry_patterns:
            if pattern.replace('.*', '') in content or 'retry' in content:
                found_patterns.append(pattern)
        
        if found_patterns:
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–∞")
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {len(found_patterns)}/4")
        else:
            print("‚ùå –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≤
        error_types = ['TimeoutError', 'ConnectionError', '429', 'blocked']
        found_errors = [err for err in error_types if err in content]
        
        print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏: {', '.join(found_errors)}")
        
        return len(found_patterns) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def check_proxy_and_cookies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê 4: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏")
    print("-" * 40)
    
    components = {
        'dynamic_cookie_rotation.py': '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫—É–∫–∏',
        'anubis_handler.py': '–û–±—Ä–∞–±–æ—Ç–∫–∞ Anubis Challenge',
        'nitter_domain_rotator.py': '–†–æ—Ç–∞—Ü–∏—è –¥–æ–º–µ–Ω–æ–≤'
    }
    
    for filename, description in components.items():
        if os.path.exists(filename):
            print(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {description}: –ù–ï –Ω–∞–π–¥–µ–Ω ({filename})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    proxy_files = ['proxies.txt', 'proxy_list.txt', 'config.py']
    proxy_found = any(os.path.exists(f) for f in proxy_files)
    
    if proxy_found:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return True

def check_error_handling():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\n‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("-" * 35)
    
    try:
        with open('pump_bot.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        error_handling_features = {
            'try:': 'Try-catch –±–ª–æ–∫–∏',
            'except Exception': '–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π', 
            'except TimeoutError': '–û–±—Ä–∞–±–æ—Ç–∫–∞ timeout',
            'except aiohttp': '–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫',
            'logger.error': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫',
            'logger.warning': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'
        }
        
        for pattern, description in error_handling_features.items():
            if pattern in content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ö†Ô∏è {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def check_recent_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏"""
    print("\nüìã –ü–†–û–í–ï–†–ö–ê 6: –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤")
    print("-" * 40)
    
    log_files = ['logs/solspider.log', 'logs/errors.log']
    
    for log_file in log_files:
        if not os.path.exists(log_file):
            print(f"‚ö†Ô∏è {log_file}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                recent_lines = lines[-50:] if len(lines) > 50 else lines
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            error_counts = {
                'TimeoutError': 0,
                '429': 0,
                'ConnectionError': 0,
                'challenge': 0,
                'blocked': 0
            }
            
            for line in recent_lines:
                for error_type in error_counts:
                    if error_type in line:
                        error_counts[error_type] += 1
            
            print(f"üìä {log_file}:")
            for error_type, count in error_counts.items():
                if count > 0:
                    emoji = "üî¥" if count > 5 else "‚ö†Ô∏è" if count > 2 else "üü°"
                    print(f"   {emoji} {error_type}: {count}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")

def generate_recommendations():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ù–ê–î–ï–ñ–ù–û–°–¢–ò")
    print("=" * 50)
    
    recommendations = [
        "1. üîß –í–∫–ª—é—á–∏—Ç—å Twitter –∞–Ω–∞–ª–∏–∑ (—É–±—Ä–∞—Ç—å –∂–µ—Å—Ç–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)",
        "2. üîÑ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –¥–æ–º–µ–Ω–æ–≤ –≤ duplicate_groups_manager.py", 
        "3. ‚è∞ –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ timeout handling",
        "4. üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫",
        "5. üìä –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–º–µ–Ω–æ–≤",
        "6. üõ°Ô∏è –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É Anubis Challenge",
        "7. üìã –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"
    ]
    
    for rec in recommendations:
        print(rec)
    
    print(f"\nüí° –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ:")
    print("   ‚úÖ 3+ –¥–æ–º–µ–Ω–∞ –≤ —Ä–æ—Ç–∞—Ü–∏–∏")
    print("   ‚úÖ 3+ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞") 
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    print("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π")
    print("   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–º–µ–Ω–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê–î–ï–ñ–ù–û–°–¢–ò NITTER")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {}
    
    results['twitter_analysis'] = check_twitter_analysis_status()
    results['domain_rotation'] = check_domain_rotation_integration()
    results['retry_logic'] = check_retry_logic()
    results['proxy_cookies'] = check_proxy_and_cookies()
    results['error_handling'] = check_error_handling()
    
    check_recent_logs()
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 40)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    percentage = (passed / total) * 100
    
    if percentage >= 80:
        status = "üü¢ –û–¢–õ–ò–ß–ù–û"
    elif percentage >= 60:
        status = "üü° –•–û–†–û–®–û"
    else:
        status = "üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
    
    print(f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total} ({percentage:.0f}%)")
    print(f"üéØ –°—Ç–∞—Ç—É—Å: {status}")
    
    generate_recommendations()
    
    return results

if __name__ == "__main__":
    main() 