#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from database import get_db_manager, Token
from pump_bot import search_single_query, send_telegram, send_telegram_photo, extract_tweet_authors, TWITTER_AUTHOR_BLACKLIST, analyze_author_contract_diversity, analyze_author_page_contracts
from cookie_rotation import background_proxy_cookie_rotator, background_cookie_rotator
from logger_config import setup_logging
from twitter_profile_parser import TwitterProfileParser
import re
import aiohttp
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

class BackgroundTokenMonitor:
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self):
        self.db_manager = get_db_manager()
        self.running = False
        self.max_token_age_minutes = 20  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–æ–∫–µ–Ω—ã –Ω–µ —Å—Ç–∞—Ä—à–µ 20 –º–∏–Ω—É—Ç
        self.batch_delay = 0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è)
        self.consecutive_errors = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        self.batch_mode = False  # –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π Twitter (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ async —Ñ—É–Ω–∫—Ü–∏—è—Ö)
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Nitter –∑–∞–ø—Ä–æ—Å–æ–≤ (cookie –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
    
    def get_tokens_to_monitor(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –¥–∞–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ)"""
        session = self.db_manager.Session()
        try:
            # –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–µ –±–æ–ª–µ–µ 20 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (—É–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ twitter_contract_tweets)
            cutoff_time = datetime.utcnow() - timedelta(minutes=self.max_token_age_minutes)
            
            tokens = session.query(Token).filter(
                Token.created_at >= cutoff_time,           # –ù–µ —Å—Ç–∞—Ä—à–µ 20 –º–∏–Ω—É—Ç
                # –£–ë–†–ê–õ–ò –§–ò–õ–¨–¢–†: Token.twitter_contract_tweets == 0,  # –¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–º –í–°–ï —Ç–æ–∫–µ–Ω—ã
                Token.mint.isnot(None),                    # –ï—Å—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                Token.symbol.isnot(None)                   # –ï—Å—Ç—å —Å–∏–º–≤–æ–ª
            ).order_by(Token.created_at.desc()).all()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ –∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            new_tokens = [t for t in tokens if t.twitter_contract_tweets == 0]
            found_tokens = [t for t in tokens if t.twitter_contract_tweets > 0]
            
            logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {len(new_tokens)} –Ω–æ–≤—ã—Ö + {len(found_tokens)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö = {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
            return tokens
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return []
        finally:
            session.close()
    
    async def check_contract_mentions(self, token, proxy, cycle_cookie):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–û–í–´–• —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∞–≤—Ç–æ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
            tweets_count, engagement, authors = await self.get_contract_mentions_with_authors(token, proxy, cycle_cookie)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 0,0 - –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            if tweets_count == 0 and engagement == 0:
                logger.debug(f"üîç –ö–æ–Ω—Ç—Ä–∞–∫—Ç {token.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Twitter (–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)")
                return False
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            previous_tweets = token.twitter_contract_tweets or 0
            new_tweets_found = tweets_count - previous_tweets
            
            if new_tweets_found > 0:
                logger.info(f"üéØ –ù–û–í–´–ï —Ç–≤–∏—Ç—ã –¥–ª—è {token.symbol}! –ë—ã–ª–æ: {previous_tweets}, —Å—Ç–∞–ª–æ: {tweets_count} (+{new_tweets_found}), –∞–≤—Ç–æ—Ä–æ–≤: {len(authors)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                session = self.db_manager.Session()
                try:
                    db_token = session.query(Token).filter_by(id=token.id).first()
                    if db_token:
                        db_token.twitter_contract_tweets = tweets_count
                        db_token.twitter_contract_found = True
                        db_token.updated_at = datetime.utcnow()
                        session.commit()
                        
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ë–î –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.symbol}: {previous_tweets} ‚Üí {tweets_count}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        should_notify = self.should_notify_based_on_authors(authors)
                        
                        if should_notify:
                            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            if db_token.notification_sent and previous_tweets == 0:
                                logger.info(f"üö´ –§–æ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {token.symbol} –ø—Ä–æ–ø—É—â–µ–Ω–æ - —É–∂–µ –±—ã–ª–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                            else:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ –ù–û–í–´–• —Ç–≤–∏—Ç–∞—Ö
                                is_first_discovery = previous_tweets == 0
                                await self.send_contract_alert(token, tweets_count, engagement, authors, is_first_discovery)
                        else:
                            logger.info(f"üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {token.symbol} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –≤—Å–µ –∞–≤—Ç–æ—Ä—ã —è–≤–ª—è—é—Ç—Å—è —Å–ø–∞–º–µ—Ä–∞–º–∏")
                        
                except Exception as e:
                    session.rollback()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è {token.symbol}: {e}")
                finally:
                    session.close()
                    
                return True
            elif tweets_count == previous_tweets and tweets_count > 0:
                logger.debug(f"üîç {token.symbol}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ({tweets_count})")
                return False
            else:
                logger.debug(f"üîç –ö–æ–Ω—Ç—Ä–∞–∫—Ç {token.symbol} –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Twitter")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {token.symbol}: {e}")
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.consecutive_errors += 1
            return False
    
    def should_notify_based_on_authors(self, authors):
        """
        –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–∞—Ö,
        –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º (100% —Å–ø–∞–º)
        –í–ê–ñ–ù–û: –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
        """
        if not authors:
            logger.info(f"üö´ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Ç–≤–∏—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return False  # –ù–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê
        blacklisted_authors = 0
        for author in authors:
            username = author.get('username', '').lower()
            if username in TWITTER_AUTHOR_BLACKLIST:
                blacklisted_authors += 1
                logger.info(f"üö´ –ê–≤—Ç–æ—Ä @{username} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ï—Å–ª–∏ –í–°–ï –∞–≤—Ç–æ—Ä—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –±–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if blacklisted_authors == len(authors):
            logger.info(f"üö´ –í–°–ï –∞–≤—Ç–æ—Ä—ã ({len(authors)}) –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –±–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return False
        
        pure_spammers = 0  # –ê–≤—Ç–æ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—à—É—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        total_authors = len(authors)
        valid_authors = total_authors - blacklisted_authors  # –ê–≤—Ç–æ—Ä—ã –ù–ï –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –±–ª–æ–∫–∏—Ä—É–µ–º
        if valid_authors <= 0:
            logger.info(f"üö´ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ - –±–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return False
        
        for author in authors:
            diversity_percent = author.get('contract_diversity', 0)
            spam_percent = author.get('max_contract_spam', 0)
            total_tweets = author.get('total_contract_tweets', 0)
            username = author.get('username', 'Unknown')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Å–ø–∞–º–∞
            if username.lower() in TWITTER_AUTHOR_BLACKLIST:
                logger.info(f"üö´ @{username}: –í –ß–ï–†–ù–û–ú –°–ü–ò–°–ö–ï - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ø–∞–º–∞")
                continue
            
            # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –ø–∏—à–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ 90%+ —Å–æ–æ–±—â–µ–Ω–∏–π = —á–∏—Å—Ç—ã–π —Å–ø–∞–º–µ—Ä
            if total_tweets >= 3 and (spam_percent >= 90 or diversity_percent >= 90):
                pure_spammers += 1
                logger.info(f"üö´ @{username}: –ß–ò–°–¢–´–ô –°–ü–ê–ú–ï–† - –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ {max(spam_percent, diversity_percent):.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                logger.info(f"‚úÖ @{username}: –ù–û–†–ú–ê–õ–¨–ù–´–ô –ê–í–¢–û–† - –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ {max(spam_percent, diversity_percent):.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –í–°–ï –ù–ï–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –∞–≤—Ç–æ—Ä—ã - —á–∏—Å—Ç—ã–µ —Å–ø–∞–º–µ—Ä—ã
        should_notify = pure_spammers < valid_authors
        
        logger.info(f"üìä –£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–í–¢–û–†–û–í:")
        logger.info(f"   üë• –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤: {total_authors}")
        logger.info(f"   üö´ –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {blacklisted_authors}")
        logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {valid_authors}")
        logger.info(f"   üö´ –ß–∏—Å—Ç—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤ (90%+ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤): {pure_spammers}")
        logger.info(f"   ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {valid_authors - pure_spammers}")
        logger.info(f"   üéØ –†–ï–®–ï–ù–ò–ï: {'–û–¢–ü–†–ê–í–ò–¢–¨' if should_notify else '–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨'}")
        
        if not should_notify:
            logger.info(f"üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –í–°–ï –∞–≤—Ç–æ—Ä—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å—Ç—ã–º–∏ —Å–ø–∞–º–µ—Ä–∞–º–∏")
        else:
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ - –µ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–∞—Ö")
        
        return should_notify

    async def send_contract_alert(self, token, tweets_count, engagement, authors, is_first_discovery=True):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –≤ Twitter"""
        try:
            emoji = "üî•" if is_first_discovery else "üö®"
            title = "–ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù –í TWITTER!" if is_first_discovery else f"–ù–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ö–û–ù–¢–†–ê–ö–¢–£! +{tweets_count - (token.twitter_contract_tweets or 0)} –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤!"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            token_created_at = token.created_at.strftime('%Y-%m-%d %H:%M:%S') if token.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            message = (
                f"{emoji} <b>{title}</b>\n\n"
                f"ü™ô <b>–¢–æ–∫–µ–Ω:</b> {token.symbol or 'Unknown'}\n"
                f"üí∞ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {token.name or 'N/A'}\n"
                f"üìÑ <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{token.mint}</code>\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {token_created_at}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–∏—Ç–∞—Ö
            if is_first_discovery:
                action_text = f"üì± <b>–¢–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º:</b> {tweets_count}"
            else:
                previous_tweets = token.twitter_contract_tweets or 0
                new_tweets = tweets_count - previous_tweets
                action_text = f"üì± <b>–í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤:</b> {tweets_count} (+{new_tweets} –Ω–æ–≤—ã—Ö)"
            
            message += f"\nüìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {engagement}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º Market Cap —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0
            if token.market_cap and token.market_cap > 0:
                message += f"üìà <b>–¢–µ–∫—É—â–∏–π Market Cap:</b> ${token.market_cap:,.0f}\n"
            
            message += (
                f"\n{action_text}\n"
                f"üìà <b>–í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–æ–∫–µ–Ω—É</b>\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Ç–≤–∏—Ç–æ–≤
            if authors:
                total_followers = sum([author.get('followers_count', 0) for author in authors])
                verified_count = sum([1 for author in authors if author.get('is_verified', False)])
                
                message += f"<b>üë• –ê–í–¢–û–†–´ –¢–í–ò–¢–û–í –° –ö–û–ù–¢–†–ê–ö–¢–û–ú ({len(authors)} –∞–≤—Ç–æ—Ä–æ–≤):</b>\n"
                message += f"   üìä –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                if verified_count > 0:
                    message += f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_count}\n"
                message += "\n"
                
                for i, author in enumerate(authors[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∞–≤—Ç–æ—Ä–æ–≤
                    username = author.get('username', 'Unknown')
                    display_name = author.get('display_name', username)
                    followers = author.get('followers_count', 0)
                    verified = "‚úÖ" if author.get('is_verified', False) else ""
                    tweet_text = author.get('tweet_text', '')  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞
                    tweet_date = author.get('tweet_date', '')  # –î–∞—Ç–∞ —Ç–≤–∏—Ç–∞
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–º–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                    diversity_percent = author.get('contract_diversity', 0)
                    spam_percent = author.get('max_contract_spam', 0)
                    diversity_recommendation = author.get('diversity_recommendation', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    spam_analysis = author.get('spam_analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    is_spam_likely = author.get('is_spam_likely', False)
                    total_contract_tweets = author.get('total_contract_tweets', 0)
                    unique_contracts = author.get('unique_contracts_count', 0)
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∞ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = —Ö–æ—Ä–æ—à–æ)
                    spam_indicator = ""
                    if spam_percent >= 80:
                        spam_indicator = " üî•"  # –í—Å–ø—ã—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    elif spam_percent >= 60:
                        spam_indicator = " ‚≠ê"  # –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
                    elif spam_percent >= 40:
                        spam_indicator = " üü°"  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
                    elif is_spam_likely:
                        spam_indicator = " üö´"  # –ú–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                    
                    message += f"{i+1}. <b>@{username}</b> {verified}{spam_indicator}\n"
                    if display_name != username:
                        message += f"   üìù {display_name}\n"
                    
                    # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                    following_count = author.get('following_count', 0)
                    tweets_count = author.get('tweets_count', 0)
                    likes_count = author.get('likes_count', 0)
                    join_date = author.get('join_date', '')
                    
                    if followers > 0 or following_count > 0 or tweets_count > 0:
                        message += f"   üë• {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ | {following_count:,} –ø–æ–¥–ø–∏—Å–æ–∫\n"
                        message += f"   üìù {tweets_count:,} —Ç–≤–∏—Ç–æ–≤ | ‚ù§Ô∏è {likes_count:,} –ª–∞–π–∫–æ–≤\n"
                        if join_date:
                            message += f"   üìÖ –°–æ–∑–¥–∞–Ω: {join_date}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if tweet_date:
                        message += f"   üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_date}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–≤–∏—Ç–∞
                    tweet_type = author.get('tweet_type', '–¢–≤–∏—Ç')
                    type_emoji = "üí¨" if tweet_type == "–û—Ç–≤–µ—Ç" else "üê¶"
                    message += f"   {type_emoji} –¢–∏–ø: {tweet_type}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                    historical_data = author.get('historical_data', {})
                    if historical_data and historical_data.get('total_mentions', 0) > 0:
                        total_mentions = historical_data.get('total_mentions', 0)
                        unique_tokens = historical_data.get('unique_tokens', 0)
                        recent_7d = historical_data.get('recent_mentions_7d', 0)
                        recent_30d = historical_data.get('recent_mentions_30d', 0)
                        
                        message += f"   üìä –ò—Å—Ç–æ—Ä–∏—è: {total_mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ({unique_tokens} —Ç–æ–∫–µ–Ω–æ–≤)\n"
                        if recent_7d > 0 or recent_30d > 0:
                            message += f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {recent_7d} –∑–∞ 7–¥, {recent_30d} –∑–∞ 30–¥\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                    if total_contract_tweets > 0:
                        message += f"   üìä –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {unique_contracts} –∏–∑ {total_contract_tweets} —Ç–≤–∏—Ç–æ–≤ (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {spam_percent:.1f}%)\n"
                        message += f"   üéØ –ê–Ω–∞–ª–∏–∑: {spam_analysis}\n"
                    
                    # –í–µ—Å—å —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞ –≤ —Ü–∏—Ç–∞—Ç–µ
                    if tweet_text:
                        message += f"   üí¨ <blockquote>{tweet_text}</blockquote>\n"
                message += "\n"
            
            message += f"‚ö° <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!</b>"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            keyboard = [
                [
                    {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{token.bonding_curve_key or token.mint}"},
                    {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{token.mint}"}
                ],
                [
                    {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{token.mint}"}
                ],
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–∫–µ–Ω–∞
            token_image_url = f"https://axiomtrading.sfo3.cdn.digitaloceanspaces.com/{token.mint}.webp"
            
            send_telegram_photo(token_image_url, message, keyboard)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ {token.symbol} –≤ Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def monitor_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+cookie –¥–ª—è –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞
            proxy, cycle_cookie = background_proxy_cookie_rotator.get_cycle_proxy_cookie()
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–æ–≤–æ–π —Å–≤—è–∑–∫–æ–π –ø—Ä–æ–∫—Å–∏+cookie...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            tokens = self.get_tokens_to_monitor()
            
            if not tokens:
                logger.debug("üì≠ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
                return
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if self.consecutive_errors > 10:
                batch_size = 15  # –£–º–µ–Ω—å—à–µ–Ω—ã –±–∞—Ç—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö: 50‚Üí15
                self.batch_mode = True
                logger.warning(f"üö® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –±–∞—Ç—á–∏ –ø–æ {batch_size} —Ç–æ–∫–µ–Ω–æ–≤")
            elif len(tokens) > 20:
                batch_size = 60  # –£–≤–µ–ª–∏—á–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 30‚Üí60
                self.batch_mode = True
                logger.info(f"‚ö° –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º: –±–∞—Ç—á–∏ –ø–æ {batch_size} —Ç–æ–∫–µ–Ω–æ–≤ (–æ—á–µ—Ä–µ–¥—å: {len(tokens)})")
            else:
                batch_size = len(tokens)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ä–∞–∑—É
                self.batch_mode = False
            
            found_contracts = 0
            
            for i in range(0, len(tokens), batch_size):
                batch = tokens[i:i + batch_size]
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á {i//batch_size + 1}: —Ç–æ–∫–µ–Ω—ã {i+1}-{min(i+batch_size, len(tokens))}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–¥–Ω–æ–π —Å–≤—è–∑–∫–æ–π –ø—Ä–æ–∫—Å–∏+cookie –¥–ª—è –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞
                tasks = [self.check_contract_mentions(token, proxy, cycle_cookie) for token in batch]
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –æ—à–∏–±–∫–∏
                batch_errors = 0
                for result in results:
                    if result is True:
                        found_contracts += 1
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                        self.consecutive_errors = max(0, self.consecutive_errors - 1)
                    elif isinstance(result, Exception):
                        batch_errors += 1
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < len(tokens):
                    if self.batch_mode:
                        # –í –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—É–∑—ã
                        pause = 0.1 if batch_errors < len(batch) // 2 else 0.5
                    else:
                        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –±–µ–∑ –ø–∞—É–∑
                        pause = 0
                    
                    if pause > 0:
                        await asyncio.sleep(pause)
                
            elapsed = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            tokens_per_second = len(tokens) / elapsed if elapsed > 0 else 0
            mode_info = f"[{'–ü–ê–ö–ï–¢–ù–´–ô' if self.batch_mode else '–û–ë–´–ß–ù–´–ô'} —Ä–µ–∂–∏–º]"
            
            logger.info(f"‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å {mode_info}")
            logger.info(f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tokens_per_second:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫, –Ω–∞–π–¥–µ–Ω–æ: {found_contracts}")
            logger.info(f"üîß –û—à–∏–±–∫–∏ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.consecutive_errors += 1
    
    async def emergency_clear_monitor_overload(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if self.consecutive_errors > 50:  # –ë–æ–ª—å—à–µ 50 = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                logger.warning(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–ï–†–ï–ì–†–£–ó–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {self.consecutive_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥!")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É
                self.consecutive_errors = self.consecutive_errors // 2
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.batch_mode = True
                
                logger.warning(f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {self.consecutive_errors} –æ—à–∏–±–æ–∫, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert_message = (
                    f"üö® <b>–≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b>\n\n"
                    f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ—à–∏–±–æ–∫\n"
                    f"üîß <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                    f"üìä <b>–û—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã:</b> {self.consecutive_errors * 2} ‚Üí {self.consecutive_errors}\n\n"
                    f"üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —É—Å–∏–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ</b>"
                )
                send_telegram(alert_message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        start_message = (
            f"ü§ñ <b>–ù–ï–ü–†–ï–†–´–í–ù–´–ô –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–©–ï–ù!</b>\n\n"
            f"üîç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º:</b> –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter\n"
            f"‚ö° <b>–†–µ–∂–∏–º:</b> –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ç–≤–∏—Ç–∞\n"
            f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–æ–∫–µ–Ω—ã:</b> –Ω–µ —Å—Ç–∞—Ä—à–µ {self.max_token_age_minutes} –º–∏–Ω—É—Ç\n"
            f"üîÑ <b>–†–æ—Ç–∞—Ü–∏—è:</b> 10 cookies –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            f"üö® <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–≤–∏—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º\n"
            f"üéØ <b>–¶–µ–ª—å:</b> –ø–æ–ª–Ω—ã–π –æ—Ö–≤–∞—Ç —Ä–∞—Å—Ç—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞\n\n"
            f"üöÄ <b>–ì–æ—Ç–æ–≤ –ª–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞!</b>"
        )
        send_telegram(start_message)
        
        monitor_cycle_count = 0
        while self.running:
            try:
                await self.monitor_cycle()
                monitor_cycle_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if monitor_cycle_count % 10 == 0:
                    await self.emergency_clear_monitor_overload()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                # –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É
                logger.info(f"‚ö° –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞... (#{monitor_cycle_count})")
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                self.consecutive_errors += 1
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    async def get_contract_mentions_with_authors(self, token, proxy, cycle_cookie):
        """–ü–æ–ª—É—á–∞–µ—Ç HTML –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ—Ä–æ–≤ –° –ë–´–°–¢–†–´–ú–ò –¢–ê–ô–ú–ê–£–¢–ê–ú–ò"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –∏ —É–±–∏—Ä–∞–µ–º –ø–æ–∏—Å–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏ (UTC)
            from datetime import datetime, timedelta
            yesterday = (datetime.utcnow() - timedelta(days=1)).strftime('%Y-%m-%d')
            
            # –î–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
            urls = [
                f"https://nitter.tiekoetter.com/search?f=tweets&q={token.mint}&since={yesterday}&until=&near="
            ]
            
            headers_with_cookie = self.headers.copy()
            headers_with_cookie['Cookie'] = cycle_cookie
            
            all_authors = []
            tweets_count = 0
            engagement = 0
            
            for url in urls:
                try:
                    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –±—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥ (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º pump_bot)
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    connector = None
                    request_kwargs = {}
                    if proxy:
                        try:
                            # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API (aiohttp 3.8+)
                            connector = aiohttp.ProxyConnector.from_url(proxy)
                            proxy_info = proxy.split('@')[1] if '@' in proxy else proxy
                            logger.debug(f"üåê –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ ProxyConnector: {proxy_info}")
                        except AttributeError:
                            # –î–ª—è aiohttp 3.9.1 - –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ get()
                            connector = aiohttp.TCPConnector()
                            request_kwargs['proxy'] = proxy
                            proxy_info = proxy.split('@')[1] if '@' in proxy else proxy
                            logger.debug(f"üåê –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞–ø—Ä—è–º—É—é: {proxy_info}")
                    
                    async with aiohttp.ClientSession(connector=connector) as session:
                        async with session.get(url, headers=headers_with_cookie, timeout=5, **request_kwargs) as response:
                            if response.status == 200:
                                html = await response.text()
                                soup = BeautifulSoup(html, 'html.parser')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                                title = soup.find('title')
                                if title and 'Making sure you\'re not a bot!' in title.get_text():
                                    logger.error(f"ü§ñ –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–ª—è {token.symbol}")
                                    logger.error(f"üìã –ü–†–ò–ß–ò–ù–ê: –∑–∞—â–∏—Ç–∞ Nitter –æ—Ç –±–æ—Ç–æ–≤ ('Making sure you're not a bot!')")
                                    logger.error(f"üîß –î–ï–ô–°–¢–í–ò–ï: —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookie")
                                    logger.error(f"üç™ Cookie: {cycle_cookie}")
                                    continue
                                
                                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–≤–∏—Ç—ã
                                tweets = soup.find_all('div', class_='timeline-item')
                                tweets_count += len(tweets)
                                
                                # –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã
                                if tweets:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ —Ç–≤–∏—Ç–∞
                                    for tweet in tweets:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ retweet-header - –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —ç—Ç–æ —Ä–µ—Ç–≤–∏—Ç
                                        retweet_header = tweet.find('div', class_='retweet-header')
                                        if retweet_header:
                                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Ç–≤–∏—Ç—ã
                                        
                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
                                        author_link = tweet.find('a', class_='username')
                                        if author_link:
                                            author_username = author_link.get_text(strip=True).replace('@', '')
                                            
                                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–≤–∏—Ç–∞
                                            replying_to = tweet.find('div', class_='replying-to')
                                            tweet_type = "–û—Ç–≤–µ—Ç" if replying_to else "–¢–≤–∏—Ç"
                                            
                                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞
                                            tweet_content = tweet.find('div', class_='tweet-content')
                                            tweet_text = tweet_content.get_text(strip=True) if tweet_content else ""
                                            
                                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Ç–≤–∏—Ç–∞
                                            tweet_date = tweet.find('span', class_='tweet-date')
                                            tweet_date_text = ""
                                            if tweet_date:
                                                # –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å –¥–∞—Ç–æ–π
                                                date_link = tweet_date.find('a')
                                                if date_link:
                                                    tweet_date_text = date_link.get('title')
                                                else:
                                                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
                                                    tweet_date_text = tweet_date.get_text(strip=True)
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —Ç–≤–∏—Ç–µ
                                            if token.mint in tweet_text:
                                                all_authors.append({
                                                    'username': author_username,
                                                    'tweet_text': tweet_text,
                                                    'tweet_type': tweet_type,
                                                    'tweet_date': tweet_date_text,
                                                    'query': token.mint
                                                })
                                    
                                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                                    for tweet in tweets:
                                        stats = tweet.find_all('span', class_='tweet-stat')
                                        for stat in stats:
                                            icon_container = stat.find('div', class_='icon-container')
                                            if icon_container:
                                                text = icon_container.get_text(strip=True)
                                                numbers = re.findall(r'\d+', text)
                                                if numbers:
                                                    engagement += int(numbers[0])
                                
                                # –£–°–ü–ï–•: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                                self.consecutive_errors = max(0, self.consecutive_errors - 1)
                                
                            elif response.status == 429:
                                logger.warning(f"üö´ –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: 429 –û–®–ò–ë–ö–ê –¥–ª—è {token.symbol}")
                                logger.warning(f"üìã –ü–†–ò–ß–ò–ù–ê: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Nitter —Å–µ—Ä–≤–µ—Ä—É")
                                logger.warning(f"üîß –î–ï–ô–°–¢–í–ò–ï: –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–∞")
                                self.consecutive_errors += 1
                                continue
                            else:
                                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status} –¥–ª—è {token.symbol}")
                                self.consecutive_errors += 1
                                continue
                                
                except asyncio.TimeoutError:
                    logger.warning(f"‚è∞ –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: –¢–ê–ô–ú–ê–£–¢ –¥–ª—è {token.symbol}")
                    logger.warning(f"üìã –ü–†–ò–ß–ò–ù–ê: –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç Nitter —Å–µ—Ä–≤–µ—Ä–∞ (>5 —Å–µ–∫—É–Ω–¥)")
                    logger.warning(f"üîß –î–ï–ô–°–¢–í–ò–ï: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                    self.consecutive_errors += 1
                    continue
                except Exception as e:
                    # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –í –§–û–ù–û–í–û–ú –ú–û–ù–ò–¢–û–†–ï
                    error_type = type(e).__name__
                    error_msg = str(e)
                    
                    if "ConnectionError" in error_type:
                        logger.error(f"üîå –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø –¥–ª—è {token.symbol}")
                        logger.error(f"üìã –ü–†–ò–ß–ò–ù–ê: —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ Nitter —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    elif "SSLError" in error_type:
                        logger.error(f"üîí –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: SSL –û–®–ò–ë–ö–ê –¥–ª—è {token.symbol}")
                        logger.error(f"üìã –ü–†–ò–ß–ò–ù–ê: –ø—Ä–æ–±–ª–µ–º—ã —Å HTTPS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
                    elif "HTTPError" in error_type:
                        logger.error(f"üåê –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: HTTP –û–®–ò–ë–ö–ê –¥–ª—è {token.symbol}")
                        logger.error(f"üìã –ü–†–ò–ß–ò–ù–ê: –æ—à–∏–±–∫–∞ HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
                    else:
                        logger.error(f"‚ùì –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è {token.symbol}")
                        logger.error(f"üìã –¢–ò–ü: {error_type}")
                    
                    logger.error(f"üìÑ –î–ï–¢–ê–õ–ò: {error_msg}")
                    logger.error(f"üîß –î–ï–ô–°–¢–í–ò–ï: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                    
                    self.consecutive_errors += 1
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∞–≤—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            unique_authors = []
            seen_usernames = set()
            blacklisted_count = 0
            
            for author in all_authors:
                username = author.get('username', '')
                if username and username not in seen_usernames:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if username.lower() in TWITTER_AUTHOR_BLACKLIST:
                        logger.info(f"üö´ –ê–≤—Ç–æ—Ä @{username} –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω (—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)")
                        blacklisted_count += 1
                        continue
                    
                    unique_authors.append(author)
                    seen_usernames.add(username)
            
            if blacklisted_count > 0:
                logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ {blacklisted_count} –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.symbol}")
            
            # –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–†–û–§–ò–õ–ò –ê–í–¢–û–†–û–í (–∫–∞–∫ –≤ pump_bot.py)
            if unique_authors:
                logger.info(f"üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ {len(unique_authors)} –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –≤ –ë–î
                from database import get_db_manager, TwitterAuthor
                from twitter_profile_parser import TwitterProfileParser
                from datetime import datetime
                
                db_manager = get_db_manager()
                usernames_to_parse = []
                usernames_to_update = []
                existing_authors = {}
                
                for author in unique_authors:
                    username = author['username']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
                    session = db_manager.Session()
                    try:
                        existing_author = session.query(TwitterAuthor).filter_by(username=username).first()
                        if existing_author:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö (–æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 20 –º–∏–Ω—É—Ç)
                            time_since_update = datetime.utcnow() - existing_author.last_updated
                            minutes_since_update = time_since_update.total_seconds() / 60
                            
                            if minutes_since_update >= 20:
                                # –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                                usernames_to_update.append(username)
                                existing_authors[username] = {
                                    'username': existing_author.username,
                                    'display_name': existing_author.display_name,
                                    'followers_count': existing_author.followers_count,
                                    'following_count': existing_author.following_count,
                                    'tweets_count': existing_author.tweets_count,
                                    'likes_count': existing_author.likes_count,
                                    'bio': existing_author.bio,
                                    'website': existing_author.website,
                                    'join_date': existing_author.join_date,
                                    'is_verified': existing_author.is_verified,
                                    'avatar_url': existing_author.avatar_url
                                }
                                logger.info(f"üîÑ –ê–≤—Ç–æ—Ä @{username} –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –Ω–æ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ ({minutes_since_update:.1f}–º–∏–Ω) - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                            else:
                                # –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –ë–î
                                existing_authors[username] = {
                                    'username': existing_author.username,
                                    'display_name': existing_author.display_name,
                                    'followers_count': existing_author.followers_count,
                                    'following_count': existing_author.following_count,
                                    'tweets_count': existing_author.tweets_count,
                                    'likes_count': existing_author.likes_count,
                                    'bio': existing_author.bio,
                                    'website': existing_author.website,
                                    'join_date': existing_author.join_date,
                                    'is_verified': existing_author.is_verified,
                                    'avatar_url': existing_author.avatar_url
                                }
                                logger.info(f"üìã –ê–≤—Ç–æ—Ä @{username} –Ω–∞–π–¥–µ–Ω –≤ –ë–î ({existing_author.followers_count:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω {minutes_since_update:.1f}–º–∏–Ω –Ω–∞–∑–∞–¥)")
                        else:
                            # –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                            usernames_to_parse.append(username)
                            logger.info(f"üîç –ê–≤—Ç–æ—Ä @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –Ω—É–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞")
                    finally:
                        session.close()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
                new_profiles = {}
                updated_profiles = {}
                total_to_load = len(usernames_to_parse) + len(usernames_to_update)
                
                if total_to_load > 0:
                    logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {len(usernames_to_parse)} –Ω–æ–≤—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º {len(usernames_to_update)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
                    async with TwitterProfileParser() as profile_parser:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
                        if usernames_to_parse:
                            new_profiles = await profile_parser.get_multiple_profiles(usernames_to_parse)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
                        if usernames_to_update:
                            updated_profiles = await profile_parser.get_multiple_profiles(usernames_to_update)
                else:
                    logger.info(f"‚úÖ –í—Å–µ –∞–≤—Ç–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π")
                
                # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
                for author in unique_authors:
                    username = author['username']
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ > –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ > —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –ë–î
                    profile = updated_profiles.get(username) or new_profiles.get(username) or existing_authors.get(username)
                    
                    if profile and isinstance(profile, dict):
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
                        historical_data = db_manager.get_author_historical_data(username)
                        
                        author.update({
                            'display_name': profile.get('display_name', ''),
                            'followers_count': profile.get('followers_count', 0),
                            'following_count': profile.get('following_count', 0),
                            'tweets_count': profile.get('tweets_count', 0),
                            'likes_count': profile.get('likes_count', 0),
                            'bio': profile.get('bio', ''),
                            'website': profile.get('website', ''),
                            'join_date': profile.get('join_date', ''),
                            'is_verified': profile.get('is_verified', False),
                            'avatar_url': profile.get('avatar_url', ''),
                            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                            'historical_data': historical_data
                        })
                        
                        # –î–û–ë–ê–í–õ–Ø–ï–ú –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–†–ê–ö–¢–û–í (–∫–∞–∫ –≤ pump_bot.py)
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–≤–∏—Ç—ã —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        author_tweets_on_page = []
                        for author_data in unique_authors:
                            if author_data['username'] == username:
                                author_tweets_on_page.append(author_data['tweet_text'])
                        
                        # –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ @{username} (–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –ø—Ä–æ—Ñ–∏–ª—è)")
                        page_analysis = await analyze_author_page_contracts(username, tweets_on_page=None, load_from_profile=True)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                        total_analyzed_tweets = page_analysis['total_tweets_on_page']
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        if total_analyzed_tweets < 3:
                            if page_analysis['diversity_category'] == '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞':
                                # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ
                                logger.warning(f"üåê @{username}: —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                                page_analysis['is_spam_likely'] = False
                                page_analysis['recommendation'] = "üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
                            else:
                                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –º–∞–ª–æ —Ç–≤–∏—Ç–æ–≤ = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç)
                                logger.info(f"üÜï @{username}: –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å {total_analyzed_tweets} —Ç–≤–∏—Ç–∞–º–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª!")
                                page_analysis['is_spam_likely'] = False  # –ù–ï —Å–ø–∞–º–µ—Ä!
                                page_analysis['spam_analysis'] = f"–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {total_analyzed_tweets} —Ç–≤–∏—Ç–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)"
                                page_analysis['recommendation'] = "üÜï –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢ - —Ö–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª"
                        
                        author.update({
                            'contract_diversity': page_analysis['contract_diversity_percent'],
                            'max_contract_spam': page_analysis['max_contract_spam_percent'],
                            'diversity_recommendation': page_analysis['recommendation'],
                            'is_spam_likely': page_analysis['is_spam_likely'],
                            'diversity_category': page_analysis['diversity_category'],
                            'spam_analysis': page_analysis['spam_analysis'],
                            'total_contract_tweets': page_analysis['total_tweets_on_page'],
                            'unique_contracts_count': page_analysis['unique_contracts_on_page']
                        })
                        
                        logger.info(f"üìä @{username}: {page_analysis['total_tweets_on_page']} —Ç–≤–∏—Ç–æ–≤, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {page_analysis['max_contract_spam_percent']:.1f}%, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {page_analysis['contract_diversity_percent']:.1f}% - {page_analysis['recommendation']}")
                        
                        # –°–û–•–†–ê–ù–Ø–ï–ú –ü–†–û–§–ò–õ–ò –í –ë–î (–∫–∞–∫ –≤ pump_bot.py)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –ë–î
                        if username in usernames_to_parse:
                            try:
                                db_manager.save_twitter_author(profile)
                                db_manager.save_tweet_mention({
                                    'mint': token.mint,  # –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞
                                    'author_username': username,
                                    'tweet_text': author['tweet_text'],
                                    'search_query': token.mint,
                                    'retweets': 0,  # –í —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ç–≤–∏—Ç–∞—Ö
                                    'likes': 0,     # –í —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∞–π–∫–∞—Ö
                                    'replies': 0,   # –í —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–≤–µ—Ç–∞—Ö
                                    'author_followers_at_time': profile.get('followers_count', 0),
                                    'author_verified_at_time': profile.get('is_verified', False)
                                })
                                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å @{username} –≤ –ë–î ({profile.get('followers_count', 0):,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è @{username}: {e}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –ë–î
                        elif username in usernames_to_update:
                            try:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
                                session = db_manager.Session()
                                try:
                                    existing_author = session.query(TwitterAuthor).filter_by(username=username).first()
                                    if existing_author:
                                        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                        old_followers = existing_author.followers_count
                                        new_followers = profile.get('followers_count', 0)
                                        followers_change = new_followers - old_followers
                                        
                                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è
                                        existing_author.display_name = profile.get('display_name', existing_author.display_name)
                                        existing_author.followers_count = new_followers
                                        existing_author.following_count = profile.get('following_count', existing_author.following_count)
                                        existing_author.tweets_count = profile.get('tweets_count', existing_author.tweets_count)
                                        existing_author.likes_count = profile.get('likes_count', existing_author.likes_count)
                                        existing_author.bio = profile.get('bio', existing_author.bio)
                                        existing_author.website = profile.get('website', existing_author.website)
                                        existing_author.join_date = profile.get('join_date', existing_author.join_date)
                                        existing_author.is_verified = profile.get('is_verified', existing_author.is_verified)
                                        existing_author.avatar_url = profile.get('avatar_url', existing_author.avatar_url)
                                        existing_author.last_updated = datetime.utcnow()
                                        
                                        session.commit()
                                        
                                        change_info = f" ({followers_change:+,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)" if followers_change != 0 else ""
                                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å @{username} –≤ –ë–î ({new_followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤{change_info})")
                                finally:
                                    session.close()
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–∏—Ç
                                db_manager.save_tweet_mention({
                                    'mint': token.mint,
                                    'author_username': username,
                                    'tweet_text': author['tweet_text'],
                                    'search_query': token.mint,
                                    'retweets': 0,
                                    'likes': 0,
                                    'replies': 0,
                                    'author_followers_at_time': profile.get('followers_count', 0),
                                    'author_verified_at_time': profile.get('is_verified', False)
                                })
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è @{username}: {e}")
                        
                        # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–≤–∏—Ç
                        else:
                            try:
                                db_manager.save_tweet_mention({
                                    'mint': token.mint,
                                    'author_username': username,
                                    'tweet_text': author['tweet_text'],
                                    'search_query': token.mint,
                                    'retweets': 0,
                                    'likes': 0,
                                    'replies': 0,
                                    'author_followers_at_time': profile.get('followers_count', 0),
                                    'author_verified_at_time': profile.get('is_verified', False)
                                })
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–≤–∏—Ç–∞ @{username}: {e}")
                    else:
                        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/–Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å @{username}")
                        author.update({
                            'display_name': f'@{username}',
                            'followers_count': 0,
                            'following_count': 0,
                            'tweets_count': 0,
                            'likes_count': 0,
                            'bio': '',
                            'website': '',
                            'join_date': '',
                            'is_verified': False,
                            'avatar_url': '',
                            'historical_data': {}
                        })
            
            return tweets_count, engagement, unique_authors
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token.symbol}: {e}")
            self.consecutive_errors += 1
            return 0, 0, []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = BackgroundTokenMonitor()
    
    try:
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        monitor.stop_monitoring()
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 