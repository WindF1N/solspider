#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from database import get_db_manager, Token
from pump_bot import search_single_query, send_telegram, extract_tweet_authors
from cookie_rotation import background_cookie_rotator
from logger_config import setup_logging
from twitter_profile_parser import TwitterProfileParser
import re
import aiohttp
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

class BackgroundTokenMonitor:
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self):
        self.db_manager = get_db_manager()
        self.running = False
        self.max_token_age_hours = 1  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–æ–∫–µ–Ω—ã –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        self.batch_delay = 0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ 10 —Å–µ–∫—É–Ω–¥
        # –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π Twitter (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ async —Ñ—É–Ω–∫—Ü–∏—è—Ö)
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Nitter –∑–∞–ø—Ä–æ—Å–æ–≤ (cookie –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
    
    def get_tokens_to_monitor(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter)"""
        session = self.db_manager.Session()
        try:
            # –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–µ –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter
            cutoff_time = datetime.utcnow() - timedelta(hours=self.max_token_age_hours)
            
            tokens = session.query(Token).filter(
                Token.created_at >= cutoff_time,           # –ù–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
                Token.twitter_contract_tweets == 0,        # –ù–µ—Ç —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
                Token.mint.isnot(None),                    # –ï—Å—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                Token.symbol.isnot(None)                   # –ï—Å—Ç—å —Å–∏–º–≤–æ–ª
            ).order_by(Token.created_at.desc()).all()
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return tokens
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return []
        finally:
            session.close()
    
    async def check_contract_mentions(self, token, cycle_cookie):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Twitter (—Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏ –±–µ–∑) —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∞–≤—Ç–æ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ—Ä–∞–º–∏
            tweets_count, engagement, authors = await self.get_contract_mentions_with_authors(token, cycle_cookie)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 0,0 - –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            if tweets_count == 0 and engagement == 0:
                logger.debug(f"üîç –ö–æ–Ω—Ç—Ä–∞–∫—Ç {token.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Twitter (–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)")
            
            if tweets_count > 0:
                logger.info(f"üéØ –ù–ê–ô–î–ï–ù –∫–æ–Ω—Ç—Ä–∞–∫—Ç {token.symbol} –≤ Twitter! –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤: {tweets_count}, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {engagement}, –∞–≤—Ç–æ—Ä–æ–≤: {len(authors)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                session = self.db_manager.Session()
                try:
                    db_token = session.query(Token).filter_by(id=token.id).first()
                    if db_token:
                        db_token.twitter_contract_tweets = tweets_count
                        db_token.twitter_contract_found = True
                        db_token.updated_at = datetime.utcnow()
                        session.commit()
                        
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ë–î –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.symbol}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
                        await self.send_contract_alert(token, tweets_count, engagement, authors)
                        
                except Exception as e:
                    session.rollback()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è {token.symbol}: {e}")
                finally:
                    session.close()
                    
                return True
            else:
                logger.debug(f"üîç –ö–æ–Ω—Ç—Ä–∞–∫—Ç {token.symbol} –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Twitter")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {token.symbol}: {e}")
            return False
    
    async def send_contract_alert(self, token, tweets_count, engagement, authors=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
            age = datetime.utcnow() - token.created_at
            age_hours = age.total_seconds() / 3600
            
            message = (
                f"üî• <b>–ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù –í TWITTER!</b>\n\n"
                f"üíé <b><a href='https://pump.fun/{token.mint}'>{token.name}</a></b>\n"
                f"üè∑Ô∏è <b>–°–∏–º–≤–æ–ª:</b> {token.symbol}\n"
                f"üìç <b>Mint:</b> <code>{token.mint}</code>\n"
                f"‚è∞ <b>–í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞:</b> {age_hours:.1f} —á–∞—Å–æ–≤\n"
                f"üê¶ <b>–¢–≤–∏—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º:</b> {tweets_count}\n"
                f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {engagement}\n"
                f"üìà <b>–¢–µ–∫—É—â–∏–π Market Cap:</b> ${token.market_cap:,.0f}\n\n"
                f"üöÄ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–∞–ª–∏ –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º!</b>\n"
                f"üìà <b>–í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–æ–∫–µ–Ω—É</b>\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Ç–≤–∏—Ç–æ–≤
            if authors:
                message += f"<b>üë• –ê–í–¢–û–†–´ –¢–í–ò–¢–û–í –° –ö–û–ù–¢–†–ê–ö–¢–û–ú:</b>\n"
                for i, author in enumerate(authors[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∞–≤—Ç–æ—Ä–æ–≤
                    username = author.get('username', 'Unknown')
                    display_name = author.get('display_name', username)
                    followers = author.get('followers_count', 0)
                    verified = "‚úÖ" if author.get('is_verified', False) else ""
                    tweet_text = author.get('tweet_text', '')[:80] + "..." if len(author.get('tweet_text', '')) > 80 else author.get('tweet_text', '')
                    
                    message += f"{i+1}. <b>@{username}</b> {verified}\n"
                    if display_name != username:
                        message += f"   üìù {display_name}\n"
                    if followers > 0:
                        message += f"   üë• {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                    message += f"   üí¨ \"{tweet_text}\"\n"
                message += "\n"
            
            message += f"‚ö° <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!</b>"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    {"text": "üíé –ö—É–ø–∏—Ç—å –Ω–∞ Axiom", "url": f"https://axiom.trade/meme/{token.bonding_curve_key or token.mint}"},
                    {"text": "‚ö° QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{token.mint}"}
                ],
                [
                    {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{token.mint}"}
                ]
            ]
            
            send_telegram(message, keyboard)
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ {token.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ {token.symbol}: {e}")
    
    async def monitor_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º cookie –¥–ª—è –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞
            cycle_cookie = background_cookie_rotator.get_cycle_cookie()
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º cookie...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            tokens = self.get_tokens_to_monitor()
            
            if not tokens:
                logger.debug("üì≠ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –±–∞—Ç—á–∞–º–∏ –ø–æ 900 —à—Ç—É–∫ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Nitter)
            batch_size = 900
            found_contracts = 0
            
            for i in range(0, len(tokens), batch_size):
                batch = tokens[i:i + batch_size]
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á {i//batch_size + 1}: —Ç–æ–∫–µ–Ω—ã {i+1}-{min(i+batch_size, len(tokens))}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–¥–Ω–∏–º cookie –¥–ª—è –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞
                tasks = [self.check_contract_mentions(token, cycle_cookie) for token in batch]
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                for result in results:
                    if result is True:
                        found_contracts += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Nitter
                if i + batch_size < len(tokens):
                    await asyncio.sleep(1)
                
            elapsed = time.time() - start_time
            logger.info(f"‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å. –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {found_contracts}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            # await asyncio.sleep(10)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        start_message = (
            f"ü§ñ <b>–ù–ï–ü–†–ï–†–´–í–ù–´–ô –§–û–ù–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–©–ï–ù!</b>\n\n"
            f"üîç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º:</b> –ø–æ—è–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Twitter\n"
            f"‚ö° <b>–†–µ–∂–∏–º:</b> –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–±–µ–∑ –ø–∞—É–∑)\n"
            f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–æ–∫–µ–Ω—ã:</b> –Ω–µ —Å—Ç–∞—Ä—à–µ {self.max_token_age_hours} —á–∞—Å–∞\n"
            f"üîÑ <b>–†–æ—Ç–∞—Ü–∏—è:</b> 5 cookies + 7 –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
            f"üéØ <b>–¶–µ–ª—å:</b> –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞\n\n"
            f"üöÄ <b>–ì–æ—Ç–æ–≤ –ª–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞!</b>"
        )
        send_telegram(start_message)
        
        while self.running:
            try:
                await self.monitor_cycle()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                # –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É
                logger.info(f"‚ö° –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    async def get_contract_mentions_with_authors(self, token, cycle_cookie):
        """–ü–æ–ª—É—á–∞–µ—Ç HTML –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ—Ä–æ–≤"""
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º HTML
            urls = [
                f"https://nitter.tiekoetter.com/search?f=tweets&q=%22{token.mint}%22&since=&until=&near=",  # –° –∫–∞–≤—ã—á–∫–∞–º–∏
                f"https://nitter.tiekoetter.com/search?f=tweets&q={token.mint}&since=&until=&near="  # –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫
            ]
            
            headers_with_cookie = self.headers.copy()
            headers_with_cookie['Cookie'] = cycle_cookie
            
            all_authors = []
            tweets_count = 0
            engagement = 0
            
            for url in urls:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, headers=headers_with_cookie, timeout=20) as response:
                            if response.status == 200:
                                html = await response.text()
                                soup = BeautifulSoup(html, 'html.parser')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                                title = soup.find('title')
                                if title and 'Making sure you\'re not a bot!' in title.get_text():
                                    logger.error(f"üö´ NITTER –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù! –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {token.mint}")
                                    continue
                                
                                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–≤–∏—Ç—ã
                                tweets = soup.find_all('div', class_='timeline-item')
                                tweets_count += len(tweets)
                                
                                # –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã
                                if tweets:
                                    authors = await extract_tweet_authors(soup, token.mint, True)
                                    all_authors.extend(authors)
                                    
                                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                                    for tweet in tweets:
                                        stats = tweet.find_all('span', class_='tweet-stat')
                                        for stat in stats:
                                            icon_container = stat.find('div', class_='icon-container')
                                            if icon_container:
                                                text = icon_container.get_text(strip=True)
                                                numbers = re.findall(r'\d+', text)
                                                if numbers:
                                                    engagement += int(numbers[0])
                                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∞–≤—Ç–æ—Ä–æ–≤
            unique_authors = []
            seen_usernames = set()
            for author in all_authors:
                username = author.get('username', '')
                if username and username not in seen_usernames:
                    unique_authors.append(author)
                    seen_usernames.add(username)
            
            return tweets_count, engagement, unique_authors
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token.symbol}: {e}")
            return 0, 0, []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = BackgroundTokenMonitor()
    
    try:
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        monitor.stop_monitoring()
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 