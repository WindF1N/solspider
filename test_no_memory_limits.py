#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —É–±—Ä–∞–Ω—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_no_memory_limits():
    """–¢–µ—Å—Ç —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —É–±—Ä–∞–Ω—ã –∏ —Ç–æ–∫–µ–Ω—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    all_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    test_files = all_files[:10]
    
    print(f"üß† –¢–ï–°–¢ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ü–ê–ú–Ø–¢–ò")
    print(f"="*70)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")
    print()
    print(f"‚úÖ –£–ë–†–ê–ù–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ metrics_history –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 100 –∑–∞–ø–∏—Å–µ–π")
    print(f"   ‚Ä¢ holder_percentages_history –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 1000 —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
    print(f"   ‚Ä¢ TokenMetrics.metrics_history –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 1000 –∑–∞–ø–∏—Å–µ–π")
    print(f"   ‚Ä¢ TokenMetrics.holder_percentages_history –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 1000 —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
    print()
    
    results = {
        'total_snapshots': 0,
        'max_snapshots': 0,
        'tokens_with_many_snapshots': 0,
        'total_metrics': 0,
        'max_metrics': 0
    }
    
    for i, log_file in enumerate(test_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        token_id = log_file.replace('.log', '')
        
        print(f"{i:2d}. üîç {token_id[:20]}...", end="")
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            snapshots = result.get('snapshots_checked', 0)
            total_snapshots = result.get('total_snapshots', 0)
            
            results['total_snapshots'] += snapshots
            results['max_snapshots'] = max(results['max_snapshots'], snapshots)
            results['total_metrics'] += total_snapshots
            results['max_metrics'] = max(results['max_metrics'], total_snapshots)
            
            if snapshots > 100:  # –†–∞–Ω—å—à–µ –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 100
                results['tokens_with_many_snapshots'] += 1
                print(f" üß† {snapshots} —Å–Ω–∞–ø—à–æ—Ç–æ–≤ (>{100} - –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!)")
            else:
                print(f" ‚úÖ {snapshots} —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
                
        except Exception as e:
            print(f" üí• –û–®–ò–ë–ö–ê: {e}")
    
    print()
    print("="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ü–ê–ú–Ø–¢–ò:")
    print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {results['total_snapshots']}")
    print(f"üèÜ –ú–∞–∫—Å–∏–º—É–º —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –≤ —Ç–æ–∫–µ–Ω–µ: {results['max_snapshots']}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫: {results['total_metrics']}")
    print(f"üèÜ –ú–∞–∫—Å–∏–º—É–º –º–µ—Ç—Ä–∏–∫ –≤ —Ç–æ–∫–µ–Ω–µ: {results['max_metrics']}")
    print(f"üß† –¢–æ–∫–µ–Ω–æ–≤ —Å >100 —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏: {results['tokens_with_many_snapshots']}")
    
    avg_snapshots = results['total_snapshots'] / len(test_files) if test_files else 0
    
    print()
    print("üéØ –ê–ù–ê–õ–ò–ó:")
    print(f"üìä –°—Ä–µ–¥–Ω–µ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–∞ —Ç–æ–∫–µ–Ω: {avg_snapshots:.1f}")
    
    if results['max_snapshots'] > 100:
        print(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã —Å >{100} —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏!")
        print(f"üß† –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –£–°–ü–ï–®–ù–û —É–±—Ä–∞–Ω–æ")
        print(f"üìà –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ç–∞–ª –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º")
    else:
        print(f"‚ÑπÔ∏è –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç <100 —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
        print(f"‚úÖ –ù–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —É–±—Ä–∞–Ω–æ - –≥–æ—Ç–æ–≤–æ –∫ –±–æ–ª—å—à–∏–º —Ç–æ–∫–µ–Ω–∞–º")
    
    print()
    print("üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô:")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
    print("   ‚úÖ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤")
    print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π rapid_exit –∞–Ω–∞–ª–∏–∑")
    print("   ‚úÖ –ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    print("   ‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(test_no_memory_limits())
    exit(0 if success else 1)