#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ test_filter.log
"""

import asyncio
import os
import time
from test_filter import TokenFilterTester

async def demo_logging():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    tester = TokenFilterTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tokens_logs
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    
    if not log_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tokens_logs_dir} –Ω–µ—Ç .log —Ñ–∞–π–ª–æ–≤")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_files = log_files[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –¥–µ–º–æ
    
    print(f"üìÑ –î–ï–ú–û –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í test_filter.log")
    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(demo_files)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–º–æ
    demo_dir = '/tmp/demo_tokens_logs'
    os.makedirs(demo_dir, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ
    for log_file in demo_files:
        src = os.path.join(tokens_logs_dir, log_file)
        dst = os.path.join(demo_dir, log_file)
        if not os.path.exists(dst):
            os.symlink(src, dst)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ test_filter.log...")
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    results = await tester.analyze_all_tokens_with_full_criteria(demo_dir)
    
    total_time = time.time() - start_time
    
    print(f"\n‚úÖ –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    activity_passed = sum(1 for r in results if r.get('decision') == 'WOULD_SEND')
    activity_rejected = sum(1 for r in results if r.get('decision') == 'WOULD_REJECT')
    blacklisted = sum(1 for r in results if r.get('decision') == 'BLACKLISTED')
    errors = sum(1 for r in results if r.get('decision') == 'ERROR')
    no_data = sum(1 for r in results if r.get('decision') == 'NO_DATA')
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üöÄ ACTIVITY –ø—Ä–æ—à–ª–∏: {activity_passed}")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {activity_rejected}")
    print(f"‚ö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklisted}")
    print(f"üí• –û—à–∏–±–∫–∏: {errors}")
    print(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {no_data}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ª–æ–≥–∞
    if os.path.exists('test_filter.log'):
        print(f"\nüìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï test_filter.log (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):")
        with open('test_filter.log', 'r', encoding='utf-8') as f:
            lines = f.readlines()
            for line in lines[-10:]:
                print(f"   {line.strip()}")
    
    # –û—á–∏—â–∞–µ–º –¥–µ–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    import shutil
    shutil.rmtree(demo_dir, ignore_errors=True)
    
    print(f"\nüéØ –î–ï–ú–û –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"üìÑ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤: test_filter.log")
    print(f"üìä –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: TOKEN_ID | DECISION | TYPE | METRICS | REASON")
    print(f"‚úÖ –ü—Ä–æ—à–µ–¥—à–∏–µ: PREFIX '‚úÖ ACTIVITY PASS'")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: PREFIX '‚ùå ACTIVITY REJECT'")
    print(f"‚ö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: PREFIX '‚ö´ BLACKLISTED'")
    print(f"üí• –û—à–∏–±–∫–∏: PREFIX 'üí• ERROR'")

if __name__ == "__main__":
    asyncio.run(demo_logging())