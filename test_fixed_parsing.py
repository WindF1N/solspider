#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ –ª–æ–≥–æ–≤
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_successful_token_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    tester = TokenFilterTester()
    
    # –¢–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    successful_token = 'tokens_logs/26YJjHymy3aS.log'
    
    if not os.path.exists(successful_token):
        print(f"‚ùå –§–∞–π–ª {successful_token} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print(f"="*70)
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π –†–ï–ê–õ–¨–ù–û –ø–æ–ª—É—á–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print(f"üéØ –§–∞–π–ª: {successful_token}")
    print()
    
    try:
        result = await tester.analyze_token_with_full_criteria(successful_token)
        
        decision = result.get('decision', 'UNKNOWN')
        reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')
        token_address = result.get('token_address', 'UNKNOWN')
        snapshots_checked = result.get('snapshots_checked', 0)
        total_snapshots = result.get('total_snapshots', 0)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   –¢–æ–∫–µ–Ω: {token_address}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {decision}")
        print(f"   –°–Ω–∞–ø—à–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {snapshots_checked}/{total_snapshots}")
        print()
        
        if decision == 'WOULD_SEND':
            snapshot_num = result.get('snapshot_number', '?')
            print(f"üéâ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–Ω–∞–ø—à–æ—Ç–µ #{snapshot_num}")
            print(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
            if 'holders' in result:
                print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞:")
                print(f"   üë• –•–æ–ª–¥–µ—Ä—ã: {result.get('holders', 0)}")
                print(f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${result.get('liquidity', 0):,.0f}")
                print(f"   üí∞ Market Cap: ${result.get('market_cap', 0):,.0f}")
                print(f"   üéØ –°–Ω–∞–π–ø–µ—Ä—ã: {result.get('snipers_percent', 0):.1f}%")
                print(f"   üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—ã: {result.get('insiders_percent', 0):.1f}%")
                print(f"   üë®‚Äçüíº Dev: {result.get('dev_percent', 0):.1f}%")
        
        elif decision == 'WOULD_REJECT':
            best_snapshot = result.get('best_snapshot', {})
            print(f"‚ùå –¢–û–ö–ï–ù –û–¢–ö–õ–û–ù–ï–ù (–Ω–æ —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)")
            print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            if best_snapshot.get('passed_conditions', 0) > 0:
                print(f"\nüèÜ –õ—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç #{best_snapshot['snapshot_number']}:")
                print(f"   ‚úÖ –ü—Ä–æ—à–ª–æ —É—Å–ª–æ–≤–∏–π: {best_snapshot['passed_conditions']}")
                print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {', '.join(best_snapshot.get('failed_conditions', [])[:3])}")
                
                metrics = best_snapshot.get('metrics', {})
                if metrics:
                    print(f"   üìä –ú–µ—Ç—Ä–∏–∫–∏:")
                    if 'holders' in metrics:
                        print(f"      üë• –•–æ–ª–¥–µ—Ä—ã: {metrics['holders']}")
                    if 'liquidity' in metrics:
                        print(f"      üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${metrics['liquidity']:,.0f}")
        
        else:
            print(f"‚ùì –î–†–£–ì–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
            print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    print()
    print("="*70)
    print("üéØ –¶–ï–õ–¨ –¢–ï–°–¢–ê:")
    print("‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å WOULD_SEND")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
    print("‚úÖ –°–Ω–∞–ø—à–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ (–Ω–µ #22)")

if __name__ == "__main__":
    asyncio.run(test_successful_token_parsing())