#!/usr/bin/env python3
"""
Bundle Analyzer for A/B Testing
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
"""

import asyncio
import websockets
import json
import base64
import struct
import os
import sys
import logging
import aiohttp
import msgpack
from datetime import datetime
from typing import Dict, List, Optional, Any, Set
import requests
from urllib.parse import quote
import re
import ssl
import time
import traceback
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ pump_bot –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bundle_analyzer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è mapping —Ç–æ–∫–µ–Ω–æ–≤ –∫ market_id
TOKEN_TO_MARKET_CACHE = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –∑–∞–ø—Ä–æ—Å–æ–≤ market_id
PENDING_MARKET_ID_REQUESTS = {}

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {token_address: {'activity': timestamp, 'pump': timestamp}}
SENT_NOTIFICATIONS = {}

# –°–ø–∏—Å–æ–∫ –±—ç–∫–µ–Ω–¥–æ–≤ Padre –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
PADRE_BACKENDS = [
    "wss://backend1.padre.gg/_multiplex",
    "wss://backend2.padre.gg/_multiplex",
    "wss://backend3.padre.gg/_multiplex",
    "wss://backend.padre.gg/_multiplex"
]

# –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –±—ç–∫–µ–Ω–¥–æ–≤
_backend_counter = 0

def get_next_padre_backend() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±—ç–∫–µ–Ω–¥ Padre –≤ —Ä–µ–∂–∏–º–µ round-robin"""
    global _backend_counter
    backend = PADRE_BACKENDS[_backend_counter % len(PADRE_BACKENDS)]
    _backend_counter += 1
    return backend

class AuthenticationPolicyViolation(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ 1008)"""
    pass

async def request_market_id_via_websocket(websocket, token_address: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket (–Ω–µ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
        if token_address in PENDING_MARKET_ID_REQUESTS:
            logger.debug(f"üìã –ó–∞–ø—Ä–æ—Å market_id –¥–ª—è {token_address[:8]}... —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False
        
        logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... —á–µ—Ä–µ–∑ WebSocket")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        import uuid
        request_id = str(uuid.uuid4())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å markets-per-token –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        markets_request_path = "/prices/prices/markets-per-token"
        markets_payload = {
            'tokens': [{'chain': 'SOLANA', 'tokenAddress': token_address}]
        }
        
        # –°–æ–∑–¥–∞—ë–º MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä—É [8, 45, path, request_id, payload]
        message_data = [8, 45, markets_request_path, request_id, markets_payload]
        message_bytes = msgpack.packb(message_data)
        
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å markets-per-token –¥–ª—è {token_address[:8]}...")
        logger.info(f"üì¶ MessagePack: [8, 45, path, uuid, payload] -> {len(message_bytes)} –±–∞–π—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        await websocket.send(message_bytes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ pending –∑–∞–ø—Ä–æ—Å—ã
        PENDING_MARKET_ID_REQUESTS[token_address] = {
            'request_id': request_id,
            'timestamp': asyncio.get_event_loop().time()
        }
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ market_id –¥–ª—è {token_address[:8]}...: {e}")
        return False

def process_markets_per_token_response(payload: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç markets-per-token –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç cache"""
    try:
        if 'markets' in payload and 'SOLANA' in payload['markets']:
            solana_markets = payload['markets']['SOLANA']
            
            for token_address, markets_list in solana_markets.items():
                if markets_list and isinstance(markets_list, list) and len(markets_list) > 0:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π market (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π –ª–∏–∫–≤–∏–¥–Ω—ã–π)
                    market_info = markets_list[0]
                    market_id = market_info.get('marketId')
                    
                    if market_id:
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "solana-" –µ—Å–ª–∏ –µ—Å—Ç—å
                        if market_id.startswith('solana-'):
                            market_id = market_id[7:]
                        
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache
                            TOKEN_TO_MARKET_CACHE[token_address] = market_id
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω market_id –¥–ª—è {token_address[:8]}...: {market_id[:8]}...")
                            logger.info(f"üìã ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –° market_id (markets-per-token): {token_address} -> {market_id}")
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ pending –∑–∞–ø—Ä–æ—Å–æ–≤
                        if token_address in PENDING_MARKET_ID_REQUESTS:
                            del PENDING_MARKET_ID_REQUESTS[token_address]
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markets-per-token –æ—Ç–≤–µ—Ç–∞: {e}")

async def get_market_id_for_token_cached(token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç market_id –∏–∑ cache –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None"""
    return TOKEN_TO_MARKET_CACHE.get(token_address)

async def get_token_metadata(token_address: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API DexScreener –∏–ª–∏ Jupiter"""
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "application/json"
        }
        
        # –ü—Ä–æ–±—É–µ–º DexScreener API
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(dex_url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if 'pairs' in data and data['pairs']:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É (–æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –ª–∏–∫–≤–∏–¥–Ω–∞—è)
                        pair = data['pairs'][0]
                        base_token = pair.get('baseToken', {})
                        
                        symbol = base_token.get('symbol', 'UNK')
                        name = base_token.get('name', symbol)
                        
                        if symbol != 'UNK':
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DexScreener: {name} ({symbol})")
                            return {
                                'symbol': symbol,
                                'name': name,
                                'market_cap': float(pair.get('fdv', 0)),
                                'dex_source': pair.get('dexId', 'Unknown'),
                                'source': 'DexScreener'
                            }
                
                # –ü—Ä–æ–±—É–µ–º Jupiter API –∫–∞–∫ fallback
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º Jupiter API –¥–ª—è {token_address[:8]}...")
                jupiter_url = f"https://price.jup.ag/v6/price?ids={token_address}"
                
                async with session.get(jupiter_url, headers=headers, timeout=10) as jup_response:
                    if jup_response.status == 200:
                        jup_data = await jup_response.json()
                        
                        if 'data' in jup_data and token_address in jup_data['data']:
                            token_data = jup_data['data'][token_address]
                            return {
                                'symbol': 'UNK',  # Jupiter price API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç symbol
                                'name': 'Unknown Token',
                                'market_cap': 0,
                                'dex_source': 'Jupiter',
                                'source': 'Jupiter',
                                'price': float(token_data.get('price', 0))
                            }
                
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        return {
            'symbol': 'UNK',
            'name': 'Unknown Token',
            'market_cap': 0,
            'dex_source': 'Unknown',
            'source': 'None'
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token_address[:8]}...: {e}")
        return {
            'symbol': 'UNK',
            'name': 'Unknown Token',
            'market_cap': 0,
            'dex_source': 'Unknown',
            'source': 'Error'
        }

async def get_market_id_for_token(token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ cache –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            cached_market_id = TOKEN_TO_MARKET_CACHE[token_address]
            logger.debug(f"üìã –ù–∞–π–¥–µ–Ω market_id –≤ cache –¥–ª—è {token_address[:8]}...: {cached_market_id[:8]}...")
            return cached_market_id
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º DexScreener API –∫–∞–∫ fallback
        logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º DexScreener API –¥–ª—è {token_address[:8]}...")
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "application/json"
        }
        
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(dex_url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if 'pairs' in data and data['pairs']:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É (–æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –ª–∏–∫–≤–∏–¥–Ω–∞—è)
                        pair = data['pairs'][0]
                        market_id = pair.get('pairAddress')
                        
                        if market_id:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache
                            TOKEN_TO_MARKET_CACHE[token_address] = market_id
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω market_id —á–µ—Ä–µ–∑ DexScreener –¥–ª—è {token_address[:8]}...: {market_id[:8]}...")
                            return market_id
                
                        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
                logger.info(f"üìã –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–µ–∑ market_id (DexScreener): {token_address}")
                return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market_id –¥–ª—è {token_address[:8]}...: {e}")
        return None

async def get_market_address_via_smart_query(websocket, token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç marketAddress –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ get-market-smart-with-warm endpoint"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            cached_market_id = TOKEN_TO_MARKET_CACHE[token_address]
            logger.debug(f"üìã –ù–∞–π–¥–µ–Ω marketAddress –≤ cache –¥–ª—è {token_address[:8]}...: {cached_market_id[:8]}...")
            return cached_market_id
        
        logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º marketAddress –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... —á–µ—Ä–µ–∑ get-market-smart-with-warm")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        import uuid
        request_id = str(uuid.uuid4())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        smart_query_path = f"/prices/query/solana-{token_address}/get-market-smart-with-warm"
        
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MessagePack —Ñ–æ—Ä–º–∞—Ç [8, 19, path, id]
        smart_query_request = [8, 19, smart_query_path, request_id]
        smart_query_request_bytes = msgpack.packb(smart_query_request)
        
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º get-market-smart-with-warm –∑–∞–ø—Ä–æ—Å –¥–ª—è {token_address[:8]}...")
        await websocket.send(smart_query_request_bytes)
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å marketAddress
        for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                if isinstance(response, bytes):
                    try:
                        decoded_response = msgpack.unpackb(response, raw=False)
                        logger.debug(f"üì® –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç: {str(decoded_response)[:300]}...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ [9, 19, 200, payload]
                        if (isinstance(decoded_response, list) and len(decoded_response) >= 4 and 
                            decoded_response[0] == 9 and decoded_response[1] == 19 and 
                            decoded_response[2] == 200):
                            
                            response_payload = decoded_response[3]
                            if isinstance(response_payload, dict) and 'marketAddress' in response_payload:
                                market_address = response_payload['marketAddress']
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω marketAddress –¥–ª—è {token_address[:8]}...: {market_address}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache
                                TOKEN_TO_MARKET_CACHE[token_address] = market_address
                                logger.info(f"üìã ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –° marketAddress: {token_address} -> {market_address}")
                                return market_address
                            else:
                                logger.warning(f"‚ö†Ô∏è marketAddress –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {token_address[:8]}...")
                                logger.debug(f"üìä –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {str(response_payload)[:500]}...")
                        elif (isinstance(decoded_response, list) and len(decoded_response) >= 4 and 
                              decoded_response[0] == 9 and decoded_response[1] == 19 and 
                              decoded_response[2] != 200):
                            # –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ get-market-smart-with-warm –∑–∞–ø—Ä–æ—Å–µ: –∫–æ–¥ {decoded_response[2]}")
                        else:
                            logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞: {decoded_response[:3] if isinstance(decoded_response, list) else type(decoded_response)}")
                            
                    except Exception as decode_error:
                        logger.debug(f"üîç –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {decode_error}")
                        continue
                else:
                    logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ-binary —Å–æ–æ–±—â–µ–Ω–∏–µ: {type(response)}")
                    
            except asyncio.TimeoutError:
                logger.debug(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {token_address[:8]}...")
                break
            except Exception as e:
                logger.debug(f"üîç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
                break
        
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å marketAddress –¥–ª—è {token_address[:8]}... —á–µ—Ä–µ–∑ get-market-smart-with-warm")
        logger.info(f"üìã –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–µ–∑ marketAddress: {token_address}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è marketAddress —á–µ—Ä–µ–∑ get-market-smart-with-warm –¥–ª—è {token_address[:8]}...: {e}")
        logger.info(f"üìã –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: {token_address}")
        return None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
TARGET_CHAT_ID = -1002680160752  # ID –≥—Ä—É–ø–ø—ã –∏–∑ https://t.me/c/2680160752/13134
TARGET_THREAD_ID = 13134  # ID —Ç–µ–º—ã
MIN_BUNDLER_PERCENTAGE = float(os.getenv("MIN_BUNDLER_PERCENTAGE", "10"))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤

# WebSocket URL –¥–ª—è trade.padre.gg
PADRE_WS_URL = get_next_padre_backend()

# –ö—É–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ padre
PADRE_COOKIES = {
    'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel': '%7B%22distinct_id%22%3A%20%22tg_453500861%22%2C%22%24device_id%22%3A%20%22198553678cdad5-07cb4ed93902208-4c657b58-1fa400-198553678ce2283%22%2C%22%24user_id%22%3A%20%22tg_453500861%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
pending_tokens: Dict[str, dict] = {}  # {contract_address: token_data}
bundler_results: Dict[str, dict] = {}  # {contract_address: bundler_data}
sended_tokens: Dict[str, bool] = {}  # {contract_address: bool}

def decode_padre_message(message_bytes: bytes) -> Optional[dict]:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç trade.padre.gg WebSocket
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MessagePack, JSON, base64
    """
    try:
        logger.debug(f"üîç –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(message_bytes)} –±–∞–π—Ç")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π MessagePack
        try:
            data = msgpack.unpackb(message_bytes, raw=False)
            logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ MessagePack: {type(data)}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ fast-stats update, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ
            if isinstance(data, dict) and any(key in str(data).lower() for key in ['bundler', 'holder', 'volume', 'stats']):
                logger.info(f"üöÄ Fast-stats –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {list(data.keys()) if isinstance(data, dict) else type(data)}")
            
            return data if isinstance(data, dict) else {'raw_data': data, 'type': 'msgpack'}
        except Exception as e:
            logger.debug(f"‚ùå –ù–µ MessagePack: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: JSON
        try:
            text = message_bytes.decode('utf-8', errors='ignore')
            if text.strip().startswith('{'):
                data = json.loads(text)
                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ JSON")
                return data
        except Exception as e:
            logger.debug(f"‚ùå –ù–µ JSON: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: Base64 encoded data
        try:
            if len(message_bytes) % 4 == 0:  # base64 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 4
                decoded_b64 = base64.b64decode(message_bytes)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ MessagePack
                try:
                    data = msgpack.unpackb(decoded_b64, raw=False)
                    logger.debug(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ base64->MessagePack")
                    return data if isinstance(data, dict) else {'raw_data': data, 'type': 'base64_msgpack'}
                except:
                    pass
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ JSON
                try:
                    text = decoded_b64.decode('utf-8', errors='ignore')
                    if text.strip().startswith('{'):
                        data = json.loads(text)
                        logger.debug(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ base64->JSON")
                        return data
                except:
                    pass
                    
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ base64: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å multiplex format)
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if len(message_bytes) > 10:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON —á–∞—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                text = message_bytes.decode('utf-8', errors='ignore')
                
                # –ò—â–µ–º JSON –±–ª–æ–∫–∏
                import re
                json_matches = re.findall(r'\{[^{}]*\}', text)
                for match in json_matches:
                    try:
                        data = json.loads(match)
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω JSON –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–µ")
                        return data
                    except:
                        continue
                        
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ fast-stats
                if any(keyword in text.lower() for keyword in ['bundler', 'holder', 'volume', 'stats', 'trades']):
                    logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π fast-stats –∫–æ–Ω—Ç–µ–Ω—Ç: {text[:100]}...")
                    return {'type': 'fast_stats_text', 'content': text}
                    
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 5: –ü—Ä–æ—Å—Ç–æ–µ ping/pong —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            text = message_bytes.decode('utf-8', errors='ignore').strip()
            if text.lower() in ['ping', 'pong'] or len(text) < 10:
                return {'type': 'ping', 'message': text}
        except:
            pass
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logger.debug(f"ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ")
        return {
            'type': 'unknown',
            'raw_bytes': message_bytes.hex() if len(message_bytes) < 200 else f"{message_bytes[:100].hex()}...",
            'length': len(message_bytes),
            'ascii_preview': message_bytes.decode('utf-8', errors='ignore')[:100]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

class TokenMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–∞"""
    def __init__(self, token_address: str, creation_time: int):
        self.token_address = token_address
        self.creation_time = creation_time
        self.metrics_history = []
        self.max_dev_percent = 0
        self.max_bundlers_after_dev_exit = 0
        self.max_bundlers_before_dev_exit = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
        self.max_holders = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        self.dev_exit_time = None
        self.last_notification_time = 0
        self.last_notification_type = None  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
    def can_send_notification(self, notification_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('active', 'pump', etc)
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        current_time = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        MIN_NOTIFICATION_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if current_time - self.last_notification_time < MIN_NOTIFICATION_INTERVAL:
            return False
        
        # –ï—Å–ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if self.last_notification_type != notification_type:
            return True
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.last_notification_time = current_time
        self.last_notification_type = notification_type
        return True
    
    def add_metrics(self, metrics: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–µ–µ
        if 'timestamp' not in metrics:
            metrics['timestamp'] = int(time.time())

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ –∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
        dev_holding = metrics.get('devHoldingPcnt')
        dev_percent = float(dev_holding) if dev_holding is not None else 0
        
        bundles_percent = metrics.get('bundlesHoldingPcnt')
        bundles_percent = float(bundles_percent.get('current', 0) if isinstance(bundles_percent, dict) else (bundles_percent if bundles_percent is not None else 0))

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞
        if dev_percent > self.max_dev_percent:
            self.max_dev_percent = dev_percent
            logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∏ –¥–µ–≤–∞: {dev_percent:.1f}%")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –¥–µ–≤–∞
        if self.dev_exit_time is None and dev_percent == 0 and self.metrics_history:
            last_dev_percent = float(self.metrics_history[-1].get('devHoldingPcnt', 0) or 0)
            if last_dev_percent > 0:
                self.dev_exit_time = metrics['timestamp']
                logger.info(f"üö™ –î–µ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—à–µ–ª –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ {datetime.fromtimestamp(self.dev_exit_time)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–≤–∞
        if self.dev_exit_time is None:
            # –î–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
            if bundles_percent > self.max_bundlers_before_dev_exit:
                self.max_bundlers_before_dev_exit = bundles_percent
                logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞: {bundles_percent:.1f}%")
        else:
            # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
            if bundles_percent > self.max_bundlers_after_dev_exit:
                self.max_bundlers_after_dev_exit = bundles_percent
                logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞: {bundles_percent:.1f}%")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        total_holders = int(metrics.get('total_holders', 0) or 0)
        if total_holders > self.max_holders:
            self.max_holders = total_holders
            logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º —Ö–æ–ª–¥–µ—Ä–æ–≤: {total_holders}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.metrics_history.append(metrics.copy())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å—Å—ã–ª–æ–∫
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –º–µ—Ç—Ä–∏–∫
        current_time = int(time.time())
        self.metrics_history = [m for m in self.metrics_history 
                              if current_time - m['timestamp'] <= 300]
    
    def get_growth_rates(self) -> dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if len(self.metrics_history) < 2:
            return {
                'holders_growth': 0,
                'bundlers_growth': 0,
                'price_growth': 0
            }
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        old = self.metrics_history[0]
        new = self.metrics_history[-1]
        time_diff_sec = new['timestamp'] - old['timestamp']  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        logger.info(f"üìä time_diff_sec: {time_diff_sec}")
        logger.info(f"üìä old: {old}")
        logger.info(f"üìä new: {new}")
        
        if time_diff_sec == 0:
            return {
                'holders_growth': 0,
                'bundlers_growth': 0,
                'price_growth': 0
            }

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —É–±–µ–∂–¥–∞—è—Å—å —á—Ç–æ –æ–Ω–∏ —á–∏—Å–ª–∞
        old_holders = int(old.get('total_holders', 0) or 0)
        new_holders = int(new.get('total_holders', 0) or 0)
        old_bundlers = int(old.get('totalBundlesCount', 0) or 0)
        new_bundlers = int(new.get('totalBundlesCount', 0) or 0)
        old_price = float(old.get('basePriceInUsdUi', 0) or 0)
        new_price = float(new.get('basePriceInUsdUi', 0) or 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
        holders_diff = new_holders - old_holders
        bundlers_diff = new_bundlers - old_bundlers
        price_diff = new_price - old_price

        # –ï—Å–ª–∏ –ø—Ä–∏—Ä–æ—Å—Ç –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∫–∞–∫ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
        holders_growth = holders_diff * 60 if holders_diff > 0 else 0  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ /–º–∏–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        bundlers_growth = bundlers_diff * 60 if bundlers_diff > 0 else 0
        price_growth = price_diff * 60 if price_diff > 0 else 0
        
        logger.info(f"üìä –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è {self.token_address[:8]}:")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {time_diff_sec} —Å–µ–∫")
        logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {old_holders} ‚Üí {new_holders} (Œî{holders_diff}) = {holders_growth:.2f}/–º–∏–Ω")
        logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: {old_bundlers} ‚Üí {new_bundlers} (Œî{bundlers_diff}) = {bundlers_growth:.2f}/–º–∏–Ω")
        logger.info(f"üí∞ –¶–µ–Ω–∞: ${old_price:.8f} ‚Üí ${new_price:.8f} (Œî${price_diff:.8f}) = ${price_growth:.8f}/–º–∏–Ω")
        
        return {
            'holders_growth': holders_growth,
            'bundlers_growth': bundlers_growth,
            'price_growth': price_growth
        }
    
    def check_snipers_bundlers_correlation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤ –Ω–æ—Ä–º–µ (—Å–Ω–∞–π–ø–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏),
                 False –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ —á—Ç–æ —Å–Ω–∞–π–ø–µ—Ä—ã —ç—Ç–æ –±–∞–Ω–¥–ª–µ—Ä—ã
        """
        if not hasattr(self, 'metrics_history'):
            return True

        # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(self.metrics_history) < 3:
            return True

        bundlers_changes = []
        snipers_changes = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        for i in range(1, len(self.metrics_history)):
            prev = self.metrics_history[i-1]
            curr = self.metrics_history[i]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
            prev_bundles = prev.get('bundlesHoldingPcnt', 0)
            curr_bundles = curr.get('bundlesHoldingPcnt', 0)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–º, —Ç–∞–∫ –∏ —á–∏—Å–ª–æ–º
            if isinstance(prev_bundles, dict):
                prev_bundlers_pct = float(prev_bundles.get('current', 0) if prev_bundles is not None else 0)
            else:
                prev_bundlers_pct = float(prev_bundles if prev_bundles is not None else 0)
                
            if isinstance(curr_bundles, dict):
                curr_bundlers_pct = float(curr_bundles.get('current', 0) if curr_bundles is not None else 0)
            else:
                curr_bundlers_pct = float(curr_bundles if curr_bundles is not None else 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            prev_snipers = prev.get('snipersHoldingPcnt', 0)
            curr_snipers = curr.get('snipersHoldingPcnt', 0)
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            if isinstance(prev_snipers, dict):
                prev_snipers_pct = float(prev_snipers.get('current', 0) if prev_snipers is not None else 0)
            else:
                prev_snipers_pct = float(prev_snipers if prev_snipers is not None else 0)
                
            if isinstance(curr_snipers, dict):
                curr_snipers_pct = float(curr_snipers.get('current', 0) if curr_snipers is not None else 0)
            else:
                curr_snipers_pct = float(curr_snipers if curr_snipers is not None else 0)
            
            # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –∞ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫
            if curr_snipers_pct <= 3.5 and curr_bundlers_pct > 0:
                logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - –±–∞–Ω–¥–ª–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏")
                return True
            
            bundlers_change = curr_bundlers_pct - prev_bundlers_pct
            snipers_change = curr_snipers_pct - prev_snipers_pct
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            if abs(bundlers_change) > 0.1:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ 0.1%
                bundlers_changes.append(bundlers_change)
                snipers_changes.append(snipers_change)
                
                logger.info(f"üìä bundlers_change: {bundlers_change}")
                logger.info(f"üìä snipers_change: {snipers_change}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (bundlers_change * snipers_change > 0 and 
                    abs(bundlers_change - snipers_change) / max(abs(bundlers_change), abs(snipers_change)) < 0.3):
                    logger.info(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤:")
                    logger.info(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {bundlers_change:.2f}%")
                    logger.info(f"üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä–æ–≤: {snipers_change:.2f}%")

        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if len(bundlers_changes) < 2:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        suspicious = 0
        for i in range(len(bundlers_changes)):
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –±–ª–∏–∑–∫–∏ –ø–æ –º–∞—Å—à—Ç–∞–±—É
            if (bundlers_changes[i] * snipers_changes[i] > 0 and 
                abs(bundlers_changes[i] - snipers_changes[i]) / max(abs(bundlers_changes[i]), abs(snipers_changes[i])) < 0.3):
                suspicious += 1

        # –ï—Å–ª–∏ –±–æ–ª–µ–µ 50% –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
        is_suspicious = suspicious >= len(bundlers_changes) * 0.5
        if is_suspicious:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏!")
            logger.warning(f"üìä {suspicious} –∏–∑ {len(bundlers_changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é")
        
        return not is_suspicious

    def check_snipers_insiders_correlation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º–∏ (–µ—Å–ª–∏ –∏–Ω—Å–∞–π–¥–µ—Ä—ã = —Å–Ω–∞–π–ø–µ—Ä—ã ‚Äî –ø–ª–æ—Ö–æ)
        """
        if not hasattr(self, 'metrics_history'):
            return True
        if len(self.metrics_history) < 3:
            return True
        snipers_changes = []
        insiders_changes = []
        for i in range(1, len(self.metrics_history)):
            prev = self.metrics_history[i-1]
            curr = self.metrics_history[i]
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            prev_insiders = float(prev.get('insidersHoldingPcnt', 0) or 0)
            curr_insiders = float(curr.get('insidersHoldingPcnt', 0) or 0)
            snipers_change = curr_snipers - prev_snipers
            insiders_change = curr_insiders - prev_insiders
            if abs(snipers_change) > 0.1:
                snipers_changes.append(snipers_change)
                insiders_changes.append(insiders_change)
        if len(snipers_changes) < 2:
            return True
        # # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –∞ –∏–Ω—Å–∞–π–¥–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫
        # if curr_snipers <= 3.5 and curr_insiders > 0:
        #     logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –∏–Ω—Å–∞–π–¥–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - –∏–Ω—Å–∞–π–¥–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏")
        #     return True
        suspicious = 0
        for i in range(len(snipers_changes)):
            if (snipers_changes[i] * insiders_changes[i] > 0 and
                abs(snipers_changes[i] - insiders_changes[i]) / max(abs(snipers_changes[i]), abs(insiders_changes[i])) < 0.3):
                suspicious += 1
        is_suspicious = suspicious >= len(snipers_changes) * 0.5
        if is_suspicious:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º–∏!")
        return not is_suspicious

    def check_bundlers_snipers_exit_correlation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –ª–∏ –±–∞–Ω–¥–ª–µ—Ä—ã –∏ —Å–Ω–∞–π–ø–µ—Ä—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (—ç—Ç–æ –ø–ª–æ—Ö–æ)
        """
        if not hasattr(self, 'metrics_history'):
            return True
        if len(self.metrics_history) < 3:
            return True
        bundlers_changes = []
        snipers_changes = []
        for i in range(1, len(self.metrics_history)):
            prev = self.metrics_history[i-1]
            curr = self.metrics_history[i]
            prev_bundlers = prev.get('bundlesHoldingPcnt', 0)
            curr_bundlers = curr.get('bundlesHoldingPcnt', 0)
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            if isinstance(prev_bundlers, dict):
                prev_bundlers = float(prev_bundlers.get('current', 0) if prev_bundlers is not None else 0)
            else:
                prev_bundlers = float(prev_bundlers if prev_bundlers is not None else 0)
            if isinstance(curr_bundlers, dict):
                curr_bundlers = float(curr_bundlers.get('current', 0) if curr_bundlers is not None else 0)
            else:
                curr_bundlers = float(curr_bundlers if curr_bundlers is not None else 0)
            bundlers_change = curr_bundlers - prev_bundlers
            snipers_change = curr_snipers - prev_snipers
            # –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
            if bundlers_change < 0 and snipers_change < 0:
                bundlers_changes.append(bundlers_change)
                snipers_changes.append(snipers_change)
        if len(bundlers_changes) < 2:
            return True
        # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –∞ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫
        if curr_snipers <= 3.5 and curr_bundlers > 0:
            logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - –±–∞–Ω–¥–ª–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏")
            return True
        suspicious = 0
        for i in range(len(bundlers_changes)):
            if abs(bundlers_changes[i] - snipers_changes[i]) / max(abs(bundlers_changes[i]), abs(snipers_changes[i])) < 0.3:
                suspicious += 1
        is_suspicious = suspicious >= len(bundlers_changes) * 0.5
        if is_suspicious:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤!")
        return not is_suspicious

    def check_rapid_exit(self, metric_name: str, ratio: float = 3.0, max_seconds: int = 120) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (—Å–Ω–∞–π–ø–µ—Ä–æ–≤ –∏–ª–∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤)
        Args:
            metric_name: 'snipersHoldingPcnt' –∏–ª–∏ 'insidersHoldingPcnt'
            ratio: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç
            max_seconds: –∑–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤—ã—Ö–æ–¥
        Returns:
            bool: True –µ—Å–ª–∏ –±—ã–ª —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
        """
        if not self.metrics_history or len(self.metrics_history) < 2:
            return False
        first_value = None
        first_time = None
        for m in self.metrics_history:
            value = float(m.get(metric_name, 0) or 0)
            if value > 0:
                first_value = value
                first_time = m['timestamp']
                break
        if not first_value:
            return False
        current_value = float(self.metrics_history[-1].get(metric_name, 0) or 0)
        current_time = self.metrics_history[-1]['timestamp']
        time_diff = current_time - first_time
        if time_diff <= max_seconds and current_value <= first_value / ratio:
            logger.info(f"üìâ –°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è {metric_name}: {first_value:.1f}% ‚Üí {current_value:.1f}% –∑–∞ {time_diff} —Å–µ–∫")
            return True
        return False

class PadreWebSocketClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ trade.padre.gg WebSocket"""
    
    def __init__(self, token_address: str, connection_id: str = "default"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.token_address = token_address  # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.connection_id = f"{connection_id}_{token_address[:8]}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞
        self.websocket = None
        self.running = False
        self.start_time = None  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.max_duration = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.token_data_cache = {}  # –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.current_update_data = None  # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.current_pump_gaze = None  # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ pump_fun_gaze
        self.last_used_api_domain = 0
        self.axiom_api_domains = [
            "https://api.axiom.trade",
            "https://api2.axiom.trade",
            "https://api3.axiom.trade",
            "https://api6.axiom.trade",
            "https://api7.axiom.trade",
            "https://api8.axiom.trade",
            "https://api9.axiom.trade",
            "https://api10.axiom.trade",
        ]
        self.token_metrics = TokenMetrics(token_address, int(time.time()))
        self.last_notification_type = None  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.last_notification_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.max_dev_percent = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        self.dev_exit_time = None  # –í—Ä–µ–º—è –∫–æ–≥–¥–∞ –¥–µ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—à–µ–ª –∏–∑ —Ç–æ–∫–µ–Ω–∞
        self.max_bundlers_after_dev_exit = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
        self.padre_backend = get_next_padre_backend()  # –í—ã–±–∏—Ä–∞–µ–º –±—ç–∫–µ–Ω–¥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            logger.info(f"üîó Padre backend: {self.padre_backend.split('/')[-2]}")
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers = {
                'Cookie': 'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel=' + PADRE_COOKIES['mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel'],
                'Origin': 'https://trade.padre.gg',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0'
            }
            
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {self.padre_backend} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ SSL
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for attempt in range(3):
                try:
                    self.websocket = await websockets.connect(
                        self.padre_backend,
                        extra_headers=headers,
                        ping_interval=None,
                        ping_timeout=None,
                        ssl=ssl_context
                    )
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ {self.padre_backend} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.send_auth_message()
                    
                    return True
                    
                except AuthenticationPolicyViolation as e:
                    logger.critical(f"üö´ {e}")
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    sys.exit(1)
                except Exception as e:
                    if attempt < 2:  # –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –±—ç–∫–µ–Ω–¥ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
                        self.padre_backend = get_next_padre_backend()
                        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥ {self.padre_backend}")
                        await asyncio.sleep(1)  # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.padre_backend} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}: {e}")
            return False

    async def send_bundler_notification(self, contract_address: str, token_data: dict, bundler_count: int, bundler_percentage: float, simulated: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            market_id = await get_market_id_for_token_cached(contract_address)
            if sended_tokens.get(market_id):
                logger.info(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {contract_address[:8]} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            symbol = token_data.get('symbol', 'UNK')
            name = token_data.get('name', symbol)
            dex_source = token_data.get('dex_source', 'Unknown')
            market_cap = token_data.get('market_cap', 0)
            total_holders = token_data.get('total_holders', 0)
            sol_spent_in_bundles = token_data.get('sol_spent_in_bundles', 0)
            bundler_percentage_ath = token_data.get('bundler_percentage_ath', 0)
            sim_tag = " üé≤ [–°–ò–ú–£–õ–Ø–¶–ò–Ø]" if simulated else ""
            
            logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {contract_address[:8]}")
            logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π: holders={total_holders}, bundlers={bundler_count}, market_id={market_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º deployer –ø—Ä–æ—Ü–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
            deployer_pcnt = token_data.get('deployerHoldingPcnt')
            if isinstance(deployer_pcnt, dict):
                deployer_pcnt = deployer_pcnt.get('current', 0)
            
            message = (
                f"üö® <b>X X X XX X –∏–∫—Å—ã—ã—ã—ã—ã!!!</b>\n\n"
                f"ü™ô <b>{name}</b> ({symbol})\n"
                f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{contract_address}</code>\n"
                f"üìä <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> {bundler_count} ({self.safe_format(bundler_percentage, '.1f')}%)\n"
                f"üèÜ <b>ATH –±–∞–Ω–¥–ª–µ—Ä—ã:</b> {self.safe_format(bundler_percentage_ath, '.1f')}%\n"
                f"üë§ <b>–•–æ–ª–¥–µ—Ä—ã:</b> {total_holders}\n"
                f"üí∞ <b>SOL –Ω–∞ –±–∞–Ω–¥–ª–µ—Ä—ã:</b> {self.safe_format(sol_spent_in_bundles, ',.2f')}\n"
                f"üí∞ <b>Market Cap:</b> ${self.safe_format(market_cap, ',.0f')}\n"
                f"üè™ <b>DEX:</b> {dex_source}\n\n"
                
                f"üíµ <b>–¶–µ–Ω–∞:</b> ${self.safe_format(token_data.get('basePriceInUsdUi'), ',.8f')}\n"
                f"üí± <b>–¶–µ–Ω–∞ –≤ Quote:</b> {self.safe_format(token_data.get('basePriceInQuoteUi'), ',.8f')}\n"
                f"üíß <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:</b> ${self.safe_format(token_data.get('liquidityInUsdUi'), ',.2f')}\n\n"
                
                f"üìä <b>–ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê:</b>\n"
                f"üë®‚Äçüíº <b>Dev %:</b> {self.safe_format(token_data.get('devHoldingPcnt'), '.1f')}%\n"
                f"üë®‚Äçüíº <b>Deployer %:</b> {self.safe_format(deployer_pcnt, '.1f')}%\n"
                f"üë• <b>–ò–Ω—Å–∞–π–¥–µ—Ä—ã:</b> {self.safe_format(token_data.get('insidersHoldingPcnt'), '.1f')}%\n"
                f"üéØ <b>–°–Ω–∞–π–ø–µ—Ä—ã:</b> {token_data.get('totalSnipers') or 0} ({self.safe_format(token_data.get('snipersHoldingPcnt'), '.1f')}%)\n"
                f"ü§ñ <b>Trading App:</b> {token_data.get('tradingAppTxns') or 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
                
                f"üì¶ <b>–ë–ê–ù–î–õ–´:</b>\n"
                f"üíº <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {token_data.get('totalBundlesCount') or 0}\n"
                f"üìà <b>–¢–µ–∫—É—â–∏–π %:</b> {self.safe_format((token_data.get('bundlesHoldingPcnt', {}) or {}).get('current'), '.1f')}%\n"
                f"üèÜ <b>ATH %:</b> {self.safe_format((token_data.get('bundlesHoldingPcnt', {}) or {}).get('ath'), '.1f')}%\n"
                f"üí∞ <b>SOL –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(token_data.get('totalSolSpentInBundles'), ',.2f')}\n"
                f"üî¢ <b>–¢–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(token_data.get('totalTokenBoughtInBundles'), ',.0f')}\n\n"
                
                f"üÜï <b>FRESH WALLETS:</b>\n"
                f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {(token_data.get('freshWalletBuys', {}) or {}).get('count', 0)}\n"
                f"üí∞ <b>SOL –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {self.safe_format((token_data.get('freshWalletBuys', {}) or {}).get('sol'), ',.2f')}\n"
                f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏–∏:</b> {self.safe_format(token_data.get('totalSolFees'), ',.4f')} SOL\n\n"
                
                f"üìä <b>SUPPLY:</b>\n"
                f"üî¢ <b>Total Supply:</b> {self.safe_format(token_data.get('totalSupply'), ',')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    {"text": "üöÄ Axiom", "url": f"https://axiom.trade/t/{contract_address}"},
                    {"text": "üöÄ DexScreener", "url": f"https://dexscreener.com/solana/{contract_address}"}
                ],
            ]
            
            success = await self.send_telegram_message(message, keyboard)
            
            if success:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol} —Å {bundler_percentage:.1f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
                if market_id:
                    sended_tokens[market_id] = True
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {e}")
            logger.exception(e)
    
    async def send_auth_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_message_b64 = "kwHaAyZleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWprMU1XUmtaVGt6TW1WaVlXTmtPRGhoWm1Jd01ETTNZbVpsWkRobU5qSmlNRGRtTURnMk5tSWlMQ0owZVhBaU9pSktWMVFpZlEuZXlKdVlXMWxJam9pZDI5eWEyVnlNVEF3TUhnaUxDSm9ZWFYwYUNJNmRISjFaU3dpYVhOeklqb2lhSFIwY0hNNkx5OXpaV04xY21WMGIydGxiaTVuYjI5bmJHVXVZMjl0TDNCaFpISmxMVFF4TnpBeU1DSXNJbUYxWkNJNkluQmhaSEpsTFRReE56QXlNQ0lzSW1GMWRHaGZkR2x0WlNJNk1UYzFNems1TkRNNU1Dd2lkWE5sY2w5cFpDSTZJblJuWHpjNE9URTFNalF5TkRRaUxDSnpkV0lpT2lKMFoxODNPRGt4TlRJME1qUTBJaXdpYVdGMElqb3hOelUwTURBMU1UZ3hMQ0psZUhBaU9qRTNOVFF3TURnM09ERXNJbVpwY21WaVlYTmxJanA3SW1sa1pXNTBhWFJwWlhNaU9udDlMQ0p6YVdkdVgybHVYM0J5YjNacFpHVnlJam9pWTNWemRHOXRJbjE5LldNREVyaFJya3c1SUZjWVhoVnJtR1FxbTZlTjZXSTNTeThPUVRoUHhvbFdwUUl3bnJacGtaVkpHRlZ5em8xRnkxdDNsSXVGSUJudG1QY1ZTWnYyNnlURURUNW9tbi1IYm1sN0t4ZERqSklnNlJpMWpVbW9JZmoxOXpocWFHaDM0aG9UZTlfMHJKRlEySkRuUHIzWUUzaXNLcmduMHR1SWdocXFIUUZqUEhGZk9LWWpYbXg4cTZtdFdNRE1DdWtvbGNWS2NWSGdUWXVsVkEyMG1WZU5aemg2LVdFV2owNTBBSmh0eG9Db0U0c2VDY2NNX2sxbzNHak5LSWJBU0VOdUxhR2drR2lYNWsxdEtjSmRQNjZqdml0VWhtNGlQeU1rcW1qUlpmMC1GR1hMdlV5Z3lyV2NYMFo0V3dpU2ZtalAyellnN0VicTRrSVZOSklqc1BzcHUwUa00NDRjNGI0NC1hOTI3"
            auth_bytes = base64.b64decode(auth_message_b64)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Binary Message)
            await self.websocket.send(auth_bytes)
            logger.info("üîê –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            response = await self.websocket.recv()
            logger.info(f"üì® –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {len(response)} –±–∞–π—Ç")
            
        except websockets.exceptions.ConnectionClosedError as e:
            if e.code == 1008:  # Policy violation
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ 1008): {e}")
                raise AuthenticationPolicyViolation("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
    
    async def subscribe_to_token_data(self, token_address: str):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ç–æ–∫–µ–Ω
            if token_address != self.token_address:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω {token_address[:8]} –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è {self.token_address[:8]}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if not self.websocket:
                logger.error(f"‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}")
                return False
            
            logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º marketAddress –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è marketAddress
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.axiom_api_domains[self.last_used_api_domain]}/swap-info?tokenAddress={token_address}", headers={
                    'accept': '*/*',
                    'cookie': 'auth-refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW5JZCI6IjdhN2JhN2E3LWY4NDktNDVlNC05ZDI4LWY2MjRhNjUzY2YyYiIsImlhdCI6MTc1Mzk5MDE5Mn0.m825JgO7TNs6LR1RfmWs2y_O0qSZfQi3Tug04qdVKMw; auth-access-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoZW50aWNhdGVkVXNlcklkIjoiMzVlNjc3YzMtMjY4Zi00YTFmLWI5M2ItN2VkOGJjN2IzYjU0IiwiaWF0IjoxNzUzOTk1MDM1LCJleHAiOjE3NTM5OTU5OTV9.pej0JiJAHSFVS_rvbKpYjK4slqJCxNDQqvUHdheH9L4'
                }, timeout=aiohttp.ClientTimeout(total=5)) as response:
                    try:
                        data = await response.json(content_type=None)
                        market_id = data.get('pairAddress', None)
                    except Exception as e:
                        logger.error(f"Failed to parse JSON from swap-info: {e}")
                        market_id = None
                    self.last_used_api_domain = (self.last_used_api_domain + 1) % len(self.axiom_api_domains)

            # –ï—Å–ª–∏ –µ—Å—Ç—å market_id, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats –∏ —Ö–æ–ª–¥–µ—Ä–æ–≤
            if market_id:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ market_id {market_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}")
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ token stats
                token_subscribe_path = f"/fast-stats/encoded-tokens/solana-{market_id}/on-fast-stats-update"
                token_message_data = [4, 1, token_subscribe_path]
                token_message_bytes = msgpack.packb(token_message_data)
                
                logger.info(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ token fast-stats –¥–ª—è {token_address[:8]}...")
                await self.websocket.send(token_message_bytes)

                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ market stats
                market_subscribe_path = f"/fast-stats/encoded-markets/solana-{market_id}/on-auto-migrating-market-stats-update"
                market_message_data = [4, 43, market_subscribe_path]
                market_message_bytes = msgpack.packb(market_message_data)
                
                logger.info(f"üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... (market: {market_id[:8]})")
                logger.info(f"üì° Market –ø—É—Ç—å: {market_subscribe_path}")
                logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 43, path] -> {len(market_message_bytes)} –±–∞–π—Ç")
                await self.websocket.send(market_message_bytes)

                # # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ (recent holders)
                # holders_subscribe_path = f"/holders/chains/SOLANA/tokenAddress/{token_address}/subscribe-recent-holders"
                # holders_message_data = [4, 37, holders_subscribe_path]
                # holders_message_bytes = msgpack.packb(holders_message_data)

                # logger.info(f"üë• –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ recent holders –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
                # logger.info(f"üì° Holders –ø—É—Ç—å: {holders_subscribe_path}")
                # logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 37, path] -> {len(holders_message_bytes)} –±–∞–π—Ç")
                # await self.websocket.send(holders_message_bytes)

                # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ top holders v3
                top_holders_subscribe_path = f"/holders/chains/SOLANA/tokenAddress/{token_address}/subscribe-top-holders-v3"
                top_holders_message_data = [4, 38, top_holders_subscribe_path]
                top_holders_message_bytes = msgpack.packb(top_holders_message_data)

                logger.info(f"üèÜ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ top holders v3 –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
                logger.info(f"üì° Top holders –ø—É—Ç—å: {top_holders_subscribe_path}")
                logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 38, path] -> {len(top_holders_message_bytes)} –±–∞–π—Ç")
                await self.websocket.send(top_holders_message_bytes)

            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω {token_address}: {e}")
            return False

    async def track_token_info(self, market_id: str, token_address: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ token-info –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ market_id"""
        last_data = None
        unchanged_time = 0
        start_time = time.time()

        while time.time() - start_time < 300:  # 5 –º–∏–Ω—É—Ç
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{self.axiom_api_domains[self.last_used_api_domain]}/token-info?pairAddress={market_id}", headers={
                        'accept': '*/*',
                        'cookie': 'auth-refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW5JZCI6ImU2YTQ3NmNlLWVlYzUtNDk0Yy05NzMyLWJmMTg2ODg5ODQyZiIsImlhdCI6MTc1MzM1MTk0Nn0.HxLwKo8UHnoAonBgcg01ZyPzBosdiNopHHu-HxIf8Yo; auth-access-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoZW50aWNhdGVkVXNlcklkIjoiMjI2MGI0YzEtOWUxYy00YTlkLTkyZmQtYWE3ZGM2MWY1YTQzIiwiaWF0IjoxNzUzMzU4NTY4LCJleHAiOjE3NTMzNTk1Mjh9.231BR16KSiCQeRGI11kstS-pXLpNfYdJkIW0io3qv9I'
                    }, timeout=aiohttp.ClientTimeout(total=5)) as response:
                        response_text = await response.text()
                        logger.info(f"123213s25—ã1: {str(response.url)} {response_text}")
                        
                        current_data = response_text
                        
                        if current_data == last_data:
                            unchanged_time += 1
                            if unchanged_time >= 300:  # 5 –º–∏–Ω—É—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                                logger.info(f"–¢–æ–∫–µ–Ω {token_address[:8]} –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π 5 –º–∏–Ω—É—Ç")
                                return
                        else:
                            unchanged_time = 0
                            last_data = current_data
                            
                self.last_used_api_domain = (self.last_used_api_domain + 1) % len(self.axiom_api_domains)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ token-info: {e}")
                await asyncio.sleep(1)

    
    async def listen_for_bundler_data(self):
        """–°–ª—É—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ WebSocket"""
        try:
            async for message in self.websocket:
                if isinstance(message, bytes):
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    decoded_data = decode_padre_message(message)
                    
                    if decoded_data:
                        logger.info(f"üîç –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {decoded_data}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –æ—Ç–≤–µ—Ç markets-per-token
                        if self.is_markets_per_token_response(decoded_data):
                            await self.process_markets_per_token_response(decoded_data)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ fast-stats
                        elif self.is_fast_stats_update(decoded_data):
                            await self.process_fast_stats_data(decoded_data)
                        elif self.is_top10holders_update(decoded_data):
                            await self.process_top10holders_data(decoded_data)
                        elif decoded_data.get('type') == 'ping':
                            # –≠—Ç–æ ping —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º pong –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            logger.debug("üì° –ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                        else:
                            logger.debug(f"üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {decoded_data}")
                            
                elif isinstance(message, str):
                    logger.info(f"üì® –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def is_markets_per_token_response(self, data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º markets-per-token"""
        if not isinstance(data, dict):
            return False
        
        if 'raw_data' in data and isinstance(data['raw_data'], list):
            raw_data = data['raw_data']
            if len(raw_data) >= 4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º markets-per-token responses [9, 45, 200, payload]
                if raw_data[0] == 9 and raw_data[1] == 45 and raw_data[2] == 200:
                    return True
        
        return False
    
    async def process_markets_per_token_response(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç markets-per-token –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç—ã"""
        try:
            if 'raw_data' in data and isinstance(data['raw_data'], list):
                raw_data = data['raw_data']
                if len(raw_data) >= 4 and isinstance(raw_data[3], dict):
                    payload = raw_data[3]
                    
                    logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç markets-per-token: {str(payload)[:200]}...")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º cache
                    process_markets_per_token_response(payload)
                    
                    # –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç—ã
                    if 'markets' in payload and 'SOLANA' in payload['markets']:
                        solana_markets = payload['markets']['SOLANA']
                        
                        for token_address, markets_list in solana_markets.items():
                            if markets_list and isinstance(markets_list, list) and len(markets_list) > 0:
                                market_info = markets_list[0]
                                market_id = market_info.get('marketId')
                                
                                if market_id and market_id.startswith('solana-'):
                                    clean_market_id = market_id[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "solana-"
                                    
                                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats
                                    await self.subscribe_to_market_stats(token_address, clean_market_id)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markets-per-token –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def subscribe_to_market_stats(self, token_address: str, market_id: str):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ market stats –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∞"""
        try:
            market_subscribe_path = f"/fast-stats/encoded-markets/solana-{market_id}/on-auto-migrating-market-stats-update"
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä—É: [4, 43, path] –¥–ª—è market stats
            market_message_data = [4, 43, market_subscribe_path]
            market_message_bytes = msgpack.packb(market_message_data)
            
            logger.info(f"üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... (market: {market_id[:8]})")
            logger.info(f"üì° Market –ø—É—Ç—å: {market_subscribe_path}")
            logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 43, path] -> {len(market_message_bytes)} –±–∞–π—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ market stats
            await self.websocket.send(market_message_bytes)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ market stats –¥–ª—è {token_address[:8]}...: {e}")

    def is_fast_stats_update(self, data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º fast-stats"""
        if not isinstance(data, dict):
            return False
        
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∏—â–µ–º raw_data —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'raw_data' in data and isinstance(data['raw_data'], list):
            raw_data = data['raw_data']
            if len(raw_data) >= 3:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º market stats responses [5, 43, payload]
                if raw_data[0] == 5 and raw_data[1] == 43:
                    return True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º token stats responses [5, 1, payload]
                elif raw_data[0] == 5 and raw_data[1] == 1:
                    return True
                # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markets-per-token –∫–∞–∫ fast-stats
                elif raw_data[0] == 9 and raw_data[1] == 45:
                    return False
        
        # –°—Ç–∞—Ä—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ fast-stats –¥–∞–Ω–Ω—ã—Ö
        stats_indicators = ['bundlers', 'holders', 'volume', 'market_cap', 'trades', 'snapshot', 'tokenAddress', 'pumpFunGaze']
        return any(indicator in str(data).lower() for indicator in stats_indicators)

    def is_top10holders_update(self, data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º top10holders"""
        if not isinstance(data, dict):
            return False
        
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∏—â–µ–º raw_data —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'raw_data' in data and isinstance(data['raw_data'], list):
            raw_data = data['raw_data']
            if len(raw_data) >= 3:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º market stats responses [5, 43, payload]
                if raw_data[0] == 5 and raw_data[1] == 38:
                    return True
                else:
                    return False
    
    def safe_format(self, value, format_spec: str, default=0):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None"""
        try:
            if value is None:
                value = default
            return f"{value:{format_spec}}"
        except (ValueError, TypeError):
            return f"{default:{format_spec}}"
    
    async def process_fast_stats_data(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ fast-stats –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö"""
        try:
            logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º fast-stats –¥–∞–Ω–Ω—ã–µ: {str(data)}...")
            
            if not self.websocket:
                logger.warning(f"‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {self.token_address[:8]}")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã [5, 1, payload]
            if 'raw_data' not in data or not isinstance(data['raw_data'], list):
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            raw_data = data['raw_data']
            if len(raw_data) < 3 or not isinstance(raw_data[2], dict):
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ raw_data")
                return
            
            payload = raw_data[2]
            message_type_code = raw_data[1] if len(raw_data) > 1 else 0
            msg_type = payload.get('type', 'unknown')
            
            logger.info(f"üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è fast-stats: {msg_type} (–∫–æ–¥: {message_type_code})")
            
            if message_type_code == 43:
                logger.info(f"üéØ –ü–û–õ–£–ß–ò–õ–ò MARKET STATS (–∫–æ–¥ 43) - –∏—â–µ–º bundler –¥–∞–Ω–Ω—ã–µ!")
                
                if msg_type == 'init' and 'snapshot' in payload:
                    snapshot = payload['snapshot']
                    token_address = snapshot.get('baseTokenAddress')
                    market_id = snapshot.get('marketId')
                    
                    if token_address:
                        self.current_token_address = token_address
                        logger.info(f"üîç –ü–û–õ–ù–´–ô MARKET INIT SNAPSHOT –¥–ª—è {token_address[:8]}:")
                        logger.info(f"üì¶ INIT SNAPSHOT: {snapshot}")
                        
                        if token_address in self.token_data_cache:
                            logger.warning(f"‚≠êÔ∏è –¢–æ–∫–µ–Ω {token_address[:8]} –ø—Ä–æ—à—ë–ª –º–∏–≥—Ä–∞—Ü–∏—é")
                            return

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ snapshot
                        self.token_data_cache[token_address] = {
                            'timestamp': int(time.time()),  # –î–æ–±–∞–≤–ª—è–µ–º timestamp
                            'basePriceInUsdUi': snapshot.get('basePriceInUsdUi'),
                            'basePriceInQuoteUi': snapshot.get('basePriceInQuoteUi'),
                            'liquidityInUsdUi': snapshot.get('liquidityInUsdUi'),
                            'totalSupply': snapshot.get('baseTokenTotalSupply'),
                            'symbol': snapshot.get('baseTokenSymbol'),
                            'name': snapshot.get('baseTokenName'),
                            'marketCreatedAt': snapshot.get('marketCreatedAt'),
                            'total_holders': snapshot.get('totalHolders', 0),
                            'devHoldingPcnt': 0,
                            'tradingAppTxns': 0,
                            'freshWalletBuys': {'count': 0, 'sol': 0},
                            'insidersHoldingPcnt': 0,
                            'totalSnipers': 0,
                            'bundlesHoldingPcnt': {'current': 0, 'ath': 0},
                            'totalBundlesCount': 0,
                            'totalSolSpentInBundles': 0,
                            'totalTokenBoughtInBundles': 0,
                            'totalSolFees': 0,
                            'snipersHoldingPcnt': 0,
                            'baseTokenAudit': snapshot.get('baseTokenAudit', {})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏—Ç —Ç–æ–∫–µ–Ω–∞
                        }
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å baseTokenAudit –≤ snapshot, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                        if 'baseTokenAudit' in snapshot:
                            self.token_data_cache[token_address]['baseTokenAudit'] = snapshot['baseTokenAudit']
                            logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞—É–¥–∏—Ç —Ç–æ–∫–µ–Ω–∞: {snapshot['baseTokenAudit']}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                        await self.process_token_metrics(self.token_data_cache[token_address])
                
                elif msg_type == 'update':
                    logger.info(f"üöÄ MARKET UPDATE - –∏—â–µ–º bundler –¥–∞–Ω–Ω—ã–µ!")
                    
                    if 'update' in payload:
                        update_data = payload['update']
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ update –¥–∞–Ω–Ω—ã–µ
                        update_data['timestamp'] = int(time.time())
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å baseTokenAudit –≤ update, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                        if 'baseTokenAudit' in update_data:
                            if self.current_token_address in self.token_data_cache:
                                self.token_data_cache[self.current_token_address]['baseTokenAudit'] = update_data['baseTokenAudit']
                                logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω –∞—É–¥–∏—Ç —Ç–æ–∫–µ–Ω–∞: {update_data['baseTokenAudit']}")
                        
                        if self.current_token_address in self.token_data_cache:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            self.token_data_cache[self.current_token_address].update(update_data)
                            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                            self.token_data_cache[self.current_token_address]['timestamp'] = update_data['timestamp']
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            await self.process_token_metrics(self.token_data_cache[self.current_token_address])
            
            if 'update' not in payload:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç 'update' –ø–æ–ª—è –≤ payload")
                return
            
            update_data = payload['update']
            logger.info(f"üì¶ –ü–û–õ–ù–´–ô MARKET UPDATE: {update_data}")
            
            if not self.current_token_address:
                logger.warning("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–µ—à –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
            current_cache = self.token_data_cache.get(self.current_token_address, {})
            if not current_cache:
                current_cache = {
                    'basePriceInUsdUi': 0,
                    'basePriceInQuoteUi': 0,
                    'liquidityInUsdUi': 0,
                    'total_holders': 0,
                    'devHoldingPcnt': 0,
                    'tradingAppTxns': 0,
                    'freshWalletBuys': {'count': 0, 'sol': 0},
                    'insidersHoldingPcnt': 0,
                    'totalSnipers': 0,
                    'bundlesHoldingPcnt': {'current': 0, 'ath': 0},
                    'totalBundlesCount': 0,
                    'totalSolSpentInBundles': 0,
                    'totalTokenBoughtInBundles': 0,
                    'totalSolFees': 0,
                    'snipersHoldingPcnt': 0,
                    'baseTokenAudit': {
                        'chain': 'SOLANA',
                        'tokenAddress': self.current_token_address,
                        'deployerAddress': None,
                        'isFreezeAuthorityEnabled': None,
                        'isMintAuthorityEnabled': None,
                        'top10HoldersPcnt': None
                    }
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'basePriceInUsdUi' in update_data:
                current_cache['basePriceInUsdUi'] = update_data['basePriceInUsdUi']
            if 'basePriceInQuoteUi' in update_data:
                current_cache['basePriceInQuoteUi'] = update_data['basePriceInQuoteUi']
            if 'liquidityInUsdUi' in update_data:
                current_cache['liquidityInUsdUi'] = update_data['liquidityInUsdUi']
            if 'totalHolders' in update_data:
                current_cache['total_holders'] = update_data['totalHolders']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pumpFunGaze –¥–∞–Ω–Ω—ã–µ
            if 'pumpFunGaze' in update_data:
                pump_gaze = update_data['pumpFunGaze']
                for key in ['devHoldingPcnt', 'tradingAppTxns', 'freshWalletBuys',
                          'insidersHoldingPcnt', 'totalSupply', 'totalSnipers',
                          'bundlesHoldingPcnt', 'totalBundlesCount', 'totalSolSpentInBundles',
                          'totalTokenBoughtInBundles', 'totalSolFees', 'snipersHoldingPcnt']:
                    if key in pump_gaze:
                        current_cache[key] = pump_gaze[key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
            self.token_data_cache[self.current_token_address] = current_cache
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("üìä –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
            logger.info(f"üíµ –¶–µ–Ω–∞ USD: ${self.safe_format(current_cache.get('basePriceInUsdUi', 0), ',.8f')}")
            logger.info(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${self.safe_format(current_cache.get('liquidityInUsdUi', 0), ',.2f')}")
            logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {current_cache.get('total_holders', 0)}")
            logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: {current_cache.get('totalBundlesCount', 0)}")
            logger.info(f"üÜï Fresh Wallets: {(current_cache.get('freshWalletBuys', {}) or {}).get('count', 0)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            await self.process_token_metrics(current_cache)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ fast-stats –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(traceback.format_exc())

    async def process_top10holders_data(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ top10holders –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¢–û–ü-10 —Ö–æ–ª–¥–µ—Ä–∞—Ö"""
        try:
            logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º top10holders –¥–∞–Ω–Ω—ã–µ: {str(data)}...")
            
            if not self.websocket:
                logger.warning(f"‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {self.token_address[:8]}")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã [5, 1, payload]
            if 'raw_data' not in data or not isinstance(data['raw_data'], list):
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            raw_data = data['raw_data']
            if len(raw_data) < 3 or not isinstance(raw_data[2], dict):
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ raw_data")
                return
            
            payload = raw_data[2]
            message_type_code = raw_data[1] if len(raw_data) > 1 else 0
            msg_type = payload.get('type', 'unknown')
            
            logger.info(f"üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è top10holders: {msg_type} (–∫–æ–¥: {message_type_code})")
            
            if message_type_code == 38:
                logger.info(f"üéØ –ü–û–õ–£–ß–ò–õ–ò top10holders (–∫–æ–¥ 38) - –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö!")
                
                if msg_type == 'update':
                    logger.info(f"üöÄ top10holders UPDATE - –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö!")
                    
                    if 'update' in payload:
                        update_data = payload['update']
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ update –¥–∞–Ω–Ω—ã–µ
                        update_data['timestamp'] = int(time.time())

                        if 'totalSupply' in self.token_data_cache[self.current_token_address]:
                            totalSupply = self.token_data_cache[self.current_token_address]['totalSupply']
                            if not totalSupply:
                                logger.warning("‚ö†Ô∏è –ù–µ—Ç 'totalSupply' –ø–æ–ª—è –≤ self.token_data_cache[self.current_token_address]")
                                return
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ—Ç 'totalSupply' –ø–æ–ª—è –≤ self.token_data_cache[self.current_token_address]")
                            return

                        if 'deleted' in update_data:
                            if self.current_token_address in self.token_data_cache:
                                if 'top10holders' in self.token_data_cache[self.current_token_address]:
                                    top10holders_pcnt = self.token_data_cache[self.current_token_address]['top10holders']
                                else:
                                    top10holders_pcnt = {}
                                for delete in update_data['deleted']:
                                    del top10holders_pcnt[delete[1]]
                                if 'top10holders' in self.token_data_cache[self.current_token_address]:
                                    self.token_data_cache[self.current_token_address]['top10holders'].update(top10holders_pcnt)
                                    logger.info(f"üìä –£–¥–∞–ª–µ–Ω—ã top10holders —Ç–æ–∫–µ–Ω–∞: {update_data['deleted']}")
                                else:
                                    self.token_data_cache[self.current_token_address]['top10holders'] = top10holders_pcnt
                                    logger.info(f"üìä –£–¥–∞–ª–µ–Ω—ã top10holders —Ç–æ–∫–µ–Ω–∞: {update_data['deleted']}")

                        if 'updated' in update_data:
                            if self.current_token_address in self.token_data_cache:
                                if len(update_data['updated']) == 1 and update_data['updated'][0][4]:
                                    liquidityPoolAddress = update_data['updated'][0][1]
                                    if not self.token_data_cache[self.current_token_address].get('liquidityPoolAddress'):
                                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {update_data['updated'][0][1]}")
                                        self.token_data_cache[self.current_token_address]['liquidityPoolAddress'] = liquidityPoolAddress
                                        self.token_data_cache[self.current_token_address]['liquidityPoolPcnt'] = int(update_data['updated'][0][2]) / int(totalSupply) * 100
                                    else:
                                        if self.token_data_cache[self.current_token_address].get('liquidityPoolAddress') == liquidityPoolAddress:
                                            self.token_data_cache[self.current_token_address]['liquidityPoolPcnt'] = int(update_data['updated'][0][2]) / int(totalSupply) * 100
                                    
                                for update in update_data['updated']:
                                    if update[2]:
                                        top10holders_pcnt[update[1]] = {
                                            'pcnt': int(update[2]) / int(totalSupply) * 100,
                                            'insider': update[4],
                                            'isBundler': update[15],
                                            'isPool': self.token_data_cache[self.current_token_address].get('liquidityPoolAddress') == update[1]
                                        }
                                    else:
                                        top10holders_pcnt[update[1]] = {
                                            'pcnt': 0,
                                            'insider': update[4],
                                            'isBundler': update[15],
                                            'isPool': self.token_data_cache[self.current_token_address].get('liquidityPoolAddress') == update[1]
                                        }
                                self.token_data_cache[self.current_token_address]['top10holders'] = top10holders_pcnt
                                logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω top10holders —Ç–æ–∫–µ–Ω–∞: {update_data['updated']}")
                        
                        if self.current_token_address in self.token_data_cache:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            self.token_data_cache[self.current_token_address].update(update_data)
                            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                            self.token_data_cache[self.current_token_address]['timestamp'] = update_data['timestamp']
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            await self.process_token_metrics(self.token_data_cache[self.current_token_address])
                
                elif msg_type == 'init':
                    snapshot_data = payload["snapshot"]

                    # –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ snapshot –¥–∞–Ω–Ω—ã–µ
                    snapshot_data['timestamp'] = int(time.time())

                    if 'totalSupply' in self.token_data_cache[self.current_token_address]:
                        totalSupply = self.token_data_cache[self.current_token_address]['totalSupply']
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ—Ç 'totalSupply' –ø–æ–ª—è –≤ self.token_data_cache[self.current_token_address]")
                        return

                    # –ï—Å–ª–∏ –µ—Å—Ç—å allEntries –≤ snapshot, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    if 'allEntries' in snapshot_data:
                        if self.current_token_address in self.token_data_cache:
                            if 'top10holders' in self.token_data_cache[self.current_token_address]:
                                top10holders_pcnt = self.token_data_cache[self.current_token_address]['top10holders']
                            else:
                                top10holders_pcnt = {}
                            logger.info(f"–ù–∞–π–¥–µ–Ω –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {snapshot_data['allEntries'][0][1]}")
                            liquidityPoolAddress = snapshot_data['allEntries'][0][1]
                            self.token_data_cache[self.current_token_address]['liquidityPoolAddress'] = liquidityPoolAddress
                            for entry in snapshot_data['allEntries']:
                                if entry[2]:
                                    top10holders_pcnt[entry[1]] = {
                                        'pcnt': int(entry[2]) / int(totalSupply) * 100,
                                        'insider': entry[4],
                                        'isBundler': entry[15],
                                        'isPool': liquidityPoolAddress == entry[1]
                                    }
                                else:
                                    top10holders_pcnt[entry[1]] = {
                                        'pcnt': 0,
                                        'insider': entry[4],
                                        'isBundler': entry[15],
                                        'isPool': liquidityPoolAddress == entry[1]
                                    }
                            self.token_data_cache[self.current_token_address]['top10holders'] = top10holders_pcnt
                            logger.info(f"üìä –°–æ–∑–¥–∞–Ω top10holders —Ç–æ–∫–µ–Ω–∞: {snapshot_data['allEntries']}")
                    
                    if self.current_token_address in self.token_data_cache:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        self.token_data_cache[self.current_token_address].update(snapshot_data)
                        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                        self.token_data_cache[self.current_token_address]['timestamp'] = snapshot_data['timestamp']
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        await self.process_token_metrics(self.token_data_cache[self.current_token_address])

            
            if 'update' not in payload:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç 'update' –ø–æ–ª—è –≤ payload")
                return
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ top10holders –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(traceback.format_exc())
    
    def extract_bundler_data(self, data: dict) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ fast-stats –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            bundler_info = {}
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä—è–º—ã–µ –ø–æ–ª—è
            if 'bundlers' in data:
                bundler_info['bundler_count'] = data['bundlers']
            elif 'bundler_count' in data:
                bundler_info['bundler_count'] = data['bundler_count']
                
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ–ª—è –≤ stats –æ–±—ä–µ–∫—Ç–µ
            if 'stats' in data:
                stats = data['stats']
                if 'bundlers' in stats:
                    bundler_info['bundler_count'] = stats['bundlers']
                if 'holders' in stats:
                    bundler_info['total_holders'] = stats['holders']
                    
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –º–∞—Å—Å–∏–≤–µ
            if 'tokens' in data:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                for token_data in data['tokens']:
                    token_address = token_data.get('address') or token_data.get('contract')
                    if token_address:
                        bundler_info['token_address'] = token_address
                        bundler_info['bundler_count'] = token_data.get('bundlers', 0)
                        bundler_info['total_holders'] = token_data.get('holders', 0)
                        break
                        
            # –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É
            if not bundler_info.get('token_address'):
                # –ò—â–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                for key, value in data.items():
                    if isinstance(value, str) and len(value) > 30:  # –ü–æ—Ö–æ–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
                        bundler_info['token_address'] = value
                        break
                        
            return bundler_info if bundler_info else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {e}")
            return None
    
    def extract_bundler_data_from_init_snapshot(self, snapshot: dict, token_address: str) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ init snapshot"""
        try:
            bundler_info = {'token_address': token_address}
            
            # –í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ snapshot
            symbol = snapshot.get('baseTokenSymbol') or snapshot.get('symbol', 'UNK')
            name = snapshot.get('baseTokenName') or snapshot.get('name', symbol)
            market_cap = snapshot.get('marketCapInUsd', snapshot.get('fdvInUsdUi', 0))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–µ—à
            if symbol != 'UNK' or name != symbol:
                self.token_data_cache[token_address] = {
                    'symbol': symbol,
                    'name': name,
                    'market_cap': market_cap,
                    'dex_source': 'Pump.fun',
                    'chain': snapshot.get('chain', 'SOLANA'),
                    'source': 'market_init_snapshot'
                }
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ {name} ({symbol}) –≤ –∫–µ—à –∏–∑ market snapshot")
            
            # –ò—â–µ–º –≤ pumpFunGaze (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ bundler –¥–∞–Ω–Ω—ã—Ö)
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pumpFunGaze –≤ snapshot...")
            logger.info(f"üìã –ö–ª—é—á–∏ –≤ snapshot: {list(snapshot.keys())}")
            
            if 'pumpFunGaze' in snapshot and snapshot['pumpFunGaze'] is not None:
                pump_gaze = snapshot['pumpFunGaze']
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã pumpFunGaze –¥–∞–Ω–Ω—ã–µ –≤ init:")
                logger.info(f"üì¶ –ü–û–õ–ù–´–ï pumpFunGaze –¥–∞–Ω–Ω—ã–µ: {pump_gaze}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Ö–æ–ª–¥–µ—Ä–æ–≤
                if 'totalBundlesCount' in pump_gaze:
                    bundler_info['bundler_count'] = pump_gaze['totalBundlesCount']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                if 'bundlesHoldingPcnt' in pump_gaze:
                    bundles_pcnt = pump_gaze['bundlesHoldingPcnt']
                    if isinstance(bundles_pcnt, dict) and 'current' in bundles_pcnt:
                        bundler_info['bundler_percentage'] = bundles_pcnt['current']
                        bundler_info['bundler_percentage_ath'] = bundles_pcnt.get('ath', 0)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if 'totalSolSpentInBundles' in pump_gaze:
                    bundler_info['sol_spent_in_bundles'] = pump_gaze['totalSolSpentInBundles']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
            if 'totalHolders' in snapshot:
                bundler_info['total_holders'] = snapshot['totalHolders']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if bundler_info.get('bundler_count') and bundler_info.get('total_holders'):
                return bundler_info
            elif bundler_info.get('bundler_percentage') and bundler_info.get('total_holders'):
                return bundler_info
            else:
                logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ bundler –¥–∞–Ω–Ω—ã—Ö –≤ init snapshot –¥–ª—è {token_address[:8]}...")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è bundler –¥–∞–Ω–Ω—ã—Ö –∏–∑ init snapshot: {e}")
            return None

    def extract_bundler_data_from_update(self, update_payload: dict) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ update —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            bundler_info = {}
            
            # –ù–û–í–´–ô –§–û–†–ú–ê–¢: pumpFunGaze –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pumpFunGaze –≤ update...")
            logger.info(f"üìã –ö–ª—é—á–∏ –≤ update_payload: {list(update_payload.keys())}")
            
            if 'pumpFunGaze' in update_payload and update_payload['pumpFunGaze'] is not None:
                pump_gaze = update_payload['pumpFunGaze']
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã pumpFunGaze –¥–∞–Ω–Ω—ã–µ –≤ update:")
                logger.info(f"üì¶ –ü–û–õ–ù–´–ï pumpFunGaze –¥–∞–Ω–Ω—ã–µ: {pump_gaze}")
                
                # –ò—â–µ–º –∫–ª—é—á–∏ bundler –¥–∞–Ω–Ω—ã—Ö
                logger.info(f"üîç –ö–ª—é—á–∏ –≤ pumpFunGaze: {list(pump_gaze.keys())}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                if 'totalBundlesCount' in pump_gaze and pump_gaze['totalBundlesCount'] is not None:
                    bundler_info['bundler_count'] = pump_gaze['totalBundlesCount']
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω totalBundlesCount: {pump_gaze['totalBundlesCount']}")
                else:
                    logger.info(f"‚ùå totalBundlesCount –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ None")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π)
                if 'bundlesHoldingPcnt' in pump_gaze and pump_gaze['bundlesHoldingPcnt'] is not None:
                    bundles_pcnt = pump_gaze['bundlesHoldingPcnt']
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω bundlesHoldingPcnt: {bundles_pcnt}")
                    if isinstance(bundles_pcnt, dict) and 'current' in bundles_pcnt:
                        bundler_info['bundler_percentage'] = bundles_pcnt['current']
                        bundler_info['bundler_percentage_ath'] = bundles_pcnt.get('ath', 0)
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω bundler –ø—Ä–æ—Ü–µ–Ω—Ç: {bundles_pcnt['current']}%")
                    else:
                        logger.info(f"‚ùå bundlesHoldingPcnt –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
                else:
                    logger.info(f"‚ùå bundlesHoldingPcnt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ None")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if 'totalSolSpentInBundles' in pump_gaze and pump_gaze['totalSolSpentInBundles'] is not None:
                    bundler_info['sol_spent_in_bundles'] = pump_gaze['totalSolSpentInBundles']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
            if 'totalHolders' in update_payload:
                bundler_info['total_holders'] = update_payload['totalHolders']
                
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º bundler –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ update_payload
            if 'bundlesHoldingPcnt' in update_payload and update_payload['bundlesHoldingPcnt'] is not None:
                bundles_pcnt = update_payload['bundlesHoldingPcnt']
                if isinstance(bundles_pcnt, dict) and 'current' in bundles_pcnt:
                    bundler_info['bundler_percentage'] = bundles_pcnt['current']
                    bundler_info['bundler_percentage_ath'] = bundles_pcnt.get('ath', 0)
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω bundler percentage –≤ update_payload: {bundles_pcnt['current']}%")
                    
            if 'totalBundlesCount' in update_payload and update_payload['totalBundlesCount'] is not None:
                bundler_info['bundler_count'] = update_payload['totalBundlesCount']
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω bundler count –≤ update_payload: {update_payload['totalBundlesCount']}")
                
            if 'totalSolSpentInBundles' in update_payload and update_payload['totalSolSpentInBundles'] is not None:
                bundler_info['sol_spent_in_bundles'] = update_payload['totalSolSpentInBundles']
            
            # –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if 'bundlers' in update_payload:
                bundler_info['bundler_count'] = update_payload['bundlers']
            if 'holders' in update_payload:
                bundler_info['total_holders'] = update_payload['holders']
            if 'tokenAddress' in update_payload:
                bundler_info['token_address'] = update_payload['tokenAddress']
                
            # –ò—â–µ–º –≤ –¥–µ–ª—å—Ç–∞—Ö (–∏–∑–º–µ–Ω–µ–Ω–∏—è)
            if 'delta' in update_payload:
                delta = update_payload['delta']
                if 'bundlers' in delta:
                    bundler_info['bundler_count'] = delta['bundlers']
                if 'holders' in delta:
                    bundler_info['total_holders'] = delta['holders']
                    
            # –ò—â–µ–º –≤ stats
            if 'stats' in update_payload:
                stats = update_payload['stats']
                if 'bundlers' in stats:
                    bundler_info['bundler_count'] = stats['bundlers']
                if 'holders' in stats:
                    bundler_info['total_holders'] = stats['holders']
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ bundler –¥–∞–Ω–Ω—ã–µ: {bundler_info}")
            
            bundler_count = bundler_info.get('bundler_count')
            bundler_percentage = bundler_info.get('bundler_percentage') 
            total_holders = bundler_info.get('total_holders')
            
            logger.info(f"üìä bundler_count: {bundler_count}")
            logger.info(f"üìä bundler_percentage: {bundler_percentage}")
            logger.info(f"üìä total_holders: {total_holders}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ bundler –¥–∞–Ω–Ω—ã–µ
            has_bundler_data = bundler_count is not None or bundler_percentage is not None
            
            if has_bundler_data:
                logger.info(f"‚úÖ Bundler –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–µ–º: {bundler_info}")
                return bundler_info
            else:
                logger.info(f"‚ùå –ù–µ—Ç bundler –¥–∞–Ω–Ω—ã—Ö (–Ω–∏ count, –Ω–∏ percentage)")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è bundler –¥–∞–Ω–Ω—ã—Ö –∏–∑ update: {e}")
            return None

    async def process_bundler_detection(self, bundler_info: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö"""
        try:
            token_address = bundler_info.get('token_address')
            bundler_count = bundler_info.get('bundler_count', 0)
            total_holders = bundler_info.get('total_holders', 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            bundler_percentage = bundler_info.get('bundler_percentage')
            if bundler_percentage is None and bundler_count > 0 and total_holders > 0:
                bundler_percentage = (bundler_count / total_holders) * 100
            
            if bundler_count > 0 and bundler_percentage is not None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
                if not token_address and hasattr(self, 'current_token_address'):
                    token_address = self.current_token_address
                
                bundler_percentage_ath = bundler_info.get('bundler_percentage_ath', bundler_percentage)
                sol_spent = bundler_info.get('sol_spent_in_bundles', 0)
                
                logger.info(f"üéØ –ë–ê–ù–î–õ–ï–† –î–ê–ù–ù–´–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
                logger.info(f"üìä –¢–æ–∫–µ–Ω {token_address if token_address else 'N/A'}: {bundler_count} –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
                logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {total_holders}")
                logger.info(f"üìà –¢–µ–∫—É—â–∏–π %: {bundler_percentage:.2f}%")
                logger.info(f"üî• ATH %: {bundler_percentage_ath:.2f}%")
                logger.info(f"üí∞ SOL –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –≤ –±–∞–Ω–¥–ª–∞—Ö: {sol_spent:.2f}")
                
                if bundler_percentage > 0:
                    logger.info(f"–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç {bundler_percentage:.2f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–µ—à–∞
                    cached_data = self.token_data_cache.get(token_address, {})
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    token_data = {
                        'address': token_address or "Unknown",
                        'symbol': cached_data.get('symbol', 'UNK'),
                        'name': cached_data.get('name', 'Unknown Token'),
                        'market_cap': cached_data.get('market_cap', 0),
                        'dex_source': cached_data.get('dex_source', 'Unknown'),
                        'total_holders': total_holders,
                        'bundler_percentage_ath': bundler_percentage_ath,
                        'sol_spent_in_bundles': sol_spent,
                        'bundler_count': bundler_count,
                        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                        'basePriceInUsdUi': cached_data.get('basePriceInUsdUi', 0),
                        'basePriceInQuoteUi': cached_data.get('basePriceInQuoteUi', 0),
                        'liquidityInUsdUi': cached_data.get('liquidityInUsdUi', 0),
                        'deployerHoldingPcnt': cached_data.get('deployerHoldingPcnt', 0),
                        
                        # PumpFunGaze –¥–∞–Ω–Ω—ã–µ
                        'devHoldingPcnt': cached_data.get('devHoldingPcnt', 0),
                        'tradingAppTxns': cached_data.get('tradingAppTxns', 0),
                        'freshWalletBuys': cached_data.get('freshWalletBuys', {'count': 0, 'sol': 0}),
                        'insidersHoldingPcnt': cached_data.get('insidersHoldingPcnt', 0),
                        'totalSupply': cached_data.get('totalSupply', 0),
                        'totalSnipers': cached_data.get('totalSnipers', 0),
                        'bundlesHoldingPcnt': cached_data.get('bundlesHoldingPcnt', {'current': 0, 'ath': 0}),
                        'totalBundlesCount': cached_data.get('totalBundlesCount', 0),
                        'totalSolSpentInBundles': cached_data.get('totalSolSpentInBundles', 0),
                        'totalTokenBoughtInBundles': cached_data.get('totalTokenBoughtInBundles', 0),
                        'totalSolFees': cached_data.get('totalSolFees', 0),
                        'snipersHoldingPcnt': cached_data.get('snipersHoldingPcnt', 0),
                    }

                    # –ü–æ–ª—É—á–∞–µ–º deployer –ø—Ä–æ—Ü–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
                    deployer_pcnt = token_data.get('deployerHoldingPcnt')
                    if isinstance(deployer_pcnt, dict):
                        deployer_pcnt = deployer_pcnt.get('current', 0)

                    if total_holders > 18 and bundler_count > 0 and bundler_count < 6:
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! Holders: {total_holders}, Bundlers: {bundler_count}")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º bundler_info –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        bundler_info = {
                            'token_address': self.token_address,
                            'bundler_count': bundler_count,
                            'total_holders': total_holders,
                            'bundler_percentage': bundles_pcnt.get('current', 0),
                            'bundler_percentage_ath': bundles_pcnt.get('ath', 0),
                            'sol_spent_in_bundles': pump_gaze.get('totalSolSpentInBundles', 0)
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
                        bundler_info.update(self.token_data_cache.get(self.token_address, {}))
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await self.send_bundler_notification(
                            contract_address=self.token_address,
                            token_data=bundler_info,
                            bundler_count=bundler_count,
                            bundler_percentage=bundles_pcnt.get('current', 0),
                            simulated=False
                        )
                    else:
                        logger.info(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {self.token_address[:8]} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º: holders={total_holders}, bundlers={bundler_count}")
                    
                else:
                    logger.info(f"‚úÖ –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞: {bundler_percentage:.2f}%")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ bundler detection: {e}")
    
    async def analyze_token_bundlers(self, contract_address: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            token_data = pending_tokens.get(contract_address)
            bundler_data = bundler_results.get(contract_address)
            
            if not token_data or not bundler_data:
                return
            
            bundler_count = bundler_data['bundler_count']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ (—É—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å)
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 100% = 1000 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π (—ç—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            max_holders = 1000
            bundler_percentage = (bundler_count / max_holders) * 100
            
            logger.info(f"üìà –¢–æ–∫–µ–Ω {contract_address[:8]}: {bundler_count} –±–∞–Ω–¥–ª–µ—Ä–æ–≤ ({bundler_percentage:.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
            if bundler_percentage >= MIN_BUNDLER_PERCENTAGE:
                await self.send_bundler_alert(token_data, bundler_count, bundler_percentage)
            else:
                logger.info(f"‚ö™ –¢–æ–∫–µ–Ω {contract_address[:8]}: –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ {bundler_percentage:.1f}% –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ {MIN_BUNDLER_PERCENTAGE}%")
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            del pending_tokens[contract_address]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è {contract_address[:8]}: {e}")
    
    async def send_bundler_alert(self, token_data: dict, bundler_count: int, bundler_percentage: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            contract_address = token_data.get('mint', token_data.get('address', 'Unknown'))
            symbol = token_data.get('symbol', 'UNK')
            name = token_data.get('name', 'Unknown Token')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üî• <b>–í–´–°–û–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –ë–ê–ù–î–õ–ï–†–û–í!</b>\n\n"
                f"üíé <b>–¢–æ–∫–µ–Ω:</b> {name} ({symbol})\n"
                f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{contract_address}</code>\n"
                f"üë• <b>–ë–∞–Ω–¥–ª–µ—Ä–æ–≤:</b> {bundler_count}\n"
                f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {bundler_percentage:.1f}%\n"
                f"‚ö° <b>–ü–æ—Ä–æ–≥:</b> {MIN_BUNDLER_PERCENTAGE}%\n\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    {"text": "üíé Axiom.trade", "url": f"https://axiom.trade/t/{contract_address}"},
                    {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{contract_address}"}
                ],
                [
                    {"text": "üîç trade.padre.gg", "url": f"https://trade.padre.gg/trade/solana/{contract_address}"}
                ]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ —Ç–µ–º—É
            success = await self.send_telegram_message(message, keyboard)
            
            if success:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol} —Å {bundler_percentage:.1f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_telegram_message(self, message: str, keyboard: List[List[Dict[str, str]]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            current_time = time.time()
            if hasattr(self, 'last_telegram_time'):
                time_since_last = current_time - self.last_telegram_time
                if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(3 - time_since_last)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = "-1002680160752"  # ID —á–∞—Ç–∞
            thread_id = "13134"  # ID —Ç—Ä–µ–¥–∞
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            
            data = {
                "chat_id": chat_id,
                "message_thread_id": thread_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            
            if keyboard:
                data["reply_markup"] = {"inline_keyboard": keyboard}
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: chat={chat_id}, thread={thread_id}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 429:  # Too Many Requests
                        retry_after = (await response.json()).get('parameters', {}).get('retry_after', 30)
                        logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ñ–¥–µ–º {retry_after} —Å–µ–∫.")
                        await asyncio.sleep(retry_after)
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                        async with session.post(url, json=data) as retry_response:
                            if retry_response.status != 200:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                                return False
                    elif response.status != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                        return False
                        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_telegram_time = time.time()
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç"""
        self.running = True
        self.start_time = asyncio.get_event_loop().time()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        
        logger.info(f"üîó –ó–∞–ø—É—Å–∫–∞–µ–º Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {self.connection_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]} (–º–∞–∫—Å. {self.max_duration // 60} –º–∏–Ω)")
        
        try:
            if await self.connect():
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                await self.subscribe_to_token_data(self.token_address)
                # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                await self.listen_for_bundler_data()
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {self.token_address[:8]}: {e}")
            if self.websocket:
                await self.websocket.close()
                self.websocket = None
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.start_time:
            return False
        
        current_time = asyncio.get_event_loop().time()
        elapsed = current_time - self.start_time
        return elapsed >= self.max_duration
    
    def get_remaining_time(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.start_time:
            return self.max_duration
        
        current_time = asyncio.get_event_loop().time()
        elapsed = current_time - self.start_time
        return max(0, self.max_duration - elapsed)
    
    def is_connection_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.start_time:
            return False
        
        current_time = asyncio.get_event_loop().time()
        elapsed = current_time - self.start_time
        return elapsed >= self.max_duration
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for token_address in list(self.active_connections.keys()):
            await self._remove_connection(token_address, reason="–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        logger.info("‚úÖ MultiplePadreManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def process_token_metrics(self, metrics: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not self.websocket:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –¥–ª—è {self.token_address[:8]}")
                return
            
            if not metrics:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {self.token_address[:8]}")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
            if not hasattr(self, 'token_metrics') or not self.token_metrics:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                creation_time = int(metrics.get('marketCreatedAt', 0) or 0)
                if not creation_time and 'firstPool' in metrics:
                    try:
                        created_at_str = metrics['firstPool']['createdAt']
                        creation_time = int(datetime.strptime(created_at_str, "%Y-%m-%dT%H:%M:%SZ").timestamp())
                    except (KeyError, ValueError) as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                
                if not creation_time:
                    creation_time = int(time.time())
                    logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è {self.token_address[:8]}")
                
                self.token_metrics = TokenMetrics(self.token_address, creation_time)
                logger.info(f"‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {self.token_address[:8]} (—Å–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(creation_time)})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.token_metrics.add_metrics(metrics)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ—Å—Ç
            growth = self.token_metrics.get_growth_rates()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            total_holders = int(metrics.get('total_holders', 0) or 0)
            total_bundlers = int(metrics.get('totalBundlesCount', 0) or 0)
            liquidity = float(metrics.get('liquidityInUsdUi', 0) or 0)
            market_cap = float(metrics.get('marketCapUsdUi', 0) or 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤–ª–∞–¥–µ–Ω–∏—è
            dev_percent = float(metrics.get('devHoldingPcnt', 0) or 0)
            
            bundles_percent = metrics.get('bundlesHoldingPcnt', 0)
            if isinstance(bundles_percent, dict):
                bundles_percent = float(bundles_percent.get('current', 0) or 0)
            else:
                bundles_percent = float(bundles_percent or 0)
            
            snipers_percent = float(metrics.get('snipersHoldingPcnt', 0) or 0)
            insiders_percent = float(metrics.get('insidersHoldingPcnt', 0) or 0)
            
            snipers_count = int(metrics.get('totalSnipers', 0) or 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö
            fresh_wallets_data = metrics.get('freshWalletBuys', {}) or {}
            fresh_wallets = int(fresh_wallets_data.get('count', 0) or 0)
            fresh_wallets_sol = float(fresh_wallets_data.get('sol', 0) or 0)

            top10holders = metrics.get("top10holders", {})
            top10HoldersPcnt = 0
            top10Holders = ""
            available_liquidity = 0

            sorted_holders = sorted(
                top10holders.items(),
                key=lambda item: item[1]['pcnt'],
                reverse=True  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –±–æ–ª—å—à–µ–≥–æ % –∫ –º–µ–Ω—å—à–µ–º—É)
            )

            total_pcnt_holders = 0
            max_holders_pcnt = 0
            top_10_holders = ""
            top_10_holders_total_pcnt = 0
            index = 0

            average_holders_pcnt = 0
            average_top_10_holders_pcnt = 0

            for wallet, value in sorted_holders:
                if value['isPool']:
                    logger.info(f"üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å {wallet} –Ω–∞ {value['pcnt']}%")
                    available_liquidity = value['pcnt']
                    continue
                total_pcnt_holders += value['pcnt']
                if value['isBundler']:
                    logger.info(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω–¥–ª–µ—Ä {wallet} —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–ª–µ—Ä–æ–≤ –∏–º–µ—é—â–∏–π {value['pcnt']}%")
                    continue
                if value['insider']:
                    logger.info(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Å–∞–π–¥–µ—Ä {wallet} —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–ª–µ—Ä–æ–≤ –∏–º–µ—é—â–∏–π {value['pcnt']}%")
                    continue
                if value['pcnt'] > max_holders_pcnt:
                    max_holders_pcnt = value['pcnt']
                top10HoldersPcnt += value['pcnt'] or 0
                top10Holders += f"{round(value['pcnt'] or 0, 2)}% "
                average_holders_pcnt += value['pcnt'] or 0
                if index < 10:
                    top_10_holders += f"{round(value['pcnt'] or 0, 2)}% "
                    top_10_holders_total_pcnt += value['pcnt'] or 0
                    average_top_10_holders_pcnt += value['pcnt'] or 0
                    index += 1

            average_holders_pcnt = average_holders_pcnt / len(sorted_holders)
            average_top_10_holders_pcnt = average_top_10_holders_pcnt / 10

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            logger.info(f"\nüìä –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö –¥–ª—è {self.token_address[:8]}:")
            logger.info(f"‚è∞ –í–æ–∑—Ä–∞—Å—Ç: {(int(time.time()) - metrics.get('marketCreatedAt', 0))} —Å–µ–∫")
            logger.info(f"üîé –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {round(available_liquidity, 2)}%")
            logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {total_holders}")
            logger.info(f"üèÜ –•–æ–ª–¥–µ—Ä—ã –¥–µ—Ä–∂–∞—Ç: {top10HoldersPcnt:.1f}% ({total_pcnt_holders:.1f}%)")
            logger.info(f"üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {top10Holders}")
            logger.info(f"üèÜ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {average_holders_pcnt:.1f}%")
            logger.info(f"üèÜ –¢–û–ü-10: {top_10_holders_total_pcnt:.1f}% ({top_10_holders})")
            logger.info(f"üèÜ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¢–û–ü-10: {average_top_10_holders_pcnt:.1f}%")
            logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: {total_bundlers} ({bundles_percent:.1f}%)")
            logger.info(f"üë®‚Äçüíº Dev %: {dev_percent:.1f}%")
            logger.info(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.2f}")
            logger.info(f"üí∞ Market Cap: ${market_cap:,.2f}")
            logger.info(f"üÜï Fresh Wallets: {fresh_wallets} ({fresh_wallets_sol:.2f} SOL)")
            logger.info(f"üéØ –°–Ω–∞–π–ø–µ—Ä—ã: {snipers_percent:.1f}% ({snipers_count})")
            logger.info(f"üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—ã: {insiders_percent:.1f}%")
            
            logger.info(f"üìà –î–ò–ù–ê–ú–ò–ö–ê –†–û–°–¢–ê:")
            logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: +{growth['holders_growth']:.2f}/–º–∏–Ω")
            logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: +{growth['bundlers_growth']:.2f}/–º–∏–Ω")
            logger.info(f"üí∞ –¶–µ–Ω–∞: +${growth['price_growth']:.8f}/–º–∏–Ω")
            
            activity_conditions = {
                'time_ok': (int(time.time()) - metrics.get('marketCreatedAt', 0)) < 120,
                # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Ö–æ–ª–¥–µ—Ä–∞–º
                'holders_min': total_holders >= 30,  # –ú–∏–Ω–∏–º—É–º 30 —Ö–æ–ª–¥–µ—Ä–æ–≤
                'holders_max': total_holders <= 100,  # –ú–∞–∫—Å–∏–º—É–º 100 —Ö–æ–ª–¥–µ—Ä–æ–≤
                'available_liquidity': available_liquidity < 70,
                # 'max_top_10_holders_pcnt': top10HoldersPcnt < 35,
                'holders_never_dumped': (
                    self.token_metrics.max_holders <= 140  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –±–æ–ª—å—à–µ 140 —Ö–æ–ª–¥–µ—Ä–æ–≤
                ),
                'max_holders_pcnt': 0 < max_holders_pcnt <= 7,
                # –£—Å–ª–æ–≤–∏—è –ø–æ –±–∞–Ω–¥–ª–µ—Ä–∞–º
                'bundlers_ok': (
                    self.token_metrics.max_bundlers_after_dev_exit >= 5 and  # –ü—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞ >= 5%
                    self.token_metrics.max_bundlers_after_dev_exit <= 50  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 50% (–∏–∑–±–µ–≥–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏)
                ),
                'bundlers_before_dev_ok': (
                    self.token_metrics.max_bundlers_before_dev_exit <= 50  # –ú–∞–∫—Å–∏–º—É–º 50% –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
                ),
                # –£—Å–ª–æ–≤–∏—è –ø–æ –¥–µ–≤—É
                'dev_percent_ok': (
                    dev_percent <= 2 and  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ <= 2%
                    self.token_metrics.max_dev_percent <= 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–∂–µ <= 30%
                ),
                
                # –£—Å–ª–æ–≤–∏—è –ø–æ —Å–Ω–∞–π–ø–µ—Ä–∞–º
                'snipers_ok': (
                    snipers_count <= 20 and  # –ù–µ –±–æ–ª–µ–µ 20 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
                    (
                        snipers_percent <= 3.5 or  # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 3.5%
                        (
                            any(float(m.get('snipersHoldingPcnt', 0) or 0) > 0 for m in self.token_metrics.metrics_history) and
                            max(float(m.get('snipersHoldingPcnt', 0) or 0) 
                                for m in self.token_metrics.metrics_history 
                                if float(m.get('snipersHoldingPcnt', 0) or 0) > 0) > snipers_percent and
                            snipers_percent <= 8.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 8% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                            self.token_metrics.check_rapid_exit('snipersHoldingPcnt', ratio=2.5, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                        )
                    )
                ),
                'snipers_not_bundlers': self.token_metrics.check_snipers_bundlers_correlation(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–Ω–∞–π–ø–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏

                # –£—Å–ª–æ–≤–∏—è –ø–æ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º
                'insiders_ok': (
                    insiders_percent <= 15 or  # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 15%
                    (
                        any(float(m.get('insidersHoldingPcnt', 0) or 0) > 0 for m in self.token_metrics.metrics_history) and
                        max(float(m.get('insidersHoldingPcnt', 0) or 0) 
                            for m in self.token_metrics.metrics_history 
                            if float(m.get('insidersHoldingPcnt', 0) or 0) > 0) > insiders_percent and
                        insiders_percent <= 22.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 22% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                        self.token_metrics.check_rapid_exit('insidersHoldingPcnt', ratio=2.5, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                    )
                ),

                # –£—Å–ª–æ–≤–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç—É
                'min_liquidity': liquidity >= 10000,
                'holders_growth': growth['holders_growth'] >= 2900,  # –†–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤ ‚â•2900/–º–∏–Ω

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                'can_notify': self.token_metrics.can_send_notification('active'),

                'snipers_not_insiders': self.token_metrics.check_snipers_insiders_correlation(),
                'bundlers_snipers_exit_not_correlated': self.token_metrics.check_bundlers_snipers_exit_correlation(),
            }

            if all(activity_conditions.values()):
                logger.info(f"üöÄ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –¢–û–ö–ï–ù–ê –ù–ê–ô–î–ï–ù–ê: {self.token_address[:8]}")
                logger.info("‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
                for condition, value in activity_conditions.items():
                    logger.info(f"  ‚Ä¢ {condition}: {value}")
                await self.send_activity_notification(metrics, growth)
            else:
                logger.info("‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
                for condition, value in activity_conditions.items():
                    if not value:
                        logger.info(f"  ‚Ä¢ {condition}: {value}")
            
            # 2. –°–∏–≥–Ω–∞–ª –ø–æ–º–ø–∞ (–±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç)
            pump_conditions = {
                'holders_growth': growth['holders_growth'] > 0.5,
                'price_growth': growth['price_growth'] > 0,
                'activity_ok': (
                    total_bundlers > 0 or           # –ï—Å—Ç—å –±–∞–Ω–¥–ª–µ—Ä—ã
                    fresh_wallets >= 5 or           # –ú–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
                    fresh_wallets_sol >= 2.0        # –ë–æ–ª—å—à–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç –Ω–æ–≤—ã—Ö
                ),
                'min_liquidity': liquidity >= 20000,
                'min_mcap': market_cap >= 50000,
                'can_notify': self.token_metrics.can_send_notification('pump')
            }
            
            if all(pump_conditions.values()):
                logger.info(f"üî• –ë–´–°–¢–†–´–ô –†–û–°–¢ –ù–ê–ô–î–ï–ù: {self.token_address[:8]}")
                logger.info("‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
                for condition, value in pump_conditions.items():
                    logger.info(f"  ‚Ä¢ {condition}: {value}")
                await self.send_pump_notification(metrics, growth)
            else:
                logger.info("‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º –ø–æ–º–ø–∞:")
                for condition, value in pump_conditions.items():
                    if not value:
                        logger.info(f"  ‚Ä¢ {condition}: {value}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {self.token_address[:8]}: {e}")
            logger.error(traceback.format_exc())
    

    async def send_activity_notification(self, metrics: dict, growth: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.token_address in SENT_NOTIFICATIONS:
            last_activity = SENT_NOTIFICATIONS[self.token_address].get('activity', 0)
            if time.time() - last_activity < 900:  # 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                logger.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {self.token_address[:8]} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
                return

        message = (
            f"üöÄ <b>–ù–ê–ß–ê–õ–û –ê–ö–¢–ò–í–ù–û–°–¢–ò!</b>\n\n"
            f"ü™ô <b>{metrics.get('name', 'Unknown')}</b> ({metrics.get('symbol', 'UNK')})\n"
            f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{self.token_address}</code>\n\n"
            
            f"üìä <b>–ú–ï–¢–†–ò–ö–ò:</b>\n"
            f"üë• <b>–•–æ–ª–¥–µ—Ä—ã:</b> {metrics.get('total_holders', 0)}\n"
            f"üìà <b>–†–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤:</b> {self.safe_format(growth.get('holders_growth'), '.1f')}/–º–∏–Ω\n"
            f"üì¶ <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> {metrics.get('totalBundlesCount', 0)} ({self.safe_format(metrics.get('bundlesHoldingPcnt', {}).get('current', 0), '.1f')}%)\n"
            f"üí∞ <b>SOL –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(metrics.get('totalSolSpentInBundles'), '.2f')}\n"
            f"üÜï <b>Fresh Wallets:</b> {(metrics.get('freshWalletBuys', {}) or {}).get('count', 0)}\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> ${self.safe_format(metrics.get('basePriceInUsdUi'), ',.8f')}\n\n"
            
            f"‚ö° <b>–°–ò–ì–ù–ê–õ–´:</b>\n"
            f"‚úÖ –ü–µ—Ä–≤—ã–µ –±–∞–Ω–¥–ª–µ—Ä—ã\n"
            f"‚úÖ –ü–æ–∫—É–ø–∫–∏ —Å –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤"
        )
        
        keyboard = [
            [
                {"text": "üöÄ Axiom", "url": f"https://axiom.trade/t/{self.token_address}"},
                {"text": "üöÄ DexScreener", "url": f"https://dexscreener.com/solana/{self.token_address}"}
            ],
            [
                {"text": "QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{self.token_address}"}
            ]
        ]
        
        if await self.send_telegram_message(message, keyboard):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if self.token_address not in SENT_NOTIFICATIONS:
                SENT_NOTIFICATIONS[self.token_address] = {}
            SENT_NOTIFICATIONS[self.token_address]['activity'] = time.time()
            logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {self.token_address[:8]}")
    
    async def send_pump_notification(self, metrics: dict, growth: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–º–ø–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.token_address in SENT_NOTIFICATIONS:
            last_pump = SENT_NOTIFICATIONS[self.token_address].get('pump', 0)
            if time.time() - last_pump < 300:  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                logger.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–º–ø–µ –¥–ª—è {self.token_address[:8]} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
                return

        message = (
            f"üî• <b>–°–ò–õ–¨–ù–´–ô –†–û–°–¢!</b>\n\n"
            f"ü™ô <b>{metrics.get('name', 'Unknown')}</b> ({metrics.get('symbol', 'UNK')})\n"
            f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{self.token_address}</code>\n\n"
            
            f"üìä <b>–ú–ï–¢–†–ò–ö–ò –†–û–°–¢–ê:</b>\n"
            f"üë• <b>–•–æ–ª–¥–µ—Ä—ã:</b> +{self.safe_format(growth.get('holders_growth'), '.1f')}/–º–∏–Ω\n"
            f"üì¶ <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> +{self.safe_format(growth.get('bundlers_growth'), '.1f')}/–º–∏–Ω\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> +${self.safe_format(growth.get('price_growth'), ',.8f')}/–º–∏–Ω\n\n"
            
            f"üìà <b>–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:</b>\n"
            f"üë• <b>–í—Å–µ–≥–æ —Ö–æ–ª–¥–µ—Ä–æ–≤:</b> {metrics.get('total_holders', 0)}\n"
            f"üì¶ <b>–í—Å–µ–≥–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤:</b> {metrics.get('totalBundlesCount', 0)}\n"
            f"üíµ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${self.safe_format(metrics.get('basePriceInUsdUi'), ',.8f')}\n"
            f"üí∞ <b>SOL –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(metrics.get('totalSolSpentInBundles'), '.2f')}\n"
            f"üÜï <b>Fresh Wallets:</b> {(metrics.get('freshWalletBuys', {}) or {}).get('count', 0)}"
        )
        
        keyboard = [
            [
                {"text": "üöÄ Axiom", "url": f"https://axiom.trade/t/{self.token_address}"},
                {"text": "üöÄ Padre GG", "url": f"https://trade.padre.gg/trade/solana/{self.token_address}"}
            ],
        ]
        
        if await self.send_telegram_message(message, keyboard):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if self.token_address not in SENT_NOTIFICATIONS:
                SENT_NOTIFICATIONS[self.token_address] = {}
            SENT_NOTIFICATIONS[self.token_address]['pump'] = time.time()
            logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ –¥–ª—è {self.token_address[:8]}")
    
    async def process_jupiter_token(self, token_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter"""
        try:
            if token_data.get('type') != 'new':
                return
            
            pool = token_data.get('pool', {})
            base_asset = pool.get('baseAsset', {})
            token_address = base_asset.get('id')
            
            if not token_address:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Jupiter")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = None
            try:
                if 'createdAt' in pool:
                    created_at = int(datetime.strptime(pool['createdAt'], "%Y-%m-%dT%H:%M:%SZ").timestamp())
                elif 'firstPool' in base_asset and 'createdAt' in base_asset['firstPool']:
                    created_at = int(datetime.strptime(base_asset['firstPool']['createdAt'], "%Y-%m-%dT%H:%M:%SZ").timestamp())
            except (ValueError, TypeError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            
            symbol = base_asset.get('symbol', 'UNK')
            name = base_asset.get('name', 'Unknown Token')
            
            logger.info(f"üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter: {name} ({token_address[:8]}...)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–µ—à
            if token_address not in self.token_data_cache:
                self.token_data_cache[token_address] = {
                    'symbol': symbol,
                    'name': name,
                    'marketCreatedAt': created_at,
                    'total_holders': 0,
                    'devHoldingPcnt': 0,
                    'tradingAppTxns': 0,
                    'freshWalletBuys': {'count': 0, 'sol': 0},
                    'insidersHoldingPcnt': 0,
                    'totalSnipers': 0,
                    'bundlesHoldingPcnt': {'current': 0, 'ath': 0},
                    'totalBundlesCount': 0,
                    'totalSolSpentInBundles': 0,
                    'totalTokenBoughtInBundles': 0,
                    'totalSolFees': 0,
                    'snipersHoldingPcnt': 0
                }
            
            logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω {name} ({token_address[:8]}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            await self.padre_manager.add_token(token_address)
            logger.info(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ default_{token_address[:8]} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Jupiter —Ç–æ–∫–µ–Ω–∞: {e}")
            logger.error(traceback.format_exc())

class MultiplePadreManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º Padre WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, connection_interval: float = 30.0):
        self.connection_interval = connection_interval
        self.active_connections: Dict[str, PadreWebSocketClient] = {}  # {token_address: client}
        self.connection_tasks: Dict[str, asyncio.Task] = {}
        self.running = False
        self.next_connection_time = 0
        self.cleanup_task = None
        
        logger.info(f"üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MultiplePadreManager: –±–µ–∑ –ª–∏–º–∏—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, —Ç–∞–π–º-–∞—É—Ç 10 –º–∏–Ω—É—Ç")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.running = True
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.cleanup_task = asyncio.create_task(self._cleanup_loop())
        logger.info("‚úÖ MultiplePadreManager –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for token_address in list(self.active_connections.keys()):
            await self._remove_connection(token_address, reason="–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        logger.info("‚úÖ MultiplePadreManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _cleanup_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            while self.running:
                current_time = asyncio.get_event_loop().time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                for token_address, client in list(self.active_connections.items()):
                    if client.is_connection_expired():
                        logger.info(f"‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å—Ç–µ–∫—à–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {token_address[:8]}")
                        await self._remove_connection(token_address, reason="—Ç–∞–π–º-–∞—É—Ç 10 –º–∏–Ω—É—Ç")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                if int(current_time) % 30 == 0:
                    active_count = len(self.active_connections)
                    if active_count > 0:
                        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {active_count}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        for token_address, client in self.active_connections.items():
                            remaining = client.get_remaining_time()
                            logger.info(f"‚è≥ {token_address[:8]}: {remaining/60:.1f}–º –æ—Å—Ç–∞–ª–æ—Å—å")
                
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
        except asyncio.CancelledError:
            logger.info("üõë –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    
    async def add_token(self, token_address: str) -> Optional[PadreWebSocketClient]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            if token_address in self.active_connections:
                logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return self.active_connections[token_address]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            client = PadreWebSocketClient(token_address=token_address)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            task = asyncio.create_task(client.start())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            self.active_connections[token_address] = client
            self.connection_tasks[token_address] = task
            
            logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}")
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
            
            return client
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}: {e}")
            return None

    async def _remove_connection(self, token_address: str, reason: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            logger.info(f"üîå –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {token_address[:8]} –∏–∑-–∑–∞ {reason}")
            del self.active_connections[token_address]
            del self.connection_tasks[token_address]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {token_address[:8]}: {e}")

class TokenMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ pump_bot.py"""
    
    def __init__(self, padre_manager: MultiplePadreManager):
        self.padre_manager = padre_manager
        
    async def add_token_for_analysis(self, token_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            contract_address = token_data.get('mint', token_data.get('address'))
            
            if not contract_address:
                logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–µ–∑ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
                return
            
            symbol = token_data.get('symbol', 'UNK')
            logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω {symbol} ({contract_address[:8]}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            client = await self.padre_manager.add_token(contract_address)
            
            if client:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
                logger.info(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {client.connection_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol}")
                # await client.subscribe_to_token_data(contract_address)
            else:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                logger.info(f"üé≤ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Å–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}")
                await self.simulate_bundler_analysis(contract_address, token_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def simulate_bundler_analysis(self, contract_address: str, token_data: dict):
        """–°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            import random
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö
            bundler_count = random.randint(50, 300)
            bundler_percentage = (bundler_count / 1000) * 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1000 –æ–±—â–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
            
            symbol = token_data.get('symbol', 'UNK')
            logger.info(f"üéØ –°–∏–º—É–ª—è—Ü–∏—è: {symbol} –∏–º–µ–µ—Ç {bundler_count} –±–∞–Ω–¥–ª–µ—Ä–æ–≤ ({bundler_percentage:.1f}%)")
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if bundler_percentage >= MIN_BUNDLER_PERCENTAGE:
                await self.send_bundler_notification(contract_address, token_data, bundler_count, bundler_percentage, simulated=True)
                
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            if contract_address in pending_tokens:
                del pending_tokens[contract_address]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {e}")
    
    async def send_bundler_notification(self, contract_address: str, token_data: dict, bundler_count: int, bundler_percentage: float, simulated: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            symbol = token_data.get('symbol', 'UNK')
            name = token_data.get('name', symbol)
            dex_source = token_data.get('dex_source', 'Unknown')
            market_cap = token_data.get('market_cap', 0)
            
            sim_tag = " üé≤ [–°–ò–ú–£–õ–Ø–¶–ò–Ø]" if simulated else ""
            
            message = (
                f"üö® <b>–í–´–°–û–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –ë–ê–ù–î–õ–ï–†–û–í!{sim_tag}</b>\n\n"
                f"ü™ô <b>{name}</b> ({symbol})\n"
                f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{contract_address}</code>\n"
                f"üìä <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> {bundler_count} ({bundler_percentage:.1f}%)\n"
                f"üí∞ <b>Market Cap:</b> ${market_cap:,.0f}\n"
                f"üè™ <b>DEX:</b> {dex_source}\n\n"
                f"‚ö° <b>–ú–∏–Ω. –ø–æ—Ä–æ–≥:</b> {MIN_BUNDLER_PERCENTAGE}%\n"
                f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ü—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {bundler_percentage - MIN_BUNDLER_PERCENTAGE:.1f}%"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{contract_address}"},
                    {"text": "üöÄ Pump.fun", "url": f"https://pump.fun/{contract_address}"}
                ],
                [{"text": "üíé Jupiter", "url": f"https://jup.ag/swap/SOL-{contract_address}"}]
            ]
            
            success = await self.send_telegram_message(message, keyboard)
            
            if success:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol} —Å {bundler_percentage:.1f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {e}")
    
    async def send_telegram_message(self, message: str, keyboard: List[List[Dict[str, str]]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            current_time = time.time()
            if hasattr(self, 'last_telegram_time'):
                time_since_last = current_time - self.last_telegram_time
                if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(3 - time_since_last)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = "-1002680160752"  # ID —á–∞—Ç–∞
            thread_id = "13134"  # ID —Ç—Ä–µ–¥–∞
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            
            data = {
                "chat_id": chat_id,
                "message_thread_id": thread_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            
            if keyboard:
                data["reply_markup"] = {"inline_keyboard": keyboard}
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: chat={chat_id}, thread={thread_id}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 429:  # Too Many Requests
                        retry_after = (await response.json()).get('parameters', {}).get('retry_after', 30)
                        logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ñ–¥–µ–º {retry_after} —Å–µ–∫.")
                        await asyncio.sleep(retry_after)
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                        async with session.post(url, json=data) as retry_response:
                            if retry_response.status != 200:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                                return False
                    elif response.status != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                        return False
                        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_telegram_time = time.time()
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Bundle Analyzer –¥–ª—è A/B —Ç–µ—Å—Ç–æ–≤...")
    logger.info(f"‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {MIN_BUNDLER_PERCENTAGE}%")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –Ω–æ–≤—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏)
    padre_manager = MultiplePadreManager(connection_interval=30.0)
    token_monitor = TokenMonitor(padre_manager)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("üîó –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        await padre_manager.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await padre_manager.stop()
        logger.info("‚úÖ Bundle Analyzer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_TOKEN!")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    asyncio.run(main()) 