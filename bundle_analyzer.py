#!/usr/bin/env python3
"""
Bundle Analyzer for A/B Testing
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
"""

import asyncio
import websockets
import json
import base64
import struct
import os
import sys
import logging
import aiohttp
import msgpack
from datetime import datetime
from typing import Dict, List, Optional, Any, Set
import requests
from urllib.parse import quote
import re
import ssl
import time
import traceback
from dotenv import load_dotenv
import numpy as np
from scipy.stats import linregress
import uuid
import random
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ "–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —Ä–∞–≥–∏"
GENIUS_RUG_BLACKLIST = set()
BLACKLIST_FILE = "genius_rug_blacklist.txt"

def j8(e=None, t=None, n=None):
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π randomUUID –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã t –∏ e
    if hasattr(uuid, 'uuid4') and t is None and (e is None or e == {}):
        return str(uuid.uuid4())
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 16 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç (–∞–Ω–∞–ª–æ–≥ O8())
    if e is None:
        e = {}
    
    if 'random' in e:
        r = e['random']
    elif 'rng' in e:
        r = e['rng']()
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 16 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç (0-255)
        r = [random.randint(0, 255) for _ in range(16)]
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    r[6] = (15 & r[6]) | 64  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é 4
    r[8] = (63 & r[8]) | 128 # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç 10 (RFC 4122)
    
    if t is not None:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±—É—Ñ–µ—Ä t - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–π—Ç—ã
        n = n or 0
        for i in range(16):
            t[n + i] = r[i]
        return t
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É UUID
    def format_bytes(bytes_arr, offset=0):
        hex_chars = "0123456789abcdef"
        result = []
        
        for i in range(16):
            if i in [4, 6, 8, 10]:
                result.append('-')
            byte_val = bytes_arr[offset + i]
            result.append(hex_chars[byte_val >> 4])
            result.append(hex_chars[byte_val & 0x0F])
        
        return ''.join(result)
    
    return format_bytes(r)

def load_blacklist():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    global GENIUS_RUG_BLACKLIST
    try:
        if os.path.exists(BLACKLIST_FILE):
            with open(BLACKLIST_FILE, 'r') as f:
                GENIUS_RUG_BLACKLIST = set(line.strip() for line in f if line.strip())
            print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(GENIUS_RUG_BLACKLIST)} —Ç–æ–∫–µ–Ω–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

def save_blacklist():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(BLACKLIST_FILE, 'w') as f:
            for token in sorted(GENIUS_RUG_BLACKLIST):
                f.write(f"{token}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_blacklist()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ pump_bot –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bundle_analyzer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø eboshers –∏–∑ —Ñ–∞–π–ª–∞
top_eboshers = []
try:
    with open('eboshers_v5.txt', 'r') as f:
        top_eboshers = [line.strip() for line in f if line.strip()]
    for ebosher in top_eboshers:
        logger.info(f"{ebosher}")
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(top_eboshers)} eboshers –∏–∑ —Ñ–∞–π–ª–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ eboshers: {e}")
    top_eboshers = []


def create_token_logger(token_address: str) -> logging.Logger:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        tokens_logs_dir = 'tokens_logs'
        if not os.path.exists(tokens_logs_dir):
            os.makedirs(tokens_logs_dir)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–µ—Ä–≤—ã–µ 12 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
        safe_token_name = token_address[:12] if token_address else "unknown"
        log_filename = os.path.join(tokens_logs_dir, f'{safe_token_name}.log')
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        token_logger = logging.getLogger(f'token_{token_address}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if token_logger.handlers:
            return token_logger
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        token_logger.setLevel(logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        file_handler = logging.FileHandler(log_filename, encoding='utf-8')
        file_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
        token_logger.addHandler(file_handler)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ª–æ–≥–≥–µ—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        token_logger.propagate = False
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]} -> {log_filename}")
        
        return token_logger
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return logger

def get_token_logger(token_address: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
    if not token_address:
        return logger
    return create_token_logger(token_address)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è mapping —Ç–æ–∫–µ–Ω–æ–≤ –∫ market_id
TOKEN_TO_MARKET_CACHE = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –∑–∞–ø—Ä–æ—Å–æ–≤ market_id
PENDING_MARKET_ID_REQUESTS = {}

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {token_address: {'activity': timestamp, 'pump': timestamp}}
SENT_NOTIFICATIONS = {}

# –°–ø–∏—Å–æ–∫ –±—ç–∫–µ–Ω–¥–æ–≤ Padre –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
PADRE_BACKENDS = [
    "wss://backend1.padre.gg/_multiplex",
    "wss://backend2.padre.gg/_multiplex",
    "wss://backend3.padre.gg/_multiplex",
    "wss://backend.padre.gg/_multiplex"
]

# –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –±—ç–∫–µ–Ω–¥–æ–≤
_backend_counter = 0

def get_next_padre_backend() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±—ç–∫–µ–Ω–¥ Padre –≤ —Ä–µ–∂–∏–º–µ round-robin"""
    global _backend_counter
    backend = PADRE_BACKENDS[_backend_counter % len(PADRE_BACKENDS)]
    _backend_counter += 1
    return backend

class AuthenticationPolicyViolation(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ 1008)"""
    pass

async def request_market_id_via_websocket(websocket, token_address: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket (–Ω–µ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç)"""
    try:
        token_logger = get_token_logger(token_address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
        if token_address in PENDING_MARKET_ID_REQUESTS:
            token_logger.debug(f"üìã –ó–∞–ø—Ä–æ—Å market_id –¥–ª—è {token_address[:8]}... —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False
        
        token_logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... —á–µ—Ä–µ–∑ WebSocket")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        import uuid
        request_id = str(uuid.uuid4())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å markets-per-token –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        markets_request_path = "/prices/prices/markets-per-token"
        markets_payload = {
            'tokens': [{'chain': 'SOLANA', 'tokenAddress': token_address}]
        }
        
        # –°–æ–∑–¥–∞—ë–º MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä—É [8, 45, path, request_id, payload]
        message_data = [8, 45, markets_request_path, request_id, markets_payload]
        message_bytes = msgpack.packb(message_data)
        
        token_logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å markets-per-token –¥–ª—è {token_address[:8]}...")
        token_logger.info(f"üì¶ MessagePack: [8, 45, path, uuid, payload] -> {len(message_bytes)} –±–∞–π—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        await websocket.send(message_bytes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ pending –∑–∞–ø—Ä–æ—Å—ã
        PENDING_MARKET_ID_REQUESTS[token_address] = {
            'request_id': request_id,
            'timestamp': asyncio.get_event_loop().time()
        }
        
        return True
        
    except Exception as e:
        token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ market_id –¥–ª—è {token_address[:8]}...: {e}")
        return False

def process_markets_per_token_response(payload: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç markets-per-token –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç cache"""
    try:
        if 'markets' in payload and 'SOLANA' in payload['markets']:
            solana_markets = payload['markets']['SOLANA']
            
            for token_address, markets_list in solana_markets.items():
                if markets_list and isinstance(markets_list, list) and len(markets_list) > 0:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π market (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π –ª–∏–∫–≤–∏–¥–Ω—ã–π)
                    market_info = markets_list[0]
                    market_id = market_info.get('marketId')
                    
                    if market_id:
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "solana-" –µ—Å–ª–∏ –µ—Å—Ç—å
                        if market_id.startswith('solana-'):
                            market_id = market_id[7:]
                        
                                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache
                        TOKEN_TO_MARKET_CACHE[token_address] = market_id
                        token_logger = get_token_logger(token_address)
                        token_logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω market_id –¥–ª—è {token_address[:8]}...: {market_id[:8]}...")
                        token_logger.info(f"üìã ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –° market_id (markets-per-token): {token_address} -> {market_id}")
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ pending –∑–∞–ø—Ä–æ—Å–æ–≤
                        if token_address in PENDING_MARKET_ID_REQUESTS:
                            del PENDING_MARKET_ID_REQUESTS[token_address]
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markets-per-token –æ—Ç–≤–µ—Ç–∞: {e}")

async def get_market_id_for_token_cached(token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç market_id –∏–∑ cache –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None"""
    return TOKEN_TO_MARKET_CACHE.get(token_address)

async def get_token_metadata(token_address: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API DexScreener –∏–ª–∏ Jupiter"""
    try:
        token_logger = get_token_logger(token_address)
        token_logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "application/json"
        }
        
        # –ü—Ä–æ–±—É–µ–º DexScreener API
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(dex_url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if 'pairs' in data and data['pairs']:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É (–æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –ª–∏–∫–≤–∏–¥–Ω–∞—è)
                        pair = data['pairs'][0]
                        base_token = pair.get('baseToken', {})
                        
                        symbol = base_token.get('symbol', 'UNK')
                        name = base_token.get('name', symbol)
                        
                        if symbol != 'UNK':
                            token_logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DexScreener: {name} ({symbol})")
                            return {
                                'symbol': symbol,
                                'name': name,
                                'market_cap': float(pair.get('fdv', 0)),
                                'dex_source': pair.get('dexId', 'Unknown'),
                                'source': 'DexScreener'
                            }
                
                # –ü—Ä–æ–±—É–µ–º Jupiter API –∫–∞–∫ fallback
                token_logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º Jupiter API –¥–ª—è {token_address[:8]}...")
                jupiter_url = f"https://price.jup.ag/v6/price?ids={token_address}"
                
                async with session.get(jupiter_url, headers=headers, timeout=10) as jup_response:
                    if jup_response.status == 200:
                        jup_data = await jup_response.json()
                        
                        if 'data' in jup_data and token_address in jup_data['data']:
                            token_data = jup_data['data'][token_address]
                            return {
                                'symbol': 'UNK',  # Jupiter price API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç symbol
                                'name': 'Unknown Token',
                                'market_cap': 0,
                                'dex_source': 'Jupiter',
                                'source': 'Jupiter',
                                'price': float(token_data.get('price', 0))
                            }
                
        token_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        return {
            'symbol': 'UNK',
            'name': 'Unknown Token',
            'market_cap': 0,
            'dex_source': 'Unknown',
            'source': 'None'
        }
        
    except Exception as e:
        token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token_address[:8]}...: {e}")
        return {
            'symbol': 'UNK',
            'name': 'Unknown Token',
            'market_cap': 0,
            'dex_source': 'Unknown',
            'source': 'Error'
        }

async def get_market_id_for_token(token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ cache –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API"""
    try:
        token_logger = get_token_logger(token_address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            cached_market_id = TOKEN_TO_MARKET_CACHE[token_address]
            token_logger.debug(f"üìã –ù–∞–π–¥–µ–Ω market_id –≤ cache –¥–ª—è {token_address[:8]}...: {cached_market_id[:8]}...")
            return cached_market_id
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º DexScreener API –∫–∞–∫ fallback
        token_logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º DexScreener API –¥–ª—è {token_address[:8]}...")
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "application/json"
        }
        
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(dex_url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if 'pairs' in data and data['pairs']:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É (–æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –ª–∏–∫–≤–∏–¥–Ω–∞—è)
                        pair = data['pairs'][0]
                        market_id = pair.get('pairAddress')
                        
                        if market_id:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache
                            TOKEN_TO_MARKET_CACHE[token_address] = market_id
                            token_logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω market_id —á–µ—Ä–µ–∑ DexScreener –¥–ª—è {token_address[:8]}...: {market_id[:8]}...")
                            return market_id
                
                        token_logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ market_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
                token_logger.info(f"üìã –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–µ–∑ market_id (DexScreener): {token_address}")
                return None
        
    except Exception as e:
        token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market_id –¥–ª—è {token_address[:8]}...: {e}")
        return None

async def get_market_address_via_smart_query(websocket, token_address: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç marketAddress –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ get-market-smart-with-warm endpoint"""
    try:
        token_logger = get_token_logger(token_address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cache
        if token_address in TOKEN_TO_MARKET_CACHE:
            cached_market_id = TOKEN_TO_MARKET_CACHE[token_address]
            token_logger.debug(f"üìã –ù–∞–π–¥–µ–Ω marketAddress –≤ cache –¥–ª—è {token_address[:8]}...: {cached_market_id[:8]}...")
            return cached_market_id
        
        token_logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º marketAddress –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... —á–µ—Ä–µ–∑ get-market-smart-with-warm")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        import uuid
        request_id = str(uuid.uuid4())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        smart_query_path = f"/prices/query/solana-{token_address}/get-market-smart-with-warm"
        
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MessagePack —Ñ–æ—Ä–º–∞—Ç [8, 19, path, id]
        smart_query_request = [8, 19, smart_query_path, request_id]
        smart_query_request_bytes = msgpack.packb(smart_query_request)
        
        token_logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º get-market-smart-with-warm –∑–∞–ø—Ä–æ—Å –¥–ª—è {token_address[:8]}...")
        await websocket.send(smart_query_request_bytes)
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å marketAddress
        for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                if isinstance(response, bytes):
                    try:
                        decoded_response = msgpack.unpackb(response, raw=False)
                        token_logger.debug(f"üì® –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç: {str(decoded_response)[:300]}...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ [9, 19, 200, payload]
                        if (isinstance(decoded_response, list) and len(decoded_response) >= 4 and 
                            decoded_response[0] == 9 and decoded_response[1] == 19 and 
                            decoded_response[2] == 200):
                            
                            response_payload = decoded_response[3]
                            if isinstance(response_payload, dict) and 'marketAddress' in response_payload:
                                market_address = response_payload['marketAddress']
                                token_logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω marketAddress –¥–ª—è {token_address[:8]}...: {market_address}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache
                                TOKEN_TO_MARKET_CACHE[token_address] = market_address
                                token_logger.info(f"üìã ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –° marketAddress: {token_address} -> {market_address}")
                                return market_address
                            else:
                                token_logger.warning(f"‚ö†Ô∏è marketAddress –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {token_address[:8]}...")
                                token_logger.debug(f"üìä –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {str(response_payload)[:500]}...")
                        elif (isinstance(decoded_response, list) and len(decoded_response) >= 4 and 
                              decoded_response[0] == 9 and decoded_response[1] == 19 and 
                              decoded_response[2] != 200):
                            # –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
                            token_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ get-market-smart-with-warm –∑–∞–ø—Ä–æ—Å–µ: –∫–æ–¥ {decoded_response[2]}")
                        else:
                            token_logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞: {decoded_response[:3] if isinstance(decoded_response, list) else type(decoded_response)}")
                            
                    except Exception as decode_error:
                        token_logger.debug(f"üîç –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {decode_error}")
                        continue
                else:
                    token_logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ-binary —Å–æ–æ–±—â–µ–Ω–∏–µ: {type(response)}")
                    
            except asyncio.TimeoutError:
                token_logger.debug(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {token_address[:8]}...")
                break
            except Exception as e:
                token_logger.debug(f"üîç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
                break
        
        token_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å marketAddress –¥–ª—è {token_address[:8]}... —á–µ—Ä–µ–∑ get-market-smart-with-warm")
        token_logger.info(f"üìã –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–µ–∑ marketAddress: {token_address}")
        return None
        
    except Exception as e:
        token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è marketAddress —á–µ—Ä–µ–∑ get-market-smart-with-warm –¥–ª—è {token_address[:8]}...: {e}")
        token_logger.info(f"üìã –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: {token_address}")
        return None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
TARGET_CHAT_ID = -1002680160752  # ID –≥—Ä—É–ø–ø—ã –∏–∑ https://t.me/c/2680160752/13134
SPECIAL_PATTERN_THREAD_ID = 19879  # ID –≤–µ—Ç–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ https://t.me/c/2680160752/19879
TARGET_THREAD_ID = 13134  # ID —Ç–µ–º—ã
MIN_BUNDLER_PERCENTAGE = float(os.getenv("MIN_BUNDLER_PERCENTAGE", "10"))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤

# WebSocket URL –¥–ª—è trade.padre.gg
PADRE_WS_URL = get_next_padre_backend()

# –ö—É–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ padre
PADRE_COOKIES = {
    'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel': '%7B%22distinct_id%22%3A%20%22tg_7891524244%22%2C%22%24device_id%22%3A%20%22198c4c7db7a10cd-01cbba2231e301-4c657b58-1fa400-198c4c7db7b1a60%22%2C%22%24user_id%22%3A%20%22tg_7891524244%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
pending_tokens: Dict[str, dict] = {}  # {contract_address: token_data}
bundler_results: Dict[str, dict] = {}  # {contract_address: bundler_data}
sended_tokens: Dict[str, bool] = {}  # {contract_address: bool}

def decode_padre_message(message_bytes: bytes) -> Optional[dict]:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç trade.padre.gg WebSocket
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MessagePack, JSON, base64
    """
    try:
        logger.debug(f"üîç –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(message_bytes)} –±–∞–π—Ç")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π MessagePack
        try:
            data = msgpack.unpackb(message_bytes, raw=False)
            logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ MessagePack: {type(data)}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ fast-stats update, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ
            if isinstance(data, dict) and any(key in str(data).lower() for key in ['bundler', 'holder', 'volume', 'stats']):
                logger.info(f"üöÄ Fast-stats –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {list(data.keys()) if isinstance(data, dict) else type(data)}")
            
            return data if isinstance(data, dict) else {'raw_data': data, 'type': 'msgpack'}
        except Exception as e:
            logger.debug(f"‚ùå –ù–µ MessagePack: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: JSON
        try:
            text = message_bytes.decode('utf-8', errors='ignore')
            if text.strip().startswith('{'):
                data = json.loads(text)
                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ JSON")
                return data
        except Exception as e:
            logger.debug(f"‚ùå –ù–µ JSON: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: Base64 encoded data
        try:
            if len(message_bytes) % 4 == 0:  # base64 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 4
                decoded_b64 = base64.b64decode(message_bytes)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ MessagePack
                try:
                    data = msgpack.unpackb(decoded_b64, raw=False)
                    logger.debug(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ base64->MessagePack")
                    return data if isinstance(data, dict) else {'raw_data': data, 'type': 'base64_msgpack'}
                except:
                    pass
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ JSON
                try:
                    text = decoded_b64.decode('utf-8', errors='ignore')
                    if text.strip().startswith('{'):
                        data = json.loads(text)
                        logger.debug(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ base64->JSON")
                        return data
                except:
                    pass
                    
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ base64: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å multiplex format)
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if len(message_bytes) > 10:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON —á–∞—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                text = message_bytes.decode('utf-8', errors='ignore')
                
                # –ò—â–µ–º JSON –±–ª–æ–∫–∏
                import re
                json_matches = re.findall(r'\{[^{}]*\}', text)
                for match in json_matches:
                    try:
                        data = json.loads(match)
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω JSON –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–µ")
                        return data
                    except:
                        continue
                        
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ fast-stats
                if any(keyword in text.lower() for keyword in ['bundler', 'holder', 'volume', 'stats', 'trades']):
                    logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π fast-stats –∫–æ–Ω—Ç–µ–Ω—Ç: {text[:100]}...")
                    return {'type': 'fast_stats_text', 'content': text}
                    
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 5: –ü—Ä–æ—Å—Ç–æ–µ ping/pong —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            text = message_bytes.decode('utf-8', errors='ignore').strip()
            if text.lower() in ['ping', 'pong'] or len(text) < 10:
                return {'type': 'ping', 'message': text}
        except:
            pass
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logger.debug(f"ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ")
        return {
            'type': 'unknown',
            'raw_bytes': message_bytes.hex() if len(message_bytes) < 200 else f"{message_bytes[:100].hex()}...",
            'length': len(message_bytes),
            'ascii_preview': message_bytes.decode('utf-8', errors='ignore')[:100]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

class TokenMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–∞"""
    def __init__(self, token_address: str, creation_time: int):
        self.token_address = token_address
        self.creation_time = creation_time
        self.metrics_history = []
        self.max_dev_percent = 0
        self.max_bundlers_after_dev_exit = 0
        self.max_bundlers_before_dev_exit = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
        self.max_top_10_holders_pcnt_before_dev_exit = 0
        self.max_holders = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        self.dev_exit_time = None
        self.last_notification_time = 0
        self.last_notification_type = None  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.holder_percentages_history = []  # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.logger = get_token_logger(token_address)
        
    def can_send_notification(self, notification_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('active', 'pump', etc)
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        current_time = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        MIN_NOTIFICATION_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if current_time - self.last_notification_time < MIN_NOTIFICATION_INTERVAL:
            return False
        
        # –ï—Å–ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if self.last_notification_type != notification_type:
            return True
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.last_notification_time = current_time
        self.last_notification_type = notification_type
        return True
    
    def add_metrics(self, metrics: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–µ–µ
        if 'timestamp' not in metrics:
            metrics['timestamp'] = int(time.time())

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ –∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
        dev_holding = metrics.get('devHoldingPcnt')
        dev_percent = float(dev_holding) if dev_holding is not None else 0
        
        bundles_percent = metrics.get('bundlesHoldingPcnt')
        bundles_percent = float(bundles_percent.get('current', 0) if isinstance(bundles_percent, dict) else (bundles_percent if bundles_percent is not None else 0))

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞
        if dev_percent > self.max_dev_percent:
            self.max_dev_percent = dev_percent
            self.logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∏ –¥–µ–≤–∞: {dev_percent:.1f}%")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –¥–µ–≤–∞
        if self.dev_exit_time is None and dev_percent <= 2 and self.metrics_history:
            last_dev_percent = float(self.metrics_history[-1].get('devHoldingPcnt', 0) or 0)
            if last_dev_percent > 0:
                self.dev_exit_time = metrics['timestamp']
                self.logger.info(f"üö™ –î–µ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—à–µ–ª –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ {datetime.fromtimestamp(self.dev_exit_time)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–≤–∞
        if self.dev_exit_time is None:
            # –î–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
            if bundles_percent > self.max_bundlers_before_dev_exit:
                self.max_bundlers_before_dev_exit = bundles_percent
                self.logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞: {bundles_percent:.1f}%")
        else:
            # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
            if bundles_percent > self.max_bundlers_after_dev_exit:
                self.max_bundlers_after_dev_exit = bundles_percent
                self.logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞: {bundles_percent:.1f}%")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        total_holders = int(metrics.get('total_holders', 0) or 0)
        if total_holders > self.max_holders:
            self.max_holders = total_holders
            self.logger.info(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º —Ö–æ–ª–¥–µ—Ä–æ–≤: {total_holders}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        top10holders = metrics.get("top10holders", {})
        if top10holders and len(top10holders) >= 3:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            sorted_holders = sorted(
                top10holders.items(),
                key=lambda item: item[1]['pcnt'],
                reverse=True
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            dev_address = None
            base_token_audit = metrics.get('baseTokenAudit', {})
            if base_token_audit:
                dev_address = base_token_audit.get('deployerAddress')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ (–Ω–µ –ø—É–ª—ã, –Ω–µ –±–∞–Ω–¥–ª–µ—Ä—ã, –Ω–µ –∏–Ω—Å–∞–π–¥–µ—Ä—ã, –Ω–µ –¥–µ–≤)
            # –ò —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Ç–æ–ø-3 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            current_percentages = []
            top3_snipers_count = 0
            
            for wallet, value in sorted_holders:
                is_dev = dev_address and wallet == dev_address
                if (not value.get('isPool', False) and 
                    not value.get('isBundler', False) and 
                    not value.get('insider', False) and 
                    not is_dev):
                    current_percentages.append(value['pcnt'])
                    
                    # –°—á–∏—Ç–∞–µ–º —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3
                    if len(current_percentages) <= 3 and value.get('isSniper', False):
                        top3_snipers_count += 1
                    
                    if len(current_percentages) >= 10:  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                        break
            
            if len(current_percentages) >= 3:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω–∞–π–ø–µ—Ä–∞—Ö –≤ —Ç–æ–ø-3
                snapshot_data = {
                    'percentages': current_percentages,
                    'top3_snipers': top3_snipers_count,
                    'total_snipers_percent': float(metrics.get('snipersHoldingPcnt', 0) or 0)
                }
                self.holder_percentages_history.append(snapshot_data)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏
                if len(self.holder_percentages_history) > 1000:
                    self.holder_percentages_history = self.holder_percentages_history[-1000:]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.metrics_history.append(metrics.copy())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å—Å—ã–ª–æ–∫
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –º–µ—Ç—Ä–∏–∫
        current_time = int(time.time())
        self.metrics_history = [m for m in self.metrics_history 
                              if current_time - m['timestamp'] <= 300]
    
    def get_growth_rates(self) -> dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if len(self.metrics_history) < 2:
            return {
                'holders_growth': 0,
                'bundlers_growth': 0,
                'price_growth': 0
            }
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        old = self.metrics_history[0]
        new = self.metrics_history[-1]
        time_diff_sec = new['timestamp'] - old['timestamp']  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        self.logger.info(f"üìä time_diff_sec: {time_diff_sec}")
        self.logger.info(f"üìä old: {old}")
        self.logger.info(f"üìä new: {new}")

        if time_diff_sec == 0:
            return {
                'holders_growth': 0,
                'bundlers_growth': 0,
                'price_growth': 0
            }

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —É–±–µ–∂–¥–∞—è—Å—å —á—Ç–æ –æ–Ω–∏ —á–∏—Å–ª–∞
        old_holders = int(old.get('total_holders', 0) or 0)
        new_holders = int(new.get('total_holders', 0) or 0)
        old_bundlers = int(old.get('totalBundlesCount', 0) or 0)
        new_bundlers = int(new.get('totalBundlesCount', 0) or 0)
        old_price = float(old.get('basePriceInUsdUi', 0) or 0)
        new_price = float(new.get('basePriceInUsdUi', 0) or 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
        holders_diff = new_holders - old_holders
        bundlers_diff = new_bundlers - old_bundlers
        price_diff = new_price - old_price

        # –ï—Å–ª–∏ –ø—Ä–∏—Ä–æ—Å—Ç –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∫–∞–∫ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
        holders_growth = holders_diff * 60 if holders_diff > 0 else 0  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ /–º–∏–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        bundlers_growth = bundlers_diff * 60 if bundlers_diff > 0 else 0
        price_growth = price_diff * 60 if price_diff > 0 else 0
        
        self.logger.info(f"üìä –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è {self.token_address[:8]}:")
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {time_diff_sec} —Å–µ–∫")
        self.logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {old_holders} ‚Üí {new_holders} (Œî{holders_diff}) = {holders_growth:.2f}/–º–∏–Ω")
        self.logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: {old_bundlers} ‚Üí {new_bundlers} (Œî{bundlers_diff}) = {bundlers_growth:.2f}/–º–∏–Ω")
        self.logger.info(f"üí∞ –¶–µ–Ω–∞: ${old_price:.8f} ‚Üí ${new_price:.8f} (Œî${price_diff:.8f}) = ${price_growth:.8f}/–º–∏–Ω")

        return {
            'holders_growth': holders_growth,
            'bundlers_growth': bundlers_growth,
            'price_growth': price_growth
        }
    
    def check_snipers_bundlers_correlation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤ –Ω–æ—Ä–º–µ (—Å–Ω–∞–π–ø–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏),
                 False –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ —á—Ç–æ —Å–Ω–∞–π–ø–µ—Ä—ã —ç—Ç–æ –±–∞–Ω–¥–ª–µ—Ä—ã
        """
        if not hasattr(self, 'metrics_history') or len(self.metrics_history) < 3:
            return True

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä–æ–≤
        curr_snipers = float(self.metrics_history[-1].get('snipersHoldingPcnt', 0) or 0)
        
        # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏ (<=1.5%) - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫
        if curr_snipers <= 0.5 or curr_snipers <= 1.0 and self.check_rapid_exit('snipersHoldingPcnt', ratio=3, max_seconds=120):
            self.logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - –±–∞–Ω–¥–ª–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏")
            return True
            
        # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –µ—â–µ –Ω–µ –≤—ã—à–ª–∏ (>1.5%), –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        bundlers_changes = []
        snipers_changes = []
        
        for i in range(1, len(self.metrics_history)):
            prev = self.metrics_history[i-1]
            curr = self.metrics_history[i]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            prev_bundlers = prev.get('bundlesHoldingPcnt')
            prev_bundlers = float(prev_bundlers.get('current', 0) if isinstance(prev_bundlers, dict) else (prev_bundlers if prev_bundlers is not None else 0))
            curr_bundlers = curr.get('bundlesHoldingPcnt')
            curr_bundlers = float(curr_bundlers.get('current', 0) if isinstance(curr_bundlers, dict) else (curr_bundlers if curr_bundlers is not None else 0))
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            
            bundlers_change = curr_bundlers - prev_bundlers
            snipers_change = curr_snipers - prev_snipers
            
            if abs(bundlers_change) > 0.1:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                bundlers_changes.append(bundlers_change)
                snipers_changes.append(snipers_change)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (bundlers_change * snipers_change > 0 and 
                    abs(bundlers_change - snipers_change) / max(abs(bundlers_change), abs(snipers_change)) < 0.3):
                    self.logger.info(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –±–∞–Ω–¥–ª–µ—Ä—ã {bundlers_change:.2f}%, —Å–Ω–∞–π–ø–µ—Ä—ã {snipers_change:.2f}%")

        if len(bundlers_changes) < 2:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        suspicious = sum(
            1 for i in range(len(bundlers_changes))
            if (bundlers_changes[i] * snipers_changes[i] > 0 and 
                abs(bundlers_changes[i] - snipers_changes[i]) / max(abs(bundlers_changes[i]), abs(snipers_changes[i])) < 0.3)
        )
        
        is_suspicious = suspicious >= len(bundlers_changes) * 0.5
        if is_suspicious:
            self.logger.warning(f"‚ö†Ô∏è –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {suspicious}/{len(bundlers_changes)}")
        
        return not is_suspicious

    def check_snipers_insiders_correlation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º–∏
        """
        if not hasattr(self, 'metrics_history') or len(self.metrics_history) < 3:
            return True
            
        curr_snipers = float(self.metrics_history[-1].get('snipersHoldingPcnt', 0) or 0)
        if curr_snipers <= 0.5 or curr_snipers <= 1.0 and self.check_rapid_exit('snipersHoldingPcnt', ratio=3, max_seconds=120):
            self.logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –∏–Ω—Å–∞–π–¥–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å")
            return True
            
        snipers_changes = []
        insiders_changes = []
        
        for i in range(1, len(self.metrics_history)):
            prev = self.metrics_history[i-1]
            curr = self.metrics_history[i]
            
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            prev_insiders = float(prev.get('insidersHoldingPcnt', 0) or 0)
            curr_insiders = float(curr.get('insidersHoldingPcnt', 0) or 0)
            
            change = curr_snipers - prev_snipers
            if abs(change) > 0.1:
                snipers_changes.append(change)
                insiders_changes.append(curr_insiders - prev_insiders)

        if len(snipers_changes) < 2:
            return True

        suspicious = sum(
            1 for i in range(len(snipers_changes))
            if (snipers_changes[i] * insiders_changes[i] > 0 and
                abs(snipers_changes[i] - insiders_changes[i]) / max(abs(snipers_changes[i]), abs(insiders_changes[i])) < 0.3)
        )
        
        is_suspicious = suspicious >= len(snipers_changes) * 0.5
        if is_suspicious:
            self.logger.warning("‚ö†Ô∏è –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤!")
            
        return not is_suspicious

    def check_bundlers_snipers_exit_correlation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –≤—ã—Ö–æ–¥ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤
        """
        if not hasattr(self, 'metrics_history') or len(self.metrics_history) < 3:
            return True
            
        curr_snipers = float(self.metrics_history[-1].get('snipersHoldingPcnt', 0) or 0)
        if curr_snipers <= 0.5 or curr_snipers <= 1.0 and self.check_rapid_exit('snipersHoldingPcnt', ratio=3, max_seconds=120):
            self.logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å")
            return True
            
        bundlers_changes = []
        snipers_changes = []
        
        for i in range(1, len(self.metrics_history)):
            prev = self.metrics_history[i-1]
            curr = self.metrics_history[i]
            
            prev_bundlers = prev.get('bundlesHoldingPcnt')
            prev_bundlers = float(prev_bundlers.get('current', 0) if isinstance(prev_bundlers, dict) else (prev_bundlers if prev_bundlers is not None else 0))
            curr_bundlers = curr.get('bundlesHoldingPcnt')
            curr_bundlers = float(curr_bundlers.get('current', 0) if isinstance(curr_bundlers, dict) else (curr_bundlers if curr_bundlers is not None else 0))
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            
            bundlers_change = curr_bundlers - prev_bundlers
            snipers_change = curr_snipers - prev_snipers
            
            if bundlers_change < 0 and snipers_change < 0:
                bundlers_changes.append(bundlers_change)
                snipers_changes.append(snipers_change)

        if len(bundlers_changes) < 2:
            return True

        suspicious = sum(
            1 for i in range(len(bundlers_changes))
            if abs(bundlers_changes[i] - snipers_changes[i]) / max(abs(bundlers_changes[i]), abs(snipers_changes[i])) < 0.3
        )
        
        is_suspicious = suspicious >= len(bundlers_changes) * 0.5
        if is_suspicious:
            self.logger.warning("‚ö†Ô∏è –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –≤—ã—Ö–æ–¥ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤!")
            
        return not is_suspicious

    async def check_holders_correlation(self) -> bool:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —Å—Ä–µ–¥–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤.
        –§–û–ö–£–°: –¢–æ–ø 10 —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Å—Ç—Ä–æ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —Ä—ã–Ω–∫–∞.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–¥–∞–∂ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, False –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
        """
        if not hasattr(self, 'metrics_history') or len(self.metrics_history) < 3:
            self.logger.debug("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ —Ö–æ–ª–¥–µ—Ä–æ–≤")
            return True
        
        # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(self.metrics_history) > 1000:
            self.logger.debug("üìä –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –º–µ—Ç—Ä–∏–∫–∞–º–∏")
            metrics_to_analyze = self.metrics_history[-1000:]
        else:
            metrics_to_analyze = self.metrics_history
        
        self.logger.debug("üîç –ê–ù–ê–õ–ò–ó –ú–ê–°–°–û–í–´–• –ü–†–û–î–ê–ñ –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Ö –≤—Ö–æ–¥–∞
        all_wallets = set()
        wallet_entry_times = {}  # {wallet: first_seen_timestamp}
        wallet_holdings_history = {}  # {wallet: [(timestamp, pcnt), ...]}
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        dev_address = None
        if len(metrics_to_analyze) > 0:
            first_metrics = metrics_to_analyze[0]
            base_token_audit = first_metrics.get('baseTokenAudit', {})
            if base_token_audit:
                dev_address = base_token_audit.get('deployerAddress')
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞
        for i, metrics in enumerate(metrics_to_analyze):
            timestamp = metrics.get('timestamp', int(time.time()))
            top10holders = metrics.get('top10holders', {})
            
            for wallet, holder_info in top10holders.items():
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–ª—ã, –±–∞–Ω–¥–ª–µ—Ä–æ–≤, –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                is_dev = dev_address and wallet == dev_address
                if (not holder_info.get('isPool', False) and 
                    not holder_info.get('isBundler', False) and 
                    not holder_info.get('insider', False) and 
                    not is_dev):
                    all_wallets.add(wallet)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
                    if wallet not in wallet_entry_times:
                        wallet_entry_times[wallet] = timestamp
                        self.logger.debug(f"üïê –ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ {wallet[:8]}... —Å {holder_info.get('pcnt', 0):.3f}%")
                    
                    # –í–µ–¥–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–ª–∞–¥–µ–Ω–∏—è
                    if wallet not in wallet_holdings_history:
                        wallet_holdings_history[wallet] = []
                    wallet_holdings_history[wallet].append((timestamp, holder_info.get('pcnt', 0)))
            
            # –û—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if i % 10 == 0:
                await asyncio.sleep(0)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ (–†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´ - –ü–†–ò–û–†–ò–¢–ï–¢!)
        sorted_wallets_by_entry = sorted(wallet_entry_times.items(), key=lambda x: x[1])
        early_holders = [wallet for wallet, entry_time in sorted_wallets_by_entry[:10]]  # –ü–µ—Ä–≤—ã–µ 10
        
        self.logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_wallets)} –æ–±—ã—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        self.logger.debug(f"üö® –†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´ (–ø–µ—Ä–≤—ã–µ 10): {[w[:8] + '...' for w in early_holders]}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂
        holder_changes_timeline = []
        
        for i in range(1, len(metrics_to_analyze)):
            prev_metrics = metrics_to_analyze[i-1]
            curr_metrics = metrics_to_analyze[i]
            
            prev_holders = prev_metrics.get('top10holders', {})
            curr_holders = curr_metrics.get('top10holders', {})
            
            timestamp = curr_metrics.get('timestamp', int(time.time()))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            wallet_changes = {}
            for wallet in all_wallets:
                prev_pcnt = prev_holders.get(wallet, {}).get('pcnt', 0) if wallet in prev_holders else 0
                curr_pcnt = curr_holders.get(wallet, {}).get('pcnt', 0) if wallet in curr_holders else 0
                
                change = curr_pcnt - prev_pcnt
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ 0.01%)
                if abs(change) > 0.01:
                    wallet_changes[wallet] = {
                        'change': change,
                        'prev_pcnt': prev_pcnt,
                        'curr_pcnt': curr_pcnt,
                        'change_ratio': abs(change) / max(prev_pcnt, 0.001)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    }
            
            if wallet_changes:
                holder_changes_timeline.append({
                    'timestamp': timestamp,
                    'changes': wallet_changes,
                    'total_wallets_changed': len(wallet_changes)
                })
            
            # –û—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop –∫–∞–∂–¥—ã–µ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if i % 5 == 0:
                await asyncio.sleep(0)
        
        self.logger.debug(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(holder_changes_timeline)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        suspicious_patterns = []
        mass_sell_events = []
        
        for i, change_event in enumerate(holder_changes_timeline):
            changes = change_event['changes']
            timestamp = change_event['timestamp']
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–∂–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            selling_wallets = []
            total_sell_volume = 0
            
            for wallet, change_data in changes.items():
                if change_data['change'] < -0.01:  # –ü—Ä–æ–¥–∞–∂–∞ –±–æ–ª—å—à–µ 0.01%
                    selling_wallets.append({
                        'wallet': wallet,
                        'sell_amount': abs(change_data['change']),
                        'prev_pcnt': change_data['prev_pcnt'],
                        'change_ratio': change_data['change_ratio']
                    })
                    total_sell_volume += abs(change_data['change'])
            
            # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞—é—Ç 3+ –∫–æ—à–µ–ª—å–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if len(selling_wallets) >= 3:
                mass_sell_events.append({
                    'timestamp': timestamp,
                    'selling_wallets': selling_wallets,
                    'total_sell_volume': total_sell_volume,
                    'avg_sell_amount': total_sell_volume / len(selling_wallets)
                })
                
                self.logger.warning(f"üö® –ú–ê–°–°–û–í–ê–Ø –ü–†–û–î–ê–ñ–ê –≤ {datetime.fromtimestamp(timestamp)}:")
                self.logger.warning(f"   üìä –ö–æ—à–µ–ª—å–∫–æ–≤ –ø—Ä–æ–¥–∞—é—Ç: {len(selling_wallets)}")
                self.logger.warning(f"   üìà –û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {total_sell_volume:.2f}%")
                self.logger.warning(f"   üìâ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂–∏: {total_sell_volume / len(selling_wallets):.2f}%")
                
                for sell_info in selling_wallets:
                    self.logger.warning(f"   üîª {sell_info['wallet'][:8]}... –ø—Ä–æ–¥–∞–ª {sell_info['sell_amount']:.2f}% (–±—ã–ª–æ {sell_info['prev_pcnt']:.2f}%)")
            
            # –û—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop –∫–∞–∂–¥—ã–µ 3 —Å–æ–±—ã—Ç–∏—è
            if i % 3 == 0:
                await asyncio.sleep(0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ —Å—Ä–µ–¥–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ (–ª–∏–º–∏—Ç–∏—Ä—É–µ–º)
        early_holder_suspicious = []
        
        # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        max_early_holders = min(len(early_holders), 8)  # –ú–∞–∫—Å–∏–º—É–º 8 —Ö–æ–ª–¥–µ—Ä–æ–≤
        limited_early_holders = early_holders[:max_early_holders]
        
        for i, wallet1 in enumerate(limited_early_holders):
            for j, wallet2 in enumerate(limited_early_holders[i+1:]):
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
                wallet1_changes = []
                wallet2_changes = []
                
                for change_event in holder_changes_timeline:
                    change1 = change_event['changes'].get(wallet1, {}).get('change', 0)
                    change2 = change_event['changes'].get(wallet2, {}).get('change', 0)
                    wallet1_changes.append(change1)
                    wallet2_changes.append(change2)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                correlation = self._calculate_correlation(wallet1_changes, wallet2_changes)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å—Ä–µ–¥–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
                if correlation > 0.6 and len([x for x in wallet1_changes if abs(x) > 0.01]) >= 1:
                    self.logger.warning(f"({self.token_address[:8]}...) üî• –†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´ –ö–û–†–†–ï–õ–ò–†–£–Æ–¢: {wallet1[:8]}... –∏ {wallet2[:8]}...: {correlation:.3f}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
                    sync_sells = sum(1 for k in range(len(wallet1_changes)) 
                                   if wallet1_changes[k] < -0.01 and wallet2_changes[k] < -0.01)
                    
                    if sync_sells >= 1:  # –î–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏!
                        early_holder_suspicious.append({
                            'wallet1': wallet1,
                            'wallet2': wallet2,
                            'correlation': correlation,
                            'sync_sells': sync_sells,
                            'entry_time_diff': abs(wallet_entry_times[wallet1] - wallet_entry_times[wallet2]),
                            'pattern_type': 'early_holder_coordination'
                        })
                        self.logger.warning(f"({self.token_address[:8]}...)    üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´: {sync_sells} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂!")
                
                # –û—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop –∫–∞–∂–¥—ã–µ 3 –ø–∞—Ä—ã
                if (i * len(limited_early_holders) + j) % 3 == 0:
                    await asyncio.sleep(0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        early_holders_total_percent = 0
        for wallet in early_holders:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è
            if wallet in wallet_holdings_history and wallet_holdings_history[wallet]:
                latest_percent = wallet_holdings_history[wallet][-1][1]
                early_holders_total_percent += latest_percent
        
        self.logger.info(f"({self.token_address[:8]}...) üìä –û–ë–©–ò–ô % –í–õ–ê–î–ï–ù–ò–Ø –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í: {early_holders_total_percent:.2f}%")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        early_holders_fast_exit = 0
        for wallet in early_holders:
            if wallet in wallet_holdings_history and len(wallet_holdings_history[wallet]) >= 2:
                initial_percent = wallet_holdings_history[wallet][0][1]
                current_percent = wallet_holdings_history[wallet][-1][1]
                
                # –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø–æ—Ç–µ—Ä—è–ª –±–æ–ª–µ–µ 50% —Å–≤–æ–∏—Ö –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ö–æ–ª–¥–∏–Ω–≥–æ–≤
                if initial_percent > 0 and (current_percent / initial_percent) < 0.5:
                    early_holders_fast_exit += 1
                    self.logger.info(f"({self.token_address[:8]}...) ‚ö° –ë–´–°–¢–†–´–ô –í–´–•–û–î: {wallet[:8]}... —Å {initial_percent:.2f}% –¥–æ {current_percent:.2f}%")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ - —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        total_mass_sell_events = len(mass_sell_events)
        total_early_holder_patterns = len(early_holder_suspicious)
        
        self.logger.info(f"({self.token_address[:8]}...) üìà –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ú–ê–°–°–û–í–´–• –ü–†–û–î–ê–ñ –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í:")
        self.logger.info(f"({self.token_address[:8]}...)    üî• –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã: {total_early_holder_patterns}")
        self.logger.info(f"({self.token_address[:8]}...)    üìä –ú–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂: {total_mass_sell_events}")
        self.logger.info(f"({self.token_address[:8]}...)    üí∞ –û–±—â–∏–π % —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤: {early_holders_total_percent:.2f}%")
        self.logger.info(f"({self.token_address[:8]}...)    ‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ —Ä–∞–Ω–Ω–∏—Ö: {early_holders_fast_exit}/{len(early_holders)}")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        is_suspicious = False
        risk_level = "–ù–ò–ó–ö–ò–ô"
        
        # –í–´–°–û–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å - –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã + –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        if total_early_holder_patterns >= 1 and total_mass_sell_events >= 2:
            is_suspicious = True
            risk_level = "–í–´–°–û–ö–ò–ô"
            self.logger.warning(f"({self.token_address[:8]}...) üî¥ –í–´–°–û–ö–ò–ô –†–ò–°–ö: –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç –∏ –µ—Å—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏!")
        
        # –°–†–ï–î–ù–ò–ô —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π % —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        elif total_mass_sell_events >= 3 or total_early_holder_patterns >= 2 or early_holders_total_percent > 30:
            is_suspicious = True
            risk_level = "–°–†–ï–î–ù–ò–ô"
            if early_holders_total_percent > 30:
                self.logger.warning(f"({self.token_address[:8]}...) üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö: –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –¥–µ—Ä–∂–∞—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ({early_holders_total_percent:.2f}% > 10%)")
            else:
                self.logger.warning(f"({self.token_address[:8]}...) üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö: –ú–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏–ª–∏ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if is_suspicious:
            self.logger.warning(f"({self.token_address[:8]}...) üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´! –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê: {risk_level}")
            
            if early_holder_suspicious:
                self.logger.warning(f"({self.token_address[:8]}...)    üî• –ö–û–†–†–ï–õ–ò–†–û–í–ê–ù–ù–´–ï –†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´:")
                for pattern in early_holder_suspicious:
                    time_diff = pattern['entry_time_diff']
                    self.logger.warning(f"({self.token_address[:8]}...)       üö® {pattern['wallet1'][:8]}... ‚Üî {pattern['wallet2'][:8]}... (–∫–æ—Ä—Ä: {pattern['correlation']:.3f}, –≤—Ä–µ–º. —Ä–∞–∑–Ω–∏—Ü–∞: {time_diff}—Å)")
            
            self.logger.warning(f"({self.token_address[:8]}...)    üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¢–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∏–∑-–∑–∞ —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂!")
        else:
            self.logger.info(f"({self.token_address[:8]}...) ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–¥–∞–∂ —Ö–æ–ª–¥–µ—Ä–æ–≤ –≤—ã–≥–ª—è–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            self.logger.info(f"({self.token_address[:8]}...)    ‚úì –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –Ω–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç –º–∞—Å—Å–æ–≤–æ")
            self.logger.info(f"({self.token_address[:8]}...)    ‚úì –ú–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
        
        return not is_suspicious
    
    def _calculate_correlation(self, series1: list, series2: list) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏
        """
        if len(series1) != len(series2) or len(series1) < 2:
            return 0.0
        
        # –£–¥–∞–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        valid_pairs = [(x, y) for x, y in zip(series1, series2) if abs(x) > 0.001 or abs(y) > 0.001]
        
        if len(valid_pairs) < 2:
            return 0.0
        
        x_values = [pair[0] for pair in valid_pairs]
        y_values = [pair[1] for pair in valid_pairs]
        
        n = len(x_values)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        mean_x = sum(x_values) / n
        mean_y = sum(y_values) / n
        
        # –ß–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ñ–æ—Ä–º—É–ª—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        numerator = sum((x - mean_x) * (y - mean_y) for x, y in zip(x_values, y_values))
        sum_sq_x = sum((x - mean_x) ** 2 for x in x_values)
        sum_sq_y = sum((y - mean_y) ** 2 for y in y_values)
        
        denominator = (sum_sq_x * sum_sq_y) ** 0.5
        
        if denominator == 0:
            return 0.0
        
        correlation = numerator / denominator
        return correlation



    def check_rapid_exit(self, metric_name: str, ratio: float = 3.0, max_seconds: int = 120) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (—Å–Ω–∞–π–ø–µ—Ä–æ–≤ –∏–ª–∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤)
        Args:
            metric_name: 'snipersHoldingPcnt' –∏–ª–∏ 'insidersHoldingPcnt'
            ratio: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç
            max_seconds: –∑–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤—ã—Ö–æ–¥
        Returns:
            bool: True –µ—Å–ª–∏ –±—ã–ª —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
        """
        if not self.metrics_history or len(self.metrics_history) < 2:
            return False
        first_value = None
        first_time = None
        for m in self.metrics_history:
            value = float(m.get(metric_name, 0) or 0)
            if value > 0:
                first_value = value
                first_time = m['timestamp']
                break
        if not first_value:
            return False
        current_value = float(self.metrics_history[-1].get(metric_name, 0) or 0)
        current_time = self.metrics_history[-1]['timestamp']
        time_diff = current_time - first_time
        if time_diff <= max_seconds and current_value <= first_value / ratio:
            self.logger.info(f"üìâ –°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è {metric_name}: {first_value:.1f}% ‚Üí {current_value:.1f}% –∑–∞ {time_diff} —Å–µ–∫")
            return True
        return False

    def check_rapid_exit_average_holders(self, metric_name: str, ratio: float = 3.0, max_seconds: int = 120) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (—Å–Ω–∞–π–ø–µ—Ä–æ–≤ –∏–ª–∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤)
        Args:
            metric_name: 'snipersHoldingPcnt' –∏–ª–∏ 'insidersHoldingPcnt'
            ratio: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç
            max_seconds: –∑–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤—ã—Ö–æ–¥
        Returns:
            bool: True –µ—Å–ª–∏ –±—ã–ª —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
        """
        if not self.metrics_history or len(self.metrics_history) < 2:
            return False
        first_value = None
        first_time = None
        for m in self.metrics_history:
            value = float(m.get(metric_name, 0) or 0)
            if value > 0:
                first_value = value
                first_time = m['timestamp']
                break
        if not first_value:
            return False
        current_value = float(self.metrics_history[-1].get(metric_name, 0) or 0)
        current_time = self.metrics_history[-1]['timestamp']
        time_diff = current_time - first_time
        if time_diff <= max_seconds and current_value <= first_value / ratio:
            self.logger.info(f"üìâ –°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è {metric_name}: {first_value:.1f}% ‚Üí {current_value:.1f}% –∑–∞ {time_diff} —Å–µ–∫")
            return True
        return False

class PadreWebSocketClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ trade.padre.gg WebSocket"""
    
    def __init__(self, token_address: str, connection_id: str = "default"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.token_address = token_address  # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.current_token_address = token_address  # –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.connection_id = f"{connection_id}_{token_address[:8]}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞
        self.websocket = None
        self.running = False
        self.start_time = None  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.max_duration = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.token_data_cache = {}  # –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.current_update_data = None  # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.current_pump_gaze = None  # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ pump_fun_gaze
        self.last_used_api_domain = 0
        self.axiom_api_domains = [
            "https://api.axiom.trade",
            "https://api2.axiom.trade",
            "https://api3.axiom.trade",
            "https://api6.axiom.trade",
            "https://api7.axiom.trade",
            "https://api8.axiom.trade",
            "https://api9.axiom.trade",
            "https://api10.axiom.trade",
        ]
        self.token_metrics = TokenMetrics(token_address, int(time.time()))
        self.last_notification_type = None  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.last_notification_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.max_dev_percent = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        self.dev_exit_time = None  # –í—Ä–µ–º—è –∫–æ–≥–¥–∞ –¥–µ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—à–µ–ª –∏–∑ —Ç–æ–∫–µ–Ω–∞
        self.max_bundlers_after_dev_exit = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
        self.padre_backend = get_next_padre_backend()  # –í—ã–±–∏—Ä–∞–µ–º –±—ç–∫–µ–Ω–¥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        self.market_id = None
        self.pending = False
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.logger = create_token_logger(token_address)
        
        self.last_top10_holders_percent = 0
        self.top10_holders_is_sold = False

        self.top10_holders_bought_percent = 0
        self.top10_holders_sold_percent = 0

        self.top_10_holders_bought_more_than_they_dumped = True
        self.top_10_holders_snapshots = {}

        self.JWT_TOKEN = "eyJhbGciOiJSUzI1NiIsImtpZCI6ImVmMjQ4ZjQyZjc0YWUwZjk0OTIwYWY5YTlhMDEzMTdlZjJkMzVmZTEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoid29ya2VyMTAwMHgiLCJoYXV0aCI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tL3BhZHJlLTQxNzAyMCIsImF1ZCI6InBhZHJlLTQxNzAyMCIsImF1dGhfdGltZSI6MTc1NTY0ODA3OCwidXNlcl9pZCI6InRnXzc4OTE1MjQyNDQiLCJzdWIiOiJ0Z183ODkxNTI0MjQ0IiwiaWF0IjoxNzU2OTA3Mjc4LCJleHAiOjE3NTY5MTA4NzgsImZpcmViYXNlIjp7ImlkZW50aXRpZXMiOnt9LCJzaWduX2luX3Byb3ZpZGVyIjoiY3VzdG9tIn19.PeB6yO94ZexRBkVAwBdbVOF-ay9VrF6z9N26qMdmXEsjwPYJSVY0ydiKUT5EYG8K6u08rQzyNHDond7ehtXJsrBatZ1QwOkXjwuvviWga4nRH00LY44VDVhNGefvkeg24EObVnr0NQce5fGRRFYa6Zr4gM67mCh6zxPCv1loumKNoH_hH19hSlqDiF7sF-eOPL-Ml08yf0j0lUAI1tsoB7f8oBwC2SSc83yPNgcddqE0BX7uDAmz5TU34LXiWd7cw036X4JrC9TWORUiYnR2OspKeE7owMwHlEp74sd-C5ANigm6a3nk-cDD0Yn32i2cl9USLKp_EzcE139A4S-7Yg"
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            self.logger.info(f"üîó Padre backend: {self.padre_backend.split('/')[-2]}")
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers = {
                'Cookie': 'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel=' + PADRE_COOKIES['mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel'],
                'Origin': 'https://trade.padre.gg',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0'
            }
            
            self.logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {self.padre_backend} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ SSL
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for attempt in range(3):
                try:
                    self.websocket = await websockets.connect(
                        self.padre_backend,
                        extra_headers=headers,
                        ping_interval=None,
                        ping_timeout=None,
                        ssl=ssl_context
                    )
                    self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ {self.padre_backend} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.send_auth_message()
                    
                    return True
                    
                except AuthenticationPolicyViolation as e:
                    self.logger.critical(f"üö´ {e}")
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    sys.exit(1)
                except Exception as e:
                    if attempt < 2:  # –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
                        self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –±—ç–∫–µ–Ω–¥ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
                        self.padre_backend = get_next_padre_backend()
                        self.logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥ {self.padre_backend}")
                        await asyncio.sleep(1)  # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.padre_backend} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}: {e}")
            return False

    async def send_bundler_notification(self, contract_address: str, token_data: dict, bundler_count: int, bundler_percentage: float, simulated: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            market_id = await get_market_id_for_token_cached(contract_address)
            if sended_tokens.get(market_id):
                self.logger.info(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {contract_address[:8]} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            symbol = token_data.get('symbol', 'UNK')
            name = token_data.get('name', symbol)
            dex_source = token_data.get('dex_source', 'Unknown')
            market_cap = token_data.get('market_cap', 0)
            total_holders = token_data.get('total_holders', 0)
            sol_spent_in_bundles = token_data.get('sol_spent_in_bundles', 0)
            bundler_percentage_ath = token_data.get('bundler_percentage_ath', 0)
            sim_tag = " üé≤ [–°–ò–ú–£–õ–Ø–¶–ò–Ø]" if simulated else ""
            
            self.logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {contract_address[:8]}")
            self.logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π: holders={total_holders}, bundlers={bundler_count}, market_id={market_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º deployer –ø—Ä–æ—Ü–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
            deployer_pcnt = token_data.get('deployerHoldingPcnt')
            if isinstance(deployer_pcnt, dict):
                deployer_pcnt = deployer_pcnt.get('current', 0)
            
            message = (
                f"üö® <b>X X X XX X –∏–∫—Å—ã—ã—ã—ã—ã!!!</b>\n\n"
                f"ü™ô <b>{name}</b> ({symbol})\n"
                f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{contract_address}</code>\n"
                f"üìä <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> {bundler_count} ({self.safe_format(bundler_percentage, '.1f')}%)\n"
                f"üèÜ <b>ATH –±–∞–Ω–¥–ª–µ—Ä—ã:</b> {self.safe_format(bundler_percentage_ath, '.1f')}%\n"
                f"üë§ <b>–•–æ–ª–¥–µ—Ä—ã:</b> {total_holders}\n"
                f"üí∞ <b>SOL –Ω–∞ –±–∞–Ω–¥–ª–µ—Ä—ã:</b> {self.safe_format(sol_spent_in_bundles, ',.2f')}\n"
                f"üí∞ <b>Market Cap:</b> ${self.safe_format(market_cap, ',.0f')}\n"
                f"üè™ <b>DEX:</b> {dex_source}\n\n"
                
                f"üíµ <b>–¶–µ–Ω–∞:</b> ${self.safe_format(token_data.get('basePriceInUsdUi'), ',.8f')}\n"
                f"üí± <b>–¶–µ–Ω–∞ –≤ Quote:</b> {self.safe_format(token_data.get('basePriceInQuoteUi'), ',.8f')}\n"
                f"üíß <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:</b> ${self.safe_format(token_data.get('liquidityInUsdUi'), ',.2f')}\n\n"
                
                f"üìä <b>–ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê:</b>\n"
                f"üë®‚Äçüíº <b>Dev %:</b> {self.safe_format(token_data.get('devHoldingPcnt'), '.1f')}%\n"
                f"üë®‚Äçüíº <b>Deployer %:</b> {self.safe_format(deployer_pcnt, '.1f')}%\n"
                f"üë• <b>–ò–Ω—Å–∞–π–¥–µ—Ä—ã:</b> {self.safe_format(token_data.get('insidersHoldingPcnt'), '.1f')}%\n"
                f"üéØ <b>–°–Ω–∞–π–ø–µ—Ä—ã:</b> {token_data.get('totalSnipers') or 0} ({self.safe_format(token_data.get('snipersHoldingPcnt'), '.1f')}%)\n"
                f"ü§ñ <b>Trading App:</b> {token_data.get('tradingAppTxns') or 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
                
                f"üì¶ <b>–ë–ê–ù–î–õ–´:</b>\n"
                f"üíº <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {token_data.get('totalBundlesCount') or 0}\n"
                f"üìà <b>–¢–µ–∫—É—â–∏–π %:</b> {self.safe_format((token_data.get('bundlesHoldingPcnt', {}) or {}).get('current'), '.1f')}%\n"
                f"üèÜ <b>ATH %:</b> {self.safe_format((token_data.get('bundlesHoldingPcnt', {}) or {}).get('ath'), '.1f')}%\n"
                f"üí∞ <b>SOL –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(token_data.get('totalSolSpentInBundles'), ',.2f')}\n"
                f"üî¢ <b>–¢–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(token_data.get('totalTokenBoughtInBundles'), ',.0f')}\n\n"
                
                f"üÜï <b>FRESH WALLETS:</b>\n"
                f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {(token_data.get('freshWalletBuys', {}) or {}).get('count', 0)}\n"
                f"üí∞ <b>SOL –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {self.safe_format((token_data.get('freshWalletBuys', {}) or {}).get('sol'), ',.2f')}\n"
                f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏–∏:</b> {self.safe_format(token_data.get('totalSolFees'), ',.4f')} SOL\n\n"
                
                f"üìä <b>SUPPLY:</b>\n"
                f"üî¢ <b>Total Supply:</b> {self.safe_format(token_data.get('totalSupply'), ',')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    {"text": "üöÄ Axiom", "url": f"https://axiom.trade/t/{contract_address}"},
                    {"text": "üöÄ DexScreener", "url": f"https://dexscreener.com/solana/{contract_address}"}
                ],
            ]
            
            success = await self.send_telegram_message(message, keyboard)
            
            if success:
                self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol} —Å {bundler_percentage:.1f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
                if market_id:
                    sended_tokens[market_id] = True
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {e}")
            self.logger.exception(e)
    
    async def send_auth_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º auth message –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1, JWT_TOKEN, suffix]
            auth_message = [
                1,
                self.JWT_TOKEN,
                j8()[:13]
            ]
            auth_bytes = msgpack.packb(auth_message)

            self.logger.info(auth_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Binary Message)
            await self.websocket.send(auth_bytes)
            self.logger.info("üîê –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            response = await self.websocket.recv()
            self.logger.info(f"üì® –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {len(response)} –±–∞–π—Ç")
            
        except websockets.exceptions.ConnectionClosedError as e:
            if e.code == 1008:  # Policy violation
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ 1008): {e}")
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
                new_token = await self.get_access_token()
                if new_token:
                    self.JWT_TOKEN = new_token
                    self.logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–µ–±—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    return await self.send_auth_message()
                raise AuthenticationPolicyViolation("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω")
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise

    async def get_new_jwt_token(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API –∏–ª–∏ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return "new.jwt.token.here"
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def subscribe_to_token_data(self, token_address: str):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ç–æ–∫–µ–Ω
            if token_address != self.token_address:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω {token_address[:8]} –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è {self.token_address[:8]}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if not self.websocket:
                self.logger.error(f"‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}")
                return False
            
            self.logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º marketAddress –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è marketAddress
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.axiom_api_domains[self.last_used_api_domain]}/swap-info?tokenAddress={token_address}", headers={
                    'accept': '*/*',
                    'cookie': 'auth-refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW5JZCI6IjdhN2JhN2E3LWY4NDktNDVlNC05ZDI4LWY2MjRhNjUzY2YyYiIsImlhdCI6MTc1Mzk5MDE5Mn0.m825JgO7TNs6LR1RfmWs2y_O0qSZfQi3Tug04qdVKMw; auth-access-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoZW50aWNhdGVkVXNlcklkIjoiMzVlNjc3YzMtMjY4Zi00YTFmLWI5M2ItN2VkOGJjN2IzYjU0IiwiaWF0IjoxNzU1NTM1MjU2LCJleHAiOjE3NTU1MzYyMTZ9.ruxPC8uhIx_13OrcmlBtigIWWkCU2gl_MK9SIeoU0S8'
                }, timeout=aiohttp.ClientTimeout(total=5)) as response:
                    try:
                        data = await response.json(content_type=None)
                        market_id = data.get('pairAddress', None)
                    except Exception as e:
                        self.logger.error(f"Failed to parse JSON from swap-info: {e}")
                        market_id = None
                    self.last_used_api_domain = (self.last_used_api_domain + 1) % len(self.axiom_api_domains)

            # –ï—Å–ª–∏ –µ—Å—Ç—å market_id, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats –∏ —Ö–æ–ª–¥–µ—Ä–æ–≤
            if market_id:
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ market_id {market_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}")
                self.market_id = market_id
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ token stats
                token_subscribe_path = f"/fast-stats/encoded-tokens/solana-{market_id}/on-fast-stats-update"
                token_message_data = [4, 1, token_subscribe_path]
                token_message_bytes = msgpack.packb(token_message_data)
                
                self.logger.info(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ token fast-stats –¥–ª—è {token_address[:8]}...")
                await self.websocket.send(token_message_bytes)

                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ market stats
                market_subscribe_path = f"/fast-stats/encoded-markets/solana-{market_id}/on-auto-migrating-market-stats-update"
                market_message_data = [4, 43, market_subscribe_path]
                market_message_bytes = msgpack.packb(market_message_data)
                
                self.logger.info(f"üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... (market: {market_id[:8]})")
                self.logger.info(f"üì° Market –ø—É—Ç—å: {market_subscribe_path}")
                self.logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 43, path] -> {len(market_message_bytes)} –±–∞–π—Ç")
                await self.websocket.send(market_message_bytes)

                # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ top holders v3
                top_holders_subscribe_path = f"/holders/chains/SOLANA/tokenAddress/{token_address}/subscribe-top-holders-v3"
                top_holders_message_data = [4, 38, top_holders_subscribe_path]
                top_holders_message_bytes = msgpack.packb(top_holders_message_data)

                self.logger.info(f"üèÜ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ top holders v3 –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
                self.logger.info(f"üì° Top holders –ø—É—Ç—å: {top_holders_subscribe_path}")
                self.logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 38, path] -> {len(top_holders_message_bytes)} –±–∞–π—Ç")
                await self.websocket.send(top_holders_message_bytes)

            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω {token_address}: {e}")
            return False

    async def track_token_info(self, market_id: str, token_address: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ token-info –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ market_id"""
        last_data = None
        unchanged_time = 0
        start_time = time.time()

        while time.time() - start_time < 300:  # 5 –º–∏–Ω—É—Ç
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{self.axiom_api_domains[self.last_used_api_domain]}/token-info?pairAddress={market_id}", headers={
                        'accept': '*/*',
                        'cookie': 'auth-refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW5JZCI6IjdhN2JhN2E3LWY4NDktNDVlNC05ZDI4LWY2MjRhNjUzY2YyYiIsImlhdCI6MTc1Mzk5MDE5Mn0.m825JgO7TNs6LR1RfmWs2y_O0qSZfQi3Tug04qdVKMw; auth-access-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoZW50aWNhdGVkVXNlcklkIjoiMzVlNjc3YzMtMjY4Zi00YTFmLWI5M2ItN2VkOGJjN2IzYjU0IiwiaWF0IjoxNzU1NTM1MjU2LCJleHAiOjE3NTU1MzYyMTZ9.ruxPC8uhIx_13OrcmlBtigIWWkCU2gl_MK9SIeoU0S8'
                    }, timeout=aiohttp.ClientTimeout(total=5)) as response:
                        response_text = await response.text()
                        self.logger.info(f"123213s25—ã1: {str(response.url)} {response_text}")
                        
                        current_data = response_text
                        
                        if current_data == last_data:
                            unchanged_time += 1
                            if unchanged_time >= 300:  # 5 –º–∏–Ω—É—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                                self.logger.info(f"–¢–æ–∫–µ–Ω {token_address[:8]} –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π 5 –º–∏–Ω—É—Ç")
                                return
                        else:
                            unchanged_time = 0
                            last_data = current_data
                            
                self.last_used_api_domain = (self.last_used_api_domain + 1) % len(self.axiom_api_domains)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ token-info: {e}")
                await asyncio.sleep(1)

    
    async def check_and_notify(self, candles_data: dict):
        try:
            if candles_data.get('s') != 'ok':
                self.logger.info(f"üîç –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö –¥–ª—è {self.token_address}")
                self.pending = False
                return
                
            candles_count = len(candles_data['t'])
            self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö –¥–ª—è {self.token_address}: {candles_count} —Å–≤–µ—á–µ–π")
            
            # if candles_count < 120:  # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
            #     self.logger.info(f"üîç –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–µ—á–∞—Ö ({candles_count}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞")
            #     self.pending = False
            #     return

            # –ë–µ—Ä–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
            closes = candles_data['c']
            times = candles_data['t']

            time_diff = times[-1] - times[0]
            self.logger.info(f"–í—Ä–µ–º–µ–Ω–∞: {time_diff}, {times[-1]}, {times[0]}")

            # if time_diff > 170:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å –≥—Ä–∞—Ñ–∏–∫ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ 170 —Å–µ–∫—É–Ω–¥
            #     self.logger.info(f"–ì—Ä–∞—Ñ–∏–∫ –±–æ–ª—å—à–µ 170 —Å–µ–∫—É–Ω–¥ ({time_diff} —Å–µ–∫)")
            #     return

             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∫–∞–ø
            last_close = closes[-1]
            if self.token_address not in self.token_data_cache:
                self.logger.warning(f"‚ùå –¢–æ–∫–µ–Ω {self.token_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
                self.pending = False
                return
                
            total_supply = int(self.token_data_cache[self.token_address].get('totalSupply', 0) or 0)
            if total_supply <= 0:
                self.logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π totalSupply –¥–ª—è {self.token_address}")
                self.pending = False
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            x = np.array(times)
            y = np.array(closes)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (—É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å)
            slope, intercept, r_value, p_value, std_err = linregress(x, y)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
            first_price = closes[0]
            last_price = closes[-1]
            price_change_percent = ((last_price - first_price) / first_price) * 100

            market_cap = (total_supply / (10 ** 9)) * last_close * 1000
            
            # if market_cap < 13000:
            #     self.logger.info(f"üö´ –ú–∞—Ä–∫–µ—Ç–∫–∞–ø {market_cap:,.2f}$ < 13,000$ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            #     self.pending = False
            #     return

            self.logger.info(f"üí∞ –ú–∞—Ä–∫–µ—Ç–∫–∞–ø: {market_cap:,.2f}$ (–¶–µ–Ω–∞: {last_close}, Supply: {total_supply / (10 ** 9):,.2f})")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞–ø—à–æ—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Ö–æ–∂–¥–µ–Ω–∏–π (–∑–Ω–∞—á–µ–Ω–∏—è–º) –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
            sorted_snapshots = sorted(
                self.top_10_holders_snapshots.items(),
                key=lambda item: item[1],  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
                reverse=True  # –í –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
            )

            self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ø-10 —Ö–æ–ª–¥–µ—Ä–æ–≤:")
            for percentage, count in sorted_snapshots:
                self.logger.info(f"  ‚Ä¢ {percentage}%: {count} —Ä–∞–∑")

            # # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
            # max_drop = 0
            # max_rise = 0
            # for i in range(1, len(closes)):
            #     change = (closes[i] - closes[i-1]) / closes[i-1] * 100
            #     if change < 0 and abs(change) > max_drop:
            #         max_drop = abs(change)
            #     elif change > max_rise:
            #         max_rise = change
            
            # # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —É–≥–æ–ª) –∏ –ø–ª–∞–≤–Ω—ã–π
            # if (slope <= 0 or std_err > 0.1 or price_change_percent < 1.0 or 
            #     max_rise < max_drop ):  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑–∫–∏–µ/–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ —Ç—Ä–µ–Ω–¥—ã
            #     self.logger.info(f"üìâ –ù–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞: —É–≥–æ–ª {slope:.4f}, –æ—à–∏–±–∫–∞ {std_err:.4f}, "
            #                    f"—Ä–æ—Å—Ç {price_change_percent:.2f}%, –º–∞–∫—Å –ø–∞–¥–µ–Ω–∏–µ {max_drop:.2f}%, –º–∞–∫—Å —Ä–æ—Å—Ç {max_rise:.2f}%")
            #     self.pending = False
            #     return
            
            # # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # self.logger.info(f"üìà –£—Å—Ç–æ–π—á–∏–≤—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥: —É–≥–æ–ª {slope:.4f}, R¬≤={r_value**2:.2f}, "
            #                f"—Ä–æ—Å—Ç {price_change_percent:.2f}%, –º–∞–∫—Å –ø–∞–¥–µ–Ω–∏–µ {max_drop:.2f}%, –º–∞–∫—Å —Ä–æ—Å—Ç {max_rise:.2f}%")
            
            message = (
                f"<code>{self.token_address}</code>\n\n"
                f"<i><a href='https://axiom.trade/t/{self.token_address}'>axiom</a> | <a href='https://dexscreener.com/solana/{self.token_address}'>dexscreener</a></i>\n\n"
                f"<i>üöÄ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} <b>¬© by Wormster</b></i>"
            )
            
            keyboard = [[{"text": "QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{self.token_address}"}]]
            
            if await self.send_telegram_message(message, keyboard):
                if self.token_address not in SENT_NOTIFICATIONS:
                    SENT_NOTIFICATIONS[self.token_address] = {}
                SENT_NOTIFICATIONS[self.token_address]['activity'] = time.time()
                self.logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {self.token_address[:8]}")
                self.pending = False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_and_notify: {str(e)}", exc_info=True)
            self.pending = False

    
    async def listen_for_bundler_data(self):
        """–°–ª—É—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ WebSocket"""
        try:
            async for message in self.websocket:
                if isinstance(message, bytes):
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    decoded_data = decode_padre_message(message)
                    
                    if decoded_data:
                        self.logger.info(f"üîç –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {decoded_data}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –æ—Ç–≤–µ—Ç markets-per-token
                        if self.is_markets_per_token_response(decoded_data):
                            await self.process_markets_per_token_response(decoded_data)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ fast-stats
                        elif self.is_fast_stats_update(decoded_data):
                            await self.process_fast_stats_data(decoded_data)
                        elif self.is_top10holders_update(decoded_data):
                            await self.process_top10holders_data(decoded_data)
                        elif decoded_data.get('type') == 'ping':
                            # –≠—Ç–æ ping —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º pong –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            self.logger.debug("üì° –ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                        else:
                            self.logger.debug(f"üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {decoded_data}")
                            
                elif isinstance(message, str):
                    self.logger.info(f"üì® –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    
        except websockets.exceptions.ConnectionClosed:
            self.logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except websockets.exceptions.ConnectionClosedError as e:
            self.logger.warning(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
        except websockets.exceptions.ConnectionClosedOK:
            self.logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        except AttributeError as e:
            if "'NoneType' object has no attribute 'resume_reading'" in str(e):
                self.logger.warning("üîÑ –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if self.websocket:
                    try:
                        await self.websocket.close()
                    except:
                        pass
                    self.websocket = None
            else:
                self.logger.error(f"‚ùå AttributeError: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            self.logger.error(f"üìã Traceback: {traceback.format_exc()}")
    
    def is_markets_per_token_response(self, data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º markets-per-token"""
        if not isinstance(data, dict):
            return False
        
        if 'raw_data' in data and isinstance(data['raw_data'], list):
            raw_data = data['raw_data']
            if len(raw_data) >= 4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º markets-per-token responses [9, 45, 200, payload]
                if raw_data[0] == 9 and raw_data[1] == 45 and raw_data[2] == 200:
                    return True
        
        return False
    
    async def process_markets_per_token_response(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç markets-per-token –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç—ã"""
        try:
            if 'raw_data' in data and isinstance(data['raw_data'], list):
                raw_data = data['raw_data']
                if len(raw_data) >= 4 and isinstance(raw_data[3], dict):
                    payload = raw_data[3]
                    
                    self.logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç markets-per-token: {str(payload)[:200]}...")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º cache
                    process_markets_per_token_response(payload)
                    
                    # –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç—ã
                    if 'markets' in payload and 'SOLANA' in payload['markets']:
                        solana_markets = payload['markets']['SOLANA']
                        
                        for token_address, markets_list in solana_markets.items():
                            if markets_list and isinstance(markets_list, list) and len(markets_list) > 0:
                                market_info = markets_list[0]
                                market_id = market_info.get('marketId')
                                
                                if market_id and market_id.startswith('solana-'):
                                    clean_market_id = market_id[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "solana-"
                                    
                                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats
                                    await self.subscribe_to_market_stats(token_address, clean_market_id)
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markets-per-token –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def subscribe_to_market_stats(self, token_address: str, market_id: str):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ market stats –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∞"""
        try:
            market_subscribe_path = f"/fast-stats/encoded-markets/solana-{market_id}/on-auto-migrating-market-stats-update"
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä—É: [4, 43, path] –¥–ª—è market stats
            market_message_data = [4, 43, market_subscribe_path]
            market_message_bytes = msgpack.packb(market_message_data)
            
            self.logger.info(f"üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ market stats –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... (market: {market_id[:8]})")
            self.logger.info(f"üì° Market –ø—É—Ç—å: {market_subscribe_path}")
            self.logger.info(f"üì¶ MessagePack —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [4, 43, path] -> {len(market_message_bytes)} –±–∞–π—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ market stats
            await self.websocket.send(market_message_bytes)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ market stats –¥–ª—è {token_address[:8]}...: {e}")

    def is_fast_stats_update(self, data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º fast-stats"""
        if not isinstance(data, dict):
            return False
        
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∏—â–µ–º raw_data —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'raw_data' in data and isinstance(data['raw_data'], list):
            raw_data = data['raw_data']
            if len(raw_data) >= 3:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º market stats responses [5, 43, payload]
                if raw_data[0] == 5 and raw_data[1] == 43:
                    return True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º token stats responses [5, 1, payload]
                elif raw_data[0] == 5 and raw_data[1] == 1:
                    return True
                # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markets-per-token –∫–∞–∫ fast-stats
                elif raw_data[0] == 9 and raw_data[1] == 45:
                    return False
        
    def is_top10holders_update(self, data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º top10holders"""
        if not isinstance(data, dict):
            return False
        
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∏—â–µ–º raw_data —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'raw_data' in data and isinstance(data['raw_data'], list):
            raw_data = data['raw_data']
            if len(raw_data) >= 3:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º market stats responses [5, 43, payload]
                if raw_data[0] == 5 and raw_data[1] == 38:
                    return True
                else:
                    return False
    
    def safe_format(self, value, format_spec: str, default=0):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None"""
        try:
            if value is None:
                value = default
            return f"{value:{format_spec}}"
        except (ValueError, TypeError):
            return f"{default:{format_spec}}"
    
    def format_top_holders_for_log(self, top10holders: dict, max_holders: int = 10) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö"""
        try:
            if not top10holders:
                return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            dev_address = None
            if hasattr(self, 'initial_token_data') and self.initial_token_data:
                dev_address = self.initial_token_data.get('dev_address')
            if not dev_address and hasattr(self, 'token_data_cache') and self.current_token_address in self.token_data_cache:
                base_token_audit = self.token_data_cache[self.current_token_address].get('baseTokenAudit', {})
                dev_address = base_token_audit.get('deployerAddress')
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ö–æ–ª–¥–µ—Ä–æ–≤: –∏—Å–∫–ª—é—á–∞–µ–º –¥–µ–≤–æ–≤, –±–∞–Ω–¥–ª–µ—Ä–æ–≤, –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤ –∏ –ø—É–ª—ã
            clean_holders = {}
            excluded_holders = {}
            
            for wallet_address, holder_info in top10holders.items():
                is_bundler = holder_info.get('isBundler', False)
                is_insider = holder_info.get('insider', False)
                is_pool = holder_info.get('isPool', False)
                is_dev = dev_address and wallet_address == dev_address
                
                if is_dev or is_bundler or is_insider or is_pool:
                    excluded_holders[wallet_address] = holder_info
                else:
                    clean_holders[wallet_address] = holder_info
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å—Ç—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            sorted_clean_holders = sorted(
                clean_holders.items(), 
                key=lambda x: x[1].get('pcnt', 0), 
                reverse=True
            )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            sorted_excluded_holders = sorted(
                excluded_holders.items(), 
                key=lambda x: x[1].get('pcnt', 0), 
                reverse=True
            )
            
            result_lines = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
            if sorted_clean_holders:
                result_lines.append("–¢–û–ü –ß–ò–°–¢–´–ï –•–û–õ–î–ï–†–´:")
                for i, (wallet_address, holder_info) in enumerate(sorted_clean_holders, 1):
                    pcnt = holder_info.get('pcnt', 0)
                    short_address = f"{wallet_address}"
                    result_lines.append(f"  {i}. {short_address} - {self.safe_format(pcnt, '.2f')}%")
            else:
                result_lines.append("–¢–û–ü –ß–ò–°–¢–´–ï –•–û–õ–î–ï–†–´: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if sorted_excluded_holders:
                result_lines.append("\n–ò–°–ö–õ–Æ–ß–ï–ù–´ (DEV/BUNDLER/INSIDER/POOL):")
                for i, (wallet_address, holder_info) in enumerate(sorted_excluded_holders[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5
                    pcnt = holder_info.get('pcnt', 0)
                    is_bundler = holder_info.get('isBundler', False)
                    is_insider = holder_info.get('insider', False)
                    is_pool = holder_info.get('isPool', False)
                    is_dev = dev_address and wallet_address == dev_address
                    
                    tags = []
                    if is_dev:
                        tags.append("DEV")
                    if is_pool:
                        tags.append("Pool")
                    if is_bundler:
                        tags.append("Bundler")
                    if is_insider:
                        tags.append("Insider")
                    
                    tag_str = f" [{', '.join(tags)}]"
                    short_address = f"{wallet_address[:8]}...{wallet_address[-4:]}"
                    result_lines.append(f"  {i}. {short_address} - {self.safe_format(pcnt, '.2f')}%{tag_str}")
            
            return "\n".join(result_lines)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∞: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
    
    async def process_fast_stats_data(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ fast-stats –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö"""
        try:
            self.logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º fast-stats –¥–∞–Ω–Ω—ã–µ: {str(data)}...")
            
            if not self.websocket:
                self.logger.warning(f"‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {self.token_address[:8]}")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã [5, 1, payload]
            if 'raw_data' not in data or not isinstance(data['raw_data'], list):
                self.logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            raw_data = data['raw_data']
            if len(raw_data) < 3 or not isinstance(raw_data[2], dict):
                self.logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ raw_data")
                return
            
            payload = raw_data[2]
            message_type_code = raw_data[1] if len(raw_data) > 1 else 0
            msg_type = payload.get('type', 'unknown')
            
            self.logger.info(f"üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è fast-stats: {msg_type} (–∫–æ–¥: {message_type_code})")
            
            if message_type_code == 43:
                self.logger.info(f"üéØ –ü–û–õ–£–ß–ò–õ–ò MARKET STATS (–∫–æ–¥ 43) - –∏—â–µ–º bundler –¥–∞–Ω–Ω—ã–µ!")
                
                if msg_type == 'init' and 'snapshot' in payload:
                    snapshot = payload['snapshot']
                    token_address = snapshot.get('baseTokenAddress')
                    market_id = snapshot.get('marketId')
                    
                    if token_address:
                        self.current_token_address = token_address
                        self.logger.info(f"üîç –ü–û–õ–ù–´–ô MARKET INIT SNAPSHOT –¥–ª—è {token_address[:8]}:")
                        self.logger.info(f"üì¶ INIT SNAPSHOT: {snapshot}")
                        
                        if token_address in self.token_data_cache:
                            self.logger.warning(f"‚≠êÔ∏è –¢–æ–∫–µ–Ω {token_address[:8]} –ø—Ä–æ—à—ë–ª –º–∏–≥—Ä–∞—Ü–∏—é")
                            return

                        # –ü–æ–ª—É—á–∞–µ–º dev_address –∏–∑ Jupiter –¥–∞–Ω–Ω—ã—Ö
                        dev_address_from_jupiter = None
                        if hasattr(self, 'initial_token_data') and self.initial_token_data:
                            dev_address_from_jupiter = self.initial_token_data.get('dev_address')
                        
                        # –°–æ–∑–¥–∞–µ–º baseTokenAudit —Ç–æ–ª—å–∫–æ —Å –∞–¥—Ä–µ—Å–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ Jupiter
                        base_audit = {
                            'chain': 'SOLANA',
                            'tokenAddress': token_address
                        }
                        if dev_address_from_jupiter:
                            base_audit['deployerAddress'] = dev_address_from_jupiter
                            self.logger.info(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ Jupiter: {dev_address_from_jupiter[:8]}...")
                        
                        # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ snapshot –µ—Å–ª–∏ –µ—Å—Ç—å, –Ω–æ –±–µ–∑ deployerAddress
                        snapshot_audit = snapshot.get('baseTokenAudit')
                        if snapshot_audit and isinstance(snapshot_audit, dict):
                            for key, value in snapshot_audit.items():
                                if key != 'deployerAddress':  # –ò—Å–∫–ª—é—á–∞–µ–º deployerAddress –∏–∑ snapshot
                                    base_audit[key] = value
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ snapshot
                        self.token_data_cache[token_address] = {
                            'timestamp': int(time.time()),  # –î–æ–±–∞–≤–ª—è–µ–º timestamp
                            'basePriceInUsdUi': snapshot.get('basePriceInUsdUi'),
                            'basePriceInQuoteUi': snapshot.get('basePriceInQuoteUi'),
                            'liquidityInUsdUi': snapshot.get('liquidityInUsdUi'),
                            'totalSupply': snapshot.get('baseTokenTotalSupply'),
                            'symbol': snapshot.get('baseTokenSymbol'),
                            'name': snapshot.get('baseTokenName'),
                            'marketCreatedAt': snapshot.get('marketCreatedAt'),
                            'total_holders': snapshot.get('totalHolders', 0),
                            'devHoldingPcnt': 0,
                            'tradingAppTxns': 0,
                            'freshWalletBuys': {'count': 0, 'sol': 0},
                            'insidersHoldingPcnt': 0,
                            'totalSnipers': 0,
                            'bundlesHoldingPcnt': {'current': 0, 'ath': 0},
                            'totalBundlesCount': 0,
                            'totalSolSpentInBundles': 0,
                            'totalTokenBoughtInBundles': 0,
                            'totalSolFees': 0,
                            'snipersHoldingPcnt': 0,
                            'baseTokenAudit': base_audit  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏—Ç —Ç–æ–∫–µ–Ω–∞ —Å –∞–¥—Ä–µ—Å–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                        }
                        

                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å baseTokenAudit –≤ snapshot, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ Jupiter
                        if 'baseTokenAudit' in snapshot:
                            snapshot_audit = snapshot['baseTokenAudit']
                            if snapshot_audit and isinstance(snapshot_audit, dict):
                                existing_dev_address = self.token_data_cache[token_address]['baseTokenAudit'].get('deployerAddress')
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∏–∑ snapshot, –∏—Å–∫–ª—é—á–∞—è deployerAddress
                                for key, value in snapshot_audit.items():
                                    if key != 'deployerAddress':  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º deployerAddress –∏–∑ snapshot
                                        self.token_data_cache[token_address]['baseTokenAudit'][key] = value
                                
                                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ Jupiter —Å–æ—Ö—Ä–∞–Ω—ë–Ω
                                if existing_dev_address:
                                    self.token_data_cache[token_address]['baseTokenAudit']['deployerAddress'] = existing_dev_address
                                
                                self.logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω –∞—É–¥–∏—Ç —Ç–æ–∫–µ–Ω–∞ (–∫—Ä–æ–º–µ deployerAddress): {snapshot_audit}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                        await self.process_token_metrics(self.token_data_cache[token_address])
                
                elif msg_type == 'update':
                    self.logger.info(f"üöÄ MARKET UPDATE - –∏—â–µ–º bundler –¥–∞–Ω–Ω—ã–µ!")
                    
                    if 'update' in payload:
                        update_data = payload['update']
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ update –¥–∞–Ω–Ω—ã–µ
                        update_data['timestamp'] = int(time.time())
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å baseTokenAudit –≤ update, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ Jupiter
                        if 'baseTokenAudit' in update_data:
                            if self.current_token_address in self.token_data_cache:
                                update_audit = update_data['baseTokenAudit']
                                if update_audit and isinstance(update_audit, dict):
                                    existing_dev_address = self.token_data_cache[self.current_token_address]['baseTokenAudit'].get('deployerAddress')
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∏–∑ update, –∏—Å–∫–ª—é—á–∞—è deployerAddress
                                    for key, value in update_audit.items():
                                        if key != 'deployerAddress':  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º deployerAddress –∏–∑ update
                                            self.token_data_cache[self.current_token_address]['baseTokenAudit'][key] = value
                                    
                                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ Jupiter —Å–æ—Ö—Ä–∞–Ω—ë–Ω
                                    if existing_dev_address:
                                        self.token_data_cache[self.current_token_address]['baseTokenAudit']['deployerAddress'] = existing_dev_address
                                    
                                    self.logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω –∞—É–¥–∏—Ç —Ç–æ–∫–µ–Ω–∞ (–∫—Ä–æ–º–µ deployerAddress): {update_audit}")
                        
                        if self.current_token_address in self.token_data_cache:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            self.token_data_cache[self.current_token_address].update(update_data)
                            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                            self.token_data_cache[self.current_token_address]['timestamp'] = update_data['timestamp']
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            await self.process_token_metrics(self.token_data_cache[self.current_token_address])
            
            if 'update' not in payload:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç 'update' –ø–æ–ª—è –≤ payload")
                return
            
            update_data = payload['update']
            self.logger.info(f"üì¶ –ü–û–õ–ù–´–ô MARKET UPDATE: {update_data}")
            
            if not self.current_token_address:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–µ—à –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
            current_cache = self.token_data_cache.get(self.current_token_address, {})
            if not current_cache:
                current_cache = {
                    'basePriceInUsdUi': 0,
                    'basePriceInQuoteUi': 0,
                    'liquidityInUsdUi': 0,
                    'total_holders': 0,
                    'devHoldingPcnt': 0,
                    'tradingAppTxns': 0,
                    'freshWalletBuys': {'count': 0, 'sol': 0},
                    'insidersHoldingPcnt': 0,
                    'totalSnipers': 0,
                    'bundlesHoldingPcnt': {'current': 0, 'ath': 0},
                    'totalBundlesCount': 0,
                    'totalSolSpentInBundles': 0,
                    'totalTokenBoughtInBundles': 0,
                    'totalSolFees': 0,
                    'snipersHoldingPcnt': 0,
                    'baseTokenAudit': {
                        'chain': 'SOLANA',
                        'tokenAddress': self.current_token_address,
                        'deployerAddress': None,
                        'isFreezeAuthorityEnabled': None,
                        'isMintAuthorityEnabled': None,
                        'top10HoldersPcnt': None
                    }
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'basePriceInUsdUi' in update_data:
                current_cache['basePriceInUsdUi'] = update_data['basePriceInUsdUi']
            if 'basePriceInQuoteUi' in update_data:
                current_cache['basePriceInQuoteUi'] = update_data['basePriceInQuoteUi']
            if 'liquidityInUsdUi' in update_data:
                current_cache['liquidityInUsdUi'] = update_data['liquidityInUsdUi']
            if 'totalHolders' in update_data:
                current_cache['total_holders'] = update_data['totalHolders']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pumpFunGaze –¥–∞–Ω–Ω—ã–µ
            if 'pumpFunGaze' in update_data:
                pump_gaze = update_data['pumpFunGaze']
                for key in ['devHoldingPcnt', 'tradingAppTxns', 'freshWalletBuys',
                          'insidersHoldingPcnt', 'totalSupply', 'totalSnipers',
                          'bundlesHoldingPcnt', 'totalBundlesCount', 'totalSolSpentInBundles',
                          'totalTokenBoughtInBundles', 'totalSolFees', 'snipersHoldingPcnt']:
                    if key in pump_gaze:
                        current_cache[key] = pump_gaze[key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
            self.token_data_cache[self.current_token_address] = current_cache
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.logger.info("üìä –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
            self.logger.info(f"üíµ –¶–µ–Ω–∞ USD: ${self.safe_format(current_cache.get('basePriceInUsdUi', 0), ',.8f')}")
            self.logger.info(f"üíµ –ú–∞—Ä–∫–µ—Ç–∫–∞–ø: ${self.safe_format((int(current_cache.get('totalSupply', 0) or 0)) / (10 ** 9) * (current_cache.get('basePriceInUsdUi', 0) or 0) * 1000, ',.2f')}")
            self.logger.info(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${self.safe_format(current_cache.get('liquidityInUsdUi', 0), ',.2f')}")
            self.logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {current_cache.get('total_holders', 0)}")
            self.logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: {current_cache.get('totalBundlesCount', 0)}")
            self.logger.info(f"üÜï Fresh Wallets: {(current_cache.get('freshWalletBuys', {}) or {}).get('count', 0)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            await self.process_token_metrics(current_cache)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ fast-stats –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.logger.error(traceback.format_exc())

    async def process_top10holders_data(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ top10holders –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¢–û–ü-10 —Ö–æ–ª–¥–µ—Ä–∞—Ö"""
        try:
            self.logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º top10holders –¥–∞–Ω–Ω—ã–µ: {str(data)}...")
            
            if not self.websocket:
                self.logger.warning(f"‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {self.token_address[:8]}")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã [5, 1, payload]
            if 'raw_data' not in data or not isinstance(data['raw_data'], list):
                self.logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            raw_data = data['raw_data']
            if len(raw_data) < 3 or not isinstance(raw_data[2], dict):
                self.logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ raw_data")
                return
            
            payload = raw_data[2]
            message_type_code = raw_data[1] if len(raw_data) > 1 else 0
            msg_type = payload.get('type', 'unknown')
            
            self.logger.info(f"üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è top10holders: {msg_type} (–∫–æ–¥: {message_type_code})")
            
            if message_type_code == 38:
                self.logger.info(f"({self.current_token_address[:8]}...) üéØ –ü–û–õ–£–ß–ò–õ–ò top10holders (–∫–æ–¥ 38) - –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö!")
                
                if msg_type == 'update':
                    self.logger.info(f"({self.current_token_address[:8]}...) üöÄ top10holders UPDATE - –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö!")
                    
                    if 'update' in payload:
                        update_data = payload['update']
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ update –¥–∞–Ω–Ω—ã–µ
                        update_data['timestamp'] = int(time.time())

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–µ—à–µ
                        if self.current_token_address not in self.token_data_cache:
                            self.logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {self.current_token_address[:8]} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")
                            return
                        
                        if 'totalSupply' in self.token_data_cache[self.current_token_address]:
                            totalSupply = self.token_data_cache[self.current_token_address]['totalSupply']
                            if not totalSupply:
                                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç 'totalSupply' –ø–æ–ª—è –≤ self.token_data_cache[self.current_token_address]")
                                return
                        else:
                            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç 'totalSupply' –ø–æ–ª—è –≤ self.token_data_cache[self.current_token_address]")
                            return

                        if 'deleted' in update_data:
                            if self.current_token_address in self.token_data_cache:
                                if 'top10holders' in self.token_data_cache[self.current_token_address]:
                                    top10holders_pcnt = self.token_data_cache[self.current_token_address]['top10holders']
                                else:
                                    top10holders_pcnt = {}
                                for delete in update_data['deleted']:
                                    if delete[1] in top10holders_pcnt:
                                        del top10holders_pcnt[delete[1]]
                                if 'top10holders' in self.token_data_cache[self.current_token_address]:
                                    self.token_data_cache[self.current_token_address]['top10holders'].update(top10holders_pcnt)
                                    self.logger.info(f"üìä –£–¥–∞–ª–µ–Ω—ã top10holders —Ç–æ–∫–µ–Ω–∞: {update_data['deleted']}")
                                    updated_holders = self.token_data_cache[self.current_token_address]['top10holders']
                                    holders_log = self.format_top_holders_for_log(updated_holders)
                                    self.logger.info(f"üìã {holders_log}")
                                else:
                                    self.token_data_cache[self.current_token_address]['top10holders'] = top10holders_pcnt
                                    self.logger.info(f"üìä –£–¥–∞–ª–µ–Ω—ã top10holders —Ç–æ–∫–µ–Ω–∞: {update_data['deleted']}")
                                    holders_log = self.format_top_holders_for_log(top10holders_pcnt)
                                    self.logger.info(f"üìã {holders_log}")

                        if 'updated' in update_data:
                            if self.current_token_address in self.token_data_cache:
                                # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ baseTokenAudit
                                dev_address = None
                                base_token_audit = self.token_data_cache[self.current_token_address].get('baseTokenAudit', {})
                                if base_token_audit:
                                    dev_address = base_token_audit.get('deployerAddress')
                                
                                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                                liquidityPoolAddress = self._find_liquidity_pool_from_updates(update_data['updated'], totalSupply, self.current_token_address)
                                if liquidityPoolAddress:
                                    self.logger.info(f"({self.current_token_address[:8]}...) üèä –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {liquidityPoolAddress}")
                                    self.token_data_cache[self.current_token_address]['liquidityPoolAddress'] = liquidityPoolAddress
                                        
                                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ liquidityPoolPcnt
                                    try:
                                        pool_amount = float(update_data['updated'][0][2]) if update_data['updated'][0][2] is not None else 0
                                        self.token_data_cache[self.current_token_address]['liquidityPoolPcnt'] = pool_amount / int(totalSupply) * 100 if pool_amount > 0 else 0
                                    except (ValueError, TypeError, ZeroDivisionError):
                                        self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ liquidityPoolPcnt: amount={update_data['updated'][0][2]}")
                                        self.token_data_cache[self.current_token_address]['liquidityPoolPcnt'] = 0
                                else:
                                    if self.token_data_cache[self.current_token_address].get('liquidityPoolAddress') == liquidityPoolAddress:
                                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ liquidityPoolPcnt
                                        try:
                                            pool_amount = float(update_data['updated'][0][2]) if update_data['updated'][0][2] is not None else 0
                                            self.token_data_cache[self.current_token_address]['liquidityPoolPcnt'] = pool_amount / int(totalSupply) * 100 if pool_amount > 0 else 0
                                        except (ValueError, TypeError, ZeroDivisionError):
                                            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ liquidityPoolPcnt: amount={update_data['updated'][0][2]}")
                                            self.token_data_cache[self.current_token_address]['liquidityPoolPcnt'] = 0
                                    
                                for update in update_data['updated']:
                                    wallet_address = update[1]
                                    
                                    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                                    if dev_address and wallet_address == dev_address:
                                        self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ —Ç–æ–ø–æ–≤: {wallet_address[:8]}...")
                                        continue
                                    
                                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ update[2] –≤ —á–∏—Å–ª–æ
                                    try:
                                        amount = float(update[2]) if update[2] is not None else 0
                                        pcnt = amount / int(totalSupply) * 100 if amount > 0 else 0
                                    except (ValueError, TypeError, ZeroDivisionError):
                                        self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è amount={update[2]} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_address}")
                                        pcnt = 0
                                    
                                    if wallet_address in top10holders_pcnt:
                                        join_date = top10holders_pcnt[wallet_address]['join_date']
                                    else:
                                        join_date = update[16]
                                    top10holders_pcnt[wallet_address] = {
                                        'pcnt': pcnt,
                                        'insider': update[4],
                                        'isBundler': update[15],
                                        'isPool': wallet_address in self.LIQUIDITY_POOL_ADDRESSES,
                                        'join_date': join_date
                                    }
                                self.token_data_cache[self.current_token_address]['top10holders'] = top10holders_pcnt
                                self.logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω top10holders —Ç–æ–∫–µ–Ω–∞: {len(update_data['updated'])} –∑–∞–ø–∏—Å–µ–π")
                                holders_log = self.format_top_holders_for_log(top10holders_pcnt)
                                self.logger.info(f"üìã {holders_log}")
                        
                        if self.current_token_address in self.token_data_cache:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            self.token_data_cache[self.current_token_address].update(update_data)
                            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                            self.token_data_cache[self.current_token_address]['timestamp'] = update_data['timestamp']
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            await self.process_token_metrics(self.token_data_cache[self.current_token_address])
                
                elif msg_type == 'init':
                    snapshot_data = payload["snapshot"]

                    # –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ snapshot –¥–∞–Ω–Ω—ã–µ
                    snapshot_data['timestamp'] = int(time.time())

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–µ—à–µ
                    if self.current_token_address not in self.token_data_cache:
                        self.logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {self.current_token_address[:8]} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")
                        return
                    
                    if 'totalSupply' in self.token_data_cache[self.current_token_address]:
                        totalSupply = self.token_data_cache[self.current_token_address]['totalSupply']
                    else:
                        self.logger.warning("‚ö†Ô∏è –ù–µ—Ç 'totalSupply' –ø–æ–ª—è –≤ self.token_data_cache[self.current_token_address]")
                        return

                    # –ï—Å–ª–∏ –µ—Å—Ç—å allEntries –≤ snapshot, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    if 'allEntries' in snapshot_data:
                        if self.current_token_address in self.token_data_cache:
                            if 'top10holders' in self.token_data_cache[self.current_token_address]:
                                top10holders_pcnt = self.token_data_cache[self.current_token_address]['top10holders']
                            else:
                                top10holders_pcnt = {}
                            if len(snapshot_data['allEntries']) > 0:
                                # –ò—â–µ–º –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞–∫ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ö–æ–ª–¥–µ—Ä–∞
                                liquidityPoolAddress = self._find_liquidity_pool(snapshot_data['allEntries'], totalSupply, self.current_token_address)
                                if liquidityPoolAddress:
                                    self.logger.info(f"({self.current_token_address[:8]}...) üèä –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {liquidityPoolAddress}")
                                    self.token_data_cache[self.current_token_address]['liquidityPoolAddress'] = liquidityPoolAddress
                                else:
                                    self.logger.warning("‚ö†Ô∏è –ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤")
                            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ baseTokenAudit
                            dev_address = None
                            base_token_audit = self.token_data_cache[self.current_token_address].get('baseTokenAudit', {})
                            if base_token_audit:
                                dev_address = base_token_audit.get('deployerAddress')
                            
                            for entry in snapshot_data['allEntries']:
                                wallet_address = entry[1]
                                
                                # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                                if dev_address and wallet_address == dev_address:
                                    self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ —Ç–æ–ø–æ–≤: {wallet_address[:8]}...")
                                    continue
                                
                                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ entry[2] –≤ —á–∏—Å–ª–æ
                                try:
                                    amount = float(entry[2]) if entry[2] is not None else 0
                                    pcnt = amount / int(totalSupply) * 100 if amount > 0 else 0
                                except (ValueError, TypeError, ZeroDivisionError):
                                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è amount={entry[2]} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_address}")
                                    pcnt = 0

                                if wallet_address in top10holders_pcnt:
                                    join_date = top10holders_pcnt[wallet_address]['join_date']
                                else:
                                    join_date = entry[16]

                                top10holders_pcnt[wallet_address] = {
                                    'pcnt': pcnt,
                                    'insider': entry[4],
                                    'isBundler': entry[15],
                                    'isPool': wallet_address in self.LIQUIDITY_POOL_ADDRESSES,
                                    'join_date': join_date
                                }
                            self.token_data_cache[self.current_token_address]['top10holders'] = top10holders_pcnt
                            self.logger.info(f"üìä –°–æ–∑–¥–∞–Ω top10holders —Ç–æ–∫–µ–Ω–∞: {len(snapshot_data['allEntries'])} –∑–∞–ø–∏—Å–µ–π")
                            holders_log = self.format_top_holders_for_log(top10holders_pcnt)
                            self.logger.info(f"üìã {holders_log}")
                    
                    if self.current_token_address in self.token_data_cache:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        self.token_data_cache[self.current_token_address].update(snapshot_data)
                        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                        self.token_data_cache[self.current_token_address]['timestamp'] = snapshot_data['timestamp']
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        await self.process_token_metrics(self.token_data_cache[self.current_token_address])

            
            if 'update' not in payload:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç 'update' –ø–æ–ª—è –≤ payload")
                return
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ top10holders –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.logger.error(traceback.format_exc())
    
    def extract_bundler_data(self, data: dict) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ fast-stats –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            bundler_info = {}
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä—è–º—ã–µ –ø–æ–ª—è
            if 'bundlers' in data:
                bundler_info['bundler_count'] = data['bundlers']
            elif 'bundler_count' in data:
                bundler_info['bundler_count'] = data['bundler_count']
                
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ–ª—è –≤ stats –æ–±—ä–µ–∫—Ç–µ
            if 'stats' in data:
                stats = data['stats']
                if 'bundlers' in stats:
                    bundler_info['bundler_count'] = stats['bundlers']
                if 'holders' in stats:
                    bundler_info['total_holders'] = stats['holders']
                    
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –º–∞—Å—Å–∏–≤–µ
            if 'tokens' in data:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                for token_data in data['tokens']:
                    token_address = token_data.get('address') or token_data.get('contract')
                    if token_address:
                        bundler_info['token_address'] = token_address
                        bundler_info['bundler_count'] = token_data.get('bundlers', 0)
                        bundler_info['total_holders'] = token_data.get('holders', 0)
                        break
                        
            # –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É
            if not bundler_info.get('token_address'):
                # –ò—â–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                for key, value in data.items():
                    if isinstance(value, str) and len(value) > 30:  # –ü–æ—Ö–æ–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
                        bundler_info['token_address'] = value
                        break
                        
            return bundler_info if bundler_info else None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {e}")
            return None
    
    def extract_bundler_data_from_init_snapshot(self, snapshot: dict, token_address: str) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ init snapshot"""
        try:
            bundler_info = {'token_address': token_address}
            
            # –í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ snapshot
            symbol = snapshot.get('baseTokenSymbol') or snapshot.get('symbol', 'UNK')
            name = snapshot.get('baseTokenName') or snapshot.get('name', symbol)
            market_cap = snapshot.get('marketCapInUsd', snapshot.get('fdvInUsdUi', 0))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–µ—à
            if symbol != 'UNK' or name != symbol:
                self.token_data_cache[token_address] = {
                    'symbol': symbol,
                    'name': name,
                    'market_cap': market_cap,
                    'dex_source': 'Pump.fun',
                    'chain': snapshot.get('chain', 'SOLANA'),
                    'source': 'market_init_snapshot'
                }
                self.logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ {name} ({symbol}) –≤ –∫–µ—à –∏–∑ market snapshot")
            
            # –ò—â–µ–º –≤ pumpFunGaze (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ bundler –¥–∞–Ω–Ω—ã—Ö)
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pumpFunGaze –≤ snapshot...")
            self.logger.info(f"üìã –ö–ª—é—á–∏ –≤ snapshot: {list(snapshot.keys())}")
            
            if 'pumpFunGaze' in snapshot and snapshot['pumpFunGaze'] is not None:
                pump_gaze = snapshot['pumpFunGaze']
                self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã pumpFunGaze –¥–∞–Ω–Ω—ã–µ –≤ init:")
                self.logger.info(f"üì¶ –ü–û–õ–ù–´–ï pumpFunGaze –¥–∞–Ω–Ω—ã–µ: {pump_gaze}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Ö–æ–ª–¥–µ—Ä–æ–≤
                if 'totalBundlesCount' in pump_gaze:
                    bundler_info['bundler_count'] = pump_gaze['totalBundlesCount']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                if 'bundlesHoldingPcnt' in pump_gaze:
                    bundles_pcnt = pump_gaze['bundlesHoldingPcnt']
                    if isinstance(bundles_pcnt, dict) and 'current' in bundles_pcnt:
                        bundler_info['bundler_percentage'] = bundles_pcnt['current']
                        bundler_info['bundler_percentage_ath'] = bundles_pcnt.get('ath', 0)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if 'totalSolSpentInBundles' in pump_gaze:
                    bundler_info['sol_spent_in_bundles'] = pump_gaze['totalSolSpentInBundles']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
            if 'totalHolders' in snapshot:
                bundler_info['total_holders'] = snapshot['totalHolders']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if bundler_info.get('bundler_count') and bundler_info.get('total_holders'):
                return bundler_info
            elif bundler_info.get('bundler_percentage') and bundler_info.get('total_holders'):
                return bundler_info
            else:
                self.logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ bundler –¥–∞–Ω–Ω—ã—Ö –≤ init snapshot –¥–ª—è {token_address[:8]}...")
                return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è bundler –¥–∞–Ω–Ω—ã—Ö –∏–∑ init snapshot: {e}")
            return None

    def extract_bundler_data_from_update(self, update_payload: dict) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö –∏–∑ update —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            bundler_info = {}
            
            # –ù–û–í–´–ô –§–û–†–ú–ê–¢: pumpFunGaze –¥–∞–Ω–Ω—ã–µ
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pumpFunGaze –≤ update...")
            self.logger.info(f"üìã –ö–ª—é—á–∏ –≤ update_payload: {list(update_payload.keys())}")
            
            if 'pumpFunGaze' in update_payload and update_payload['pumpFunGaze'] is not None:
                pump_gaze = update_payload['pumpFunGaze']
                self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã pumpFunGaze –¥–∞–Ω–Ω—ã–µ –≤ update:")
                self.logger.info(f"üì¶ –ü–û–õ–ù–´–ï pumpFunGaze –¥–∞–Ω–Ω—ã–µ: {pump_gaze}")
                
                # –ò—â–µ–º –∫–ª—é—á–∏ bundler –¥–∞–Ω–Ω—ã—Ö
                self.logger.info(f"üîç –ö–ª—é—á–∏ –≤ pumpFunGaze: {list(pump_gaze.keys())}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                if 'totalBundlesCount' in pump_gaze and pump_gaze['totalBundlesCount'] is not None:
                    bundler_info['bundler_count'] = pump_gaze['totalBundlesCount']
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω totalBundlesCount: {pump_gaze['totalBundlesCount']}")
                else:
                    self.logger.info(f"‚ùå totalBundlesCount –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ None")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π)
                if 'bundlesHoldingPcnt' in pump_gaze and pump_gaze['bundlesHoldingPcnt'] is not None:
                    bundles_pcnt = pump_gaze['bundlesHoldingPcnt']
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω bundlesHoldingPcnt: {bundles_pcnt}")
                    if isinstance(bundles_pcnt, dict) and 'current' in bundles_pcnt:
                        bundler_info['bundler_percentage'] = bundles_pcnt['current']
                        bundler_info['bundler_percentage_ath'] = bundles_pcnt.get('ath', 0)
                        self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω bundler –ø—Ä–æ—Ü–µ–Ω—Ç: {bundles_pcnt['current']}%")
                    else:
                        self.logger.info(f"‚ùå bundlesHoldingPcnt –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
                else:
                    self.logger.info(f"‚ùå bundlesHoldingPcnt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ None")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if 'totalSolSpentInBundles' in pump_gaze and pump_gaze['totalSolSpentInBundles'] is not None:
                    bundler_info['sol_spent_in_bundles'] = pump_gaze['totalSolSpentInBundles']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
            if 'totalHolders' in update_payload:
                bundler_info['total_holders'] = update_payload['totalHolders']
                
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º bundler –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ update_payload
            if 'bundlesHoldingPcnt' in update_payload and update_payload['bundlesHoldingPcnt'] is not None:
                bundles_pcnt = update_payload['bundlesHoldingPcnt']
                if isinstance(bundles_pcnt, dict) and 'current' in bundles_pcnt:
                    bundler_info['bundler_percentage'] = bundles_pcnt['current']
                    bundler_info['bundler_percentage_ath'] = bundles_pcnt.get('ath', 0)
                    self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω bundler percentage –≤ update_payload: {bundles_pcnt['current']}%")
                    
            if 'totalBundlesCount' in update_payload and update_payload['totalBundlesCount'] is not None:
                bundler_info['bundler_count'] = update_payload['totalBundlesCount']
                self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω bundler count –≤ update_payload: {update_payload['totalBundlesCount']}")
                
            if 'totalSolSpentInBundles' in update_payload and update_payload['totalSolSpentInBundles'] is not None:
                bundler_info['sol_spent_in_bundles'] = update_payload['totalSolSpentInBundles']
            
            # –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if 'bundlers' in update_payload:
                bundler_info['bundler_count'] = update_payload['bundlers']
            if 'holders' in update_payload:
                bundler_info['total_holders'] = update_payload['holders']
            if 'tokenAddress' in update_payload:
                bundler_info['token_address'] = update_payload['tokenAddress']
                
            # –ò—â–µ–º –≤ –¥–µ–ª—å—Ç–∞—Ö (–∏–∑–º–µ–Ω–µ–Ω–∏—è)
            if 'delta' in update_payload:
                delta = update_payload['delta']
                if 'bundlers' in delta:
                    bundler_info['bundler_count'] = delta['bundlers']
                if 'holders' in delta:
                    bundler_info['total_holders'] = delta['holders']
                    
            # –ò—â–µ–º –≤ stats
            if 'stats' in update_payload:
                stats = update_payload['stats']
                if 'bundlers' in stats:
                    bundler_info['bundler_count'] = stats['bundlers']
                if 'holders' in stats:
                    bundler_info['total_holders'] = stats['holders']
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ bundler –¥–∞–Ω–Ω—ã–µ: {bundler_info}")
            
            bundler_count = bundler_info.get('bundler_count')
            bundler_percentage = bundler_info.get('bundler_percentage') 
            total_holders = bundler_info.get('total_holders')
            
            self.logger.info(f"üìä bundler_count: {bundler_count}")
            self.logger.info(f"üìä bundler_percentage: {bundler_percentage}")
            self.logger.info(f"üìä total_holders: {total_holders}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ bundler –¥–∞–Ω–Ω—ã–µ
            has_bundler_data = bundler_count is not None or bundler_percentage is not None
            
            if has_bundler_data:
                self.logger.info(f"‚úÖ Bundler –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–µ–º: {bundler_info}")
                return bundler_info
            else:
                self.logger.info(f"‚ùå –ù–µ—Ç bundler –¥–∞–Ω–Ω—ã—Ö (–Ω–∏ count, –Ω–∏ percentage)")
                return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è bundler –¥–∞–Ω–Ω—ã—Ö –∏–∑ update: {e}")
            return None

    async def process_bundler_detection(self, bundler_info: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö"""
        try:
            token_address = bundler_info.get('token_address')
            bundler_count = bundler_info.get('bundler_count', 0)
            total_holders = bundler_info.get('total_holders', 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            bundler_percentage = bundler_info.get('bundler_percentage')
            if bundler_percentage is None and bundler_count > 0 and total_holders > 0:
                bundler_percentage = (bundler_count / total_holders) * 100
            
            if bundler_count > 0 and bundler_percentage is not None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
                if not token_address and hasattr(self, 'current_token_address'):
                    token_address = self.current_token_address
                
                bundler_percentage_ath = bundler_info.get('bundler_percentage_ath', bundler_percentage)
                sol_spent = bundler_info.get('sol_spent_in_bundles', 0)
                
                self.logger.info(f"üéØ –ë–ê–ù–î–õ–ï–† –î–ê–ù–ù–´–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
                self.logger.info(f"üìä –¢–æ–∫–µ–Ω {token_address if token_address else 'N/A'}: {bundler_count} –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
                self.logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {total_holders}")
                self.logger.info(f"üìà –¢–µ–∫—É—â–∏–π %: {bundler_percentage:.2f}%")
                self.logger.info(f"üî• ATH %: {bundler_percentage_ath:.2f}%")
                self.logger.info(f"üí∞ SOL –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –≤ –±–∞–Ω–¥–ª–∞—Ö: {sol_spent:.2f}")
                
                if bundler_percentage > 0:
                    self.logger.info(f"–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç {bundler_percentage:.2f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–µ—à–∞
                    cached_data = self.token_data_cache.get(token_address, {})
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    token_data = {
                        'address': token_address or "Unknown",
                        'symbol': cached_data.get('symbol', 'UNK'),
                        'name': cached_data.get('name', 'Unknown Token'),
                        'market_cap': cached_data.get('market_cap', 0),
                        'dex_source': cached_data.get('dex_source', 'Unknown'),
                        'total_holders': total_holders,
                        'bundler_percentage_ath': bundler_percentage_ath,
                        'sol_spent_in_bundles': sol_spent,
                        'bundler_count': bundler_count,
                        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                        'basePriceInUsdUi': cached_data.get('basePriceInUsdUi', 0),
                        'basePriceInQuoteUi': cached_data.get('basePriceInQuoteUi', 0),
                        'liquidityInUsdUi': cached_data.get('liquidityInUsdUi', 0),
                        'deployerHoldingPcnt': cached_data.get('deployerHoldingPcnt', 0),
                        
                        # PumpFunGaze –¥–∞–Ω–Ω—ã–µ
                        'devHoldingPcnt': cached_data.get('devHoldingPcnt', 0),
                        'tradingAppTxns': cached_data.get('tradingAppTxns', 0),
                        'freshWalletBuys': cached_data.get('freshWalletBuys', {'count': 0, 'sol': 0}),
                        'insidersHoldingPcnt': cached_data.get('insidersHoldingPcnt', 0),
                        'totalSupply': cached_data.get('totalSupply', 0) or 0,
                        'totalSnipers': cached_data.get('totalSnipers', 0),
                        'bundlesHoldingPcnt': cached_data.get('bundlesHoldingPcnt', {'current': 0, 'ath': 0}),
                        'totalBundlesCount': cached_data.get('totalBundlesCount', 0),
                        'totalSolSpentInBundles': cached_data.get('totalSolSpentInBundles', 0),
                        'totalTokenBoughtInBundles': cached_data.get('totalTokenBoughtInBundles', 0),
                        'totalSolFees': cached_data.get('totalSolFees', 0),
                        'snipersHoldingPcnt': cached_data.get('snipersHoldingPcnt', 0),
                    }

                    # –ü–æ–ª—É—á–∞–µ–º deployer –ø—Ä–æ—Ü–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
                    deployer_pcnt = token_data.get('deployerHoldingPcnt')
                    if isinstance(deployer_pcnt, dict):
                        deployer_pcnt = deployer_pcnt.get('current', 0)

                    if total_holders > 18 and bundler_count > 0 and bundler_count < 6:
                        self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! Holders: {total_holders}, Bundlers: {bundler_count}")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º bundler_info –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        bundler_info = {
                            'token_address': self.token_address,
                            'bundler_count': bundler_count,
                            'total_holders': total_holders,
                            'bundler_percentage': bundles_pcnt.get('current', 0),
                            'bundler_percentage_ath': bundles_pcnt.get('ath', 0),
                            'sol_spent_in_bundles': pump_gaze.get('totalSolSpentInBundles', 0)
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
                        bundler_info.update(self.token_data_cache.get(self.token_address, {}))
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await self.send_bundler_notification(
                            contract_address=self.token_address,
                            token_data=bundler_info,
                            bundler_count=bundler_count,
                            bundler_percentage=bundles_pcnt.get('current', 0),
                            simulated=False
                        )
                    else:
                        self.logger.info(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {self.token_address[:8]} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º: holders={total_holders}, bundlers={bundler_count}")
                    
                else:
                    self.logger.info(f"‚úÖ –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞: {bundler_percentage:.2f}%")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ bundler detection: {e}")
    
    async def analyze_token_bundlers(self, contract_address: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            token_data = pending_tokens.get(contract_address)
            bundler_data = bundler_results.get(contract_address)
            
            if not token_data or not bundler_data:
                return
            
            bundler_count = bundler_data['bundler_count']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ (—É—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å)
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 100% = 1000 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π (—ç—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            max_holders = 1000
            bundler_percentage = (bundler_count / max_holders) * 100
            
            self.logger.info(f"üìà –¢–æ–∫–µ–Ω {contract_address[:8]}: {bundler_count} –±–∞–Ω–¥–ª–µ—Ä–æ–≤ ({bundler_percentage:.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
            if bundler_percentage >= MIN_BUNDLER_PERCENTAGE:
                await self.send_bundler_alert(token_data, bundler_count, bundler_percentage)
            else:
                self.logger.info(f"‚ö™ –¢–æ–∫–µ–Ω {contract_address[:8]}: –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ {bundler_percentage:.1f}% –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ {MIN_BUNDLER_PERCENTAGE}%")
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            del pending_tokens[contract_address]
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è {contract_address[:8]}: {e}")
    
    async def send_bundler_alert(self, token_data: dict, bundler_count: int, bundler_percentage: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            contract_address = token_data.get('mint', token_data.get('address', 'Unknown'))
            symbol = token_data.get('symbol', 'UNK')
            name = token_data.get('name', 'Unknown Token')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üî• <b>–í–´–°–û–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –ë–ê–ù–î–õ–ï–†–û–í!</b>\n\n"
                f"üíé <b>–¢–æ–∫–µ–Ω:</b> {name} ({symbol})\n"
                f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{contract_address}</code>\n"
                f"üë• <b>–ë–∞–Ω–¥–ª–µ—Ä–æ–≤:</b> {bundler_count}\n"
                f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {bundler_percentage:.1f}%\n"
                f"‚ö° <b>–ü–æ—Ä–æ–≥:</b> {MIN_BUNDLER_PERCENTAGE}%\n\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    {"text": "üíé Axiom.trade", "url": f"https://axiom.trade/t/{contract_address}"},
                    {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{contract_address}"}
                ],
                [
                    {"text": "üîç trade.padre.gg", "url": f"https://trade.padre.gg/trade/solana/{contract_address}"}
                ]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ —Ç–µ–º—É
            success = await self.send_telegram_message(message, keyboard)
            
            if success:
                self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol} —Å {bundler_percentage:.1f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_telegram_message(self, message: str, keyboard: List[List[Dict[str, str]]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            current_time = time.time()
            if hasattr(self, 'last_telegram_time'):
                time_since_last = current_time - self.last_telegram_time
                if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(3 - time_since_last)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = "-1002680160752"  # ID —á–∞—Ç–∞
            thread_id = "13134"  # ID —Ç—Ä–µ–¥–∞
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            
            data = {
                "chat_id": chat_id,
                "message_thread_id": thread_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            
            if keyboard:
                data["reply_markup"] = {"inline_keyboard": keyboard}
            
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: chat={chat_id}, thread={thread_id}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 429:  # Too Many Requests
                        retry_after = (await response.json()).get('parameters', {}).get('retry_after', 30)
                        self.logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ñ–¥–µ–º {retry_after} —Å–µ–∫.")
                        await asyncio.sleep(retry_after)
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                        async with session.post(url, json=data) as retry_response:
                            if retry_response.status != 200:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                                return False
                    elif response.status != 200:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                        return False
                        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ 
            self.last_telegram_time = time.time()
            self.logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_special_pattern_telegram_message(self, message: str, keyboard: List[List[Dict[str, str]]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤–µ—Ç–∫—É Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            current_time = time.time()
            if hasattr(self, 'last_special_telegram_time'):
                time_since_last = current_time - self.last_special_telegram_time
                if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(3 - time_since_last)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤–µ—Ç–∫—É
            chat_id = "-1002680160752"  # ID —á–∞—Ç–∞
            thread_id = str(SPECIAL_PATTERN_THREAD_ID)  # ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–µ—Ç–∫–∏
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            
            data = {
                "chat_id": chat_id,
                "message_thread_id": thread_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            
            if keyboard:
                data["reply_markup"] = {"inline_keyboard": keyboard}
            
            self.logger.info(f"‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù –≤ Telegram: chat={chat_id}, thread={thread_id}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 429:  # Too Many Requests
                        retry_after = (await response.json()).get('parameters', {}).get('retry_after', 30)
                        self.logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ñ–¥–µ–º {retry_after} —Å–µ–∫.")
                        await asyncio.sleep(retry_after)
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                        async with session.post(url, json=data) as retry_response:
                            if retry_response.status != 200:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                                return False
                    elif response.status != 200:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                        return False
                        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_special_telegram_time = time.time()
            self.logger.info("‚ö° –°–æ–æ–±—â–µ–Ω–∏–µ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ Telegram: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        self.running = True
        self.start_time = asyncio.get_event_loop().time()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        max_retries = 3
        retry_delay = 5
        
        self.logger.info(f"üîó –ó–∞–ø—É—Å–∫–∞–µ–º Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {self.connection_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]} (–º–∞–∫—Å. {self.max_duration // 60} –º–∏–Ω)")
        
        for attempt in range(max_retries):
            try:
                if await self.connect():
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    await self.subscribe_to_token_data(self.token_address)
                    # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                    await self.listen_for_bundler_data()
                    
                    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if self.running and not self.is_time_expired():
                        self.logger.warning(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {attempt + 1}/{max_retries} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
                        await asyncio.sleep(retry_delay)
                        continue
                    else:
                        break  # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é
                else:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(retry_delay)
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {self.token_address[:8]} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if self.websocket:
                    try:
                        await self.websocket.close()
                    except:
                        pass
                    self.websocket = None
                
                if attempt < max_retries - 1 and self.running and not self.is_time_expired():
                    await asyncio.sleep(retry_delay)
                else:
                    break
        
        self.logger.info(f"üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_address[:8]}")
    
    def is_time_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.start_time:
            return False
        
        current_time = asyncio.get_event_loop().time()
        elapsed = current_time - self.start_time
        return elapsed >= self.max_duration
    
    def get_remaining_time(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.start_time:
            return self.max_duration
        
        current_time = asyncio.get_event_loop().time()
        elapsed = current_time - self.start_time
        return max(0, self.max_duration - elapsed)

    def analyze_holder_stability(self, percentages_history):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ (—Å–Ω–∞–π–ø–µ—Ä—ã vs –æ–±—ã—á–Ω—ã–µ)"""
        if len(percentages_history) < 20:
            return False, []
        
        suspicious_points = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        large_changes = 0  # –ë–æ–ª—å—à–∏–µ —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (>2%)
        whale_rotations = 0  # –ü–æ–ª–Ω—ã–µ –∑–∞–º–µ–Ω—ã –≤ —Ç–æ–ø-3
        pump_dump_cycles = 0  # –¶–∏–∫–ª—ã –Ω–∞–∫–∞—á–∫–∏-—Å–±—Ä–æ—Å–∞
        stable_sniper_periods = 0  # –ü–µ—Ä–∏–æ–¥—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ç–æ–ø-—Å–Ω–∞–π–ø–µ—Ä–æ–≤ (–ü–õ–û–•–û!)
        high_sniper_top3_count = 0  # –ú–Ω–æ–≥–æ —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3
        
        # –ù–û–í–´–ô –ö–†–ò–¢–ï–†–ò–ô: –ê–Ω–∞–ª–∏–∑ —Ä–∞–Ω–Ω–∏—Ö vs —Ç–µ–∫—É—â–∏—Ö —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä–æ–≤
        early_holders_still_dominant = False
        early_vs_current_analysis = self.analyze_early_vs_current_holders(percentages_history)
        
        for i in range(1, len(percentages_history)):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            prev_data = percentages_history[i-1]
            curr_data = percentages_history[i]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
            if isinstance(prev_data, dict):
                prev_percentages = prev_data['percentages']
                prev_snipers = prev_data.get('top3_snipers', 0)
            else:
                prev_percentages = prev_data  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                prev_snipers = 0
                
            if isinstance(curr_data, dict):
                curr_percentages = curr_data['percentages']
                curr_snipers = curr_data.get('top3_snipers', 0)
            else:
                curr_percentages = curr_data  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                curr_snipers = 0
            
            if len(prev_percentages) < 3 or len(curr_percentages) < 3:
                continue
                
            prev_top3 = prev_percentages[:3]
            curr_top3 = curr_percentages[:3]
            
            try:
                prev_values = [float(x) for x in prev_top3]
                curr_values = [float(x) for x in curr_top3]
                
                # 1. –ë–û–õ–¨–®–ò–ï –†–ï–ó–ö–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø (>2% –∑–∞ —Å–Ω–∞–ø—à–æ—Ç)
                max_change = 0
                for j in range(min(len(prev_values), len(curr_values))):
                    change = abs(prev_values[j] - curr_values[j])
                    max_change = max(max_change, change)
                    
                if max_change > 2.0:
                    large_changes += 1
                
                # 2. –ü–û–õ–ù–ê–Ø –†–û–¢–ê–¶–ò–Ø –¢–û–ü-3
                positions_kept = 0
                for j in range(min(len(prev_values), len(curr_values))):
                    if abs(prev_values[j] - curr_values[j]) < 0.5:
                        positions_kept += 1
                        
                if positions_kept == 0 and len(prev_values) >= 3:
                    whale_rotations += 1
                
                # 3. PUMP-DUMP –¶–ò–ö–õ–´
                if i >= 2:
                    prev_prev_data = percentages_history[i-2]
                    if isinstance(prev_prev_data, dict):
                        prev_prev_percentages = prev_prev_data['percentages']
                    else:
                        prev_prev_percentages = prev_prev_data
                        
                    if len(prev_prev_percentages) >= 1:
                        prev_prev = [float(x) for x in prev_prev_percentages[:3]]
                        
                        if len(prev_prev) >= 1 and len(prev_values) >= 1 and len(curr_values) >= 1:
                            change1 = prev_values[0] - prev_prev[0]
                            change2 = curr_values[0] - prev_values[0]
                            
                            if change1 > 1.5 and change2 < -1.5:
                                pump_dump_cycles += 1
                
                # 4. –ù–û–í–´–ô –ö–†–ò–¢–ï–†–ò–ô: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–ø-—Å–Ω–∞–π–ø–µ—Ä—ã (–ü–õ–û–•–û!)
                # –ï—Å–ª–∏ 2+ —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3 –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                if curr_snipers >= 2:
                    high_sniper_top3_count += 1
                    
                    # –ï—Å–ª–∏ –µ—â–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —ç—Ç–æ–º - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ
                    if max_change < 0.3:  # –û—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        stable_sniper_periods += 1
                            
            except (ValueError, IndexError):
                continue
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê —Å —É—á–µ—Ç–æ–º —Å–Ω–∞–π–ø–µ—Ä–æ–≤ (–æ—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤)
        is_suspicious = False
        
        # # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Å–ª–∞–±–ª–µ–Ω–æ: 20% -> 25%)
        # large_changes_threshold = len(percentages_history) * 0.25
        # if large_changes > large_changes_threshold:
        #     suspicious_points.append(f"–†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è >2%: {large_changes} —Å–ª—É—á–∞–µ–≤ (>{large_changes_threshold:.0f})")
        #     is_suspicious = True
        
        # # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –†–æ—Ç–∞—Ü–∏—è —Ç–æ–ø-3 (–æ—Å–ª–∞–±–ª–µ–Ω–æ: 8% -> 15%)
        # rotation_threshold = len(percentages_history) * 0.15
        # if whale_rotations > rotation_threshold:
        #     suspicious_points.append(f"–ü–æ–ª–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Ç–æ–ø-3: {whale_rotations} —Ä–∞–∑ (>{rotation_threshold:.0f})")
        #     is_suspicious = True
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: Pump-dump —Ü–∏–∫–ª—ã (–æ—Å–ª–∞–±–ª–µ–Ω–æ: 5% -> 10%)
        pump_dump_threshold = len(percentages_history) * 0.10
        if pump_dump_cycles > pump_dump_threshold:
            suspicious_points.append(f"Pump-dump —Ü–∏–∫–ª—ã: {pump_dump_cycles} —Ä–∞–∑ (>{pump_dump_threshold:.0f})")
            is_suspicious = True
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –°–¢–†–û–ì–ò–ô - –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–ø-—Å–Ω–∞–π–ø–µ—Ä—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 25% - —ç—Ç–æ –≤–∞–∂–Ω–æ!)
        stable_sniper_threshold = len(percentages_history) * 0.25
        if stable_sniper_periods > stable_sniper_threshold:
            suspicious_points.append(f"–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–ø-—Å–Ω–∞–π–ø–µ—Ä—ã: {stable_sniper_periods} –ø–µ—Ä–∏–æ–¥–æ–≤ (>{stable_sniper_threshold:.0f})")
            is_suspicious = True
            
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 5: –°–¢–†–û–ì–ò–ô - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3 (–æ—Å—Ç–∞–≤–ª—è–µ–º 60% - —ç—Ç–æ –≤–∞–∂–Ω–æ!)
        high_sniper_threshold = len(percentages_history) * 0.6
        if high_sniper_top3_count > high_sniper_threshold:
            suspicious_points.append(f"–ú–Ω–æ–≥–æ —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3: {high_sniper_top3_count} —Å–ª—É—á–∞–µ–≤ (>{high_sniper_threshold:.0f})")
            is_suspicious = True
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 6: –ù–û–í–´–ô - –†–∞–Ω–Ω–∏–µ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã –≤—Å—ë –µ—â—ë –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç
        early_suspicious, early_reasons = early_vs_current_analysis
        if early_suspicious:
            suspicious_points.extend(early_reasons)
            is_suspicious = True
        
        return is_suspicious, suspicious_points

    def analyze_early_vs_current_holders(self, percentages_history):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: —Å–∏–¥—è—Ç –ª–∏ —Ä–∞–Ω–Ω–∏–µ —Ç–æ–ø-3 –≤—Å—ë –µ—â—ë –≤ —Ç–æ–ø–µ —Å –±–æ–ª—å—à–∏–º–∏ –¥–æ–ª—è–º–∏"""
        if len(percentages_history) < 30:
            return False, []
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10-15 —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –∫–∞–∫ "—Ä–∞–Ω–Ω–∏–µ"
        early_snapshots = percentages_history[:15]
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –∫–∞–∫ "—Ç–µ–∫—É—â–∏–µ"
        current_snapshots = percentages_history[-10:]
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–Ω–∏—Ö —Ç–æ–ø-3
        early_top3_values = []
        for snapshot in early_snapshots:
            if isinstance(snapshot, dict):
                percentages = snapshot['percentages']
            else:
                percentages = snapshot
                
            if len(percentages) >= 3:
                try:
                    top3 = [float(x) for x in percentages[:3]]
                    early_top3_values.append(top3)
                except (ValueError, IndexError):
                    continue
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç–æ–ø-3
        current_top3_values = []
        for snapshot in current_snapshots:
            if isinstance(snapshot, dict):
                percentages = snapshot['percentages']
            else:
                percentages = snapshot
                
            if len(percentages) >= 3:
                try:
                    top3 = [float(x) for x in percentages[:3]]
                    current_top3_values.append(top3)
                except (ValueError, IndexError):
                    continue
        
        if not early_top3_values or not current_top3_values:
            return False, []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ç–æ–ø-3
        early_medians = []
        for pos in range(3):
            values = [top3[pos] for top3 in early_top3_values if len(top3) > pos]
            if values:
                early_medians.append(sorted(values)[len(values)//2])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ç–æ–ø-3
        current_medians = []
        for pos in range(3):
            values = [top3[pos] for top3 in current_top3_values if len(top3) > pos]
            if values:
                current_medians.append(sorted(values)[len(values)//2])
        
        if len(early_medians) < 3 or len(current_medians) < 3:
            return False, []
        
        suspicious_points = []
        is_suspicious = False
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –†–∞–Ω–Ω–∏–µ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç
        early_total = sum(early_medians)
        current_total = sum(current_medians)
        
        # –ï—Å–ª–∏ —Ä–∞–Ω–Ω–∏–µ —Ç–æ–ø-3 –¥–µ—Ä–∂–∞–ª–∏ >12% –∏ —Ç–µ–∫—É—â–∏–µ —Ç–æ–ø-3 –≤—Å—ë –µ—â—ë –¥–µ—Ä–∂–∞—Ç >10%
        # if early_total > 12.0 and current_total > 10.0:
        #     # –ò –ø—Ä–∏ —ç—Ç–æ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 20%
        #     reduction_percent = ((early_total - current_total) / early_total) * 100
        #     if reduction_percent < 20:
        #         suspicious_points.append(f"–†–∞–Ω–Ω–∏–µ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç: –±—ã–ª–æ {early_total:.1f}%, —Å–µ–π—á–∞—Å {current_total:.1f}% (—Å–Ω–∏–∂–µ–Ω–∏–µ {reduction_percent:.1f}%)")
        #         is_suspicious = True
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ü–µ—Ä–≤—ã–π —Ö–æ–ª–¥–µ—Ä –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –∫—Ä—É–ø–Ω—ã–π
        if early_medians[0] > 6.0 and current_medians[0] > 4.5:
            reduction = early_medians[0] - current_medians[0]
            if reduction < 1.5:  # –°–Ω–∏–∑–∏–ª—Å—è –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞ 1.5%
                suspicious_points.append(f"–ü–µ—Ä–≤—ã–π —Ö–æ–ª–¥–µ—Ä –æ—Å—Ç–∞–ª—Å—è –∫—Ä—É–ø–Ω—ã–º: –±—ã–ª–æ {early_medians[0]:.1f}%, —Å–µ–π—á–∞—Å {current_medians[0]:.1f}%")
                is_suspicious = True
        
        return is_suspicious, suspicious_points

    def is_suspicious_pattern(self, percentages_history):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)"""
        if not percentages_history or len(percentages_history) < 3:
            return False, []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        analysis_limit = 1000
        analysis_history = percentages_history[-analysis_limit:] if len(percentages_history) > analysis_limit else percentages_history
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä–æ–≤
        suspicious, suspicious_reasons = self.analyze_holder_stability(analysis_history)
        
        return suspicious, suspicious_reasons
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ Solana
    LIQUIDITY_POOL_ADDRESSES = {
        "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
        "GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL", 
        "GVVUi6DaocSEAp8ATnXFAPNF5irCWjCvmPCzoaGAf5eJ",
        "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM",
        "WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh"
    }

    def _find_liquidity_pool(self, entries, total_supply, token_address=None) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –ø—É–ª–æ–≤
        
        Args:
            entries: —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–µ—Ä–æ–≤ [id, wallet, amount, ?, insider, ..., bundler]
            total_supply: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            token_address: –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –∞–¥—Ä–µ—Å –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ None
        """
        try:
            if not entries:
                return None
            
            # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤
            for entry in entries:
                try:
                    wallet_address = entry[1]
                    if wallet_address in self.LIQUIDITY_POOL_ADDRESSES:
                        amount = float(entry[2]) if entry[2] is not None else 0
                        pcnt = (amount / int(total_supply)) * 100 if total_supply and amount > 0 else 0
                        prefix = f"({token_address[:8]}...) " if token_address else ""
                        self.logger.info(f"{prefix}üèä –ù–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {wallet_address} ({pcnt:.2f}% –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
                        return wallet_address
                except (ValueError, TypeError, IndexError):
                    continue
            
            self.logger.debug("ü§î –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤")
            return None
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def _find_liquidity_pool_from_updates(self, updates, total_supply, token_address=None) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º
        
        Args:
            updates: —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ö–æ–ª–¥–µ—Ä–æ–≤
            total_supply: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            token_address: –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –∞–¥—Ä–µ—Å –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ None
        """
        try:
            if not updates:
                return None
            
            # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            for update in updates:
                try:
                    wallet_address = update[1]
                    if wallet_address in self.LIQUIDITY_POOL_ADDRESSES:
                        amount = float(update[2]) if update[2] is not None else 0
                        pcnt = amount / int(total_supply) * 100 if total_supply and amount > 0 else 0
                        prefix = f"({token_address[:8]}...) " if token_address else ""
                        self.logger.info(f"{prefix}üèä –ù–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: {wallet_address} ({pcnt:.2f}%)")
                        return wallet_address
                except (ValueError, TypeError, IndexError):
                    continue
            
            # –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            existing_pool = self.token_data_cache.get(self.current_token_address, {}).get('liquidityPoolAddress')
            if existing_pool:
                self.logger.debug(f"üèä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {existing_pool}")
                return existing_pool
            
            self.logger.debug("ü§î –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
            return None
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return self.token_data_cache.get(self.current_token_address, {}).get('liquidityPoolAddress')
    
    def is_connection_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.start_time:
            return False
        
        current_time = asyncio.get_event_loop().time()
        elapsed = current_time - self.start_time
        return elapsed >= self.max_duration
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for token_address in list(self.active_connections.keys()):
            await self._remove_connection(token_address, reason="–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        self.logger.info("‚úÖ MultiplePadreManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def process_token_metrics(self, metrics: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not self.websocket:
                self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –¥–ª—è {self.token_address[:8]}")
                return
            
            if not metrics:
                self.logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {self.token_address[:8]}")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
            if not hasattr(self, 'token_metrics') or not self.token_metrics:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                creation_time = int(metrics.get('marketCreatedAt', 0) or 0)
                if not creation_time and 'firstPool' in metrics:
                    try:
                        created_at_str = metrics['firstPool']['createdAt']
                        creation_time = int(datetime.strptime(created_at_str, "%Y-%m-%dT%H:%M:%SZ").timestamp())
                    except (KeyError, ValueError) as e:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                
                if not creation_time:
                    creation_time = int(time.time())
                    self.logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è {self.token_address[:8]}")
                
                self.token_metrics = TokenMetrics(self.token_address, creation_time)
                self.logger.info(f"‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {self.token_address[:8]} (—Å–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(creation_time)})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.token_metrics.add_metrics(metrics)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ—Å—Ç
            growth = self.token_metrics.get_growth_rates()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            total_holders = int(metrics.get('total_holders', 0) or 0)
            total_bundlers = int(metrics.get('totalBundlesCount', 0) or 0)
            liquidity = float(metrics.get('liquidityInUsdUi', 0) or 0)
            market_cap = (int(metrics.get('totalSupply', 0) or 0)) / (10 ** 9) * (metrics.get('basePriceInUsdUi', 0) or 0) * 1000
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤–ª–∞–¥–µ–Ω–∏—è
            dev_percent = float(metrics.get('devHoldingPcnt', 0) or 0)
            
            bundles_percent = metrics.get('bundlesHoldingPcnt', 0)
            if isinstance(bundles_percent, dict):
                bundles_percent = float(bundles_percent.get('current', 0) or 0)
            else:
                bundles_percent = float(bundles_percent or 0)
            
            snipers_percent = float(metrics.get('snipersHoldingPcnt', 0) or 0)
            insiders_percent = float(metrics.get('insidersHoldingPcnt', 0) or 0)
            
            snipers_count = int(metrics.get('totalSnipers', 0) or 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö
            fresh_wallets_data = metrics.get('freshWalletBuys', {}) or {}
            fresh_wallets = int(fresh_wallets_data.get('count', 0) or 0)
            fresh_wallets_sol = float(fresh_wallets_data.get('sol', 0) or 0)

            top10holders = metrics.get("top10holders", {})
            top10HoldersPcnt = 0
            top10Holders = ""
            available_liquidity = 0

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ –±–æ–ª—å—à–µ 1 (—ç–∫–æ–Ω–æ–º–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
            if len(top10holders) > 1:
                sorted_holders = sorted(
                    top10holders.items(),
                    key=lambda item: item[1]['pcnt'],
                    reverse=True  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –±–æ–ª—å—à–µ–≥–æ % –∫ –º–µ–Ω—å—à–µ–º—É)
                )
            else:
                sorted_holders = list(top10holders.items())

            total_pcnt_holders = 0
            max_holders_pcnt = 0
            top_10_holders = ""
            top_10_holders_total_pcnt = 0
            index = 0

            average_holders_pcnt = 0
            average_top_10_holders_pcnt = 0

                                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø—É–ª –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,
            # –∏—â–µ–º —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ö–æ–ª–¥–µ—Ä–∞ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–ª
            if available_liquidity == 0 and len(sorted_holders) > 0:
                biggest_holder = sorted_holders[0]  # –ü–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ = —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
                if biggest_holder[1]['pcnt'] > 30:  # –ï—Å–ª–∏ –¥–µ—Ä–∂–∏—Ç >30% —Ç–æ–∫–µ–Ω–æ–≤
                    self.logger.info(f"üèä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ö–æ–ª–¥–µ—Ä): {biggest_holder[0]} ({biggest_holder[1]['pcnt']:.2f}%)")
                    available_liquidity = biggest_holder[1]['pcnt']
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—É–ª –≤ –∫—ç—à–µ
                    if self.current_token_address in self.token_data_cache:
                        if 'top10holders' in self.token_data_cache[self.current_token_address]:
                            self.token_data_cache[self.current_token_address]['top10holders'][biggest_holder[0]]['isPool'] = True
                        self.token_data_cache[self.current_token_address]['liquidityPoolAddress'] = biggest_holder[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            dev_address = None
            base_token_audit = metrics.get('baseTokenAudit', {})
            if base_token_audit:
                dev_address = base_token_audit.get('deployerAddress')
            
            count_find_eboshers = 0
            find_eboshers = []

            for wallet, value in sorted_holders:
                if value['isPool']:
                    self.logger.debug(f"üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å {wallet} –Ω–∞ {value['pcnt']}%")
                    available_liquidity = value['pcnt']
                    continue
                total_pcnt_holders += value['pcnt']
                if value['isBundler']:
                    self.logger.debug(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω–¥–ª–µ—Ä {wallet} —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–ª–µ—Ä–æ–≤ –∏–º–µ—é—â–∏–π {value['pcnt']}%")
                    continue
                if value['insider']:
                    self.logger.debug(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Å–∞–π–¥–µ—Ä {wallet} —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–ª–µ—Ä–æ–≤ –∏–º–µ—é—â–∏–π {value['pcnt']}%")
                    continue
                if dev_address and wallet == dev_address:
                    self.logger.debug(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {wallet} —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–º–µ—é—â–∏–π {value['pcnt']}%")
                    continue
                if value['pcnt'] > max_holders_pcnt:
                    max_holders_pcnt = value['pcnt']
                if wallet in top_eboshers:
                    # if value['pcnt'] < 1:
                    #     continue
                    if value['join_date']:
                        count_find_eboshers += 1
                        dt = datetime.fromtimestamp(value['join_date'])
                        find_eboshers.append(f"{wallet} ({value['pcnt']:.1f}%) | {dt.strftime('%Y-%m-%d %H:%M:%S')}")
                    else:
                        find_eboshers.append(f"{wallet} ({value['pcnt']:.1f}%) | –Ω–µ—Ç –¥–∞—Ç—ã")
                top10HoldersPcnt += value['pcnt'] or 0
                top10Holders += f"{round(value['pcnt'] or 0, 2)}% "
                average_holders_pcnt += value['pcnt'] or 0
                if index < 10:
                    top_10_holders += f"{round(value['pcnt'] or 0, 2)}% "
                    top_10_holders_total_pcnt += value['pcnt'] or 0
                    average_top_10_holders_pcnt += value['pcnt'] or 0
                    index += 1
            if len(sorted_holders) > 0:
                average_holders_pcnt = average_holders_pcnt / len(sorted_holders)
                average_top_10_holders_pcnt = average_top_10_holders_pcnt / 10
            else:
                average_holders_pcnt = 0
                average_top_10_holders_pcnt = 0

            if self.token_metrics.max_top_10_holders_pcnt_before_dev_exit < top_10_holders_total_pcnt and dev_percent > 2:
                self.logger.info(f"üîé –û–±–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¢–û–ü-10 —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞: {top_10_holders_total_pcnt}%")
                self.token_metrics.max_top_10_holders_pcnt_before_dev_exit = top_10_holders_total_pcnt

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.logger.info(f"\nüìä –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö –¥–ª—è {self.token_address[:8]}:")
            self.logger.info(f"‚è∞ –í–æ–∑—Ä–∞—Å—Ç: {(int(time.time()) - metrics.get('marketCreatedAt', 0))} —Å–µ–∫")
            self.logger.info(f"üîé –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {round(available_liquidity, 2)}%")
            self.logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: {total_holders}")
            self.logger.info(f"üèÜ –•–æ–ª–¥–µ—Ä—ã –¥–µ—Ä–∂–∞—Ç: {top10HoldersPcnt:.1f}% ({total_pcnt_holders:.1f}%)")
            self.logger.info(f"üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {top10Holders}")
            self.logger.info(f"üèÜ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {average_holders_pcnt:.1f}%")
            self.logger.info(f"üèÜ –¢–û–ü-10: {top_10_holders_total_pcnt:.1f}% ({top_10_holders})")
            self.logger.info(f"üèÜ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¢–û–ü-10: {average_top_10_holders_pcnt:.1f}%")
            self.logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: {total_bundlers} ({bundles_percent:.1f}%)")
            self.logger.info(f"üë®‚Äçüíº Dev %: {dev_percent:.1f}%")
            self.logger.info(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.2f}")
            self.logger.info(f"üí∞ Market Cap: ${market_cap:,.2f}")
            self.logger.info(f"üÜï Fresh Wallets: {fresh_wallets} ({fresh_wallets_sol:.2f} SOL)")
            self.logger.info(f"üéØ –°–Ω–∞–π–ø–µ—Ä—ã: {snipers_percent:.1f}% ({snipers_count})")
            self.logger.info(f"üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—ã: {insiders_percent:.1f}%")
            if find_eboshers:
                self.logger.info(f"üë®‚Äçüíº Eboshers: {len(find_eboshers)} —à—Ç")
                for i, ebosher in enumerate(find_eboshers, 1):
                    self.logger.info(f"    {i}. {ebosher}")
            else:
                self.logger.info("üë®‚Äçüíº Eboshers: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            
            self.logger.info(f"üìà –î–ò–ù–ê–ú–ò–ö–ê –†–û–°–¢–ê:")
            self.logger.info(f"üë• –•–æ–ª–¥–µ—Ä—ã: +{growth['holders_growth']:.2f}/–º–∏–Ω")
            self.logger.info(f"üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: +{growth['bundlers_growth']:.2f}/–º–∏–Ω")
            self.logger.info(f"üí∞ –¶–µ–Ω–∞: +${growth['price_growth']:.8f}/–º–∏–Ω")

            if self.last_top10_holders_percent > top_10_holders_total_pcnt:
                self.top10_holders_is_sold = True
                self.top10_holders_sold_percent += self.last_top10_holders_percent - top_10_holders_total_pcnt
            else:
                if self.top10_holders_is_sold:
                    self.top10_holders_bought_percent += top_10_holders_total_pcnt - self.last_top10_holders_percent

            self.last_top10_holders_percent = top_10_holders_total_pcnt

            if f"{top_10_holders_total_pcnt:.1f}" in self.top_10_holders_snapshots:
                self.top_10_holders_snapshots[f"{top_10_holders_total_pcnt:.1f}"] += 1
            else:
                self.top_10_holders_snapshots[f"{top_10_holders_total_pcnt:.1f}"] = 1

            self.logger.info(f"üèÜ –î–∏–Ω–∞–º–∏–∫–∞ –¢–û–ü-10: -{self.top10_holders_sold_percent:.1f}% (+{self.top10_holders_bought_percent:.1f}%)")

            if self.top10_holders_sold_percent > self.top10_holders_bought_percent and self.top10_holders_bought_percent > 0 and top_10_holders_total_pcnt > 13:
                self.top_10_holders_bought_more_than_they_dumped = False
            
            activity_conditions = {
                # 'time_ok': (int(time.time()) - metrics.get('marketCreatedAt', 0)) < 120,
                # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Ö–æ–ª–¥–µ—Ä–∞–º
                # 'holders_min': total_holders >= 30,  # –ú–∏–Ω–∏–º—É–º 30 —Ö–æ–ª–¥–µ—Ä–æ–≤
                # 'holders_max': total_holders <= 100,  # –ú–∞–∫—Å–∏–º—É–º 100 —Ö–æ–ª–¥–µ—Ä–æ–≤
                # 'available_liquidity': available_liquidity < 70,
                # 'max_top_10_holders_pcnt_before_dev_exit': self.token_metrics.max_top_10_holders_pcnt_before_dev_exit <= 40,
                # 'holders_never_dumped': (
                #     self.token_metrics.max_holders <= 100  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –±–æ–ª—å—à–µ 100 —Ö–æ–ª–¥–µ—Ä–æ–≤
                # ),
                # 'top10_holders_bought_sold_correlated': (
                    # self.top10_holders_sold_percent < self.top10_holders_bought_percent
                # ),
                # 'top_10_holders_bought_more_than_they_dumped': self.top_10_holders_bought_more_than_they_dumped,
                'count_find_eboshers': count_find_eboshers >= 3,
                # 'max_holders_pcnt': 3 < max_holders_pcnt <= 7,
                # –£—Å–ª–æ–≤–∏—è –ø–æ –±–∞–Ω–¥–ª–µ—Ä–∞–º
                # 'bundlers_ok': (
                #     self.token_metrics.max_bundlers_after_dev_exit >= 1 and
                #     total_bundlers >= 1 # % –±–∞–Ω–¥–ª–µ—Ä–æ–≤ >= 1 —à—Ç
                # ),
                # 'bundlers_before_dev_ok': (
                #     self.token_metrics.max_bundlers_before_dev_exit <= 60  # –ú–∞–∫—Å–∏–º—É–º 60% –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
                # ),
                # –£—Å–ª–æ–≤–∏—è –ø–æ –¥–µ–≤—É
                # 'dev_percent_ok': (
                #     dev_percent <= 2  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ <= 2%
                # ),
                # 'average_holders_pcnt_ok': (
                #     average_holders_pcnt > 1
                # ),
                # 'average_top_10_holders_pcnt': (
                #     average_top_10_holders_pcnt >= 2
                # ),
                
                # –£—Å–ª–æ–≤–∏—è –ø–æ —Å–Ω–∞–π–ø–µ—Ä–∞–º
                # 'snipers_ok': (
                #     snipers_count <= 20 and  # ‚â§20 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
                #     (
                #         snipers_percent <= 3.5 or  # ‚â§3.5% –ò–õ–ò
                #         (
                #             any(float(m.get('snipersHoldingPcnt', 0) or 0) > 0 for m in metrics_history) and
                #             max(float(m.get('snipersHoldingPcnt', 0) or 0) 
                #                 for m in metrics_history 
                #                 if float(m.get('snipersHoldingPcnt', 0) or 0) > 0) > snipers_percent and
                #             snipers_percent <= 5.0 and  # ‚â§5% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                #             check_rapid_exit('snipersHoldingPcnt', ratio=3, max_seconds=120)  # –° rapid exit
                #         )
                #     )
                # ),
                # 'snipers_not_bundlers': self.token_metrics.check_snipers_bundlers_correlation(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–Ω–∞–π–ø–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏

                # –£—Å–ª–æ–≤–∏—è –ø–æ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º
                # 'insiders_ok': (
                #     insiders_percent <= 15 or  # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 15%
                #     (
                #         any(float(m.get('insidersHoldingPcnt', 0) or 0) > 0 for m in self.token_metrics.metrics_history) and
                #         max(float(m.get('insidersHoldingPcnt', 0) or 0) 
                #             for m in self.token_metrics.metrics_history 
                #             if float(m.get('insidersHoldingPcnt', 0) or 0) > 0) > insiders_percent and
                #         insiders_percent <= 22.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 22% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                #         self.token_metrics.check_rapid_exit('insidersHoldingPcnt', ratio=3, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                #     )
                # ),

                # –£—Å–ª–æ–≤–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç—É
                # 'min_liquidity': liquidity >= 10000,
                # 'min_mcap': market_cap >= 13000,
                # 'holders_growth': growth['holders_growth'] >= 2900,  # –†–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤ ‚â•2900/–º–∏–Ω

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                'can_notify': self.token_metrics.can_send_notification('active'),

                # 'snipers_not_insiders': self.token_metrics.check_snipers_insiders_correlation(),
                # 'bundlers_snipers_exit_not_correlated': self.token_metrics.check_bundlers_snipers_exit_correlation(),
                # 'holders_not_correlated': await self.token_metrics.check_holders_correlation(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–±—ã—á–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ "–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–≥–æ–≤" –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if self.token_address in GENIUS_RUG_BLACKLIST:
                self.logger.info(f"({self.token_address[:8]}...) üö´ –¢–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return

            if all(activity_conditions.values()):
                # # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è "–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–≥–æ–≤"
                # self.logger.info(f"({self.token_address[:8]}...) üìä –û–ë–©–ò–ô % –í–õ–ê–î–ï–ù–ò–Ø –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í: {top_10_holders_total_pcnt:.2f}%")
                
                # # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–∑ TokenMetrics
                # holder_percentages_history = self.token_metrics.holder_percentages_history if hasattr(self.token_metrics, 'holder_percentages_history') else []
                
                # # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã –¥–æ 1000)
                # is_suspicious, suspicious_reasons = self.is_suspicious_pattern(holder_percentages_history)
                
                # self.logger.info(f"({self.token_address[:8]}...) üìà –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –¢–û–ü-–•–û–õ–î–ï–†–û–í:")
                # analysis_limit = 1000
                # analyzed_count = min(len(holder_percentages_history), analysis_limit)
                # self.logger.info(f"({self.token_address[:8]}...)    üìä –í—Å–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {len(holder_percentages_history)}, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è: {analyzed_count}")
                
                # if is_suspicious:
                #     self.logger.info(f"({self.token_address[:8]}...) üö® –ú–ê–ù–ò–ü–£–õ–Ø–¢–ò–í–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –•–û–õ–î–ï–†–û–í –û–ë–ù–ê–†–£–ñ–ï–ù–´:")
                #     for reason in suspicious_reasons:
                #         self.logger.info(f"({self.token_address[:8]}...)    ‚ö†Ô∏è {reason}")
                #     self.logger.info(f"({self.token_address[:8]}...) ‚ùå –¢–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
                    
                #     # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—Å–µ–≥–¥–∞
                #     GENIUS_RUG_BLACKLIST.add(self.token_address)
                #     save_blacklist()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                #     self.logger.info(f"({self.token_address[:8]}...) üö´ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ä–∞–∑–º–µ—Ä: {len(GENIUS_RUG_BLACKLIST)})")
                    
                #     # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                #     return
                # else:
                #     self.logger.info(f"({self.token_address[:8]}...) ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –∑–¥–æ—Ä–æ–≤—ã–µ")
                #     self.logger.info(f"({self.token_address[:8]}...)    ‚úì –¢–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã")
                #     self.logger.info(f"({self.token_address[:8]}...)    ‚úì –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π")
                
                self.logger.info(f"üöÄ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –¢–û–ö–ï–ù–ê –ù–ê–ô–î–ï–ù–ê: {self.token_address[:8]}")
                self.logger.info("‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
                for condition, value in activity_conditions.items():
                    self.logger.info(f"  ‚Ä¢ {condition}: {value}")
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                self.logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {self.token_address[:8]}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                if self.token_address in SENT_NOTIFICATIONS or self.pending:
                    self.logger.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {self.token_address[:8]} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
                    return
                await self.send_activity_notification(metrics, growth)
            else:
                self.logger.info("‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
                for condition, value in activity_conditions.items():
                    if not value:
                        self.logger.info(f"  ‚Ä¢ {condition}: {value}")
            
            # # 2. –°–∏–≥–Ω–∞–ª –ø–æ–º–ø–∞ (–±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç)
            # pump_conditions = {
            #     'holders_growth': growth['holders_growth'] > 0.5,
            #     'price_growth': growth['price_growth'] > 0,
            #     'activity_ok': (
            #         total_bundlers > 0 or           # –ï—Å—Ç—å –±–∞–Ω–¥–ª–µ—Ä—ã
            #         fresh_wallets >= 5 or           # –ú–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
            #         fresh_wallets_sol >= 2.0        # –ë–æ–ª—å—à–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç –Ω–æ–≤—ã—Ö
            #     ),
            #     'min_liquidity': liquidity >= 20000,
            #     'min_mcap': market_cap >= 50000,
            #     'can_notify': self.token_metrics.can_send_notification('pump')
            # }
            
            # if all(pump_conditions.values()):
            #     self.logger.info(f"üî• –ë–´–°–¢–†–´–ô –†–û–°–¢ –ù–ê–ô–î–ï–ù: {self.token_address[:8]}")
            #     self.logger.info("‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
            #     for condition, value in pump_conditions.items():
            #         self.logger.info(f"  ‚Ä¢ {condition}: {value}")
            #     await self.send_pump_notification(metrics, growth)
            # else:
            #     self.logger.info("‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º –ø–æ–º–ø–∞:")
            #     for condition, value in pump_conditions.items():
            #         if not value:
            #             self.logger.info(f"  ‚Ä¢ {condition}: {value}")

            # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å –±—ã—Å—Ç—Ä—ã–º —Ä–æ—Å—Ç–æ–º –∏ –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            age = int(time.time()) - metrics.get('marketCreatedAt', 0)
            
            special_pattern_conditions = {
                'age_ok': age <= 10,  # –¢–æ–∫–µ–Ω –º–ª–∞–¥—à–µ 10 —Å–µ–∫—É–Ω–¥
                'rapid_holders_growth': growth['holders_growth'] >= 600,  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤
                'bundlers_present': total_bundlers >= 1,  # –ï—Å—Ç—å –±–∞–Ω–¥–ª–µ—Ä—ã
                'bundlers_percentage': bundles_percent >= 30,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                'high_snipers': snipers_percent >= 40,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∞–π–ø–µ—Ä–æ–≤
                'high_insiders': insiders_percent >= 40,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤
                'bundlers_growth': growth['bundlers_growth'] >= 60,  # –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤
                'min_holders': total_holders >= 15,  # –ú–∏–Ω–∏–º—É–º —Ö–æ–ª–¥–µ—Ä–æ–≤
                'can_notify': self.token_metrics.can_send_notification('special_pattern')
            }
            
            if all(special_pattern_conditions.values()):
                self.logger.info(f"‚ö° –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù –ù–ê–ô–î–ï–ù: {self.token_address[:8]}")
                self.logger.info("‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
                for condition, value in special_pattern_conditions.items():
                    self.logger.info(f"  ‚Ä¢ {condition}: {value}")
                await self.send_special_pattern_notification(metrics, growth)
            else:
                self.logger.debug("‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞:")
                for condition, value in special_pattern_conditions.items():
                    if not value:
                        self.logger.debug(f"  ‚Ä¢ {condition}: {value}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {self.token_address[:8]}: {e}")
            self.logger.error(traceback.format_exc())


    async def get_access_token(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π access_token —á–µ—Ä–µ–∑ refresh_token"""
        try:
            url = "https://securetoken.googleapis.com/v1/token?key=AIzaSyDytD3neNMfkCmjm7Ll24bJuAzZIaERw8Q"
            
            headers = {
                "Origin": "https://trade.padre.gg",
                "Referer": "https://trade.padre.gg/",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/139.0.0.0",
                "Content-Type": "application/x-www-form-urlencoded",
                "x-client-version": "Chrome/JsCore/10.9.0/FirebaseCore-web",
                "X-Firebase-GMPID": "1:678231832583:web:81243a9bc65c3c19ac92a2"
            }
            
            data = {
                "grant_type": "refresh_token",
                "refresh_token": "AMf-vBxhTitYWGSdKRnKKH7gXnsocOd3OgU0boTIozHKRP-YFalXuKKA1K4EyuSp06wFBH4NrpNJXlne_BodIXhNn2-dZhhPRfdLMkllDMxw17Fq07YQsa-6a4A5nhZR-nyFvMNwTaxg8lgl2D6b12iW_eft4rMfFw"
            }
            
            self.logger.info("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π access_token...")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        access_token = result.get('access_token')
                        if access_token:
                            self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω access_token")
                            self.logger.info(result)
                            return access_token
                        else:
                            self.logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ access_token –≤ –æ—Ç–≤–µ—Ç–µ")
                    else:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ access_token: {response.status}")
                        response_text = await response.text()
                        self.logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:200]}...")
            
            return ""
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access_token: {e}")
            return ""

    async def send_activity_notification(self, metrics: dict, growth: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.token_address in SENT_NOTIFICATIONS or self.pending:
            self.logger.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {self.token_address[:8]} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –±—ç–∫–µ–Ω–¥–æ–≤
        current_time = int(time.time())
        from_time = metrics.get('marketCreatedAt', current_time - 60)  # –ù–∞—á–∞–ª–æ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        backend = get_next_padre_backend().replace('wss://', 'https://').replace('/_multiplex', '')
        
        url = (
            f"{backend}/candles/history?"
            f"symbol=solana-{self.market_id}&"
            f"from={from_time}&"
            f"to={current_time}&"
            f"resolution=1S&"
            f"countback={current_time - from_time}"
        )

        headers = {
            "Authorization": f"Bearer {self.JWT_TOKEN}",
            "Origin": "https://trade.padre.gg",
            "Referer": "https://trade.padre.gg/",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/139.0.0.0"
        }

        self.logger.info(f"üïØÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –¥–ª—è {self.token_address[:8]} —Å {backend}...")
        self.logger.debug(f"üì° URL –∑–∞–ø—Ä–æ—Å–∞: {url}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async def fetch_candles():
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, headers=headers) as response:
                        if response.status == 200:
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ JSON
                                response_text = await response.text()
                                data = json.loads(response_text)
                                await self.check_and_notify(data)
                            except json.JSONDecodeError as e:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ JSON: {str(e)}")
                                self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}...")
                        elif response.status == 401:  # Unauthorized - —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
                            self.logger.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π...")
                            new_token = await self.get_access_token()
                            if new_token:
                                self.JWT_TOKEN = new_token
                                headers["Authorization"] = f"Bearer {self.JWT_TOKEN}"
                                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                                async with session.get(url, headers=headers) as retry_response:
                                    if retry_response.status == 200:
                                        response_text = await retry_response.text()
                                        data = json.loads(response_text)
                                        await self.check_and_notify(data)
                                    else:
                                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–µ–π ({retry_response.status}): {url}")
                                        response_text = await retry_response.text()
                                        self.logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:200]}...")
                        else:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–µ–π ({response.status}): {url}")
                            response_text = await response.text()
                            self.logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:200]}...")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–≤–µ—á–µ–π: {str(e)}")
            finally:
                self.pending = False

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(fetch_candles())
        self.pending = True
    
    async def send_pump_notification(self, metrics: dict, growth: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–º–ø–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.token_address in SENT_NOTIFICATIONS:
            last_pump = SENT_NOTIFICATIONS[self.token_address].get('pump', 0)
            if time.time() - last_pump < 300:  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                self.logger.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–º–ø–µ –¥–ª—è {self.token_address[:8]} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
                return

        message = (
            f"üî• <b>–°–ò–õ–¨–ù–´–ô –†–û–°–¢!</b>\n\n"
            f"ü™ô <b>{metrics.get('name', 'Unknown')}</b> ({metrics.get('symbol', 'UNK')})\n"
            f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{self.token_address}</code>\n\n"
            
            f"üìä <b>–ú–ï–¢–†–ò–ö–ò –†–û–°–¢–ê:</b>\n"
            f"üë• <b>–•–æ–ª–¥–µ—Ä—ã:</b> +{self.safe_format(growth.get('holders_growth'), '.1f')}/–º–∏–Ω\n"
            f"üì¶ <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> +{self.safe_format(growth.get('bundlers_growth'), '.1f')}/–º–∏–Ω\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> +${self.safe_format(growth.get('price_growth'), ',.8f')}/–º–∏–Ω\n\n"
            
            f"üìà <b>–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:</b>\n"
            f"üë• <b>–í—Å–µ–≥–æ —Ö–æ–ª–¥–µ—Ä–æ–≤:</b> {metrics.get('total_holders', 0)}\n"
            f"üì¶ <b>–í—Å–µ–≥–æ –±–∞–Ω–¥–ª–µ—Ä–æ–≤:</b> {metrics.get('totalBundlesCount', 0)}\n"
            f"üíµ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${self.safe_format(metrics.get('basePriceInUsdUi'), ',.8f')}\n"
            f"üí∞ <b>SOL –≤ –±–∞–Ω–¥–ª–∞—Ö:</b> {self.safe_format(metrics.get('totalSolSpentInBundles'), '.2f')}\n"
            f"üÜï <b>Fresh Wallets:</b> {(metrics.get('freshWalletBuys', {}) or {}).get('count', 0)}"
        )
        
        keyboard = [
            [
                {"text": "üöÄ Axiom", "url": f"https://axiom.trade/t/{self.token_address}"},
                {"text": "üöÄ Padre GG", "url": f"https://trade.padre.gg/trade/solana/{self.token_address}"}
            ],
        ]
        
        if await self.send_telegram_message(message, keyboard):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if self.token_address not in SENT_NOTIFICATIONS:
                SENT_NOTIFICATIONS[self.token_address] = {}
            SENT_NOTIFICATIONS[self.token_address]['pump'] = time.time()
            self.logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ –¥–ª—è {self.token_address[:8]}")
    
    async def send_special_pattern_notification(self, metrics: dict, growth: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤–µ—Ç–∫—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.token_address in SENT_NOTIFICATIONS:
            last_special = SENT_NOTIFICATIONS[self.token_address].get('special_pattern', 0)
            if time.time() - last_special < 300:  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                self.logger.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ –¥–ª—è {self.token_address[:8]} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
                return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        message = (
            f"<code>{self.token_address}</code>\n\n"
            f"<i><a href='https://axiom.trade/t/{self.token_address}'>axiom</a> <a href='https://dexscreener.com/solana/{self.token_address}'>dexscreener</a></i>\n\n"
            f"<i>1.5x {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} <b>¬© by Wormster</b></i>"
        )
        
        keyboard = [
            [
                {"text": "QUICK BUY", "url": f"https://t.me/alpha_web3_bot?start=call-dex_men-SO-{self.token_address}"}
            ]
        ]
        
        if await self.send_special_pattern_telegram_message(message, keyboard):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if self.token_address not in SENT_NOTIFICATIONS:
                SENT_NOTIFICATIONS[self.token_address] = {}
            SENT_NOTIFICATIONS[self.token_address]['special_pattern'] = time.time()
            self.logger.info(f"‚ö° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ –¥–ª—è {self.token_address[:8]}")
    
    async def process_jupiter_token(self, token_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter"""
        try:
            if token_data.get('type') != 'new':
                return
            
            pool = token_data.get('pool', {})
            base_asset = pool.get('baseAsset', {})
            token_address = base_asset.get('id')
            
            if not token_address:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Jupiter")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = None
            try:
                if 'createdAt' in pool:
                    created_at = int(datetime.strptime(pool['createdAt'], "%Y-%m-%dT%H:%M:%SZ").timestamp())
                elif 'firstPool' in base_asset and 'createdAt' in base_asset['firstPool']:
                    created_at = int(datetime.strptime(base_asset['firstPool']['createdAt'], "%Y-%m-%dT%H:%M:%SZ").timestamp())
            except (ValueError, TypeError) as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            
            symbol = base_asset.get('symbol', 'UNK')
            name = base_asset.get('name', 'Unknown Token')
            
            self.logger.info(f"üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Jupiter: {name} ({token_address[:8]}...)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–µ—à
            if token_address not in self.token_data_cache:
                self.token_data_cache[token_address] = {
                    'symbol': symbol,
                    'name': name,
                    'marketCreatedAt': created_at,
                    'total_holders': 0,
                    'devHoldingPcnt': 0,
                    'tradingAppTxns': 0,
                    'freshWalletBuys': {'count': 0, 'sol': 0},
                    'insidersHoldingPcnt': 0,
                    'totalSnipers': 0,
                    'bundlesHoldingPcnt': {'current': 0, 'ath': 0},
                    'totalBundlesCount': 0,
                    'totalSolSpentInBundles': 0,
                    'totalTokenBoughtInBundles': 0,
                    'totalSolFees': 0,
                    'snipersHoldingPcnt': 0
                }
            
            self.logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω {name} ({token_address[:8]}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            await self.padre_manager.add_token(token_address)
            self.logger.info(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ default_{token_address[:8]} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {name}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Jupiter —Ç–æ–∫–µ–Ω–∞: {e}")
            self.logger.error(traceback.format_exc())

class MultiplePadreManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º Padre WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, connection_interval: float = 30.0):
        self.connection_interval = connection_interval
        self.active_connections: Dict[str, PadreWebSocketClient] = {}  # {token_address: client}
        self.connection_tasks: Dict[str, asyncio.Task] = {}
        self.running = False
        self.next_connection_time = 0
        self.cleanup_task = None
        
        logger.info(f"üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MultiplePadreManager: –±–µ–∑ –ª–∏–º–∏—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, —Ç–∞–π–º-–∞—É—Ç 10 –º–∏–Ω—É—Ç")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.running = True
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.cleanup_task = asyncio.create_task(self._cleanup_loop())
        logger.info("‚úÖ MultiplePadreManager –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for token_address in list(self.active_connections.keys()):
            await self._remove_connection(token_address, reason="–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        logger.info("‚úÖ MultiplePadreManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _cleanup_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            while self.running:
                current_time = asyncio.get_event_loop().time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                for token_address, client in list(self.active_connections.items()):
                    if client.is_connection_expired():
                        token_logger = get_token_logger(token_address)
                        token_logger.info(f"‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å—Ç–µ–∫—à–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {token_address[:8]}")
                        await self._remove_connection(token_address, reason="—Ç–∞–π–º-–∞—É—Ç 10 –º–∏–Ω—É—Ç")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∂–µ)
                if int(current_time) % 60 == 0:
                    active_count = len(self.active_connections)
                    if active_count > 0:
                        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {active_count}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É
                        total_remaining = sum(client.get_remaining_time() for client in self.active_connections.values())
                        avg_remaining = total_remaining / active_count
                        logger.info(f"‚è≥ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {avg_remaining/60:.1f}–º")
                
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
        except asyncio.CancelledError:
            logger.info("üõë –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    
    async def add_token(self, token_address: str, token_data: dict = None) -> Optional[PadreWebSocketClient]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            if token_address in self.active_connections:
                token_logger = get_token_logger(token_address)
                token_logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return self.active_connections[token_address]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            client = PadreWebSocketClient(token_address=token_address)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if token_data:
                client.initial_token_data = token_data
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            task = asyncio.create_task(client.start())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            self.active_connections[token_address] = client
            self.connection_tasks[token_address] = task
            
            token_logger = get_token_logger(token_address)
            token_logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}")
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
            
            return client
            
        except Exception as e:
            token_logger = get_token_logger(token_address)
            token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}: {e}")
            return None

    async def _remove_connection(self, token_address: str, reason: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            token_logger = get_token_logger(token_address)
            token_logger.info(f"üîå –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {token_address[:8]} –∏–∑-–∑–∞ {reason}")
            del self.active_connections[token_address]
            del self.connection_tasks[token_address]
        except Exception as e:
            token_logger = get_token_logger(token_address)
            token_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {token_address[:8]}: {e}")

class TokenMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ pump_bot.py"""
    
    def __init__(self, padre_manager: MultiplePadreManager):
        self.padre_manager = padre_manager
        
    async def add_token_for_analysis(self, token_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            contract_address = token_data.get('mint', token_data.get('address'))
            
            if not contract_address:
                logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–µ–∑ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
                return
            
            symbol = token_data.get('symbol', 'UNK')
            logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω {symbol} ({contract_address[:8]}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö
            client = await self.padre_manager.add_token(contract_address, token_data)
            
            if client:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
                logger.info(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {client.connection_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol}")
                # await client.subscribe_to_token_data(contract_address)
            else:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                logger.info(f"üé≤ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Å–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}")
                await self.simulate_bundler_analysis(contract_address, token_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def simulate_bundler_analysis(self, contract_address: str, token_data: dict):
        """–°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            import random
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö
            bundler_count = random.randint(50, 300)
            bundler_percentage = (bundler_count / 1000) * 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1000 –æ–±—â–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
            
            symbol = token_data.get('symbol', 'UNK')
            logger.info(f"üéØ –°–∏–º—É–ª—è—Ü–∏—è: {symbol} –∏–º–µ–µ—Ç {bundler_count} –±–∞–Ω–¥–ª–µ—Ä–æ–≤ ({bundler_percentage:.1f}%)")
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if bundler_percentage >= MIN_BUNDLER_PERCENTAGE:
                await self.send_bundler_notification(contract_address, token_data, bundler_count, bundler_percentage, simulated=True)
                
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            if contract_address in pending_tokens:
                del pending_tokens[contract_address]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {e}")
    
    async def send_bundler_notification(self, contract_address: str, token_data: dict, bundler_count: int, bundler_percentage: float, simulated: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–∞–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            symbol = token_data.get('symbol', 'UNK')
            name = token_data.get('name', symbol)
            dex_source = token_data.get('dex_source', 'Unknown')
            market_cap = token_data.get('market_cap', 0)
            
            sim_tag = " üé≤ [–°–ò–ú–£–õ–Ø–¶–ò–Ø]" if simulated else ""
            
            message = (
                f"üö® <b>–í–´–°–û–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –ë–ê–ù–î–õ–ï–†–û–í!{sim_tag}</b>\n\n"
                f"ü™ô <b>{name}</b> ({symbol})\n"
                f"üìç <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> <code>{contract_address}</code>\n"
                f"üìä <b>–ë–∞–Ω–¥–ª–µ—Ä—ã:</b> {bundler_count} ({bundler_percentage:.1f}%)\n"
                f"üí∞ <b>Market Cap:</b> ${market_cap:,.0f}\n"
                f"üè™ <b>DEX:</b> {dex_source}\n\n"
                f"‚ö° <b>–ú–∏–Ω. –ø–æ—Ä–æ–≥:</b> {MIN_BUNDLER_PERCENTAGE}%\n"
                f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ü—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {bundler_percentage - MIN_BUNDLER_PERCENTAGE:.1f}%"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    {"text": "üìä DexScreener", "url": f"https://dexscreener.com/solana/{contract_address}"},
                    {"text": "üöÄ Pump.fun", "url": f"https://pump.fun/{contract_address}"}
                ],
                [{"text": "üíé Jupiter", "url": f"https://jup.ag/swap/SOL-{contract_address}"}]
            ]
            
            success = await self.send_telegram_message(message, keyboard)
            
            if success:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol} —Å {bundler_percentage:.1f}% –±–∞–Ω–¥–ª–µ—Ä–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–∫–µ–Ω–µ {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–¥–ª–µ—Ä–∞—Ö: {e}")
    
    async def send_telegram_message(self, message: str, keyboard: List[List[Dict[str, str]]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            current_time = time.time()
            if hasattr(self, 'last_telegram_time'):
                time_since_last = current_time - self.last_telegram_time
                if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(3 - time_since_last)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = "-1002680160752"  # ID —á–∞—Ç–∞
            thread_id = "13134"  # ID —Ç—Ä–µ–¥–∞
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            
            data = {
                "chat_id": chat_id,
                "message_thread_id": thread_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            
            if keyboard:
                data["reply_markup"] = {"inline_keyboard": keyboard}
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: chat={chat_id}, thread={thread_id}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 429:  # Too Many Requests
                        retry_after = (await response.json()).get('parameters', {}).get('retry_after', 30)
                        logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ñ–¥–µ–º {retry_after} —Å–µ–∫.")
                        await asyncio.sleep(retry_after)
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑
                        async with session.post(url, json=data) as retry_response:
                            if retry_response.status != 200:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                                return False
                    elif response.status != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
                        return False
                        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_telegram_time = time.time()
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Bundle Analyzer –¥–ª—è A/B —Ç–µ—Å—Ç–æ–≤...")
    logger.info(f"‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤: {MIN_BUNDLER_PERCENTAGE}%")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –Ω–æ–≤—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏)
    padre_manager = MultiplePadreManager(connection_interval=30.0)
    token_monitor = TokenMonitor(padre_manager)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("üîó –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Padre —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        await padre_manager.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await padre_manager.stop()
        logger.info("‚úÖ Bundle Analyzer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if TELEGRAM_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_TOKEN!")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    asyncio.run(main()) 