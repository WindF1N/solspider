#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–∞—Ö.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–ª –±—ã –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç.
"""

import os
import re
import logging
from datetime import datetime
from typing import List, Dict, Tuple, Optional
import asyncio
import time
from concurrent.futures import ProcessPoolExecutor
import multiprocessing

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ "–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —Ä–∞–≥–∏"
GENIUS_RUG_BLACKLIST = set()
BLACKLIST_FILE = "genius_rug_blacklist.txt"

# –°—á–µ—Ç—á–∏–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—Å <30 —Ö–æ–ª–¥–µ—Ä–∞–º–∏)
filtered_low_holders_count = 0

def load_blacklist():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    global GENIUS_RUG_BLACKLIST
    try:
        if os.path.exists(BLACKLIST_FILE):
            with open(BLACKLIST_FILE, 'r') as f:
                GENIUS_RUG_BLACKLIST = set(line.strip() for line in f if line.strip())
            print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(GENIUS_RUG_BLACKLIST)} —Ç–æ–∫–µ–Ω–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

def save_blacklist():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(BLACKLIST_FILE, 'w') as f:
            for token in sorted(GENIUS_RUG_BLACKLIST):
                f.write(f"{token}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

def process_single_token_sync(log_path: str) -> Dict:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è multiprocessing"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        tester = TokenFilterTester()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(tester.analyze_token_with_full_criteria(log_path))
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            log_token_result(result)
            return result
        finally:
            loop.close()
            
    except Exception as e:
        token_id = os.path.basename(log_path).replace('.log', '')
        import traceback
        full_error = traceback.format_exc()
        logger.error(f"üí• –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {token_id}: {full_error}")
        
        error_result = {
            'token_id': token_id,
            'decision': 'ERROR',
            'reason': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'
        }
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–∂–µ
        log_token_result(error_result)
        return error_result

# –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_blacklist()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
file_logger = logging.getLogger('test_filter_results')
file_logger.setLevel(logging.INFO)
file_handler = logging.FileHandler('test_filter.log', mode='w', encoding='utf-8')
file_formatter = logging.Formatter('%(asctime)s - %(message)s')
file_handler.setFormatter(file_formatter)
file_logger.addHandler(file_handler)
file_logger.propagate = False  # –ù–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å

def log_token_result(result: Dict):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª"""
    try:
        if not isinstance(result, dict):
            file_logger.error(f"‚ùå log_token_result –ø–æ–ª—É—á–∏–ª –Ω–µ dict: {type(result)}")
            return
            
        token_id = result.get('token_id', 'UNKNOWN')
        decision = result.get('decision', 'UNKNOWN')
        reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')
        notification_type = result.get('notification_type', 'NONE')
        
        # –§–ò–õ–¨–¢–†: –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–∂–µ 30 —Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏
        holders = result.get('holders', 0)
        if decision == 'WOULD_REJECT' and holders < 30:
            global filtered_low_holders_count
            filtered_low_holders_count += 1
            return  # –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ä–∞–∑–≤–∏—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        token_address = result.get('token_address', token_id)
        log_line = f"TOKEN: {token_address} | DECISION: {decision} | TYPE: {notification_type}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        metrics = []
        if 'holders' in result:
            metrics.append(f"HOLDERS: {result['holders']}")
        if 'market_cap' in result:
            metrics.append(f"MCAP: ${result['market_cap']:,.0f}" if result['market_cap'] else "MCAP: -")
        if 'liquidity' in result:
            metrics.append(f"LIQUIDITY: ${result['liquidity']:,.0f}" if result['liquidity'] else "LIQUIDITY: -")
        if 'dev_percent' in result:
            metrics.append(f"DEV: {result['dev_percent']:.1f}%")
        if 'snipers_percent' in result:
            metrics.append(f"SNIPERS: {result['snipers_percent']:.1f}%")
        if 'insiders_percent' in result:
            metrics.append(f"INSIDERS: {result['insiders_percent']:.1f}%")
        if 'bundler_count' in result:
            metrics.append(f"BUNDLERS: {result['bundler_count']}")
        if 'bundler_percentage' in result:
            metrics.append(f"BUNDLER%: {result['bundler_percentage']:.1f}%")
        if 'snapshots_checked' in result:
            metrics.append(f"SNAPSHOTS: {result['snapshots_checked']}/{result.get('total_snapshots', '?')}")
        if 'snapshot_number' in result:
            metrics.append(f"PASS_AT: #{result['snapshot_number']}")
        
        if metrics:
            log_line += f" | {' | '.join(metrics)}"
        
        # –ü—Ä–∏—á–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ
        log_line += f" | REASON: {reason}"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        if decision == 'WOULD_SEND':
            if result.get('healthy_holder_patterns'):
                file_logger.info(f"‚úÖ ACTIVITY PASS - {log_line}")
            else:
                file_logger.info(f"‚úÖ ACTIVITY PASS - {log_line}")
        elif decision == 'WOULD_REJECT':
            if result.get('all_conditions_passed'):
                # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –≤—Å–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ—à–ª–∏ –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º —Ö–æ–ª–¥–µ—Ä–æ–≤
                file_logger.info(f"üö® ACTIVITY REJECT (HOLDER PATTERNS) - {log_line}")
            else:
                file_logger.info(f"‚ùå ACTIVITY REJECT - {log_line}")
        elif decision == 'BLACKLISTED':
            file_logger.info(f"‚ö´ BLACKLISTED - {log_line}")
        elif decision == 'ERROR':
            file_logger.info(f"üí• ERROR - {log_line}")
        elif decision == 'NO_DATA':
            file_logger.info(f"üìä NO_DATA - {log_line}")
        else:
            file_logger.info(f"‚ùì UNKNOWN - {log_line}")
            
    except Exception as e:
        file_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        import traceback
        file_logger.error(f"üìä –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        file_logger.error(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ result: {result}")


class TokenMetrics:
    """–ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–∞ –∏–∑ bundle_analyzer.py"""
    def __init__(self, token_address: str, creation_time: int):
        self.token_address = token_address
        self.creation_time = creation_time
        self.metrics_history = []
        self.max_dev_percent = 0
        self.max_bundlers_after_dev_exit = 0
        self.max_bundlers_before_dev_exit = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
        self.max_top_10_holders_pcnt_before_dev_exit = 0
        self.max_holders = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        self.dev_exit_time = None
        self.last_notification_time = 0
        self.last_notification_type = None  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.holder_percentages_history = []  # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        
    def can_send_notification(self, notification_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('active', 'pump', etc)
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        current_time = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        MIN_NOTIFICATION_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if current_time - self.last_notification_time < MIN_NOTIFICATION_INTERVAL:
            return False
        
        # –ï—Å–ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if self.last_notification_type != notification_type:
            return True
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.last_notification_time = current_time
        self.last_notification_type = notification_type
        return True
    
    def add_metrics(self, metrics: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–µ–µ
        if 'timestamp' not in metrics:
            metrics['timestamp'] = int(time.time())

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞ –∏ –±–∞–Ω–¥–ª–µ—Ä–æ–≤
        dev_holding = metrics.get('devHoldingPcnt')
        dev_percent = float(dev_holding) if dev_holding is not None else 0
        
        bundles_percent = metrics.get('bundlesHoldingPcnt')
        bundles_percent = float(bundles_percent.get('current', 0) if isinstance(bundles_percent, dict) else (bundles_percent if bundles_percent is not None else 0))

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞
        if dev_percent > self.max_dev_percent:
            self.max_dev_percent = dev_percent

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –¥–µ–≤–∞
        if self.dev_exit_time is None and dev_percent <= 2 and self.metrics_history:
            last_dev_percent = float(self.metrics_history[-1].get('devHoldingPcnt', 0) or 0)
            if last_dev_percent > 0:
                self.dev_exit_time = metrics['timestamp']

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–≤–∞
        if self.dev_exit_time is None:
            # –î–æ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
            if bundles_percent > self.max_bundlers_before_dev_exit:
                self.max_bundlers_before_dev_exit = bundles_percent
        else:
            # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–µ–≤–∞
            if bundles_percent > self.max_bundlers_after_dev_exit:
                self.max_bundlers_after_dev_exit = bundles_percent
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        total_holders = int(metrics.get('total_holders', 0) or 0)
        if total_holders > self.max_holders:
            self.max_holders = total_holders
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        top10holders = metrics.get("top10holders", {})
        if top10holders and len(top10holders) >= 3:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            sorted_holders = sorted(
                top10holders.items(),
                key=lambda item: item[1]['pcnt'],
                reverse=True
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ (–Ω–µ –ø—É–ª—ã, –Ω–µ –±–∞–Ω–¥–ª–µ—Ä—ã)
            # –ò —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Ç–æ–ø-3 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            current_percentages = []
            top3_snipers_count = 0
            
            for wallet, value in sorted_holders:
                if not value.get('isPool', False) and not value.get('isBundler', False):
                    current_percentages.append(value['pcnt'])
                    
                    # –°—á–∏—Ç–∞–µ–º —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3
                    if len(current_percentages) <= 3 and value.get('isSniper', False):
                        top3_snipers_count += 1
                    
                    if len(current_percentages) >= 10:  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                        break
            
            if len(current_percentages) >= 3:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω–∞–π–ø–µ—Ä–∞—Ö –≤ —Ç–æ–ø-3
                snapshot_data = {
                    'percentages': current_percentages,
                    'top3_snipers': top3_snipers_count,
                    'total_snipers_percent': float(metrics.get('snipersHoldingPcnt', 0) or 0)
                }
                self.holder_percentages_history.append(snapshot_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.metrics_history.append(metrics.copy())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å—Å—ã–ª–æ–∫


class TokenFilterTester:
    def __init__(self):
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ACTIVITY —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ—á–Ω–æ –∏–∑ bundle_analyzer.py)
        self.MIN_HOLDERS_FOR_ACTIVITY = 30          # >= 30 —Ö–æ–ª–¥–µ—Ä–æ–≤
        self.MAX_HOLDERS_FOR_ACTIVITY = 130         # <= 130 —Ö–æ–ª–¥–µ—Ä–æ–≤
        self.MAX_HOLDERS_NEVER_DUMPED = 150         # <= 150 —Ö–æ–ª–¥–µ—Ä–æ–≤ –º–∞–∫—Å–∏–º—É–º
        self.MIN_LIQUIDITY = 10000                  # >= 10000 –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        self.MIN_GROWTH_RATE = 2900                 # >= 2900/–º–∏–Ω —Ä–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤
        self.MAX_DEV_PERCENT = 2                    # <= 2% –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≤–∞
        self.MAX_SNIPERS_COUNT = 20                 # <= 20 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
        self.MAX_SNIPERS_PERCENT = 3.5              # <= 3.5% —Å–Ω–∞–π–ø–µ—Ä–æ–≤
        self.MAX_SNIPERS_PERCENT_WITH_EXIT = 5.0    # <= 5% —Å rapid exit
        self.MAX_INSIDERS_PERCENT = 15              # <= 15% –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤
        self.MAX_INSIDERS_PERCENT_WITH_EXIT = 22.0  # <= 22% —Å rapid exit
        self.MAX_HOLDERS_PERCENT = 7                # <= 7% —Ç–æ–ø —Ö–æ–ª–¥–µ—Ä–æ–≤
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        self.metrics_history = []
        self.holder_percentages_history = []
        
        # –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–£–õ–Ø–†–ù–´–• –í–´–†–ê–ñ–ï–ù–ò–ô –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self._regex_cache = {
            'time': re.compile(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}),\d+ - INFO - '),
            'holders_count': re.compile(r'üë• –•–æ–ª–¥–µ—Ä—ã: (\d+)'),
            'liquidity': re.compile(r'üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: \$([0-9,]+)'),
            'mcap': re.compile(r'üí∞ Market Cap: \$([0-9,.]+)'),
            'snipers': re.compile(r'üéØ –°–Ω–∞–π–ø–µ—Ä—ã: ([0-9.]+)% \((\d+)\)'),
            'insiders': re.compile(r'üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—ã: ([0-9.]+)%'),
            'dev': re.compile(r'üë®‚Äçüíº Dev %: ([0-9.]+)%'),
            'bundlers': re.compile(r'üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã: (\d+) \(([0-9.]+)%\)'),
            'holders_percentages': re.compile(r'üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: (.+)'),
            'token_address': re.compile(r'/tokenAddress/([A-Za-z0-9]{32,})', re.IGNORECASE),
            'notification_sent': re.compile(r'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ|notification sent|–û–¢–ü–†–ê–í–ò–õ–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ï', re.IGNORECASE)
        }
        
        # –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ô –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self._correlation_cache = {}
    
    def parse_log_line(self, line: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
        time_match = re.match(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}),\d+ - INFO - ', line)
        if not time_match:
            return None
        
        timestamp_str = time_match.group(1)
        timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö
        if 'üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π:' in line:
            percentages_part = line.split('üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: ')[1]
            percentages_str = percentages_part.strip()
            
            if percentages_str:
                try:
                    percentages = [float(x.replace('%', '')) for x in percentages_str.split() if x.replace('%', '').replace('.', '').isdigit()]
                    return {
                        'type': 'holders',
                        'timestamp': timestamp,
                        'percentages': percentages
                    }
                except ValueError:
                    return None
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        elif 'üìä –û–ë–©–ò–ô % –í–õ–ê–î–ï–ù–ò–Ø –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í:' in line:
            early_match = re.search(r'üìä –û–ë–©–ò–ô % –í–õ–ê–î–ï–ù–ò–Ø –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í: ([0-9.]+)%', line)
            if early_match:
                try:
                    return {
                        'type': 'early_holders',
                        'timestamp': timestamp,
                        'early_holders_percent': float(early_match.group(1))
                    }
                except ValueError:
                    return None
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        elif '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –•–û–õ–î–ï–†–û–í –û–ë–ù–ê–†–£–ñ–ï–ù–´' in line:
            return {
                'type': 'analysis_suspicious',
                'timestamp': timestamp
            }
        elif '–ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –∑–¥–æ—Ä–æ–≤—ã–µ' in line or '–¢–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π' in line:
            return {
                'type': 'analysis_rejected',
                'timestamp': timestamp
            }
        elif '–í–°–ï –§–ò–õ–¨–¢–†–´ –ü–†–û–ô–î–ï–ù–´' in line:
            return {
                'type': 'analysis_passed',
                'timestamp': timestamp
            }
        
        return None
    
    def analyze_early_vs_current_holders(self, percentages_history: List[List[float]]) -> Tuple[bool, List[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–Ω–Ω–∏–µ vs —Ç–µ–∫—É—â–∏–µ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã (–∫–æ–ø–∏—è –∏–∑ bundle_analyzer.py)"""
        if len(percentages_history) < 30:
            return False, []
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –∫–∞–∫ "—Ä–∞–Ω–Ω–∏–µ"
        early_snapshots = percentages_history[:15]
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –∫–∞–∫ "—Ç–µ–∫—É—â–∏–µ"
        current_snapshots = percentages_history[-10:]
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–Ω–∏—Ö —Ç–æ–ø-3
        early_top3_values = []
        for percentages in early_snapshots:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ percentages —ç—Ç–æ —Å–ø–∏—Å–æ–∫/–º–∞—Å—Å–∏–≤
            if not isinstance(percentages, (list, tuple)):
                continue
                
            if len(percentages) >= 3:
                try:
                    top3 = [float(x) for x in percentages[:3]]
                    early_top3_values.append(top3)
                except (ValueError, IndexError, TypeError):
                    continue
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç–æ–ø-3
        current_top3_values = []
        for percentages in current_snapshots:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ percentages —ç—Ç–æ —Å–ø–∏—Å–æ–∫/–º–∞—Å—Å–∏–≤
            if not isinstance(percentages, (list, tuple)):
                continue
                
            if len(percentages) >= 3:
                try:
                    top3 = [float(x) for x in percentages[:3]]
                    current_top3_values.append(top3)
                except (ValueError, IndexError, TypeError):
                    continue
        
        if not early_top3_values or not current_top3_values:
            return False, []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ç–æ–ø-3
        early_medians = []
        for pos in range(3):
            values = [top3[pos] for top3 in early_top3_values if len(top3) > pos]
            if values:
                early_medians.append(sorted(values)[len(values)//2])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ç–æ–ø-3
        current_medians = []
        for pos in range(3):
            values = [top3[pos] for top3 in current_top3_values if len(top3) > pos]
            if values:
                current_medians.append(sorted(values)[len(values)//2])
        
        if len(early_medians) < 3 or len(current_medians) < 3:
            return False, []
        
        suspicious_points = []
        is_suspicious = False
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –†–∞–Ω–Ω–∏–µ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç
        early_total = sum(early_medians)
        current_total = sum(current_medians)
        
        # –ï—Å–ª–∏ —Ä–∞–Ω–Ω–∏–µ —Ç–æ–ø-3 –¥–µ—Ä–∂–∞–ª–∏ >12% –∏ —Ç–µ–∫—É—â–∏–µ —Ç–æ–ø-3 –≤—Å—ë –µ—â—ë –¥–µ—Ä–∂–∞—Ç >10%
        if early_total > 12.0 and current_total > 10.0:
            # –ò –ø—Ä–∏ —ç—Ç–æ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 20%
            reduction_percent = ((early_total - current_total) / early_total) * 100
            if reduction_percent < 20:
                suspicious_points.append(f"–†–∞–Ω–Ω–∏–µ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä—ã –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç: –±—ã–ª–æ {early_total:.1f}%, —Å–µ–π—á–∞—Å {current_total:.1f}% (—Å–Ω–∏–∂–µ–Ω–∏–µ {reduction_percent:.1f}%)")
                is_suspicious = True
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ü–µ—Ä–≤—ã–π —Ö–æ–ª–¥–µ—Ä –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –∫—Ä—É–ø–Ω—ã–π
        if early_medians[0] > 6.0 and current_medians[0] > 4.5:
            reduction = early_medians[0] - current_medians[0]
            if reduction < 1.5:  # –°–Ω–∏–∑–∏–ª—Å—è –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞ 1.5%
                suspicious_points.append(f"–ü–µ—Ä–≤—ã–π —Ö–æ–ª–¥–µ—Ä –æ—Å—Ç–∞–ª—Å—è –∫—Ä—É–ø–Ω—ã–º: –±—ã–ª–æ {early_medians[0]:.1f}%, —Å–µ–π—á–∞—Å {current_medians[0]:.1f}%")
                is_suspicious = True
        
        return is_suspicious, suspicious_points
    
    def _calculate_correlation(self, series1: list, series2: list) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏
        """
        if len(series1) != len(series2) or len(series1) < 2:
            return 0.0
        
        # –£–¥–∞–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        valid_pairs = [(x, y) for x, y in zip(series1, series2) if abs(x) > 0.001 or abs(y) > 0.001]
        
        if len(valid_pairs) < 2:
            return 0.0
        
        x_values = [pair[0] for pair in valid_pairs]
        y_values = [pair[1] for pair in valid_pairs]
        
        n = len(x_values)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        mean_x = sum(x_values) / n
        mean_y = sum(y_values) / n
        
        # –ß–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ñ–æ—Ä–º—É–ª—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        numerator = sum((x - mean_x) * (y - mean_y) for x, y in zip(x_values, y_values))
        sum_sq_x = sum((x - mean_x) ** 2 for x in x_values)
        sum_sq_y = sum((y - mean_y) ** 2 for y in y_values)
        
        denominator = (sum_sq_x * sum_sq_y) ** 0.5
        
        if denominator == 0:
            return 0.0
        
        correlation = numerator / denominator
        return correlation
    
    def check_rapid_exit(self, metric_name: str, metrics_history: List[Dict], ratio: float = 3.0, max_seconds: int = 120) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (—Å–Ω–∞–π–ø–µ—Ä–æ–≤ –∏–ª–∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤)
        Args:
            metric_name: 'snipersHoldingPcnt' –∏–ª–∏ 'insidersHoldingPcnt'
            metrics_history: –∏—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫
            ratio: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç
            max_seconds: –∑–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤—ã—Ö–æ–¥
        Returns:
            bool: True –µ—Å–ª–∏ –±—ã–ª —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
        """
        if not metrics_history or len(metrics_history) < 2:
            return False
        
        first_value = None
        first_time = None
        for m in metrics_history:
            value = float(m.get(metric_name, 0) or 0)
            if value > 0:
                first_value = value
                first_time = m.get('timestamp', 0)
                break
        
        if not first_value:
            return False
        
        current_value = float(metrics_history[-1].get(metric_name, 0) or 0)
        current_time = metrics_history[-1].get('timestamp', 0)
        time_diff = current_time - first_time
        
        if time_diff <= max_seconds and current_value <= first_value / ratio:
            logger.info(f"üìâ –°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è {metric_name}: {first_value:.1f}% ‚Üí {current_value:.1f}% –∑–∞ {time_diff} —Å–µ–∫")
            return True
        return False
    
    def check_snipers_bundlers_correlation(self, metrics_history: List[Dict]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤ –Ω–æ—Ä–º–µ (—Å–Ω–∞–π–ø–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–∞–Ω–¥–ª–µ—Ä–∞–º–∏),
                 False –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ —á—Ç–æ —Å–Ω–∞–π–ø–µ—Ä—ã —ç—Ç–æ –±–∞–Ω–¥–ª–µ—Ä—ã
        """
        if not metrics_history or len(metrics_history) < 3:
            return True

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä–æ–≤
        curr_snipers = float(metrics_history[-1].get('snipersHoldingPcnt', 0) or 0)
        
        # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏ (<=3.5%) - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫
        if curr_snipers <= 3.5 or (curr_snipers <= 5.0 and self.check_rapid_exit('snipersHoldingPcnt', metrics_history, ratio=3, max_seconds=120)):
            logger.info("‚úÖ –°–Ω–∞–π–ø–µ—Ä—ã –≤—ã—à–ª–∏, –Ω–æ –±–∞–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å - –±–∞–Ω–¥–ª–µ—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏")
            return True
            
        # –ï—Å–ª–∏ —Å–Ω–∞–π–ø–µ—Ä—ã –µ—â–µ –Ω–µ –≤—ã—à–ª–∏ (>3.5%), –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        bundlers_changes = []
        snipers_changes = []
        
        for i in range(1, len(metrics_history)):
            prev = metrics_history[i-1]
            curr = metrics_history[i]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            prev_bundlers = prev.get('bundlesHoldingPcnt')
            prev_bundlers = float(prev_bundlers.get('current', 0) if isinstance(prev_bundlers, dict) else (prev_bundlers if prev_bundlers is not None else 0))
            curr_bundlers = curr.get('bundlesHoldingPcnt')
            curr_bundlers = float(curr_bundlers.get('current', 0) if isinstance(curr_bundlers, dict) else (curr_bundlers if curr_bundlers is not None else 0))
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            
            bundlers_change = curr_bundlers - prev_bundlers
            snipers_change = curr_snipers - prev_snipers
            
            if abs(bundlers_change) > 0.1:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                bundlers_changes.append(bundlers_change)
                snipers_changes.append(snipers_change)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (bundlers_change * snipers_change > 0 and 
                    abs(bundlers_change - snipers_change) / max(abs(bundlers_change), abs(snipers_change)) < 0.3):
                    logger.info(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –±–∞–Ω–¥–ª–µ—Ä—ã {bundlers_change:.2f}%, —Å–Ω–∞–π–ø–µ—Ä—ã {snipers_change:.2f}%")

        if len(bundlers_changes) < 2:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        suspicious = sum(
            1 for i in range(len(bundlers_changes))
            if (bundlers_changes[i] * snipers_changes[i] > 0 and 
                abs(bundlers_changes[i] - snipers_changes[i]) / max(abs(bundlers_changes[i]), abs(snipers_changes[i])) < 0.3)
        )
        
        is_suspicious = suspicious >= len(bundlers_changes) * 0.5
        if is_suspicious:
            logger.warning(f"‚ö†Ô∏è –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {suspicious}/{len(bundlers_changes)}")
        
        return not is_suspicious

    def check_snipers_insiders_correlation(self, metrics_history: List[Dict]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Å–Ω–∞–π–ø–µ—Ä–∞–º–∏ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º–∏
        """
        if len(metrics_history) < 3:
            return True
            
        curr_snipers = float(metrics_history[-1].get('snipersHoldingPcnt', 0) or 0)
        if curr_snipers <= 3.5 or curr_snipers <= 5.0 and self.check_rapid_exit('snipersHoldingPcnt', metrics_history, ratio=3, max_seconds=120):
            return True
            
        snipers_changes = []
        insiders_changes = []
        
        for i in range(1, len(metrics_history)):
            prev = metrics_history[i-1]
            curr = metrics_history[i]
            
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            prev_insiders = float(prev.get('insidersHoldingPcnt', 0) or 0)
            curr_insiders = float(curr.get('insidersHoldingPcnt', 0) or 0)
            
            change = curr_snipers - prev_snipers
            if abs(change) > 0.1:
                snipers_changes.append(change)
                insiders_changes.append(curr_insiders - prev_insiders)

        if len(snipers_changes) < 2:
            return True

        suspicious = sum(
            1 for i in range(len(snipers_changes))
            if (snipers_changes[i] * insiders_changes[i] > 0 and
                abs(snipers_changes[i] - insiders_changes[i]) / max(abs(snipers_changes[i]), abs(insiders_changes[i])) < 0.3)
        )
        
        is_suspicious = suspicious >= len(snipers_changes) * 0.5
        return not is_suspicious

    def check_bundlers_snipers_exit_correlation(self, metrics_history: List[Dict]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –≤—ã—Ö–æ–¥ –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å–Ω–∞–π–ø–µ—Ä–æ–≤
        """
        if len(metrics_history) < 3:
            return True
            
        curr_snipers = float(metrics_history[-1].get('snipersHoldingPcnt', 0) or 0)
        if curr_snipers <= 3.5 or curr_snipers <= 5.0 and self.check_rapid_exit('snipersHoldingPcnt', metrics_history, ratio=3, max_seconds=120):
            return True
            
        bundlers_changes = []
        snipers_changes = []
        
        for i in range(1, len(metrics_history)):
            prev = metrics_history[i-1]
            curr = metrics_history[i]
            
            prev_bundlers = prev.get('bundlesHoldingPcnt')
            prev_bundlers = float(prev_bundlers.get('current', 0) if isinstance(prev_bundlers, dict) else (prev_bundlers if prev_bundlers is not None else 0))
            curr_bundlers = curr.get('bundlesHoldingPcnt')
            curr_bundlers = float(curr_bundlers.get('current', 0) if isinstance(curr_bundlers, dict) else (curr_bundlers if curr_bundlers is not None else 0))
            prev_snipers = float(prev.get('snipersHoldingPcnt', 0) or 0)
            curr_snipers = float(curr.get('snipersHoldingPcnt', 0) or 0)
            
            bundlers_change = curr_bundlers - prev_bundlers
            snipers_change = curr_snipers - prev_snipers
            
            if bundlers_change < 0 and snipers_change < 0:
                bundlers_changes.append(bundlers_change)
                snipers_changes.append(snipers_change)

        if len(bundlers_changes) < 2:
            return True

        suspicious = sum(
            1 for i in range(len(bundlers_changes))
            if abs(bundlers_changes[i] - snipers_changes[i]) / max(abs(bundlers_changes[i]), abs(snipers_changes[i])) < 0.3
        )
        
        is_suspicious = suspicious >= len(bundlers_changes) * 0.5
        return not is_suspicious
    
    async def check_holders_correlation(self, metrics_history: List[Dict]) -> bool:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —Å—Ä–µ–¥–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤.
        –§–û–ö–£–°: –¢–æ–ø 10 —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Å—Ç—Ä–æ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —Ä—ã–Ω–∫–∞.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–¥–∞–∂ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, False –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
        """
        if not metrics_history or len(metrics_history) < 3:
            logger.debug("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ —Ö–æ–ª–¥–µ—Ä–æ–≤")
            return True
        
        # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(metrics_history) > 1000:
            logger.debug("üìä –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –º–µ—Ç—Ä–∏–∫–∞–º–∏")
            metrics_to_analyze = metrics_history[-1000:]
        else:
            metrics_to_analyze = metrics_history
        
        logger.debug("üîç –ê–ù–ê–õ–ò–ó –ú–ê–°–°–û–í–´–• –ü–†–û–î–ê–ñ –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Ö –≤—Ö–æ–¥–∞
        all_wallets = set()
        wallet_entry_times = {}  # {wallet: first_seen_timestamp}
        wallet_holdings_history = {}  # {wallet: [(timestamp, pcnt), ...]}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞
        for i, metrics in enumerate(metrics_to_analyze):
            timestamp = metrics.get('timestamp', int(time.time()))
            top10holders = metrics.get('top10holders', {})
            
            for wallet, holder_info in top10holders.items():
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–ª—ã, –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤
                if not holder_info.get('isPool', False) and not holder_info.get('isBundler', False) and not holder_info.get('insider', False):
                    all_wallets.add(wallet)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
                    if wallet not in wallet_entry_times:
                        wallet_entry_times[wallet] = timestamp
                    
                    # –í–µ–¥–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–ª–∞–¥–µ–Ω–∏—è
                    if wallet not in wallet_holdings_history:
                        wallet_holdings_history[wallet] = []
                    wallet_holdings_history[wallet].append((timestamp, holder_info.get('pcnt', 0)))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ (–†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´ - –ü–†–ò–û–†–ò–¢–ï–¢!)
        sorted_wallets_by_entry = sorted(wallet_entry_times.items(), key=lambda x: x[1])
        early_holders = [wallet for wallet, entry_time in sorted_wallets_by_entry[:10]]  # –ü–µ—Ä–≤—ã–µ 10
        
        logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_wallets)} –æ–±—ã—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        logger.debug(f"üö® –†–ê–ù–ù–ò–ï –•–û–õ–î–ï–†–´ (–ø–µ—Ä–≤—ã–µ 10): {[w[:8] + '...' for w in early_holders]}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂
        holder_changes_timeline = []
        
        for i in range(1, len(metrics_to_analyze)):
            prev_metrics = metrics_to_analyze[i-1]
            curr_metrics = metrics_to_analyze[i]
            
            prev_holders = prev_metrics.get('top10holders', {})
            curr_holders = curr_metrics.get('top10holders', {})
            
            timestamp = curr_metrics.get('timestamp', int(time.time()))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            wallet_changes = {}
            for wallet in all_wallets:
                prev_pcnt = prev_holders.get(wallet, {}).get('pcnt', 0) if wallet in prev_holders else 0
                curr_pcnt = curr_holders.get(wallet, {}).get('pcnt', 0) if wallet in curr_holders else 0
                
                change = curr_pcnt - prev_pcnt
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ 0.01%)
                if abs(change) > 0.01:
                    wallet_changes[wallet] = {
                        'change': change,
                        'prev_pcnt': prev_pcnt,
                        'curr_pcnt': curr_pcnt,
                        'change_ratio': abs(change) / max(prev_pcnt, 0.001)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    }
            
            if wallet_changes:
                holder_changes_timeline.append({
                    'timestamp': timestamp,
                    'changes': wallet_changes,
                    'total_wallets_changed': len(wallet_changes)
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        mass_sell_events = []
        early_holder_suspicious = []
        
        for i, change_event in enumerate(holder_changes_timeline):
            changes = change_event['changes']
            timestamp = change_event['timestamp']
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–∂–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            selling_wallets = []
            total_sell_volume = 0
            
            for wallet, change_data in changes.items():
                if change_data['change'] < -0.01:  # –ü—Ä–æ–¥–∞–∂–∞ –±–æ–ª—å—à–µ 0.01%
                    selling_wallets.append({
                        'wallet': wallet,
                        'sell_amount': abs(change_data['change']),
                        'prev_pcnt': change_data['prev_pcnt'],
                        'change_ratio': change_data['change_ratio']
                    })
                    total_sell_volume += abs(change_data['change'])
            
            # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞—é—Ç 3+ –∫–æ—à–µ–ª—å–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if len(selling_wallets) >= 3:
                mass_sell_events.append({
                    'timestamp': timestamp,
                    'selling_wallets': selling_wallets,
                    'total_sell_volume': total_sell_volume,
                    'avg_sell_amount': total_sell_volume / len(selling_wallets)
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ —Å—Ä–µ–¥–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ (–ª–∏–º–∏—Ç–∏—Ä—É–µ–º)
        # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        max_early_holders = min(len(early_holders), 8)  # –ú–∞–∫—Å–∏–º—É–º 8 —Ö–æ–ª–¥–µ—Ä–æ–≤
        limited_early_holders = early_holders[:max_early_holders]
        
        for i, wallet1 in enumerate(limited_early_holders):
            for j, wallet2 in enumerate(limited_early_holders[i+1:]):
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
                wallet1_changes = []
                wallet2_changes = []
                
                for change_event in holder_changes_timeline:
                    change1 = change_event['changes'].get(wallet1, {}).get('change', 0)
                    change2 = change_event['changes'].get(wallet2, {}).get('change', 0)
                    wallet1_changes.append(change1)
                    wallet2_changes.append(change2)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                correlation = self._calculate_correlation(wallet1_changes, wallet2_changes)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å—Ä–µ–¥–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
                if correlation > 0.6 and len([x for x in wallet1_changes if abs(x) > 0.01]) >= 1:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
                    sync_sells = sum(1 for k in range(len(wallet1_changes)) 
                                   if wallet1_changes[k] < -0.01 and wallet2_changes[k] < -0.01)
                    
                    if sync_sells >= 1:  # –î–ª—è —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏!
                        early_holder_suspicious.append({
                            'wallet1': wallet1,
                            'wallet2': wallet2,
                            'correlation': correlation,
                            'sync_sells': sync_sells,
                            'entry_time_diff': abs(wallet_entry_times[wallet1] - wallet_entry_times[wallet2]),
                            'pattern_type': 'early_holder_coordination'
                        })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        early_holders_total_percent = 0
        for wallet in early_holders:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è
            if wallet in wallet_holdings_history and wallet_holdings_history[wallet]:
                latest_percent = wallet_holdings_history[wallet][-1][1]
                early_holders_total_percent += latest_percent
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        early_holders_fast_exit = 0
        for wallet in early_holders:
            if wallet in wallet_holdings_history and len(wallet_holdings_history[wallet]) >= 2:
                initial_percent = wallet_holdings_history[wallet][0][1]
                current_percent = wallet_holdings_history[wallet][-1][1]
                
                # –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø–æ—Ç–µ—Ä—è–ª –±–æ–ª–µ–µ 50% —Å–≤–æ–∏—Ö –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ö–æ–ª–¥–∏–Ω–≥–æ–≤
                if initial_percent > 0 and (current_percent / initial_percent) < 0.5:
                    early_holders_fast_exit += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ - —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        total_mass_sell_events = len(mass_sell_events)
        total_early_holder_patterns = len(early_holder_suspicious)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        is_suspicious = False
        
        # –í–´–°–û–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å - –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã + –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        if total_early_holder_patterns >= 1 and total_mass_sell_events >= 2:
            is_suspicious = True
            logger.warning(f"üî¥ –í–´–°–û–ö–ò–ô –†–ò–°–ö: –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç –∏ –µ—Å—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏!")
        
        # –°–†–ï–î–ù–ò–ô —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π % —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        elif total_mass_sell_events >= 3 or total_early_holder_patterns >= 2 or early_holders_total_percent > 30:
            is_suspicious = True
            if early_holders_total_percent > 30:
                logger.warning(f"üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö: –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã –¥–µ—Ä–∂–∞—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ({early_holders_total_percent:.2f}% > 30%)")
            else:
                logger.warning(f"üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö: –ú–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏–ª–∏ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤")
        
        return not is_suspicious
    
    async def analyze_token_with_full_criteria(self, log_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —Å–Ω–∞–ø—à–æ—Ç –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏–º–∏—Ç–∏—Ä—É–µ—Ç process_token_metrics)"""
        token_id = os.path.basename(log_path).replace('.log', '')
        full_token_address = None
        
        # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ –ª–æ–≥–µ
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞
                    if '/tokenAddress/' in line:
                        import re
                        match = re.search(r'/tokenAddress/([A-Za-z0-9]{32,})', line)
                        if match:
                            full_token_address = match.group(1)
                            break
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
                    elif "'tokenAddress':" in line:
                        match = re.search(r"'tokenAddress':\s*'([A-Za-z0-9]{32,})'", line)
                        if match:
                            full_token_address = match.group(1)
                            break
        except Exception:
            pass
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ –∫–æ—Ä–æ—Ç–∫–∏–π ID
        token_address = full_token_address if full_token_address else token_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if token_address in GENIUS_RUG_BLACKLIST:
            return {
                'token_id': token_id,
                'decision': 'BLACKLISTED',
                'reason': '–¢–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ "–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–≥–æ–≤"'
            }
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–Ω–∞–ø—à–æ—Ç
        metrics_history = []
        holder_percentages_history = []
        snapshots_checked = 0
        first_snapshot_time = None  # –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        best_snapshot = {
            'snapshot_number': 0,
            'passed_conditions': 0,
            'failed_conditions': [],
            'passed_conditions_list': [],
            'metrics': {}
        }
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TokenMetrics –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è = 0, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ª–æ–≥–æ–≤
        token_metrics = TokenMetrics(token_address, creation_time=0)
        
        try:
            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(log_path, 'r', encoding='utf-8', buffering=32768) as f:
                for line in f:
                    # –ë–´–°–¢–†–´–ô –°–ö–ò–ü –Ω–µ–≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    if not ('üë•' in line or 'üí∞' in line or 'üíß' in line or 'üéØ' in line or 
                           'üë®‚Äçüíº' in line or 'üì¶' in line or 'üèÜ' in line or 
                           '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' in line or 'notification' in line):
                        continue
                        
                    data = self.parse_tokens_log_line(line)
                    if not data:
                        continue
                    
                    if data['type'] == 'notification_sent':
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ - —ç—Ç–æ –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–Ω–∞–ø—à–æ—Ç–µ 
                    if data['type'] in ['holders_count', 'mcap', 'liquidity', 'snipers', 'insiders', 'dev', 'bundlers']:
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                        if metrics_history:
                            metrics = metrics_history[-1].copy()  # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                        else:
                            metrics = {
                                'timestamp': int(time.time()),
                                'total_holders': 0,
                                'marketCapUsdUi': 0,
                                'liquidityInUsdUi': 0,
                                'snipersHoldingPcnt': 0,
                                'totalSnipers': 0,
                                'insidersHoldingPcnt': 0,
                                'devHoldingPcnt': 0,
                                'bundlesHoldingPcnt': {'current': 0},
                                'totalBundlesCount': 0,
                                'top10holders': {}
                            }
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                        current_timestamp = data.get('timestamp', datetime.now()).timestamp() if hasattr(data.get('timestamp'), 'timestamp') else int(time.time())
                        metrics['timestamp'] = current_timestamp
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
                        if first_snapshot_time is None:
                            first_snapshot_time = current_timestamp
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
                            metrics['marketCreatedAt'] = int(first_snapshot_time)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        if data['type'] == 'holders_count':
                            metrics['total_holders'] = data.get('holders_count', 0)
                        elif data['type'] == 'mcap':
                            metrics['marketCapUsdUi'] = data.get('mcap', 0)
                        elif data['type'] == 'liquidity':
                            metrics['liquidityInUsdUi'] = data.get('liquidity', 0)
                        elif data['type'] == 'snipers':
                            metrics['snipersHoldingPcnt'] = data.get('snipers_percent', 0)
                            metrics['totalSnipers'] = data.get('snipers_count', 0)
                        elif data['type'] == 'insiders':
                            metrics['insidersHoldingPcnt'] = data.get('insiders_percent', 0)
                        elif data['type'] == 'dev':
                            metrics['devHoldingPcnt'] = data.get('dev_percent', 0)
                        elif data['type'] == 'bundlers':
                            metrics['bundlesHoldingPcnt'] = {'current': data.get('bundlers_percent', 0)}
                            metrics['totalBundlesCount'] = data.get('bundlers_count', 0)
                        
                        metrics_history.append(metrics)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º TokenMetrics –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        token_metrics.add_metrics(metrics)
                    
                        # –ü–†–û–í–ï–†–Ø–ï–ú ACTIVITY –£–°–õ–û–í–ò–Ø –ù–ê –ö–ê–ñ–î–û–ú –°–ù–ê–ü–®–û–¢–ï
                        # –ö–∞–∫ –≤ bundle_analyzer.py - process_token_metrics –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                        if len(metrics_history) >= 3:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                            snapshots_checked += 1
                            activity_result = await self.check_activity_notification_detailed(metrics_history, holder_percentages_history, token_address, token_metrics)
                            
                            if activity_result and activity_result.get('decision') == 'WOULD_SEND':
                                # –ù–∞—à–ª–∏ –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é!
                                activity_result['snapshot_number'] = snapshots_checked
                                activity_result['total_snapshots'] = len(metrics_history)
                                activity_result['token_address'] = token_address  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                                return activity_result
                            
                            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç (–º–∞–∫—Å–∏–º—É–º –ø—Ä–æ—à–µ–¥—à–∏—Ö —É—Å–ª–æ–≤–∏–π)
                            if activity_result:
                                passed_count = activity_result.get('passed_conditions_count', 0)
                                if passed_count > best_snapshot['passed_conditions']:
                                    best_snapshot = {
                                        'snapshot_number': snapshots_checked,
                                        'passed_conditions': passed_count,
                                        'failed_conditions': activity_result.get('failed_conditions', []),
                                        'passed_conditions_list': activity_result.get('passed_conditions_list', []),
                                        'metrics': activity_result.get('snapshot_metrics', {})
                                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–Ω–∞–ø—à–æ—Ç–µ —Ö–æ–ª–¥–µ—Ä–æ–≤
                    elif data['type'] == 'holders':
                        percentages = data['percentages']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ percentages —ç—Ç–æ —Å–ø–∏—Å–æ–∫/–º–∞—Å—Å–∏–≤
                        if not isinstance(percentages, (list, tuple)):
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            
                        if len(percentages) >= 3:
                            try:
                                # –°–æ–∑–¥–∞–µ–º top10holders —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ percentages
                                top10holders = {}
                                for i, pcnt in enumerate(percentages[:10]):  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                                    wallet_address = f"holder_{i+1}"  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                                    top10holders[wallet_address] = {
                                        'pcnt': float(pcnt),
                                        'isPool': False,
                                        'isBundler': False,
                                        'isSniper': pcnt > 3.0,  # –°—á–∏—Ç–∞–µ–º —Å–Ω–∞–π–ø–µ—Ä–æ–º –µ—Å–ª–∏ >3%
                                        'insider': False
                                    }
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å top10holders
                                if metrics_history:
                                    metrics = metrics_history[-1].copy()
                                    metrics['top10holders'] = top10holders
                                    metrics['timestamp'] = data.get('timestamp', datetime.now()).timestamp() if hasattr(data.get('timestamp'), 'timestamp') else int(time.time())
                                    metrics_history.append(metrics)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º TokenMetrics
                                token_metrics.add_metrics(metrics)
                                
                                snapshot_data = {
                                    'percentages': percentages,
                                    'top3_snipers': sum(1 for p in percentages[:3] if float(p) > 3.0),
                                    'total_snipers_percent': 0
                                }
                                holder_percentages_history.append(snapshot_data)
                            except (ValueError, TypeError):
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        except Exception as e:
            import traceback
            full_error = traceback.format_exc()
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ analyze_token_with_full_criteria –¥–ª—è {token_id}: {full_error}")
            return {'token_id': token_id, 'token_address': token_address, 'decision': 'ERROR', 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}
        
        if not metrics_history:
            return {
                'token_id': token_id,
                'token_address': token_address,
                'decision': 'NO_DATA',
                'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Å–Ω–∞–ø—à–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é - —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–∏—á–∏–Ω—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª—É—á—à–µ–º —Å–Ω–∞–ø—à–æ—Ç–µ
        if best_snapshot['passed_conditions'] > 0:
            failed_conditions = best_snapshot.get('failed_conditions', [])
            passed_conditions_list = best_snapshot.get('passed_conditions_list', [])
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
            failed_conditions_str = ', '.join(failed_conditions[:3] if isinstance(failed_conditions, list) else [])
            passed_conditions_str = ', '.join(passed_conditions_list[:3] if isinstance(passed_conditions_list, list) else [])
            best_reason = (
                f"–ù–∏ –æ–¥–∏–Ω –∏–∑ {snapshots_checked} —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª. "
                f"–õ—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç #{best_snapshot['snapshot_number']}: "
                f"‚úÖ{best_snapshot['passed_conditions']} —É—Å–ª–æ–≤–∏–π (–Ω–∞–ø—Ä: {passed_conditions_str}), "
                f"‚ùå –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {failed_conditions_str}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
            metrics = best_snapshot.get('metrics', {})
            best_metrics = {}
            if 'holders' in metrics:
                best_metrics['holders'] = metrics['holders']
            if 'liquidity' in metrics:
                best_metrics['liquidity'] = metrics['liquidity'] 
            if 'snipers_percent' in metrics:
                best_metrics['snipers_percent'] = metrics['snipers_percent']
        else:
            best_reason = f'–ù–∏ –æ–¥–∏–Ω –∏–∑ {snapshots_checked} —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —É—Å–ª–æ–≤–∏—è–º activity —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            best_metrics = {}
        
        result = {
            'token_id': token_id,
            'token_address': token_address,
            'decision': 'WOULD_REJECT',
            'reason': best_reason,
            'notification_type': 'ACTIVITY',
            'snapshots_checked': snapshots_checked,
            'total_snapshots': len(metrics_history),
            'best_snapshot': best_snapshot
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        result.update(best_metrics)
        
        return result
    

    async def check_activity_notification_detailed(self, metrics_history: List[Dict], holder_percentages_history: List[Dict], token_id: str, token_metrics: TokenMetrics) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è activity notification —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        if not metrics_history:
            return None
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = metrics_history[-1]
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        total_holders = int(metrics.get('total_holders', 0) or 0)
        market_cap = float(metrics.get('marketCapUsdUi', 0) or 0)
        liquidity = float(metrics.get('liquidityInUsdUi', 0) or 0)
        dev_percent = float(metrics.get('devHoldingPcnt', 0) or 0)
        bundles_percent = metrics.get('bundlesHoldingPcnt', {})
        bundles_percent = float(bundles_percent.get('current', 0) if isinstance(bundles_percent, dict) else (bundles_percent or 0))
        snipers_percent = float(metrics.get('snipersHoldingPcnt', 0) or 0)
        snipers_count = int(metrics.get('totalSnipers', 0) or 0)
        insiders_percent = float(metrics.get('insidersHoldingPcnt', 0) or 0)
        
        # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ (–∫–∞–∫ –≤ bundle_analyzer.py)
        growth = {'holders_growth': 2900}  # –î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º max_holders_pcnt –∏–∑ —Ç–æ–ø —Ö–æ–ª–¥–µ—Ä–æ–≤ (—Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ bundle_analyzer.py)
        max_holders_pcnt = 0
        top10holders = metrics.get('top10holders', {})
        if top10holders:
            for wallet, value in top10holders.items():
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–ª—ã, –±–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤ –∫–∞–∫ –≤ bundle_analyzer.py
                if not value.get('isPool', False) and not value.get('isBundler', False) and not value.get('insider', False):
                    if value.get('pcnt', 0) > max_holders_pcnt:
                        max_holders_pcnt = value['pcnt']
        
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ time_ok –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤
        current_snapshot_time = metrics.get('timestamp', 0)
        market_created_at = metrics.get('marketCreatedAt', 0)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–Ω–∞–ø—à–æ—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞)
        if market_created_at > 0 and current_snapshot_time > 0:
            time_ok_check = (current_snapshot_time - market_created_at) < 300  # < 5 –º–∏–Ω—É—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        else:
            time_ok_check = True  # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        
        # –¢–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–∑ bundle_analyzer.py activity_conditions
        activity_conditions = {
            # 'time_ok': time_ok_check,  # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Ö–æ–ª–¥–µ—Ä–∞–º
            'holders_min': total_holders >= 30,  # –ú–∏–Ω–∏–º—É–º 30 —Ö–æ–ª–¥–µ—Ä–æ–≤
            'holders_max': total_holders <= 130,  # –ú–∞–∫—Å–∏–º—É–º 130 —Ö–æ–ª–¥–µ—Ä–æ–≤
            'holders_never_dumped': token_metrics.max_holders <= 150,  # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ TokenMetrics
            'max_holders_pcnt': 0 < max_holders_pcnt <= 7,
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –±–∞–Ω–¥–ª–µ—Ä–∞–º (—Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ bundle_analyzer.py)
            'bundlers_ok': token_metrics.max_bundlers_after_dev_exit >= 5,
            'bundlers_before_dev_ok': token_metrics.max_bundlers_before_dev_exit <= 60,
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –¥–µ–≤—É
            'dev_percent_ok': dev_percent <= 2,  # <= 2%
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ —Å–Ω–∞–π–ø–µ—Ä–∞–º (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ bundle_analyzer.py)
            'snipers_ok': (
                snipers_count <= 20 and  # –ù–µ –±–æ–ª–µ–µ 20 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
                (
                    snipers_percent <= 3.5 or # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 3.5%
                    (
                        any(float(m.get('snipersHoldingPcnt', 0) or 0) > 0 for m in metrics_history) and
                        max(float(m.get('snipersHoldingPcnt', 0) or 0) 
                            for m in metrics_history 
                            if float(m.get('snipersHoldingPcnt', 0) or 0) > 0) > snipers_percent and
                        snipers_percent <= 5.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 5% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                        self.check_rapid_exit('snipersHoldingPcnt', metrics_history, ratio=3, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                    )
                )
            ),
            'snipers_not_bundlers': self.check_snipers_bundlers_correlation(metrics_history),
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ bundle_analyzer.py)
            'insiders_ok': (
                insiders_percent <= 15 or  # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 15%
                (
                    any(float(m.get('insidersHoldingPcnt', 0) or 0) > 0 for m in metrics_history) and
                    max(float(m.get('insidersHoldingPcnt', 0) or 0) 
                        for m in metrics_history 
                        if float(m.get('insidersHoldingPcnt', 0) or 0) > 0) > insiders_percent and
                    insiders_percent <= 22.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 22% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                    self.check_rapid_exit('insidersHoldingPcnt', metrics_history, ratio=3, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                )
            ),
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç—É
            'min_liquidity': liquidity >= 10000,  # >= 10000
            # 'holders_growth': growth['holders_growth'] >= 2900,  # >= 2900/–º–∏–Ω
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–ø–æ–ª–Ω—ã–µ –∏–∑ bundle_analyzer.py)
            'can_notify': token_metrics.can_send_notification('activity'),  # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            'snipers_not_insiders': self.check_snipers_insiders_correlation(metrics_history),
            'bundlers_snipers_exit_not_correlated': self.check_bundlers_snipers_exit_correlation(metrics_history),
            'holders_not_correlated': await self.check_holders_correlation(metrics_history)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        failed_conditions = []
        passed_conditions = []
        for condition, value in activity_conditions.items():
            if not value:
                failed_conditions.append(condition)
            else:
                passed_conditions.append(condition)
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–Ω–∞–ø—à–æ—Ç–∞
        snapshot_metrics = {
            'holders': total_holders,
            'market_cap': market_cap,
            'liquidity': liquidity,
            'dev_percent': dev_percent,
            'snipers_percent': snipers_percent,
            'snipers_count': snipers_count,
            'insiders_percent': insiders_percent
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if failed_conditions:
            return {
                'decision': 'WOULD_REJECT',
                'passed_conditions_count': len(passed_conditions),
                'failed_conditions': failed_conditions,
                'passed_conditions_list': passed_conditions,
                'snapshot_metrics': snapshot_metrics,
                'total_conditions': len(activity_conditions)
            }
        
        # ‚úÖ –í–°–ï ACTIVITY CONDITIONS –ü–†–û–®–õ–ò! 
        # –¢–µ–ø–µ—Ä—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è "–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–≥–æ–≤"
        # (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ bundle_analyzer.py —Å—Ç—Ä–æ–∫–∏ 3221-3248)
        
        if len(holder_percentages_history) >= 20:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã –¥–æ 1000)
            analysis_limit = 1000
            analyzed_count = min(len(holder_percentages_history), analysis_limit)
            
            is_suspicious, suspicious_reasons = self.is_suspicious_pattern(holder_percentages_history)
            
            if is_suspicious:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—Å–µ–≥–¥–∞
                GENIUS_RUG_BLACKLIST.add(token_id)
                save_blacklist()
                
                return {
                    'token_id': token_id,
                    'token_address': token_id,
                    'decision': 'WOULD_REJECT',
                    'reason': f"–í–°–ï activity —É—Å–ª–æ–≤–∏—è –ø—Ä–æ—à–ª–∏, –Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤: {'; '.join(suspicious_reasons)} (–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)",
                    'suspicious_patterns': suspicious_reasons,
                    'blacklisted': True,
                    'notification_type': 'ACTIVITY',
                    'all_conditions_passed': True,  # –í–∞–∂–Ω–æ! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ—à–ª–∏
                    'analyzed_snapshots': analyzed_count
                }
            else:
                # ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –∑–¥–æ—Ä–æ–≤—ã–µ - —Ç–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—à–µ–ª!
                pass
        
        # üéâ –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ò –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –∑–¥–æ—Ä–æ–≤—ã–µ
        return {
            'token_id': token_id,
            'token_address': token_id,
            'decision': 'WOULD_SEND',
            'reason': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º activity —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤)',
            'notification_type': 'ACTIVITY',
                'holders': total_holders,
                'market_cap': market_cap,
                'liquidity': liquidity,
                'dev_percent': dev_percent,
                'snipers_percent': snipers_percent,
            'insiders_percent': insiders_percent,
            'all_conditions_passed': True,
            'healthy_holder_patterns': True
        }

    async def check_activity_notification(self, metrics_history: List[Dict], holder_percentages_history: List[Dict], token_id: str, token_metrics: TokenMetrics = None) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è activity notification (–∫–∞–∫ –≤ process_token_metrics)"""
        if not metrics_history:
            return None
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = metrics_history[-1]
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        total_holders = int(metrics.get('total_holders', 0) or 0)
        market_cap = float(metrics.get('marketCapUsdUi', 0) or 0)
        liquidity = float(metrics.get('liquidityInUsdUi', 0) or 0)
        dev_percent = float(metrics.get('devHoldingPcnt', 0) or 0)
        bundles_percent = metrics.get('bundlesHoldingPcnt', {})
        bundles_percent = float(bundles_percent.get('current', 0) if isinstance(bundles_percent, dict) else (bundles_percent or 0))
        snipers_percent = float(metrics.get('snipersHoldingPcnt', 0) or 0)
        snipers_count = int(metrics.get('totalSnipers', 0) or 0)
        insiders_percent = float(metrics.get('insidersHoldingPcnt', 0) or 0)
        
        # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ token_metrics –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è
        growth = {'holders_growth': 2900}  # –î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
        
        if token_metrics:
            # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å TokenMetrics
            max_holders_pcnt = 0
            top10holders = metrics.get('top10holders', {})
            if top10holders:
                for wallet, value in top10holders.items():
                    if not value.get('isPool', False) and not value.get('isBundler', False) and not value.get('insider', False):
                        if value.get('pcnt', 0) > max_holders_pcnt:
                            max_holders_pcnt = value['pcnt']
            
            current_snapshot_time = metrics.get('timestamp', 0)
            market_created_at = metrics.get('marketCreatedAt', 0)
            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤
            if market_created_at > 0 and current_snapshot_time > 0:
                time_ok = (current_snapshot_time - market_created_at) < 300  # < 5 –º–∏–Ω—É—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è
            else:
                time_ok = True  # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            bundlers_ok = token_metrics.max_bundlers_after_dev_exit >= 5
            bundlers_before_dev_ok = token_metrics.max_bundlers_before_dev_exit <= 60
            holders_never_dumped = token_metrics.max_holders <= 150
            can_notify = token_metrics.can_send_notification('activity')
        else:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            max_holders_pcnt = 5.0
            time_ok = True
            bundlers_ok = True
            bundlers_before_dev_ok = True
            holders_never_dumped = total_holders <= 150
            can_notify = True
        
        # –¢–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–∑ bundle_analyzer.py activity_conditions
        activity_conditions = {
            'time_ok': time_ok,
            # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Ö–æ–ª–¥–µ—Ä–∞–º  
            'holders_min': total_holders >= 30,  # –ú–∏–Ω–∏–º—É–º 30 —Ö–æ–ª–¥–µ—Ä–æ–≤
            'holders_max': total_holders <= 130,  # –ú–∞–∫—Å–∏–º—É–º 130 —Ö–æ–ª–¥–µ—Ä–æ–≤
            'holders_never_dumped': holders_never_dumped,
            'max_holders_pcnt': 0 < max_holders_pcnt <= 7,
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –±–∞–Ω–¥–ª–µ—Ä–∞–º (—Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            'bundlers_ok': bundlers_ok,
            'bundlers_before_dev_ok': bundlers_before_dev_ok,
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –¥–µ–≤—É
            'dev_percent_ok': dev_percent <= self.MAX_DEV_PERCENT,  # <= 2%
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ —Å–Ω–∞–π–ø–µ—Ä–∞–º (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ bundle_analyzer.py)
            'snipers_ok': (
                snipers_count <= 20 and  # –ù–µ –±–æ–ª–µ–µ 20 —Å–Ω–∞–π–ø–µ—Ä–æ–≤
                (
                    snipers_percent <= 3.5 or # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 3.5%
                    (
                        any(float(m.get('snipersHoldingPcnt', 0) or 0) > 0 for m in metrics_history) and
                        max(float(m.get('snipersHoldingPcnt', 0) or 0) 
                            for m in metrics_history 
                            if float(m.get('snipersHoldingPcnt', 0) or 0) > 0) > snipers_percent and
                        snipers_percent <= 5.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 5% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                        self.check_rapid_exit('snipersHoldingPcnt', metrics_history, ratio=3, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                    )
                )
            ),
            'snipers_not_bundlers': self.check_snipers_bundlers_correlation(metrics_history),
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –∏–Ω—Å–∞–π–¥–µ—Ä–∞–º (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ bundle_analyzer.py)
            'insiders_ok': (
                insiders_percent <= 15 or  # –õ–∏–±–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç <= 15%
                (
                    any(float(m.get('insidersHoldingPcnt', 0) or 0) > 0 for m in metrics_history) and
                    max(float(m.get('insidersHoldingPcnt', 0) or 0) 
                        for m in metrics_history 
                        if float(m.get('insidersHoldingPcnt', 0) or 0) > 0) > insiders_percent and
                    insiders_percent <= 22.0 and  # –ù–æ –Ω–µ –±–æ–ª—å—à–µ 22% –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
                    self.check_rapid_exit('insidersHoldingPcnt', metrics_history, ratio=3, max_seconds=120)  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π rapid exit
                )
            ),
            
            # –£—Å–ª–æ–≤–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç—É
            'min_liquidity': liquidity >= self.MIN_LIQUIDITY,  # >= 10000
            'holders_growth': growth['holders_growth'] >= self.MIN_GROWTH_RATE,  # >= 2900/–º–∏–Ω
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–ø–æ–ª–Ω—ã–µ –∏–∑ bundle_analyzer.py)
            'can_notify': can_notify,
            'snipers_not_insiders': self.check_snipers_insiders_correlation(metrics_history),
            'bundlers_snipers_exit_not_correlated': self.check_bundlers_snipers_exit_correlation(metrics_history),
            'holders_not_correlated': await self.check_holders_correlation(metrics_history)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
        failed_conditions = []
        passed_conditions = []
        for condition, value in activity_conditions.items():
            if not value:
                failed_conditions.append(condition)
            else:
                passed_conditions.append(condition)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if failed_conditions:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.debug(f"üîç {token_id} –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ACTIVITY CONDITIONS:")
            logger.debug(f"   ‚úÖ –ü–†–û–®–õ–ò ({len(passed_conditions)}): {', '.join(passed_conditions)}")
            logger.debug(f"   ‚ùå –ü–†–û–í–ê–õ–ò–õ–ò–°–¨ ({len(failed_conditions)}): {', '.join(failed_conditions)}")
            logger.debug(f"   üìä –ú–ï–¢–†–ò–ö–ò: HOLDERS={total_holders}, MCAP=${market_cap:,.0f}, LIQ=${liquidity:,.0f}")
            logger.debug(f"   üéØ –°–ù–ê–ô–ü–ï–†–´: {snipers_percent:.1f}% ({snipers_count}—à—Ç), –ò–ù–°–ê–ô–î–ï–†–´: {insiders_percent:.1f}%")
            return None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è "–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–≥–æ–≤"
        if len(holder_percentages_history) >= 20:
            is_suspicious, suspicious_reasons = self.is_suspicious_pattern(holder_percentages_history)
            
            if is_suspicious:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—Å–µ–≥–¥–∞
                GENIUS_RUG_BLACKLIST.add(token_id)
                save_blacklist()
                
                return {
                    'token_id': token_id,
                    'token_address': token_id,
                    'decision': 'WOULD_REJECT',
                    'reason': f"–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤: {'; '.join(suspicious_reasons)} (–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)",
                    'suspicious_patterns': suspicious_reasons,
                    'blacklisted': True,
                    'notification_type': 'ACTIVITY'
                }
        
        # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        return {
            'token_id': token_id,
            'token_address': token_id,
            'decision': 'WOULD_SEND',
            'reason': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º activity —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'notification_type': 'ACTIVITY',
            'holders': total_holders,
            'market_cap': market_cap,
            'liquidity': liquidity,
            'dev_percent': dev_percent,
            'snipers_percent': snipers_percent,
            'insiders_percent': insiders_percent
        }
    

    
    def analyze_holder_stability(self, percentages_history: List[List[float]]) -> Tuple[bool, List[str]]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–∑ bundle_analyzer.py"""
        if len(percentages_history) < 20:
            return False, []
        
        suspicious_points = []
        
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ø-3 —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Å–Ω–∞–ø—à–æ—Ç–µ
        stable_sniper_periods = 0
        high_sniper_top3_count = 0
        
        for i, percentages in enumerate(percentages_history):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ percentages —ç—Ç–æ —Å–ø–∏—Å–æ–∫/–º–∞—Å—Å–∏–≤
            if not isinstance(percentages, (list, tuple)):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º percentages
                if isinstance(percentages, dict) and 'percentages' in percentages:
                    percentages = percentages['percentages']
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
            if len(percentages) >= 3:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ö–æ–ª–¥–µ—Ä–∞ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–Ω–∞–π–ø–µ—Ä–æ–≤
                # –µ—Å–ª–∏ –∏—Ö –¥–æ–ª–∏ >3% –∫–∞–∂–¥–∞—è
                try:
                    top3_large = sum(1 for p in percentages[:3] if float(p) > 3.0)
                except (ValueError, TypeError):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if top3_large >= 2:
                    high_sniper_top3_count += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è <0.3%)
                    if i > 0 and len(percentages_history[i-1]) >= 3:
                        prev_percentages = percentages_history[i-1]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ prev_percentages —Ç–æ–∂–µ —Å–ø–∏—Å–æ–∫
                        if not isinstance(prev_percentages, (list, tuple)):
                            if isinstance(prev_percentages, dict) and 'percentages' in prev_percentages:
                                prev_percentages = prev_percentages['percentages']
                            else:
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        
                        try:
                            changes = [abs(float(percentages[j]) - float(prev_percentages[j])) for j in range(min(3, len(prev_percentages)))]
                            if all(change < 0.3 for change in changes):
                                stable_sniper_periods += 1
                        except (ValueError, TypeError, IndexError):
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–ø-—Å–Ω–∞–π–ø–µ—Ä—ã
        stable_sniper_threshold = len(percentages_history) * 0.25
        if stable_sniper_periods > stable_sniper_threshold:
            suspicious_points.append(f"–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–ø-—Å–Ω–∞–π–ø–µ—Ä—ã: {stable_sniper_periods} –ø–µ—Ä–∏–æ–¥–æ–≤ (>{stable_sniper_threshold:.0f})")
            return True, suspicious_points
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π: –ú–Ω–æ–≥–æ —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3
        high_sniper_threshold = len(percentages_history) * 0.6
        if high_sniper_top3_count > high_sniper_threshold:
            suspicious_points.append(f"–ú–Ω–æ–≥–æ —Å–Ω–∞–π–ø–µ—Ä–æ–≤ –≤ —Ç–æ–ø-3: {high_sniper_top3_count} —Å–ª—É—á–∞–µ–≤ (>{high_sniper_threshold:.0f})")
            return True, suspicious_points
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–Ω–Ω–∏—Ö vs —Ç–µ–∫—É—â–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        early_suspicious, early_reasons = self.analyze_early_vs_current_holders(percentages_history)
        if early_suspicious:
            suspicious_points.extend(early_reasons)
            return True, suspicious_points
        
        return False, suspicious_points

    def is_suspicious_pattern(self, percentages_history):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ bundle_analyzer.py)"""
        if not percentages_history or len(percentages_history) < 3:
            return False, []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        analysis_limit = 1000
        analysis_history = percentages_history[-analysis_limit:] if len(percentages_history) > analysis_limit else percentages_history
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä–æ–≤
        suspicious, suspicious_reasons = self.analyze_holder_stability(analysis_history)
        
        return suspicious, suspicious_reasons
    
    def parse_tokens_log_line(self, line: str) -> Optional[Dict]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∏–∑ tokens_logs —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ regex"""
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex)
        time_match = self._regex_cache['time'].match(line)
        if not time_match:
            return None
        
        timestamp_str = time_match.group(1)
        timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö
        if 'üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π:' in line:
            percentages_part = line.split('üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: ')[1]
            percentages_str = percentages_part.strip()
            
            if percentages_str:
                try:
                    percentages = [float(x.replace('%', '')) for x in percentages_str.split() if x.replace('%', '').replace('.', '').isdigit()]
                    return {
                        'type': 'holders',
                        'timestamp': timestamp,
                        'percentages': percentages
                    }
                except ValueError:
                    return None
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        elif 'üë• –•–æ–ª–¥–µ—Ä—ã:' in line:
            holders_match = self._regex_cache['holders_count'].search(line)
            if holders_match:
                return {
                    'type': 'holders_count',
                    'timestamp': timestamp,
                    'holders_count': int(holders_match.group(1))
                }
        
        elif 'üí∞ Market Cap:' in line:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –¥–ª—è mcap
            mcap_match = self._regex_cache['mcap'].search(line)
            if mcap_match:
                try:
                    mcap_str = mcap_match.group(1).replace(',', '')
                    return {
                        'type': 'mcap',
                        'timestamp': timestamp,
                        'mcap': float(mcap_str)
                    }
                except ValueError:
                    return None
        
        elif 'üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:' in line:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            liquidity_match = self._regex_cache['liquidity'].search(line)
            if liquidity_match:
                try:
                    liquidity_str = liquidity_match.group(1).replace(',', '')
                    return {
                        'type': 'liquidity',
                        'timestamp': timestamp,
                        'liquidity': float(liquidity_str)
                    }
                except ValueError:
                    return None
        
        elif 'üéØ –°–Ω–∞–π–ø–µ—Ä—ã:' in line:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –¥–ª—è —Å–Ω–∞–π–ø–µ—Ä–æ–≤
            snipers_match = self._regex_cache['snipers'].search(line)
            if snipers_match:
                try:
                    return {
                        'type': 'snipers',
                        'timestamp': timestamp,
                        'snipers_percent': float(snipers_match.group(1)),
                        'snipers_count': int(snipers_match.group(2))
                    }
                except ValueError:
                    return None
        
        elif 'üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—ã:' in line:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –¥–ª—è –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤
            insiders_match = self._regex_cache['insiders'].search(line)
            if insiders_match:
                try:
                    return {
                        'type': 'insiders',
                        'timestamp': timestamp,
                        'insiders_percent': float(insiders_match.group(1))
                    }
                except ValueError:
                    return None
        
        elif 'üë®‚Äçüíº Dev %:' in line:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –¥–ª—è dev –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            dev_match = self._regex_cache['dev'].search(line)
            if dev_match:
                try:
                    return {
                        'type': 'dev',
                        'timestamp': timestamp,
                        'dev_percent': float(dev_match.group(1))
                    }
                except ValueError:
                    return None
        
        elif 'üì¶ –ë–∞–Ω–¥–ª–µ—Ä—ã:' in line:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –¥–ª—è –±–∞–Ω–¥–ª–µ—Ä–æ–≤
            bundlers_match = self._regex_cache['bundlers'].search(line)
            if bundlers_match:
                try:
                    return {
                        'type': 'bundlers',
                        'timestamp': timestamp,
                        'bundlers_count': int(bundlers_match.group(1)),
                        'bundlers_percent': float(bundlers_match.group(2))
                    }
                except ValueError:
                    return None
        
        elif 'üìä –û–ë–©–ò–ô % –í–õ–ê–î–ï–ù–ò–Ø –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í:' in line:
            early_match = re.search(r'üìä –û–ë–©–ò–ô % –í–õ–ê–î–ï–ù–ò–Ø –†–ê–ù–ù–ò–• –•–û–õ–î–ï–†–û–í: ([0-9.]+)%', line)
            if early_match:
                try:
                    return {
                        'type': 'early_holders',
                        'timestamp': timestamp,
                        'early_holders_percent': float(early_match.group(1))
                    }
                except ValueError:
                    return None
        
        elif 'üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' in line:
            return {
                'type': 'notification_sent',
                'timestamp': timestamp
            }
        
        return None

    def analyze_tokens_log_file(self, log_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –∏–∑ tokens_logs"""
        token_id = os.path.basename(log_path).replace('.log', '')
        
        logger.info(f"\n{'='*60}")
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–∑ tokens_logs: {token_id}")
        logger.info(f"üìÅ –§–∞–π–ª: {log_path}")
        
        percentages_history = []
        latest_holders_count = None
        latest_mcap = None
        latest_liquidity = None
        latest_snipers = None
        latest_early_holders = None
        notification_sent_time = None
        
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    data = self.parse_tokens_log_line(line)
                    if not data:
                        continue
                    
                    if data['type'] == 'holders':
                        percentages_history.append(data['percentages'])
                    elif data['type'] == 'holders_count':
                        latest_holders_count = data['holders_count']
                    elif data['type'] == 'mcap':
                        latest_mcap = data['mcap']
                    elif data['type'] == 'liquidity':
                        latest_liquidity = data['liquidity']
                    elif data['type'] == 'snipers':
                        latest_snipers = data
                    elif data['type'] == 'early_holders':
                        latest_early_holders = data['early_holders_percent']
                    elif data['type'] == 'notification_sent':
                        notification_sent_time = data['timestamp']
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ - —ç—Ç–æ –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        break
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {log_path}: {e}")
            return {'token_id': token_id, 'error': str(e)}
        
        if notification_sent_time is None:
            logger.info(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {token_id}")
            return {'token_id': token_id, 'decision': 'NO_NOTIFICATION', 'reason': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_sent_time}:")
        logger.info(f"   üë• –î–µ—Ä–∂–∞—Ç–µ–ª–∏: {latest_holders_count}")
        logger.info(f"   üí∞ Market Cap: ${latest_mcap:,.0f}" if latest_mcap else "   üí∞ Market Cap: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        logger.info(f"   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${latest_liquidity:,.0f}" if latest_liquidity else "   üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        logger.info(f"   üéØ –°–Ω–∞–π–ø–µ—Ä—ã: {latest_snipers['snipers_percent']:.1f}% ({latest_snipers['snipers_count']})" if latest_snipers else "   üéØ –°–Ω–∞–π–ø–µ—Ä—ã: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        logger.info(f"   üîÑ –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã: {latest_early_holders:.1f}%" if latest_early_holders else "   üîÑ –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        logger.info(f"   üìà –°–Ω–∞–ø—à–æ—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤: {len(percentages_history)}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if latest_holders_count and latest_holders_count < self.MIN_HOLDERS:
            reason = f"–ú–∞–ª–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {latest_holders_count} < {self.MIN_HOLDERS}"
            logger.info(f"‚ùå –ù–ê–® –§–ò–õ–¨–¢–† –û–¢–ö–õ–û–ù–ò–õ –ë–´: {reason}")
            return {'token_id': token_id, 'decision': 'WOULD_REJECT', 'reason': reason, 'notification_time': notification_sent_time}
        
        if latest_holders_count and latest_holders_count > self.MAX_HOLDERS:
            reason = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {latest_holders_count} > {self.MAX_HOLDERS}"
            logger.info(f"‚ùå –ù–ê–® –§–ò–õ–¨–¢–† –û–¢–ö–õ–û–ù–ò–õ –ë–´: {reason}")
            return {'token_id': token_id, 'decision': 'WOULD_REJECT', 'reason': reason, 'notification_time': notification_sent_time}
        
        if latest_mcap and latest_mcap < self.MIN_MCAP:
            reason = f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: ${latest_mcap:,.0f} < ${self.MIN_MCAP:,.0f}"
            logger.info(f"‚ùå –ù–ê–® –§–ò–õ–¨–¢–† –û–¢–ö–õ–û–ù–ò–õ –ë–´: {reason}")
            return {'token_id': token_id, 'decision': 'WOULD_REJECT', 'reason': reason, 'notification_time': notification_sent_time}
        
        if latest_early_holders and latest_early_holders > self.MAX_EARLY_HOLDERS_PERCENT:
            reason = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É —Ä–∞–Ω–Ω–∏—Ö: {latest_early_holders:.1f}% > {self.MAX_EARLY_HOLDERS_PERCENT}%"
            logger.info(f"‚ùå –ù–ê–® –§–ò–õ–¨–¢–† –û–¢–ö–õ–û–ù–ò–õ –ë–´: {reason}")
            return {'token_id': token_id, 'decision': 'WOULD_REJECT', 'reason': reason, 'notification_time': notification_sent_time}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
        if len(percentages_history) >= 20:
            is_suspicious, suspicious_points = self.analyze_holder_stability(percentages_history)
            
            if is_suspicious:
                reason = f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤: {'; '.join(suspicious_points)}"
                logger.info(f"‚ùå –ù–ê–® –§–ò–õ–¨–¢–† –û–¢–ö–õ–û–ù–ò–õ –ë–´: {reason}")
                return {'token_id': token_id, 'decision': 'WOULD_REJECT', 'reason': reason, 'notification_time': notification_sent_time, 'suspicious_points': suspicious_points}
        else:
            logger.info(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(percentages_history)} —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
        
        # –ï—Å–ª–∏ –≤—Å–µ –Ω–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã - –∑–Ω–∞—á–∏—Ç –º—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–æ—Ç–æ–º
        logger.info(f"‚úÖ –ù–ê–® –§–ò–õ–¨–¢–† –°–û–ì–õ–ê–°–ï–ù –° –ë–û–¢–û–ú - –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ü–†–ê–í–î–ê–ù–û!")
        return {
            'token_id': token_id, 
            'decision': 'AGREE_SEND', 
            'reason': '–ù–∞—à —Ñ–∏–ª—å—Ç—Ä —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π',
            'notification_time': notification_sent_time,
            'holders_count': latest_holders_count,
            'mcap': latest_mcap,
            'early_holders_percent': latest_early_holders,
            'snapshots_count': len(percentages_history)
        }
    
    def analyze_log_file(self, log_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–ª –±—ã –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        token_id = os.path.basename(log_path).replace('.log', '')
        
        logger.info(f"\n{'='*60}")
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: {token_id}")
        logger.info(f"üìÅ –§–∞–π–ª: {log_path}")
        
        percentages_history = []
        early_holders_percent = None
        analysis_result = None
        call_time = None
        
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    data = self.parse_log_line(line)
                    if not data:
                        continue
                    
                    if data['type'] == 'holders':
                        percentages_history.append(data['percentages'])
                    elif data['type'] == 'early_holders':
                        early_holders_percent = data['early_holders_percent']
                    elif data['type'] in ['analysis_suspicious', 'analysis_rejected', 'analysis_passed']:
                        analysis_result = data['type']
                        call_time = data['timestamp']
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ - —ç—Ç–æ –º–æ–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞
                        break
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {log_path}: {e}")
            return {'token_id': token_id, 'error': str(e)}
        
        if early_holders_percent is None:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è {token_id}")
            return {'token_id': token_id, 'decision': 'NO_DATA', 'reason': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–∞—Ö'}
        
        if not analysis_result:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {token_id}")
            return {'token_id': token_id, 'decision': 'NO_DATA', 'reason': '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ {call_time}:")
        logger.info(f"   üéØ –†–∞–Ω–Ω–∏–µ —Ö–æ–ª–¥–µ—Ä—ã: {early_holders_percent:.2f}%")
        logger.info(f"   üìà –°–Ω–∞–ø—à–æ—Ç–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤: {len(percentages_history)}")
        logger.info(f"   üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–∫ –≤ bundle_analyzer.py
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤
        if early_holders_percent > self.MAX_EARLY_HOLDERS_PERCENT:
            reason = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É —Ä–∞–Ω–Ω–∏—Ö: {early_holders_percent:.2f}% > {self.MAX_EARLY_HOLDERS_PERCENT}%"
            logger.info(f"‚ùå {reason}")
            return {'token_id': token_id, 'decision': 'REJECT', 'reason': reason, 'call_time': call_time}
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
        if len(percentages_history) >= 20:
            is_suspicious, suspicious_points = self.analyze_holder_stability(percentages_history)
            
            if is_suspicious:
                reason = f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤: {'; '.join(suspicious_points)}"
                logger.info(f"‚ùå {reason}")
                return {'token_id': token_id, 'decision': 'REJECT', 'reason': reason, 'call_time': call_time, 'suspicious_points': suspicious_points}
        else:
            logger.info(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(percentages_history)} —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
        if analysis_result == 'analysis_suspicious' or analysis_result == 'analysis_rejected':
            reason = f"–ò—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–æ–∫–µ–Ω: {analysis_result}"
            logger.info(f"‚ùå {reason} (–Ω–æ –Ω–∞—à –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–≥ –±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
            return {'token_id': token_id, 'decision': 'REJECT', 'reason': reason, 'call_time': call_time}
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã - —Ç–æ–∫–µ–Ω –±—ã–ª –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        logger.info(f"‚úÖ –í–°–ï –§–ò–õ–¨–¢–†–´ –ü–†–û–ô–î–ï–ù–´ - –ë–û–¢ –û–¢–ü–†–ê–í–ò–õ –ë–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")
        return {
            'token_id': token_id, 
            'decision': 'SEND', 
            'reason': '–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã',
            'call_time': call_time,
            'early_holders_percent': early_holders_percent,
            'snapshots_count': len(percentages_history)
        }
    
    def analyze_directory(self, directory_path: str, label: str = "") -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if not os.path.exists(directory_path):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")
            return []
        
        log_files = [f for f in os.listdir(directory_path) if f.endswith('.log')]
        logger.info(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path} ({label})")
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(log_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤")
        
        results = []
        for log_file in sorted(log_files):
            log_path = os.path.join(directory_path, log_file)
            result = self.analyze_log_file(log_path)
            result['label'] = label
            results.append(result)
        
        return results
    
    def print_summary(self, results: List[Dict]):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info(f"\n{'='*80}")
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê")
        logger.info(f"{'='*80}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ª–µ–π–±–ª–∞–º
        by_label = {}
        for result in results:
            label = result.get('label', 'unknown')
            if label not in by_label:
                by_label[label] = []
            by_label[label].append(result)
        
        for label, label_results in by_label.items():
            logger.info(f"\nüè∑Ô∏è {label.upper()} –¢–û–ö–ï–ù–´:")
            
            send_count = sum(1 for r in label_results if r.get('decision') == 'SEND')
            reject_count = sum(1 for r in label_results if r.get('decision') == 'REJECT')
            error_count = sum(1 for r in label_results if r.get('decision') not in ['SEND', 'REJECT'])
            
            logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {send_count}")
            logger.info(f"   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {reject_count}")
            logger.info(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∏: {error_count}")
            logger.info(f"   üìä –í—Å–µ–≥–æ: {len(label_results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            reject_reasons = {}
            for result in label_results:
                if result.get('decision') == 'REJECT':
                    reason = result.get('reason', 'unknown')
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏—á–∏–Ω—ã
                    if '–û–±—ä–µ–º 24—á' in reason:
                        reason_key = '–ú–∞–ª—ã–π –æ–±—ä–µ–º 24—á'
                    elif '–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π' in reason and '–ú–∞–ª–æ' in reason:
                        reason_key = '–ú–∞–ª–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π'
                    elif '–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π' in reason and '–º–Ω–æ–≥–æ' in reason:
                        reason_key = '–ú–Ω–æ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π'
                    elif '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è' in reason:
                        reason_key = '–ú–∞–ª–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è'
                    elif '—Ä–∞–Ω–Ω–∏—Ö' in reason:
                        reason_key = '–ú–Ω–æ–≥–æ —É —Ä–∞–Ω–Ω–∏—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤'
                    elif '–ø–∞—Ç—Ç–µ—Ä–Ω—ã' in reason:
                        reason_key = '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤'
                    else:
                        reason_key = reason
                    
                    reject_reasons[reason_key] = reject_reasons.get(reason_key, 0) + 1
            
            if reject_reasons:
                logger.info(f"   üìã –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
                for reason, count in sorted(reject_reasons.items(), key=lambda x: x[1], reverse=True):
                    logger.info(f"      ‚Ä¢ {reason}: {count}")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º
        sent_tokens = [r for r in results if r.get('decision') == 'SEND']
        if sent_tokens:
            logger.info(f"\n‚úÖ –¢–û–ö–ï–ù–´, –ö–û–¢–û–†–´–ï –ë–û–¢ –û–¢–ü–†–ê–í–ò–õ –ë–´:")
            for result in sent_tokens:
                logger.info(f"   üéØ {result['token_id']} ({result.get('label', 'unknown')}) –≤ {result.get('call_time', 'unknown')}")


    def analyze_all_tokens_logs(self, tokens_logs_dir: str) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ tokens_logs/ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
        if not os.path.exists(tokens_logs_dir):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {tokens_logs_dir}")
            return []
        
        log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(log_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –≤ tokens_logs/")
        
        results = []
        processed = 0
        
        for log_file in log_files:
            processed += 1
            if processed % 10 == 0:
                logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{len(log_files)} —Ñ–∞–π–ª–æ–≤...")
            
            log_path = os.path.join(tokens_logs_dir, log_file)
            try:
                result = self.analyze_tokens_log_file_silent(log_path)  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                results.append(result)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {log_file}: {e}")
                
        return results
    
    def analyze_tokens_log_file_silent(self, log_path: str) -> Dict:
        """–¢–∏—Ö–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ tokens_logs (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)"""
        token_id = os.path.basename(log_path).replace('.log', '')
        
        percentages_history = []
        latest_holders_count = None
        latest_mcap = None
        latest_liquidity = None
        latest_snipers = None
        latest_early_holders = None
        notification_sent_time = None
        
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    data = self.parse_tokens_log_line(line)
                    if not data:
                        continue
                    
                    if data['type'] == 'holders':
                        percentages_history.append(data['percentages'])
                    elif data['type'] == 'holders_count':
                        latest_holders_count = data['holders_count']
                    elif data['type'] == 'mcap':
                        latest_mcap = data['mcap']
                    elif data['type'] == 'liquidity':
                        latest_liquidity = data['liquidity']
                    elif data['type'] == 'snipers':
                        latest_snipers = data
                    elif data['type'] == 'early_holders':
                        latest_early_holders = data['early_holders_percent']
                    elif data['type'] == 'notification_sent':
                        notification_sent_time = data['timestamp']
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ - —ç—Ç–æ –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        break
        
        except Exception as e:
            return {'token_id': token_id, 'decision': 'ERROR', 'reason': str(e), 'metrics_count': 0}
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        metrics_count = sum([
            1 if latest_holders_count is not None else 0,
            1 if latest_mcap is not None else 0,
            1 if latest_liquidity is not None else 0,
            1 if latest_snipers is not None else 0,
            1 if latest_early_holders is not None else 0,
            1 if len(percentages_history) > 0 else 0,
            1 if notification_sent_time is not None else 0
        ])
        
        if notification_sent_time is None:
            return {
                'token_id': token_id, 
                'decision': 'NO_NOTIFICATION', 
                'reason': '–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                'metrics_count': metrics_count,
                'holders_count': latest_holders_count,
                'mcap': latest_mcap,
                'liquidity': latest_liquidity,
                'early_holders_percent': latest_early_holders,
                'snapshots_count': len(percentages_history)
            }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –±—ã—Å—Ç—Ä–æ
        if latest_holders_count and latest_holders_count < self.MIN_HOLDERS:
            return {
                'token_id': token_id, 
                'decision': 'WOULD_REJECT', 
                'reason': f'–ú–∞–ª–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π ({latest_holders_count})',
                'metrics_count': metrics_count,
                'holders_count': latest_holders_count,
                'mcap': latest_mcap,
                'liquidity': latest_liquidity,
                'early_holders_percent': latest_early_holders,
                'snapshots_count': len(percentages_history)
            }
        
        if latest_holders_count and latest_holders_count > self.MAX_HOLDERS:
            return {
                'token_id': token_id, 
                'decision': 'WOULD_REJECT', 
                'reason': f'–ú–Ω–æ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π ({latest_holders_count})',
                'metrics_count': metrics_count,
                'holders_count': latest_holders_count,
                'mcap': latest_mcap,
                'liquidity': latest_liquidity,
                'early_holders_percent': latest_early_holders,
                'snapshots_count': len(percentages_history)
            }
        
        if latest_mcap and latest_mcap < self.MIN_MCAP:
            return {
                'token_id': token_id, 
                'decision': 'WOULD_REJECT', 
                'reason': f'–ú–∞–ª–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (${latest_mcap:,.0f})',
                'metrics_count': metrics_count,
                'holders_count': latest_holders_count,
                'mcap': latest_mcap,
                'liquidity': latest_liquidity,
                'early_holders_percent': latest_early_holders,
                'snapshots_count': len(percentages_history)
            }
        
        if latest_early_holders and latest_early_holders > self.MAX_EARLY_HOLDERS_PERCENT:
            return {
                'token_id': token_id, 
                'decision': 'WOULD_REJECT', 
                'reason': f'–ú–Ω–æ–≥–æ —É —Ä–∞–Ω–Ω–∏—Ö ({latest_early_holders:.1f}%)',
                'metrics_count': metrics_count,
                'holders_count': latest_holders_count,
                'mcap': latest_mcap,
                'liquidity': latest_liquidity,
                'early_holders_percent': latest_early_holders,
                'snapshots_count': len(percentages_history)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ "–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–≥–æ–≤" –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if token_id in GENIUS_RUG_BLACKLIST:
            return {
                'token_id': token_id, 
                'decision': 'WOULD_REJECT', 
                'reason': '–¢–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ',
                'metrics_count': metrics_count,
                'holders_count': latest_holders_count,
                'mcap': latest_mcap,
                'liquidity': latest_liquidity,
                'early_holders_percent': latest_early_holders,
                'snapshots_count': len(percentages_history)
            }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤
        if len(percentages_history) >= 20:
            is_suspicious, suspicious_points = self.analyze_holder_stability(percentages_history)
            
            if is_suspicious:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—Å–µ–≥–¥–∞
                GENIUS_RUG_BLACKLIST.add(token_id)
                save_blacklist()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                short_reason = suspicious_points[0] if suspicious_points else "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"
                return {
                    'token_id': token_id, 
                    'decision': 'WOULD_REJECT', 
                    'reason': f"{short_reason} (–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)",
                    'metrics_count': metrics_count,
                    'holders_count': latest_holders_count,
                    'mcap': latest_mcap,
                    'liquidity': latest_liquidity,
                    'early_holders_percent': latest_early_holders,
                    'snapshots_count': len(percentages_history)
                }
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        return {
            'token_id': token_id, 
            'decision': 'AGREE_SEND', 
            'reason': '–°–æ–≥–ª–∞—Å–Ω—ã —Å –±–æ—Ç–æ–º',
            'metrics_count': metrics_count,
            'holders_count': latest_holders_count,
            'mcap': latest_mcap,
            'liquidity': latest_liquidity,
            'early_holders_percent': latest_early_holders,
            'snapshots_count': len(percentages_history)
        }

    async def analyze_all_tokens_with_full_criteria(self, tokens_logs_dir: str) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –±–æ–ª—å—à–∏–º–∏ –ø–∞—á–∫–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        results = []
        
        if not os.path.exists(tokens_logs_dir):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return results
        
        log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
        
        if not log_files:
            logger.error(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tokens_logs_dir} –Ω–µ—Ç .log —Ñ–∞–π–ª–æ–≤")
            return results
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
        log_paths = [os.path.join(tokens_logs_dir, f) for f in log_files]
        
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —è–¥—Ä–∞ + –≥–∏–ø–µ—Ä–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
        num_processes = multiprocessing.cpu_count() * 2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–ø–µ—Ä–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
        batch_size = max(200, len(log_paths) // num_processes)  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –±–∞—Ç—á–∏: –º–∏–Ω–∏–º—É–º 200
        
        logger.info(f"üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨: {len(log_files)} —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {num_processes}, –ü–∞—á–∫–∞: {batch_size}")
        
        start_time = time.time()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–∏–º–∏ –ø–∞—á–∫–∞–º–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ProcessPoolExecutor(max_workers=num_processes) as executor:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—á–∫–∏
            batches = [log_paths[i:i + batch_size] for i in range(0, len(log_paths), batch_size)]
            
            logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(batches)} –ø–∞—á–µ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
            
            for batch_idx, batch in enumerate(batches):
                logger.info(f"üîÑ –ü–∞—á–∫–∞ {batch_idx + 1}/{len(batches)}: {len(batch)} —Ç–æ–∫–µ–Ω–æ–≤...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—á–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                future_to_path = {executor.submit(process_single_token_sync, path): path for path in batch}
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—á–∫–∏
                batch_results = []
                for future in future_to_path:
                    try:
                        result = future.result(timeout=60*10)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —Ç–æ–∫–µ–Ω –º–∞–∫—Å–∏–º—É–º (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
                        batch_results.append(result)
                    except Exception as e:
                        path = future_to_path[future]
                        token_id = os.path.basename(path).replace('.log', '')
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        import concurrent.futures
                        if isinstance(e, concurrent.futures.TimeoutError):
                            error_message = f'Timeout: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (600 —Å–µ–∫)'
                            logger.warning(f"‚è∞ Timeout {token_id}: –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª –±–æ–ª–µ–µ 600 —Å–µ–∫—É–Ω–¥")
                        else:
                            error_message = f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}'
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {token_id}: {e}")
                            
                        error_result = {
                            'token_id': token_id,
                            'decision': 'ERROR',
                            'reason': error_message
                        }
                        # –õ–æ–≥–∏—Ä—É–µ–º timeout/–æ—à–∏–±–∫—É
                        log_token_result(error_result)
                        batch_results.append(error_result)
                
                results.extend(batch_results)
                
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed = len(results)
                elapsed = time.time() - start_time
                speed = processed / elapsed if elapsed > 0 else 0
                eta = (len(log_paths) - processed) / speed if speed > 0 else 0
                
                logger.info(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(log_paths)} ({speed:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫, ETA: {eta/60:.1f} –º–∏–Ω)")
        
        total_time = time.time() - start_time
        final_speed = len(results) / total_time if total_time > 0 else 0
        
        logger.info(f"üéØ –ó–ê–í–ï–†–®–ï–ù–û –∑–∞ {total_time:.1f} —Å–µ–∫!")
        logger.info(f"‚ö° –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {final_speed:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} —Ç–æ–∫–µ–Ω–æ–≤")
        
        return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TokenFilterTester()
    
    logger.info("üöÄ –¢–£–†–ë–û-–ê–ù–ê–õ–ò–ó ACTIVITY –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–∞–π–ª –ª–æ–≥–∞
    file_logger.info("="*100)
    file_logger.info("üöÄ –¢–£–†–ë–û-–ê–ù–ê–õ–ò–ó ACTIVITY –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    file_logger.info("="*100)
    file_logger.info("üìä –ö–†–ò–¢–ï–†–ò–ò ACTIVITY –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
    file_logger.info("   ‚Ä¢ –•–æ–ª–¥–µ—Ä—ã: 30-130 (–º–∞–∫—Å–∏–º—É–º –∫–æ–≥–¥–∞-–ª–∏–±–æ ‚â§150)")
    file_logger.info("   ‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ‚â•$10,000")
    file_logger.info("   ‚Ä¢ –†–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤: ‚â•2900/–º–∏–Ω")
    file_logger.info("   ‚Ä¢ Dev –ø—Ä–æ—Ü–µ–Ω—Ç: ‚â§2%")
    file_logger.info("   ‚Ä¢ –°–Ω–∞–π–ø–µ—Ä—ã: ‚â§20 —à—Ç—É–∫ –∏ ‚â§3.5% (–∏–ª–∏ ‚â§5% —Å rapid exit)")
    file_logger.info("   ‚Ä¢ –ò–Ω—Å–∞–π–¥–µ—Ä—ã: ‚â§15% (–∏–ª–∏ ‚â§22% —Å rapid exit)")
    file_logger.info("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤")
    file_logger.info("üîß –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –õ–û–ì–û–í:")
    file_logger.info("   ‚Ä¢ –¢–æ–∫–µ–Ω—ã —Å <30 —Ö–æ–ª–¥–µ—Ä–∞–º–∏ –ù–ï –ª–æ–≥–∏—Ä—É—é—Ç—Å—è (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—É–º–∞)")
    file_logger.info("="*100)
    
    start_time = time.time()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–ª–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    results = await tester.analyze_all_tokens_with_full_criteria(tokens_logs_dir)
    
    if not results:
        logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Ç—Ä–∏–∫ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    results.sort(key=lambda x: x.get('metrics_count', 0), reverse=True)
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º bundle_analyzer.py
    total_tokens = len(results)
    would_send = sum(1 for r in results if r.get('decision') == 'WOULD_SEND')
    would_reject = sum(1 for r in results if r.get('decision') == 'WOULD_REJECT')
    blacklisted = sum(1 for r in results if r.get('decision') == 'BLACKLISTED')
    errors = sum(1 for r in results if r.get('decision') == 'ERROR')
    no_data = sum(1 for r in results if r.get('decision') == 'NO_DATA')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ ACTIVITY —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
    activity_notifications = sum(1 for r in results if r.get('notification_type') == 'ACTIVITY' and r.get('decision') == 'WOULD_SEND')
    
    logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ACTIVITY –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (bundle_analyzer.py) - {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤:")
    logger.info(f"üöÄ ACTIVITY WOULD_SEND: {activity_notifications} ({activity_notifications/total_tokens*100:.1f}%)")
    logger.info(f"‚ùå WOULD_REJECT: {would_reject} ({would_reject/total_tokens*100:.1f}%)")
    logger.info(f"‚ö´ BLACKLISTED: {blacklisted} ({blacklisted/total_tokens*100:.1f}%)")
    logger.info(f"üí• ERRORS: {errors} ({errors/total_tokens*100:.1f}%)")
    logger.info(f"üìä NO_DATA: {no_data} ({no_data/total_tokens*100:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    global filtered_low_holders_count
    if filtered_low_holders_count > 0:
        logger.info(f"üîá –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û (< 30 —Ö–æ–ª–¥–µ—Ä–æ–≤): {filtered_low_holders_count} (–Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥)")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º)
    logger.info(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º):")
    logger.info(f"{'–¢–æ–∫–µ–Ω':<12} {'–ú–µ—Ç—Ä–∏–∫–∏':<8} {'–†–µ—à–µ–Ω–∏–µ':<15} {'–ü—Ä–∏—á–∏–Ω–∞':<40} {'–î–µ—Ä–∂–∞—Ç–µ–ª–∏':<10} {'–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è':<15}")
    logger.info("-" * 110)
    
    for result in results:
        token_id = result['token_id'][:11]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ ID
        metrics = f"{result.get('metrics_count', 0)}/7"
        decision = result.get('decision', 'UNKNOWN')[:14]
        reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')[:39]
        holders = str(result.get('holders_count', '-'))[:9]
        mcap = f"${result.get('mcap', 0):,.0f}" if result.get('mcap') else "-"
        mcap = mcap[:14]
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è ACTIVITY
        if decision == 'WOULD_SEND':
            status = 'üöÄ'  # ACTIVITY
        elif decision == 'WOULD_REJECT':
            status = '‚ùå'
        elif decision == 'BLACKLISTED':
            status = '‚ö´'
        elif decision == 'ERROR':
            status = 'üí•'
        elif decision == 'NO_DATA':
            status = 'üìä'
        else:
            status = '‚ùì'
        
        logger.info(f"{token_id:<12} {metrics:<8} {status} {decision:<14} {reason:<40} {holders:<10} {mcap:<15}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–∏—á–∏–Ω–∞–º (–∫–∞–∫ –≤ bundle_analyzer.py)
    all_reasons = {}
    for result in results:
        reason = result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
        all_reasons[reason] = all_reasons.get(reason, 0) + 1
    
    if all_reasons:
        logger.info(f"\nüìä –¢–û–ü –ö–†–ò–¢–ï–†–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò (bundle_analyzer.py style):")
        for reason, count in sorted(all_reasons.items(), key=lambda x: x[1], reverse=True)[:15]:
            logger.info(f"   ‚Ä¢ {reason}: {count} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ ACTIVITY —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    activity_examples = [r for r in results if r.get('decision') == 'WOULD_SEND' and r.get('notification_type') == 'ACTIVITY']
    if activity_examples:
        logger.info(f"\nüöÄ –ü–†–ò–ú–ï–†–´ –¢–û–ö–ï–ù–û–í, –ö–û–¢–û–†–´–ï –ü–†–û–®–õ–ò ACTIVITY –§–ò–õ–¨–¢–†–ê–¶–ò–Æ:")
        for example in activity_examples[:5]:
            logger.info(f"   ‚Ä¢ {example['token_id']}: {example['reason']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã blacklisted —Ç–æ–∫–µ–Ω–æ–≤
    blacklisted_examples = [r for r in results if r.get('decision') == 'BLACKLISTED']
    if blacklisted_examples:
        logger.info(f"\n‚ö´ –ü–†–ò–ú–ï–†–´ –¢–û–ö–ï–ù–û–í –í –ß–ï–†–ù–û–ú –°–ü–ò–°–ö–ï:")
        for example in blacklisted_examples[:3]:
            logger.info(f"   ‚Ä¢ {example['token_id']}: {example['reason']}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª –ª–æ–≥–∞
    total_time = time.time() - start_time
    final_speed = len(results) / total_time if total_time > 0 else 0
    
    file_logger.info("="*100)
    file_logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê")
    file_logger.info("="*100)
    file_logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    file_logger.info(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_speed:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
    file_logger.info(f"üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(results)}")
    file_logger.info(f"üöÄ ACTIVITY –ø—Ä–æ—à–ª–∏: {activity_notifications} ({activity_notifications/len(results)*100:.1f}%)")
    file_logger.info(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {would_reject} ({would_reject/len(results)*100:.1f}%)")
    file_logger.info(f"‚ö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklisted} ({blacklisted/len(results)*100:.1f}%)")
    file_logger.info(f"üí• –û—à–∏–±–∫–∏: {errors} ({errors/len(results)*100:.1f}%)")
    file_logger.info(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {no_data} ({no_data/len(results)*100:.1f}%)")
    file_logger.info("="*100)
    
    if activity_examples:
        file_logger.info("üöÄ –ü–†–ò–ú–ï–†–´ –¢–û–ö–ï–ù–û–í, –ü–†–û–®–ï–î–®–ò–• ACTIVITY –§–ò–õ–¨–¢–†–ê–¶–ò–Æ:")
        for example in activity_examples[:10]:  # –ë–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
            file_logger.info(f"   ‚úÖ {example['token_id']}: {example['reason']}")
    
    if blacklisted_examples:
        file_logger.info("‚ö´ –ü–†–ò–ú–ï–†–´ –¢–û–ö–ï–ù–û–í –í –ß–ï–†–ù–û–ú –°–ü–ò–°–ö–ï:")
        for example in blacklisted_examples[:10]:
            file_logger.info(f"   ‚ö´ {example['token_id']}: {example['reason']}")
    
    file_logger.info("="*100)
    file_logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù! –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_filter.log")
    file_logger.info("="*100)
    
    logger.info(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: test_filter.log")
    logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: {len(results)} —Ç–æ–∫–µ–Ω–æ–≤")


if __name__ == "__main__":
    asyncio.run(main())