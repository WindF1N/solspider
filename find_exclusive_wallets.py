#!/usr/bin/env python3

import os
import sys
import re
from collections import defaultdict

EBOSHERS_LOGS_DIR = "eboshers_logs"

def generate_output_filename(target_wallet_address: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞."""
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    filename_prefix = target_wallet_address[:8]
    return f"exclusive_wallets_{filename_prefix}.txt"

def find_exclusive_wallets_for_target_contract(target_wallet_address: str):
    """–í—ã—è–≤–ª—è–µ—Ç –∫–æ—à–µ–ª—å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¢–û–õ–¨–ö–û —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏, –≥–¥–µ –µ—Å—Ç—å target_wallet_address."""
    print(f"üîç –ò—â–µ–º –∫–æ—à–µ–ª—å–∫–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å {target_wallet_address}...")

    if not os.path.exists(EBOSHERS_LOGS_DIR):
        print(f"‚ùå –ü–∞–ø–∫–∞ {EBOSHERS_LOGS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–ª–æ–≤–∞—Ä—å: wallet_address -> set(contract_addresses, –≥–¥–µ –Ω–∞–π–¥–µ–Ω —ç—Ç–æ—Ç wallet)
    wallet_to_contracts_map = defaultdict(set)

    # –ê–¥—Ä–µ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞: [YYYY-MM-DD HH:MM:SS] [WALLET_ADDRESS] ...
    wallet_pattern = re.compile(r'\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\]\s\[([a-zA-Z0-9]{30,})\]')

    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –∫–æ—à–µ–ª—å–∫–∏ –≤ –∫–∞–∫–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è
    for filename in os.listdir(EBOSHERS_LOGS_DIR):
        if filename.endswith('.log'):
            contract_address = filename.replace('.log', '')
            filepath = os.path.join(EBOSHERS_LOGS_DIR, filename)

            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    for line in f:
                        match = wallet_pattern.match(line)
                        if match:
                            current_wallet = match.group(1)
                            wallet_to_contracts_map[current_wallet].add(contract_address)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç target_wallet_address
    target_wallet_contracts = wallet_to_contracts_map.get(target_wallet_address, set())

    if not target_wallet_contracts:
        print(f"ü§∑‚Äç‚ôÇÔ∏è –¶–µ–ª–µ–≤–æ–π –∫–æ—à–µ–ª–µ–∫ {target_wallet_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ.")
        return

    exclusive_wallets_data = []

    # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for wallet, contracts_set in wallet_to_contracts_map.items():
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —Ü–µ–ª–µ–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if wallet == target_wallet_address:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∞ —É—Å–ª–æ–≤–∏—è:
        # 1. –ö–æ—à–µ–ª–µ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Ü–µ–ª–µ–≤—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
        # 2. –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫, —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–ª–µ–≤–æ–π –∫–æ—à–µ–ª–µ–∫
        #    (—Ç.–µ. contracts_set —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º target_wallet_contracts)
        
        # intersection_contracts = contracts_set.intersection(target_wallet_contracts)
        # if intersection_contracts and contracts_set.issubset(target_wallet_contracts):
        #     exclusive_wallets_data.append({'wallet': wallet, 'shared_contracts': sorted(list(intersection_contracts))})

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ä–µ–¥–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        # –ò –ø—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–±—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ü–µ–ª–µ–≤—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
        if contracts_set.issubset(target_wallet_contracts) and not contracts_set.isdisjoint(target_wallet_contracts):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –≤ —ç—Ç–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
            # –≠—Ç–æ —É–∂–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ contracts_set.issubset(target_wallet_contracts)
            # –∏ contracts_set –Ω–µ –ø—É—Å—Ç (—á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –∏–∑ not contracts_set.isdisjoint(target_wallet_contracts))
            
            exclusive_wallets_data.append({
                'wallet': wallet,
                'shared_contracts': sorted(list(contracts_set))
            })

    if not exclusive_wallets_data:
        print(f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å {target_wallet_address}.")
        return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤

    # –®–∞–≥ 3: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
    contract_density = defaultdict(int)
    for entry in exclusive_wallets_data:
        for contract in entry['shared_contracts']:
            contract_density[contract] += 1

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
    sorted_contract_density = sorted(contract_density.items(), key=lambda item: item[1], reverse=True)

    output_filename = generate_output_filename(target_wallet_address)
    
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write(f"–ö–æ—à–µ–ª—å–∫–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –¢–û–õ–¨–ö–û —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ {target_wallet_address}:\n")
        f.write(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {len(exclusive_wallets_data)}\n\n")
        
        for entry in exclusive_wallets_data:
            wallet = entry['wallet']
            shared_contracts = entry['shared_contracts']
            
            print(f"–ö–æ—à–µ–ª–µ–∫: {wallet}")
            f.write(f"–ö–æ—à–µ–ª–µ–∫: {wallet}\n")
            print("  –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã:")
            f.write("  –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã:\n")
            for contract in shared_contracts:
                print(f"    - {contract}")
                f.write(f"    - {contract}\n")
            print("\n")
            f.write("\n")

        # –í—ã–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ø–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        if sorted_contract_density:
            f.write(f"\n--- –¢–æ–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ {len(sorted_contract_density)}) ---\n")
            print(f"\n--- –¢–æ–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ {len(sorted_contract_density)}) ---")
            for i, (contract, count) in enumerate(sorted_contract_density[:10]): # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø 10 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                print(f"  {i+1}. {contract} (–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {count})")
                f.write(f"  {i+1}. {contract} (–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {count})\n")
        else:
            f.write("\nü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏.\n")
            print("\nü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏.\n")

        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_filename}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python find_exclusive_wallets.py <target_wallet_address>")
        print("–ü—Ä–∏–º–µ—Ä: python find_exclusive_wallets.py niggerd597QYedtvjQDVHZTCCGyJrwHNm2i49dkm5zS")
        sys.exit(1)

    target_wallet = sys.argv[1]
    find_exclusive_wallets_for_target_contract(target_wallet)
