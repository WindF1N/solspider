#!/usr/bin/env python3
"""
–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ç–≤–∏—Ç–∞–º–∏ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Excel
"""

import pandas as pd
from datetime import datetime, timedelta
import logging
from dotenv import load_dotenv
from database import get_db_manager, Token
from logger_config import setup_logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

def export_contract_tokens_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–≤–∏—Ç–∞–º–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –≤ Excel"""
    session = None
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        logger.info("üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–≤–∏—Ç–∞–º–∏ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        
        # –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã –≥–¥–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        tokens = session.query(Token).filter(
            Token.twitter_contract_tweets > 0,  # –ù–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
            Token.mint.isnot(None),             # –ï—Å—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            Token.symbol.isnot(None)            # –ï—Å—Ç—å —Å–∏–º–≤–æ–ª
        ).order_by(Token.twitter_contract_tweets.desc()).all()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ç–≤–∏—Ç–∞–º–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É")
        
        if not tokens:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–≤–∏—Ç–∞–º–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É")
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        
        for token in tokens:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
            age_hours = (datetime.utcnow() - token.created_at).total_seconds() / 3600
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            time_to_find = None
            if token.updated_at and token.created_at:
                time_to_find_hours = (token.updated_at - token.created_at).total_seconds() / 3600
                time_to_find = f"{time_to_find_hours:.1f} —á"
            
            export_data.append({
                '–°–∏–º–≤–æ–ª': token.symbol,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': token.name or 'N/A',
                '–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞': token.mint,
                '–¢–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º': token.twitter_contract_tweets,
                'Market Cap ($)': f"{token.market_cap:,.0f}" if token.market_cap else 'N/A',
                '–í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ (—á)': f"{age_hours:.1f}",
                '–í—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': time_to_find or 'N/A',
                '–°–æ–∑–¥–∞–Ω': token.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                '–û–±–Ω–∞—Ä—É–∂–µ–Ω': token.updated_at.strftime('%Y-%m-%d %H:%M:%S') if token.updated_at else 'N/A',
                '–¢–≤–∏—Ç—ã —Å–∏–º–≤–æ–ª–∞': token.twitter_symbol_tweets or 0,
                '–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': token.twitter_engagement or 0,
                'Twitter —Ä–µ–π—Ç–∏–Ω–≥': token.twitter_rating or 'N/A',
                'Twitter —Å–∫–æ—Ä': f"{token.twitter_score:.2f}" if token.twitter_score else 'N/A',
                'Bonding Curve': token.bonding_curve_key or 'N/A',
                '–û–ø–∏—Å–∞–Ω–∏–µ': (token.description or '')[:100] + '...' if token.description and len(token.description) > 100 else token.description or 'N/A',
                '–°—Å—ã–ª–∫–∏': f"https://pump.fun/{token.mint}",
                'DexScreener': f"https://dexscreener.com/solana/{token.mint}",
                'Axiom Trade': f"https://axiom.trade/meme/{token.bonding_curve_key or token.mint}"
            })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(export_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"contract_tokens_{timestamp}.xlsx"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–¢–æ–∫–µ–Ω—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            worksheet = writer.sheets['–¢–æ–∫–µ–Ω—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏']
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            worksheet.freeze_panes = 'A2'
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        logger.info(f"üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É
        total_tweets = sum(token.twitter_contract_tweets for token in tokens)
        avg_tweets = total_tweets / len(tokens) if tokens else 0
        
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏: {total_tweets}")
        logger.info(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Ç–æ–∫–µ–Ω: {avg_tweets:.1f}")
        logger.info(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–≤–∏—Ç–æ–≤: {max(token.twitter_contract_tweets for token in tokens)}")
        logger.info(f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º —Ç–≤–∏—Ç–æ–≤: {min(token.twitter_contract_tweets for token in tokens)}")
        
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return None
    finally:
        if session:
            session.close()

def export_recent_contract_tokens(hours=24):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–≤–∏—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
    session = None
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        cutoff_time = datetime.utcnow() - timedelta(hours=hours)
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤...")
        
        # –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã –≥–¥–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
        tokens = session.query(Token).filter(
            Token.twitter_contract_tweets > 0,  # –ù–∞–π–¥–µ–Ω—ã —Ç–≤–∏—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
            Token.updated_at >= cutoff_time,    # –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
            Token.mint.isnot(None),             # –ï—Å—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            Token.symbol.isnot(None)            # –ï—Å—Ç—å —Å–∏–º–≤–æ–ª
        ).order_by(Token.updated_at.desc()).all()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
        
        if not tokens:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
        export_data = []
        
        for token in tokens:
            age_hours = (datetime.utcnow() - token.created_at).total_seconds() / 3600
            time_to_find = None
            if token.updated_at and token.created_at:
                time_to_find_hours = (token.updated_at - token.created_at).total_seconds() / 3600
                time_to_find = f"{time_to_find_hours:.1f} —á"
            
            export_data.append({
                '–°–∏–º–≤–æ–ª': token.symbol,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': token.name or 'N/A',
                '–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞': token.mint,
                '–¢–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º': token.twitter_contract_tweets,
                'Market Cap ($)': f"{token.market_cap:,.0f}" if token.market_cap else 'N/A',
                '–í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ (—á)': f"{age_hours:.1f}",
                '–í—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': time_to_find or 'N/A',
                '–°–æ–∑–¥–∞–Ω': token.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                '–û–±–Ω–∞—Ä—É–∂–µ–Ω': token.updated_at.strftime('%Y-%m-%d %H:%M:%S') if token.updated_at else 'N/A',
                '–¢–≤–∏—Ç—ã —Å–∏–º–≤–æ–ª–∞': token.twitter_symbol_tweets or 0,
                '–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': token.twitter_engagement or 0,
                'Twitter —Ä–µ–π—Ç–∏–Ω–≥': token.twitter_rating or 'N/A',
                'Twitter —Å–∫–æ—Ä': f"{token.twitter_score:.2f}" if token.twitter_score else 'N/A',
                'Bonding Curve': token.bonding_curve_key or 'N/A',
                '–û–ø–∏—Å–∞–Ω–∏–µ': (token.description or '')[:100] + '...' if token.description and len(token.description) > 100 else token.description or 'N/A',
                '–°—Å—ã–ª–∫–∏': f"https://pump.fun/{token.mint}",
                'DexScreener': f"https://dexscreener.com/solana/{token.mint}",
                'Axiom Trade': f"https://axiom.trade/meme/{token.bonding_curve_key or token.mint}"
            })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(export_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"contract_tokens_last_{hours}h_{timestamp}.xlsx"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name=f'–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∑–∞ {hours}—á', index=False)
            
            worksheet = writer.sheets[f'–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∑–∞ {hours}—á']
            
            # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            worksheet.freeze_panes = 'A2'
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {hours} —á–∞—Å–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞ {hours} —á–∞—Å–æ–≤: {e}")
        return None
    finally:
        if session:
            session.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
    filename1 = export_contract_tokens_to_excel()
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    filename2 = export_recent_contract_tokens(24)
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
    filename3 = export_recent_contract_tokens(6)
    
    logger.info("üìä –ò–¢–û–ì–û–í–´–ï –§–ê–ô–õ–´:")
    if filename1:
        logger.info(f"  ‚Ä¢ –í—Å–µ —Ç–æ–∫–µ–Ω—ã: {filename1}")
    if filename2:
        logger.info(f"  ‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {filename2}")
    if filename3:
        logger.info(f"  ‚Ä¢ –ó–∞ 6 —á–∞—Å–æ–≤: {filename3}")
    
    logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()