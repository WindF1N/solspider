#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ Twitter –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º —Ç–æ–∫–µ–Ω–æ–≤
"""

import sys
import os
from datetime import datetime, timedelta
from collections import Counter, defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from database import get_db_manager, TwitterAuthor, TweetMention

def analyze_top_authors():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ Twitter –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º —Ç–æ–∫–µ–Ω–æ–≤")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ —Å –∏—Ö –º–µ—Ç—Ä–∏–∫–∞–º–∏
        authors = session.query(TwitterAuthor).all()
        
        if not authors:
            print("‚ùå –ê–≤—Ç–æ—Ä—ã Twitter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(authors)} –∞–≤—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
        author_mentions = {}
        author_details = {}
        
        for author in authors:
            # –°—á–∏—Ç–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
            mentions_count = session.query(TweetMention).filter_by(author_username=author.username).count()
            
            author_mentions[author.username] = mentions_count
            author_details[author.username] = {
                'display_name': author.display_name or author.username,
                'followers': author.followers_count,
                'verified': author.is_verified,
                'first_seen': author.first_seen,
                'last_updated': author.last_updated,
                'bio': author.bio[:100] + "..." if author.bio and len(author.bio) > 100 else author.bio
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        top_authors = sorted(author_mentions.items(), key=lambda x: x[1], reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–ü-20 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
        print("üèÜ –¢–û–ü-20 –ê–í–¢–û–†–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –£–ü–û–ú–ò–ù–ê–ù–ò–ô –¢–û–ö–ï–ù–û–í:")
        print("-" * 80)
        print(f"{'‚Ññ':<3} {'@Username':<20} {'–ò–º—è':<25} {'–£–ø–æ–º–∏–Ω–∞–Ω–∏—è':<12} {'–ü–æ–¥–ø–∏—Å—á–∏–∫–∏':<12} {'‚úì'}")
        print("-" * 80)
        
        for i, (username, mentions) in enumerate(top_authors[:20], 1):
            details = author_details[username]
            verified_mark = "‚úÖ" if details['verified'] else ""
            followers = f"{details['followers']:,}" if details['followers'] else "N/A"
            display_name = details['display_name'][:24] if details['display_name'] else username
            
            print(f"{i:<3} @{username:<19} {display_name:<25} {mentions:<12} {followers:<12} {verified_mark}")
        
        print("\n" + "=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verified_authors = [a for a in authors if a.is_verified]
        total_mentions_verified = sum(author_mentions[a.username] for a in verified_authors)
        total_mentions_all = sum(author_mentions.values())
        
        print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤: {len(authors)}")
        print(f"   ‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(verified_authors)} ({len(verified_authors)/len(authors)*100:.1f}%)")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_mentions_all:,}")
        print(f"   ‚Ä¢ –û—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_mentions_verified:,} ({total_mentions_verified/total_mentions_all*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        print(f"\nüë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú:")
        followers_ranges = {
            "üî• 1M+": [a for a in authors if a.followers_count and a.followers_count >= 1_000_000],
            "‚≠ê 100K-1M": [a for a in authors if a.followers_count and 100_000 <= a.followers_count < 1_000_000],
            "üìà 10K-100K": [a for a in authors if a.followers_count and 10_000 <= a.followers_count < 100_000],
            "üå± 1K-10K": [a for a in authors if a.followers_count and 1_000 <= a.followers_count < 10_000],
            "üî∞ <1K": [a for a in authors if a.followers_count and a.followers_count < 1_000],
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": [a for a in authors if not a.followers_count]
        }
        
        for range_name, authors_list in followers_ranges.items():
            count = len(authors_list)
            if count > 0:
                total_mentions_range = sum(author_mentions[a.username] for a in authors_list)
                avg_mentions = total_mentions_range / count if count > 0 else 0
                print(f"   ‚Ä¢ {range_name}: {count} –∞–≤—Ç–æ—Ä–æ–≤, {total_mentions_range:,} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π (avg: {avg_mentions:.1f})")
        
        # –¢–æ–ø –∞–≤—Ç–æ—Ä—ã –ø–æ –≤–ª–∏—è–Ω–∏—é (–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ √ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)
        print(f"\nüíé –¢–û–ü-10 –ü–û –í–õ–ò–Ø–ù–ò–Æ (–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ √ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è):")
        print("-" * 70)
        
        influence_scores = []
        for username, mentions in author_mentions.items():
            details = author_details[username]
            followers = details['followers'] or 0
            influence = followers * mentions
            if influence > 0:
                influence_scores.append((username, influence, followers, mentions))
        
        influence_scores.sort(key=lambda x: x[1], reverse=True)
        
        for i, (username, influence, followers, mentions) in enumerate(influence_scores[:10], 1):
            details = author_details[username]
            verified_mark = "‚úÖ" if details['verified'] else ""
            print(f"{i:2}. @{username:<18} {influence:>12,} ({followers:,} √ó {mentions}) {verified_mark}")
        
        # –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        week_ago = datetime.utcnow() - timedelta(days=7)
        recent_mentions = session.query(TweetMention).filter(TweetMention.discovered_at >= week_ago).all()
        
        if recent_mentions:
            print(f"\nüìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–Æ–Æ –ù–ï–î–ï–õ–Æ ({len(recent_mentions)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π):")
            print("-" * 50)
            
            recent_authors = Counter(mention.author_username for mention in recent_mentions)
            
            for i, (username, mentions) in enumerate(recent_authors.most_common(10), 1):
                if username in author_details:
                    details = author_details[username]
                    verified_mark = "‚úÖ" if details['verified'] else ""
                    print(f"{i:2}. @{username:<18} {mentions:>3} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π {verified_mark}")
        
        session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

def analyze_blacklisted_authors():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    
    # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ pump_bot.py
    blacklist = {
        'launchonpump', 'pumpdotfun', 'pump_fun', 'pumpfun', 'fake_aio'
    }
    
    print(f"\nüö´ –ê–ù–ê–õ–ò–ó –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê ({len(blacklist)} –∞–≤—Ç–æ—Ä–æ–≤):")
    print("-" * 50)
    
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        for username in blacklist:
            author = session.query(TwitterAuthor).filter_by(username=username).first()
            if author:
                mentions_count = session.query(TweetMention).filter_by(author_username=username).count()
                followers = f"{author.followers_count:,}" if author.followers_count else "N/A"
                verified_mark = "‚úÖ" if author.is_verified else ""
                
                print(f"   @{username:<15} {mentions_count:>3} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, {followers:>10} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ {verified_mark}")
            else:
                print(f"   @{username:<15} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        
        session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    analyze_top_authors()
    analyze_blacklisted_authors() 