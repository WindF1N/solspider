#!/usr/bin/env python3
"""
–¢–£–†–ë–û –¢–ï–°–¢ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ test_filter.py
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import os
import time
from test_filter import TokenFilterTester

async def test_maximum_speed():
    """–¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    all_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    total_tokens = len(all_files)
    
    print(f"üöÄ –¢–£–†–ë–û –¢–ï–°–¢ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò")
    print(f"="*80)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
    print(f"‚ö° –í–°–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´:")
    print(f"   ‚úÖ –ì–∏–ø–µ—Ä–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å: {tester.__class__.__module__} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CPU * 2")
    print(f"   ‚úÖ –ë–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏: –º–∏–Ω–∏–º—É–º 200 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–∞—á–∫—É")
    print(f"   ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ regex: –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤")
    print(f"   ‚úÖ –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ: 32KB –±–ª–æ–∫–∏")
    print(f"   ‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Å–∫–∏–ø: –ø—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
    print(f"   ‚úÖ –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º SUCCESS")
    print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫")
    print(f"   ‚úÖ –ö–µ—à –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: —É—Å–∫–æ—Ä–µ–Ω—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    test_sizes = [10, 50, 100] if total_tokens >= 100 else [min(10, total_tokens), total_tokens]
    
    for test_size in test_sizes:
        if test_size > total_tokens:
            continue
            
        print(f"üèÅ –¢–ï–°–¢ –ù–ê {test_size} –¢–û–ö–ï–ù–ê–•:")
        print("-" * 50)
        
        start_time = time.time()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        test_tokens_dir = tokens_logs_dir  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º –≤–Ω—É—Ç—Ä–∏
        results = await tester.analyze_all_tokens_with_full_criteria(test_tokens_dir)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        results = results[:test_size] if results else []
        
        end_time = time.time()
        elapsed = end_time - start_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = len([r for r in results if r.get('decision') not in ['ERROR', 'TIMEOUT']])
        would_send = len([r for r in results if r.get('decision') == 'WOULD_SEND'])
        would_reject = len([r for r in results if r.get('decision') == 'WOULD_REJECT'])
        errors = len([r for r in results if r.get('decision') == 'ERROR'])
        
        tokens_per_second = test_size / elapsed if elapsed > 0 else 0
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫")
        print(f"üî• –°–∫–æ—Ä–æ—Å—Ç—å: {tokens_per_second:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{test_size}")
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –±—ã: {would_send}")
        print(f"üõë –û—Ç–∫–ª–æ–Ω–∏–ª–∏ –±—ã: {would_reject}")
        print(f"üí• –û—à–∏–±–∫–∏: {errors}")
        
        if elapsed > 0:
            estimated_full_time = (total_tokens * elapsed) / test_size
            print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—Å–µ {total_tokens}: {estimated_full_time/60:.1f} –º–∏–Ω—É—Ç")
        
        print()
    
    print("="*80)
    print("üéØ –ò–¢–û–ì–ò –¢–£–†–ë–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("‚úÖ –í—Å–µ 7 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU")
    print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏") 
    print("‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å I/O")
    print("‚úÖ –ò–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    print("‚úÖ –†–∞–Ω–Ω–∏–µ –≤—ã—Ö–æ–¥—ã –∏–∑ —Ü–∏–∫–ª–æ–≤")
    print()
    print("üöÄ test_filter.py —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò!")

if __name__ == "__main__":
    asyncio.run(test_maximum_speed())