#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SolSpider
–°–æ–∑–¥–∞–µ—Ç –¥–∞–º–ø –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã—Ö –≤ SQL —Ñ–∞–π–ª
"""

import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('backup.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

def load_env_variables():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = Path('.env')
    if not env_file.exists():
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    env_vars = {}
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip().strip('"').strip("'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = ['DB_HOST', 'DB_PORT', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']
        for var in required_vars:
            if var not in env_vars:
                logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ!")
                return None
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return env_vars
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
        return None

def create_backup_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    backup_dir = Path('backups')
    backup_dir.mkdir(exist_ok=True)
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤: {backup_dir.absolute()}")
    return backup_dir

def get_database_stats(env_vars):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –±—ç–∫–∞–ø–æ–º"""
    try:
        import pymysql
        
        connection = pymysql.connect(
            host=env_vars['DB_HOST'],
            port=int(env_vars['DB_PORT']),
            user=env_vars['DB_USER'],
            password=env_vars['DB_PASSWORD'],
            database=env_vars['DB_NAME'],
            charset='utf8mb4'
        )
        
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            
            stats = {
                'tables': len(tables),
                'table_info': {}
            }
            
            total_rows = 0
            for (table_name,) in tables:
                cursor.execute(f"SELECT COUNT(*) FROM `{table_name}`")
                row_count = cursor.fetchone()[0]
                stats['table_info'][table_name] = row_count
                total_rows += row_count
            
            stats['total_rows'] = total_rows
            
        connection.close()
        return stats
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î: {e}")
        return None

def create_mysql_backup(env_vars, backup_file):
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é mysqldump"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É mysqldump
        cmd = [
            'mysqldump',
            f'--host={env_vars["DB_HOST"]}',
            f'--port={env_vars["DB_PORT"]}',
            f'--user={env_vars["DB_USER"]}',
            f'--password={env_vars["DB_PASSWORD"]}',
            '--single-transaction',  # –î–ª—è InnoDB —Ç–∞–±–ª–∏—Ü
            '--routines',           # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
            '--triggers',           # –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã
            '--events',             # –í–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
            '--hex-blob',           # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            '--default-character-set=utf8mb4',
            '--add-drop-table',     # –î–æ–±–∞–≤–∏—Ç—å DROP TABLE
            '--create-options',     # –í–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏–∏ CREATE TABLE
            '--extended-insert',    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ INSERT
            '--lock-tables=false',  # –ù–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            env_vars['DB_NAME']
        ]
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ mysqldump...")
        logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: mysqldump --host={env_vars['DB_HOST']} --user={env_vars['DB_USER']} [–æ–ø—Ü–∏–∏] {env_vars['DB_NAME']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(backup_file, 'w', encoding='utf-8') as f:
            process = subprocess.Popen(
                cmd,
                stdout=f,
                stderr=subprocess.PIPE,
                text=True
            )
            
            _, stderr = process.communicate()
            
            if process.returncode == 0:
                logger.info("‚úÖ mysqldump –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ mysqldump: {stderr}")
                return False
                
    except FileNotFoundError:
        logger.error("‚ùå mysqldump –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MySQL –∫–ª–∏–µ–Ω—Ç:")
        logger.error("   Ubuntu/Debian: sudo apt-get install mysql-client")
        logger.error("   CentOS/RHEL: sudo yum install mysql")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return False

def verify_backup(backup_file):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø"""
    try:
        if not backup_file.exists():
            logger.error("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        file_size = backup_file.stat().st_size
        if file_size == 0:
            logger.error("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –ø—É—Å—Ç–æ–π!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(backup_file, 'r', encoding='utf-8') as f:
            first_lines = f.read(1000)
            if 'MySQL dump' not in first_lines:
                logger.error("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ MySQL dump!")
                return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size < 1024:
            size_str = f"{file_size} –±–∞–π—Ç"
        elif file_size < 1024 * 1024:
            size_str = f"{file_size / 1024:.1f} –ö–ë"
        else:
            size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
        
        logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {size_str}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–∞–ø–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SolSpider")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = load_env_variables()
    if not env_vars:
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    backup_dir = create_backup_directory()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_filename = f"solspider_backup_{timestamp}.sql"
    backup_file = backup_dir / backup_filename
    
    logger.info(f"üìÑ –§–∞–π–ª –±—ç–∫–∞–ø–∞: {backup_file}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
    stats = get_database_stats(env_vars)
    if stats:
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   üìÅ –¢–∞–±–ª–∏—Ü: {stats['tables']}")
        logger.info(f"   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_rows']:,}")
        logger.info("   üìã –ü–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
        for table, count in stats['table_info'].items():
            logger.info(f"      ‚Ä¢ {table}: {count:,} –∑–∞–ø–∏—Å–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
    success = create_mysql_backup(env_vars, backup_file)
    
    if not success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–∞–ø
    if verify_backup(backup_file):
        logger.info("üéâ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {backup_file.absolute()}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
        logger.info("\nüìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é:")
        logger.info(f"   mysql -h {env_vars['DB_HOST']} -P {env_vars['DB_PORT']} -u {env_vars['DB_USER']} -p {env_vars['DB_NAME']} < {backup_filename}")
        logger.info("\nüí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –ë–î:")
        logger.info("   1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        logger.info("   2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        logger.info("   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
    else:
        logger.error("‚ùå –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main() 