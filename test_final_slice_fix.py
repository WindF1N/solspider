#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ slice
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_all_slice_fixes():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π slice"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–ª–∏ –æ—à–∏–±–∫–∏
    problem_tokens = [
        '4twqEgb6KGDRB3UuHFhSkjLrGMqk15qHYTkt44zSpump.log',
        '2u1AMFNttZggLy1mHDAofoNQA8nC56dqnQg5JkaKhgiN.log',
        'EsYns2NH9r5U7VTp2uCkV7TVkmwsu4o1j1gdtbSSmytn.log'
    ]
    
    # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    all_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    test_files = []
    
    for token_file in problem_tokens:
        if os.path.exists(os.path.join(tokens_logs_dir, token_file)):
            test_files.append(token_file)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö
    test_files.extend(all_files[:7])  # –ò—Ç–æ–≥–æ –¥–æ 10 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_files = test_files[:10]  # –ú–∞–∫—Å–∏–º—É–º 10
    
    print(f"üîß –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–û–ö SLICE")
    print(f"="*70)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∏ 'unhashable type: slice' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print()
    
    results = {
        'success': 0,
        'slice_errors': 0,
        'other_errors': 0,
        'timeouts': 0
    }
    
    slice_error_tokens = []
    
    for i, log_file in enumerate(test_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        token_id = log_file.replace('.log', '')
        
        print(f"{i:2d}. üîç {token_id[:20]}...")
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '')
            
            if decision == 'ERROR':
                if 'slice' in reason.lower():
                    results['slice_errors'] += 1
                    slice_error_tokens.append(token_id)
                    print(f"     üö® SLICE ERROR: {reason}")
                elif 'timeout' in reason.lower():
                    results['timeouts'] += 1
                    print(f"     ‚è∞ TIMEOUT")
                else:
                    results['other_errors'] += 1
                    print(f"     üí• OTHER ERROR: {reason[:50]}")
            else:
                results['success'] += 1
                snapshots = result.get('snapshots_checked', 0)
                print(f"     ‚úÖ SUCCESS: {decision} ({snapshots} snapshots)")
                
        except Exception as e:
            if 'slice' in str(e).lower():
                results['slice_errors'] += 1
                slice_error_tokens.append(token_id)
                print(f"     üö® EXCEPTION SLICE ERROR: {e}")
            else:
                results['other_errors'] += 1
                print(f"     üí• EXCEPTION: {e}")
    
    print()
    print("="*70)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['success']}")
    print(f"‚è∞ Timeout –æ—à–∏–±–∫–∏: {results['timeouts']}")
    print(f"üí• –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {results['other_errors']}")
    print(f"üö® SLICE –û–®–ò–ë–ö–ò: {results['slice_errors']}")
    
    if slice_error_tokens:
        print(f"\nüö® –¢–û–ö–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò SLICE:")
        for token in slice_error_tokens:
            print(f"   - {token}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ò SLICE –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    else:
        print(f"\nüéâ –í–°–ï –û–®–ò–ë–ö–ò SLICE –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –±–µ–∑ slice –æ—à–∏–±–æ–∫")
        print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ test_filter.log")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –Ω–µ—Ç slice –æ—à–∏–±–æ–∫
    return results['slice_errors'] == 0

if __name__ == "__main__":
    success = asyncio.run(test_all_slice_fixes())
    exit(0 if success else 1)