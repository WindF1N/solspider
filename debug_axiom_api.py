#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Axiom API
"""

import aiohttp
import asyncio
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö—É–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
AXIOM_BASE_URL = "https://api9.axiom.trade"
AXIOM_COOKIES = {
    'auth-refresh-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW5JZCI6IjExMzA1NzA4LWRkNmYtNDM0Zi05NDg2LTg3NGFlYjI1NjlmNiIsImlhdCI6MTc0OTIzNTE5OX0.Ko8fHYKCWtDBJX_3AWChVsfzyfn6TLToDqLFTxhaXFA',
    'auth-access-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoZW50aWNhdGVkVXNlcklkIjoiZDAwYWE2NDYtMDQ0My00NmExLWE0N2UtYjMyM2Q3YzJlZGQyIiwiaWF0IjoxNzUyODQ0MzkyLCJleHAiOjE3NTI4NDUzNTJ9.c7S4MQFDZ7rswVjNs99acfzvNqE7hE8HUQzAjK4P-qE'
}

async def debug_axiom_api():
    """–û—Ç–ª–∞–¥–∫–∞ Axiom API"""
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br, zstd',
        'Origin': 'https://axiom.trade',
        'Referer': 'https://axiom.trade/',
        'Priority': 'u=1, i',
        'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Microsoft Edge";v="138"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-site'
    }
    
    cookie_string = '; '.join([f'{k}={v}' for k, v in AXIOM_COOKIES.items()])
    headers['Cookie'] = cookie_string
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    test_token = "EuU9Vh37eKDdUnZkUfMZLGCcBqwFYpr1E6X3ZwUxhvgm"
    
    async with aiohttp.ClientSession() as session:
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º swap-info
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º swap-info –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {test_token[:8]}...")
        swap_url = f"{AXIOM_BASE_URL}/swap-info?tokenAddress={test_token}"
        
        try:
            async with session.get(swap_url, headers=headers) as response:
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å swap-info: {response.status}")
                logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
                
                # –ü–æ–ª—É—á–∞–µ–º raw content
                content = await response.read()
                logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} –±–∞–π—Ç")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                try:
                    text_content = content.decode('utf-8')
                    logger.info(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {text_content[:500]}")
                except UnicodeDecodeError:
                    logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º content-type
                content_type = response.headers.get('content-type', 'unknown')
                logger.info(f"üè∑Ô∏è Content-Type: {content_type}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if response.status == 200:
                    try:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Content-Type
                        text = await response.text()
                        data = json.loads(text)
                        logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω!")
                        logger.info(f"üìã –ö–ª—é—á–∏ JSON: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                        
                        # –í—ã–≤–æ–¥–∏–º pairAddress –µ—Å–ª–∏ –µ—Å—Ç—å
                        if isinstance(data, dict) and 'pairAddress' in data:
                            pair_address = data['pairAddress']
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω pairAddress: {pair_address}")
                            
                            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º token-info
                            logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º token-info –¥–ª—è pairAddress {pair_address[:8]}...")
                            token_info_url = f"{AXIOM_BASE_URL}/token-info?pairAddress={pair_address}"
                            
                            async with session.get(token_info_url, headers=headers) as token_response:
                                logger.info(f"üìä –°—Ç–∞—Ç—É—Å token-info: {token_response.status}")
                                
                                if token_response.status == 200:
                                    try:
                                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON
                                        text = await token_response.text()
                                        token_data = json.loads(text)
                                        logger.info(f"‚úÖ Token-info JSON —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω!")
                                        logger.info(f"üìã –ö–ª—é—á–∏ token-info: {list(token_data.keys()) if isinstance(token_data, dict) else type(token_data)}")
                                        
                                        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                                        if isinstance(token_data, dict):
                                            logger.info(f"üë• numHolders: {token_data.get('numHolders', 'N/A')}")
                                            logger.info(f"ü§ñ numBotUsers: {token_data.get('numBotUsers', 'N/A')}")
                                            logger.info(f"üì¶ bundlersHoldPercent: {token_data.get('bundlersHoldPercent', 'N/A')}")
                                            logger.info(f"üë®‚Äçüíº insidersHoldPercent: {token_data.get('insidersHoldPercent', 'N/A')}")
                                            logger.info(f"üí∞ dexPaid: {token_data.get('dexPaid', 'N/A')}")
                                    except Exception as e:
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ token-info JSON: {e}")
                                        content = await token_response.read()
                                        logger.info(f"üìÑ Raw token-info content: {content[:200]}")
                                else:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ token-info: {token_response.status}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    asyncio.run(debug_axiom_api()) 