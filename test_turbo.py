#!/usr/bin/env python3
"""
–¢–£–†–ë–û-—Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ACTIVITY —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import os
import time
from test_filter import TokenFilterTester

async def turbo_test():
    """–¢—É—Ä–±–æ-—Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 50 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    tester = TokenFilterTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tokens_logs
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    
    if not log_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tokens_logs_dir} –Ω–µ—Ç .log —Ñ–∞–π–ª–æ–≤")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_files = log_files[:100]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 –¥–ª—è –¥–µ–º–æ
    
    print(f"üöÄ –¢–£–†–ë–û-–¢–ï–°–¢ ACTIVITY –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
    print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(test_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: –¥–æ—Å—Ç—É–ø–Ω–æ —è–¥–µ—Ä - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    test_dir = '/tmp/test_tokens_logs'
    os.makedirs(test_dir, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ (—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    for log_file in test_files:
        src = os.path.join(tokens_logs_dir, log_file)
        dst = os.path.join(test_dir, log_file)
        if not os.path.exists(dst):
            os.symlink(src, dst)
    
    start_time = time.time()
    
    print(f"‚è±Ô∏è –ó–∞–ø—É—Å–∫ —Ç—É—Ä–±–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–±–æ-–∞–Ω–∞–ª–∏–∑
    results = await tester.analyze_all_tokens_with_full_criteria(test_dir)
    
    total_time = time.time() - start_time
    
    print(f"\nüéØ –¢–£–†–ë–û-–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(results)/total_time:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    activity_passed = sum(1 for r in results if r.get('decision') == 'WOULD_SEND')
    activity_rejected = sum(1 for r in results if r.get('decision') == 'WOULD_REJECT')
    blacklisted = sum(1 for r in results if r.get('decision') == 'BLACKLISTED')
    errors = sum(1 for r in results if r.get('decision') == 'ERROR')
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
    print(f"üöÄ ACTIVITY –ø—Ä–æ—à–ª–∏: {activity_passed}")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {activity_rejected}")
    print(f"‚ö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklisted}")
    print(f"üí• –û—à–∏–±–∫–∏: {errors}")
    
    if activity_passed > 0:
        print(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—à–µ–¥—à–∏—Ö ACTIVITY:")
        passed_examples = [r for r in results if r.get('decision') == 'WOULD_SEND'][:3]
        for example in passed_examples:
            print(f"   ‚Ä¢ {example['token_id']}: {example['reason']}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    import shutil
    shutil.rmtree(test_dir, ignore_errors=True)
    
    print(f"\nüéâ –¢–£–†–ë–û-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üí™ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!")

if __name__ == "__main__":
    asyncio.run(turbo_test())