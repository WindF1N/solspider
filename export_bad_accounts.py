#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–ª–æ—Ö–æ–π –æ—Ü–µ–Ω–∫–æ–π
"""

import json
import csv
from datetime import datetime, timedelta
from decimal import Decimal
from database import get_db_manager, TwitterAuthor, TweetMention
from sqlalchemy import and_, or_, func

def calculate_author_metrics(session, author):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    total_mentions = session.query(func.count(TweetMention.id))\
        .filter(TweetMention.author_username == author.username)\
        .scalar() or 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    unique_contracts = session.query(func.count(func.distinct(TweetMention.mint)))\
        .filter(TweetMention.author_username == author.username)\
        .scalar() or 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = datetime.utcnow() - timedelta(days=7)
    recent_mentions = session.query(func.count(TweetMention.id))\
        .filter(TweetMention.author_username == author.username)\
        .filter(TweetMention.discovered_at >= week_ago)\
        .scalar() or 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    avg_followers_result = session.query(func.avg(TweetMention.author_followers_at_time))\
        .filter(TweetMention.author_username == author.username)\
        .filter(TweetMention.author_followers_at_time.isnot(None))\
        .scalar()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float –¥–ª—è JSON
    if isinstance(avg_followers_result, Decimal):
        avg_followers = float(avg_followers_result)
    else:
        avg_followers = avg_followers_result or author.followers_count or 0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º spam_score (–º–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
    if avg_followers > 0:
        spam_score = min(total_mentions / max(avg_followers / 1000, 1), 1.0)
    else:
        spam_score = 1.0 if total_mentions > 10 else 0.0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º diversity_score (–º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)
    if total_mentions > 0:
        diversity_score = min(unique_contracts / max(total_mentions, 1), 1.0)
    else:
        diversity_score = 0.0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º activity_score (–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
    activity_score = min(recent_mentions / 50, 1.0)  # 50+ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
    
    return {
        'total_mentions': int(total_mentions),
        'unique_contracts': int(unique_contracts),
        'recent_mentions': int(recent_mentions),
        'avg_followers': int(avg_followers),
        'spam_score': round(float(spam_score), 3),
        'diversity_score': round(float(diversity_score), 3),
        'activity_score': round(float(activity_score), 3)
    }

def analyze_author_quality(author, metrics):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É"""
    spam_score = metrics['spam_score']
    diversity_score = metrics['diversity_score']
    activity_score = metrics['activity_score']
    total_mentions = metrics['total_mentions']
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–ª–æ—Ö–æ–π –æ—Ü–µ–Ω–∫–∏:
    # 1. –í—ã—Å–æ–∫–∏–π spam_score (>= 0.6) - –º–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    # 2. –í—ã—Å–æ–∫–∏–π diversity_score (>= 0.4) - –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    # 3. –í—ã—Å–æ–∫–∏–π activity_score (>= 0.6) - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    # 4. –ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–∏ –±–æ–ª—å—à–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    is_spam = spam_score >= 0.6
    is_diverse_spammer = diversity_score >= 0.4 and total_mentions >= 5
    is_hyperactive = activity_score >= 0.6
    is_low_quality = metrics['avg_followers'] < 100 and total_mentions >= 10
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if is_spam and is_diverse_spammer:
        category = "–°–ü–ê–ú–ï–† + –ú–ù–û–ñ–ï–°–¢–í–û –ö–û–ù–¢–†–ê–ö–¢–û–í"
        severity = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
    elif is_spam and is_hyperactive:
        category = "–°–ü–ê–ú–ï–† + –ì–ò–ü–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨"
        severity = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
    elif is_spam:
        category = "–°–ü–ê–ú–ï–†"
        severity = "–í–´–°–û–ö–ò–ô"
    elif is_diverse_spammer:
        category = "–ú–ù–û–ñ–ï–°–¢–í–û –ö–û–ù–¢–†–ê–ö–¢–û–í"
        severity = "–°–†–ï–î–ù–ò–ô"
    elif is_hyperactive:
        category = "–ì–ò–ü–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨"
        severity = "–°–†–ï–î–ù–ò–ô"
    elif is_low_quality:
        category = "–ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û –ê–ö–ö–ê–£–ù–¢–ê"
        severity = "–ù–ò–ó–ö–ò–ô"
    else:
        category = "–ù–û–†–ú–ê–õ–¨–ù–´–ô"
        severity = "–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô"
    
    is_bad = is_spam or is_diverse_spammer or is_hyperactive or is_low_quality
    
    return {
        'category': category,
        'severity': severity,
        'is_bad': is_bad,
        'metrics': metrics
    }

def export_bad_accounts():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–ª–æ—Ö–æ–π –æ—Ü–µ–Ω–∫–æ–π"""
    db_manager = get_db_manager()
    session = db_manager.Session()
    
    try:
        print("üîç –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        authors_with_mentions = session.query(TwitterAuthor)\
            .join(TweetMention, TwitterAuthor.username == TweetMention.author_username)\
            .distinct().all()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(authors_with_mentions)} –∞–≤—Ç–æ—Ä–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
        bad_accounts = []
        stats = {
            'total_authors': len(authors_with_mentions),
            'bad_accounts': 0,
            'categories': {}
        }
        
        for i, author in enumerate(authors_with_mentions):
            if i % 100 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(authors_with_mentions)} –∞–≤—Ç–æ—Ä–æ–≤...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = calculate_author_metrics(session, author)
            analysis = analyze_author_quality(author, metrics)
            
            if analysis['is_bad']:
                bad_account = {
                    'username': author.username,
                    'display_name': author.display_name or '',
                    'followers_count': author.followers_count or 0,
                    'tweets_count': author.tweets_count or 0,
                    'is_verified': author.is_verified or False,
                    'total_contract_mentions': metrics['total_mentions'],
                    'unique_contracts_mentioned': metrics['unique_contracts'],
                    'recent_mentions_7d': metrics['recent_mentions'],
                    'avg_followers': metrics['avg_followers'],
                    'spam_score': metrics['spam_score'],
                    'diversity_score': metrics['diversity_score'],
                    'activity_score': metrics['activity_score'],
                    'category': analysis['category'],
                    'severity': analysis['severity'],
                    'first_seen': author.first_seen.isoformat() if author.first_seen else None,
                    'last_updated': author.last_updated.isoformat() if author.last_updated else None,
                    'bio': (author.bio or '')[:200] + ('...' if len(author.bio or '') > 200 else '')
                }
                
                bad_accounts.append(bad_account)
                stats['bad_accounts'] += 1
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                category = analysis['category']
                if category not in stats['categories']:
                    stats['categories'][category] = 0
                stats['categories'][category] += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã
        severity_order = {'–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô': 0, '–í–´–°–û–ö–ò–ô': 1, '–°–†–ï–î–ù–ò–ô': 2, '–ù–ò–ó–ö–ò–ô': 3, '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô': 4}
        bad_accounts.sort(key=lambda x: (
            severity_order.get(x['severity'], 5), 
            -x['spam_score'], 
            -x['diversity_score'],
            -x['total_contract_mentions']
        ))
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        json_filename = f'bad_accounts_{timestamp}.json'
        csv_filename = f'bad_accounts_{timestamp}.csv'
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        export_data = {
            'export_date': datetime.now().isoformat(),
            'statistics': stats,
            'bad_accounts': bad_accounts
        }
        
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        if bad_accounts:
            with open(csv_filename, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=bad_accounts[0].keys())
                writer.writeheader()
                writer.writerows(bad_accounts)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "="*70)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–û–•–ò–• –ê–ö–ö–ê–£–ù–¢–û–í")
        print("="*70)
        print(f"–í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {stats['total_authors']}")
        print(f"–ü–ª–æ—Ö–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['bad_accounts']}")
        if stats['total_authors'] > 0:
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö: {(stats['bad_accounts']/stats['total_authors']*100):.1f}%")
        
        print("\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, count in sorted(stats['categories'].items(), key=lambda x: x[1], reverse=True):
            percentage = (count / stats['bad_accounts'] * 100) if stats['bad_accounts'] > 0 else 0
            print(f"  {category}: {count} ({percentage:.1f}%)")
        
        print(f"\nüíæ –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´:")
        print(f"  üìÑ JSON: {json_filename}")
        print(f"  üìä CSV: {csv_filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15 —Ö—É–¥—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        print("\nüö´ –¢–û–ü-15 –•–£–î–®–ò–• –ê–ö–ö–ê–£–ù–¢–û–í:")
        print("-" * 100)
        print(f"{'USERNAME':<20} {'–ü–û–î–ü–ò–°–ß–ò–ö–ò':<12} {'–ö–û–ù–¢–†–ê–ö–¢–´':<12} {'SPAM':<6} {'DIV':<6} {'ACT':<6} {'–ö–ê–¢–ï–ì–û–†–ò–Ø':<25}")
        print("-" * 100)
        
        for i, account in enumerate(bad_accounts[:15]):
            print(f"{account['username']:<20} {account['followers_count']:<12} "
                  f"{account['total_contract_mentions']:<12} {account['spam_score']:<6.2f} "
                  f"{account['diversity_score']:<6.2f} {account['activity_score']:<6.2f} "
                  f"{account['category']:<25}")
        
        if len(bad_accounts) > 15:
            print(f"... –∏ –µ—â–µ {len(bad_accounts) - 15} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        return json_filename, csv_filename, stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return None, None, None
    finally:
        session.close()

def show_account_details(username):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    db_manager = get_db_manager()
    session = db_manager.Session()
    
    try:
        author = session.query(TwitterAuthor).filter_by(username=username).first()
        
        if not author:
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return
        
        metrics = calculate_author_metrics(session, author)
        analysis = analyze_author_quality(author, metrics)
        
        print(f"\nüë§ –î–ï–¢–ê–õ–ò –ê–ö–ö–ê–£–ù–¢–ê: @{username}")
        print("=" * 60)
        print(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {'‚ùå –ü–õ–û–•–û–ô' if analysis['is_bad'] else '‚úÖ –ù–û–†–ú–ê–õ–¨–ù–´–ô'}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['category']}")
        print(f"–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {analysis['severity']}")
        print(f"\nüìä –ú–ï–¢–†–ò–ö–ò:")
        print(f"  –°–ø–∞–º-—Å–∫–æ—Ä: {metrics['spam_score']:.3f}")
        print(f"  –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {metrics['diversity_score']:.3f}")
        print(f"  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {metrics['activity_score']:.3f}")
        print(f"  –í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {metrics['total_mentions']}")
        print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {metrics['unique_contracts']}")
        print(f"  –£–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 7 –¥–Ω–µ–π: {metrics['recent_mentions']}")
        print(f"\nüë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ï:")
        print(f"  –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {author.followers_count or 0}")
        print(f"  –¢–≤–∏—Ç—ã: {author.tweets_count or 0}")
        print(f"  –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if author.is_verified else '–ù–µ—Ç'}")
        print(f"  –ò–º—è: {author.display_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        print(f"  –í–ø–µ—Ä–≤—ã–µ –∑–∞–º–µ—á–µ–Ω: {author.first_seen}")
        print(f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {author.last_updated}")
        
        if author.bio:
            print(f"  –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {author.bio[:200]}{'...' if len(author.bio) > 200 else ''}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")
    finally:
        session.close()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        username = sys.argv[1].replace('@', '')
        show_account_details(username)
    else:
        # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–ª–æ—Ö–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        print("üöÄ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –ø–ª–æ—Ö–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        json_file, csv_file, stats = export_bad_accounts()
        
        if json_file:
            print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ")
        else:
            print("\n‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è") 