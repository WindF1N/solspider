#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SolSpider –∏–∑ –±—ç–∫–∞–ø–∞
–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQL —Ñ–∞–π–ª–∞
"""

import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('restore.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

def load_env_variables():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = Path('.env')
    if not env_file.exists():
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    env_vars = {}
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip().strip('"').strip("'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = ['DB_HOST', 'DB_PORT', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']
        for var in required_vars:
            if var not in env_vars:
                logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ!")
                return None
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return env_vars
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
        return None

def list_available_backups():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤"""
    backup_dir = Path('backups')
    if not backup_dir.exists():
        logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []
    
    backup_files = list(backup_dir.glob('*.sql'))
    if not backup_files:
        logger.error("‚ùå –§–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backups/")
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:")
    for i, backup_file in enumerate(backup_files, 1):
        file_size = backup_file.stat().st_size
        if file_size < 1024 * 1024:
            size_str = f"{file_size / 1024:.1f} –ö–ë"
        else:
            size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        mtime = datetime.fromtimestamp(backup_file.stat().st_mtime)
        logger.info(f"   {i}. {backup_file.name} ({size_str}, {mtime.strftime('%Y-%m-%d %H:%M:%S')})")
    
    return backup_files

def choose_backup_file(backup_files):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞"""
    if len(backup_files) == 1:
        logger.info(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –±—ç–∫–∞–ø: {backup_files[0].name}")
        return backup_files[0]
    
    while True:
        try:
            choice = input(f"\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ (1-{len(backup_files)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
            
            if choice.lower() == 'q':
                logger.info("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                return None
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(backup_files):
                selected_file = backup_files[choice_num - 1]
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –±—ç–∫–∞–ø: {selected_file.name}")
                return selected_file
            else:
                print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(backup_files)}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except KeyboardInterrupt:
            logger.info("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None

def verify_backup_file(backup_file):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    try:
        if not backup_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
            return False
        
        file_size = backup_file.stat().st_size
        if file_size == 0:
            logger.error("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –ø—É—Å—Ç–æ–π!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(backup_file, 'r', encoding='utf-8') as f:
            first_lines = f.read(1000)
            if 'MySQL dump' not in first_lines:
                logger.error("‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º MySQL –¥–∞–º–ø–æ–º!")
                return False
        
        logger.info(f"‚úÖ –§–∞–π–ª –±—ç–∫–∞–ø–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {file_size / (1024 * 1024):.1f} –ú–ë")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞: {e}")
        return False

def confirm_restore(env_vars, backup_file):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    logger.warning(f"   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {env_vars['DB_NAME']}")
    logger.warning(f"   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: {env_vars['DB_HOST']}:{env_vars['DB_PORT']}")
    logger.warning(f"   üìÑ –§–∞–π–ª –±—ç–∫–∞–ø–∞: {backup_file.name}")
    logger.warning("   ‚ö° –í–°–ï –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´!")
    
    while True:
        try:
            confirmation = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (yes/no): ").strip().lower()
            if confirmation in ['yes', 'y', '–¥–∞']:
                logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                return True
            elif confirmation in ['no', 'n', '–Ω–µ—Ç']:
                logger.info("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return False
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'yes' –∏–ª–∏ 'no'")
        except KeyboardInterrupt:
            logger.info("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False

def restore_mysql_backup(env_vars, backup_file):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É mysql
        cmd = [
            'mysql',
            f'--host={env_vars["DB_HOST"]}',
            f'--port={env_vars["DB_PORT"]}',
            f'--user={env_vars["DB_USER"]}',
            f'--password={env_vars["DB_PASSWORD"]}',
            '--default-character-set=utf8mb4',
            env_vars['DB_NAME']
        ]
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è MySQL...")
        logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: mysql --host={env_vars['DB_HOST']} --user={env_vars['DB_USER']} [–æ–ø—Ü–∏–∏] {env_vars['DB_NAME']} < {backup_file.name}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        with open(backup_file, 'r', encoding='utf-8') as f:
            process = subprocess.Popen(
                cmd,
                stdin=f,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate()
            
            if process.returncode == 0:
                logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MySQL –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è MySQL: {stderr}")
                if stdout:
                    logger.error(f"üìÑ –í—ã–≤–æ–¥: {stdout}")
                return False
                
    except FileNotFoundError:
        logger.error("‚ùå mysql –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MySQL –∫–ª–∏–µ–Ω—Ç:")
        logger.error("   Ubuntu/Debian: sudo apt-get install mysql-client")
        logger.error("   CentOS/RHEL: sudo yum install mysql")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def verify_restore(env_vars):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        import pymysql
        
        connection = pymysql.connect(
            host=env_vars['DB_HOST'],
            port=int(env_vars['DB_PORT']),
            user=env_vars['DB_USER'],
            password=env_vars['DB_PASSWORD'],
            database=env_vars['DB_NAME'],
            charset='utf8mb4'
        )
        
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            
            if not tables:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!")
                return False
            
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
            logger.info(f"   üìÅ –¢–∞–±–ª–∏—Ü –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {len(tables)}")
            
            total_rows = 0
            for (table_name,) in tables:
                cursor.execute(f"SELECT COUNT(*) FROM `{table_name}`")
                row_count = cursor.fetchone()[0]
                logger.info(f"   ‚Ä¢ {table_name}: {row_count:,} –∑–∞–ø–∏—Å–µ–π")
                total_rows += row_count
            
            logger.info(f"   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_rows:,}")
            
        connection.close()
        logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SolSpider")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = load_env_variables()
    if not env_vars:
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
    backup_files = list_available_backups()
    if not backup_files:
        sys.exit(1)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
    backup_file = choose_backup_file(backup_files)
    if not backup_file:
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
    if not verify_backup_file(backup_file):
        sys.exit(1)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not confirm_restore(env_vars, backup_file):
        sys.exit(1)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    success = restore_mysql_backup(env_vars, backup_file)
    
    if not success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if verify_restore(env_vars):
        logger.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {backup_file.name}")
        logger.info(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {env_vars['DB_NAME']}")
        
    else:
        logger.error("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main() 