#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –≤ test_filter.py –ø—Ä–æ—Ç–∏–≤ bundle_analyzer.py
"""

import os
import ast

def extract_functions_from_file(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            tree = ast.parse(f.read())
        
        functions = []
        for node in ast.walk(tree):
            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                functions.append(node.name)
        return functions
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return []

def check_completeness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π –≤ test_filter.py"""
    
    bundle_analyzer_functions = extract_functions_from_file('/home/creatxr/solspider/bundle_analyzer.py')
    test_filter_functions = extract_functions_from_file('/home/creatxr/solspider/test_filter.py')
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bundle_analyzer.py –¥–ª—è activity —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    required_functions = [
        'check_snipers_bundlers_correlation',
        'check_snipers_insiders_correlation', 
        'check_bundlers_snipers_exit_correlation',
        'check_holders_correlation',
        'check_rapid_exit',
        '_calculate_correlation',
        'analyze_holder_stability',
        'analyze_early_vs_current_holders',
        'is_suspicious_pattern'
    ]
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ –§–£–ù–ö–¶–ò–ô –í test_filter.py")
    print("="*60)
    
    print(f"üìÇ bundle_analyzer.py: {len(bundle_analyzer_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    print(f"üìÇ test_filter.py: {len(test_filter_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    print()
    
    print("üéØ –ö–õ–Æ–ß–ï–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø ACTIVITY –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
    print("-"*60)
    
    missing_functions = []
    present_functions = []
    
    for func in required_functions:
        if func in test_filter_functions:
            present_functions.append(func)
            print(f"‚úÖ {func}")
        else:
            missing_functions.append(func)
            print(f"‚ùå {func} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
    
    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {len(present_functions)}/{len(required_functions)}")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_functions)}")
    
    if missing_functions:
        print(f"\n‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
        for func in missing_functions:
            print(f"   - {func}")
        return False
    else:
        print(f"\nüéâ –í–°–ï –ö–õ–Æ–ß–ï–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ï–ê–õ–ò–ó–û–í–ê–ù–´!")
        return True

def check_activity_conditions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ activity_conditions –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    print(f"\nüî¨ –ü–†–û–í–ï–†–ö–ê activity_conditions –í test_filter.py")
    print("-"*60)
    
    try:
        with open('/home/creatxr/solspider/test_filter.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º activity_conditions
        if 'activity_conditions = {' in content:
            print("‚úÖ activity_conditions –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlation_checks = [
                'self.check_snipers_bundlers_correlation(metrics_history)',
                'self.check_snipers_insiders_correlation(metrics_history)', 
                'self.check_bundlers_snipers_exit_correlation(metrics_history)',
                'await self.check_holders_correlation(metrics_history)'
            ]
            
            for check in correlation_checks:
                if check in content:
                    print(f"‚úÖ {check}")
                else:
                    print(f"‚ùå {check} - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ rapid_exit
            if 'self.check_rapid_exit(' in content:
                print("‚úÖ check_rapid_exit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            else:
                print("‚ùå check_rapid_exit –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º is_suspicious_pattern
            if 'self.is_suspicious_pattern(' in content:
                print("‚úÖ is_suspicious_pattern –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            else:
                print("‚ùå is_suspicious_pattern –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!")
                
        else:
            print("‚ùå activity_conditions –ù–ï –ù–ê–ô–î–ï–ù!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

def main():
    print("üöÄ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø test_filter.py –∏ bundle_analyzer.py")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π
    functions_complete = check_completeness()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ activity_conditions
    check_activity_conditions()
    
    print("\n" + "="*80)
    if functions_complete:
        print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: test_filter.py –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ bundle_analyzer.py")
        print("   ‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("   ‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        print("   ‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—É")
    else:
        print("‚ö†Ô∏è –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: test_filter.py –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("   ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω–æ—Ç—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()