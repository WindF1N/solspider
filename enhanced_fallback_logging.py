#!/usr/bin/env python3
"""
–£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ß–ò–ù –ë–´–°–¢–†–û–ì–û –§–û–õ–ë–≠–ö–ê
–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–∞—Ö —Ñ–æ–ª–±—ç–∫–∞ –≤ pump_bot.py
"""

import re
import os
from datetime import datetime

def enhance_fallback_logging():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–æ–ª–±—ç–∫–∞"""
    
    print("üîç –î–û–ë–ê–í–õ–Ø–ï–ú –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ß–ò–ù –§–û–õ–ë–≠–ö–ê...")
    
    if not os.path.exists('pump_bot.py'):
        print("‚ùå –§–∞–π–ª pump_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open('pump_bot.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é search_single_query –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
    old_search_function = r'async def search_single_query\(query, headers, retry_count=0, use_quotes=False, cycle_cookie=None\):'
    new_search_function = r'async def search_single_query(query, headers, retry_count=0, use_quotes=False, cycle_cookie=None):'
    
    # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–æ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –≤ search_single_query
    old_error_handling = r'''except Exception as e:
        logger.error\(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nitter –¥–ª—è '\{query\}': \{type\(e\).__name__\}: \{e\}"\)
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö \(–Ω–µ —Ç–æ–ª—å–∫–æ 429\)
        if retry_count < 3:
            logger.warning\(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è '\{query\}' –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ \{type\(e\).__name__\} \(–ø–æ–ø—ã—Ç–∫–∞ \{retry_count \+ 1\}/3\)"\)
            # await asyncio.sleep\(1\)  # –£–ë–ò–†–ê–ï–ú –ü–ê–£–ó–´
            return await search_single_query\(query, headers, retry_count \+ 1, use_quotes, cycle_cookie\)
        else:
            logger.error\(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è '\{query\}' - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"\)
            return \[\]'''
    
    new_error_handling = '''except Exception as e:
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö
        error_type = type(e).__name__
        error_msg = str(e)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if "TimeoutError" in error_type or "timeout" in error_msg.lower():
            logger.error(f"‚è∞ –¢–ê–ô–ú–ê–£–¢ –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "TIMEOUT"
        elif "ConnectionError" in error_type or "connection" in error_msg.lower():
            logger.error(f"üîå –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "CONNECTION"
        elif "429" in error_msg or "too many requests" in error_msg.lower():
            logger.error(f"üö´ –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "RATE_LIMIT"
        elif "blocked" in error_msg.lower() or "bot" in error_msg.lower():
            logger.error(f"ü§ñ –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "BLOCKED"
        else:
            logger.error(f"‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è '{query}': {error_type} - {error_msg}")
            error_category = "UNKNOWN"
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö (–Ω–µ —Ç–æ–ª—å–∫–æ 429)
        if retry_count < 3:
            logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è '{query}' –ø–æ—Å–ª–µ {error_category} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/3)")
            return await search_single_query(query, headers, retry_count + 1, use_quotes, cycle_cookie)
        else:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è '{query}' –ø–æ—Å–ª–µ {error_category} - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            return {"error": error_category, "message": error_msg, "type": error_type}'''
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    content = re.sub(old_error_handling, new_error_handling, content, flags=re.MULTILINE | re.DOTALL)
    
    # 2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º analyze_token_sentiment –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç search_single_query
    old_analyze_loop = r'''        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ø–∞—É–∑–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        results = \[\]
        for i, \(query, use_quotes\) in enumerate\(search_queries\):
            try:
                result = await search_single_query\(query, headers, use_quotes=use_quotes, cycle_cookie=cycle_cookie\)
                results.append\(result\)
            except Exception as e:
                logger.warning\(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ \{i\+1\}: \{e\}"\)
                results.append\(e\)'''
    
    new_analyze_loop = '''        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ø–∞—É–∑–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        results = []
        error_details = []
        for i, (query, use_quotes) in enumerate(search_queries):
            try:
                result = await search_single_query(query, headers, use_quotes=use_quotes, cycle_cookie=cycle_cookie)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                if isinstance(result, dict) and "error" in result:
                    error_details.append({
                        "query": query,
                        "error_category": result["error"],
                        "error_message": result["message"],
                        "error_type": result["type"]
                    })
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1} –¥–ª—è '{query}': {result['error']} - {result['message']}")
                    results.append([])  # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                else:
                    results.append(result)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {e}")
                error_details.append({
                    "query": query,
                    "error_category": "UNEXPECTED",
                    "error_message": str(e),
                    "error_type": type(e).__name__
                })
                results.append(e)'''
    
    content = re.sub(old_analyze_loop, new_analyze_loop, content, flags=re.MULTILINE | re.DOTALL)
    
    # 3. –£–ª—É—á—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ twitter_analysis_worker
    old_fallback_logging = r'''                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∏–∑-–∑–∞ Nitter –ø—Ä–æ–±–ª–µ–º
                if twitter_analysis\['tweets'\] == 0 and twitter_analysis\['engagement'\] == 0:
                    # –í–æ–∑–º–æ–∂–Ω–æ Nitter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    logger.warning\(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–±—ç–∫ –¥–ª—è \{symbol\} - Nitter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"\)'''
    
    new_fallback_logging = '''                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∏–∑-–∑–∞ Nitter –ø—Ä–æ–±–ª–µ–º
                if twitter_analysis['tweets'] == 0 and twitter_analysis['engagement'] == 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã —Ñ–æ–ª–±—ç–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ error_details
                    fallback_reason = "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê"
                    if 'error_details' in locals() and error_details:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
                        error_categories = [err['error_category'] for err in error_details]
                        if 'TIMEOUT' in error_categories:
                            fallback_reason = "–¢–ê–ô–ú–ê–£–¢ (–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)"
                        elif 'RATE_LIMIT' in error_categories:
                            fallback_reason = "429 –û–®–ò–ë–ö–ê (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤)"
                        elif 'BLOCKED' in error_categories:
                            fallback_reason = "–ë–õ–û–ö–ò–†–û–í–ö–ê ('Making sure you're not a bot!')"
                        elif 'CONNECTION' in error_categories:
                            fallback_reason = "–û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                        else:
                            fallback_reason = f"–û–®–ò–ë–ö–ò: {', '.join(set(error_categories))}"
                        
                        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        logger.warning(f"‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è {symbol}")
                        logger.warning(f"üìã –ü–†–ò–ß–ò–ù–ê: {fallback_reason}")
                        for err in error_details:
                            logger.warning(f"   üî∏ {err['query']}: {err['error_category']} - {err['error_message']}")
                    else:
                        logger.warning(f"‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è {symbol} - –ü–†–ò–ß–ò–ù–ê: {fallback_reason}")'''
    
    content = re.sub(old_fallback_logging, new_fallback_logging, content, flags=re.MULTILINE | re.DOTALL)
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    old_exception_handling = r'''            except Exception as e:
                logger.error\(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ \{symbol\}: \{e\}"\)
                # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                twitter_analysis = \{
                    'tweets': 0,
                    'symbol_tweets': 0,
                    'contract_tweets': 0, 
                    'engagement': 0,
                    'score': 0,
                    'rating': '‚ùì –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
                    'contract_found': False,
                    'contract_authors': \[\]
                \}'''
    
    new_exception_handling = '''            except Exception as e:
                # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô
                error_type = type(e).__name__
                error_msg = str(e)
                
                logger.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {error_type}")
                logger.error(f"üìã –î–ï–¢–ê–õ–ò: {error_msg}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if "TimeoutError" in error_type:
                    fallback_reason = "–ì–õ–û–ë–ê–õ–¨–ù–´–ô –¢–ê–ô–ú–ê–£–¢ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)"
                elif "ConnectionError" in error_type:
                    fallback_reason = "–û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
                elif "HTTPError" in error_type:
                    fallback_reason = "HTTP –û–®–ò–ë–ö–ê (–ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)"
                else:
                    fallback_reason = f"–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê ({error_type})"
                
                logger.warning(f"‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è {symbol}")
                logger.warning(f"üìã –ü–†–ò–ß–ò–ù–ê: {fallback_reason}")
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                twitter_analysis = {
                    'tweets': 0,
                    'symbol_tweets': 0,
                    'contract_tweets': 0, 
                    'engagement': 0,
                    'score': 0,
                    'rating': '‚ùì –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
                    'contract_found': False,
                    'contract_authors': []
                }'''
    
    content = re.sub(old_exception_handling, new_exception_handling, content, flags=re.MULTILINE | re.DOTALL)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('pump_bot.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ pump_bot.py: –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Ñ–æ–ª–±—ç–∫–∞")
    
    print("\nüéØ –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫:")
    print("  - TIMEOUT (–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç)")
    print("  - RATE_LIMIT (429 –æ—à–∏–±–∫–∏)")
    print("  - BLOCKED (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤)")
    print("  - CONNECTION (–ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ç–∏)")
    print("  - UNKNOWN (–ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏)")
    print("‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π")
    print("‚Ä¢ –ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
    print("‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print("\nüìä –ü–†–ò–ú–ï–†–´ –ù–û–í–´–• –õ–û–ì–û–í:")
    print("‚ö° –ë–´–°–¢–†–´–ô –§–û–õ–ë–≠–ö –¥–ª—è TPULSE")
    print("üìã –ü–†–ò–ß–ò–ù–ê: –¢–ê–ô–ú–ê–£–¢ (–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)")
    print("   üî∏ $TPULSE: TIMEOUT - Read timeout")
    print("   üî∏ 8K7j2m9N...w5pX3: TIMEOUT - Connection timeout")
    
    print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    enhance_fallback_logging() 