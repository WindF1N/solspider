#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∏ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ Axiom.trade API
"""

import asyncio
import logging
from axiom_trader import AxiomTrader

class AxiomTradingTest:
    def __init__(self):
        self.trader = AxiomTrader()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(levelname)s: %(message)s',
            datefmt='%H:%M:%S'
        )
        self.logger = logging.getLogger(__name__)
    
    async def run_buy_sell_test(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            self.logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–ö–ò –ò –ü–†–û–î–ê–ñ–ò –ß–ï–†–ï–ó AXIOM")
            self.logger.info("="*55)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
            test_token = "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"  # BONK
            buy_amount_sol = 0.001  # ~$0.14 –ø—Ä–∏ —Ü–µ–Ω–µ SOL $140
            
            self.logger.info(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: BONK")
            self.logger.info(f"üìç –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {test_token}")
            self.logger.info(f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {buy_amount_sol} SOL")
            
            # –®–∞–≥ 1: –ü–æ–∫—É–ø–∫–∞
            self.logger.info(f"\nüõí –®–ê–ì 1: –ü–û–ö–£–ü–ö–ê")
            self.logger.info("-" * 30)
            
            buy_result = await self.trader.buy_token(
                token_address=test_token,
                sol_amount=buy_amount_sol
            )
            
            if not buy_result['success']:
                self.logger.error("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç")
                self.logger.error(f"   –û—à–∏–±–∫–∞: {buy_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–∫—É–ø–∫–∏
            response_data = buy_result.get('response', {})
            swap_params = response_data.get('getSwapParams', {})
            
            self.logger.info("‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            self.logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {buy_result['execution_time']:.2f}—Å")
            self.logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {buy_result['status']}")
            
            if swap_params:
                input_mint = swap_params.get('inputMint')
                output_mint = swap_params.get('outputMint')
                amount = swap_params.get('amount')
                slippage = swap_params.get('slippage')
                
                self.logger.info(f"   üí± Swap –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                self.logger.info(f"      ü™ô Input: {input_mint[:8]}...")
                self.logger.info(f"      ü™ô Output: {output_mint[:8]}...")
                self.logger.info(f"      üí∞ Amount: {amount} lamports")
                self.logger.info(f"      üìä Slippage: {slippage}%")
            
            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
            self.logger.info("\n‚è≥ –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ (10 —Å–µ–∫—É–Ω–¥)...")
            await asyncio.sleep(10)
            
            # –®–∞–≥ 2: –ü—Ä–æ–¥–∞–∂–∞
            self.logger.info(f"\nüìâ –®–ê–ì 2: –ü–†–û–î–ê–ñ–ê")
            self.logger.info("-" * 30)
            
            sell_result = await self.trader.sell_token(
                token_address=test_token,
                percentage=100  # –ü—Ä–æ–¥–∞–µ–º 100% –±–∞–ª–∞–Ω—Å–∞
            )
            
            if sell_result['success']:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–æ–¥–∞–∂–∏
                response_data = sell_result.get('response', {})
                swap_params = response_data.get('getSwapParams', {})
                
                self.logger.info("‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                self.logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {sell_result['execution_time']:.2f}—Å")
                self.logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {sell_result['status']}")
                
                if swap_params:
                    input_mint = swap_params.get('inputMint')
                    output_mint = swap_params.get('outputMint')
                    amount = swap_params.get('amount')
                    slippage = swap_params.get('slippage')
                    
                    self.logger.info(f"   üí± Swap –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                    self.logger.info(f"      ü™ô Input: {input_mint[:8]}...")
                    self.logger.info(f"      ü™ô Output: {output_mint[:8]}...")
                    self.logger.info(f"      üí∞ Amount: {amount} —Ç–æ–∫–µ–Ω–æ–≤")
                    self.logger.info(f"      üìä Slippage: {slippage}%")
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                total_time = buy_result['execution_time'] + sell_result['execution_time']
                self.logger.info(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
                self.logger.info(f"   üõí –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {buy_result['execution_time']:.2f}—Å")
                self.logger.info(f"   üìâ –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏: {sell_result['execution_time']:.2f}—Å")
                self.logger.info(f"   üèÜ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
                
            else:
                self.logger.error("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                self.logger.error(f"   –û—à–∏–±–∫–∞: {sell_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            self.logger.info("\n" + "="*55)
            self.logger.info("üìä –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
            self.logger.info("="*55)
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ü–û–ö–£–ü–ö–ò –ò –ü–†–û–î–ê–ñ–ò –ß–ï–†–ï–ó AXIOM.TRADE")
    print("="*60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏!")
    print("üí∞ –°—É–º–º–∞ —Ç–µ—Å—Ç–∞: ~$0.14 (0.001 SOL)")
    print("ü™ô –¢–æ–∫–µ–Ω: BONK (–≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)")
    print("‚ö° –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Axiom.trade (–±—ã—Å—Ç—Ä–∞—è)")
    print("üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: <1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é")
    print("="*60)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏? (yes/no): ").lower().strip()
    
    if confirm in ['yes', 'y', '–¥–∞', '–¥']:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç...\n")
        
        test = AxiomTradingTest()
        result = await test.run_buy_sell_test()
        
        if result:
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üéâ Axiom.trade –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    asyncio.run(main()) 