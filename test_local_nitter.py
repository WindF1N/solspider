#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Nitter
"""

import asyncio
import aiohttp
import time
from nitter_config import nitter_config, get_nitter_search_url

async def test_nitter_instance(url, test_query="bitcoin"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω Nitter –∏–Ω—Å—Ç–∞–Ω—Å"""
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π URL
        from datetime import datetime, timedelta
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        search_url = f"{url}/search?f=tweets&q={test_query}&since={yesterday}&until=&near="
        
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
        print(f"üìç URL: {search_url}")
        
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            async with session.get(search_url, timeout=10) as response:
                elapsed = time.time() - start_time
                
                if response.status == 200:
                    html = await response.text()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Nitter
                    if 'timeline-item' in html or 'tweet-content' in html:
                        print(f"‚úÖ {url} - –†–ê–ë–û–¢–ê–ï–¢ ({response.status}) –∑–∞ {elapsed:.2f}—Å")
                        return True, elapsed
                    elif 'Making sure you\'re not a bot!' in html:
                        print(f"üö´ {url} - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù (—Ç—Ä–µ–±—É—é—Ç—Å—è cookies)")
                        return False, elapsed
                    else:
                        print(f"‚ùì {url} - –°–¢–†–ê–ù–ù–´–ô –û–¢–í–ï–¢ ({len(html)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        return False, elapsed
                else:
                    print(f"‚ùå {url} - –û–®–ò–ë–ö–ê {response.status} –∑–∞ {elapsed:.2f}—Å")
                    return False, elapsed
                    
    except asyncio.TimeoutError:
        print(f"‚è∞ {url} - –¢–ê–ô–ú–ê–£–¢ (>10—Å)")
        return False, 10.0
    except Exception as e:
        print(f"‚ùå {url} - –û–®–ò–ë–ö–ê: {e}")
        return False, 0.0

async def test_all_nitter_instances():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ Nitter –∏–Ω—Å—Ç–∞–Ω—Å—ã"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NITTER –ò–ù–°–¢–ê–ù–°–û–í")
    print("=" * 60)
    
    working_instances = []
    
    for i, instance in enumerate(nitter_config.nitter_instances):
        print(f"\n[{i+1}/{len(nitter_config.nitter_instances)}]")
        is_working, response_time = await test_nitter_instance(instance)
        
        if is_working:
            working_instances.append((instance, response_time))
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(1)
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    if working_instances:
        print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: {len(working_instances)}")
        print("\nüöÄ –†–ï–ô–¢–ò–ù–ì –ü–û –°–ö–û–†–û–°–¢–ò:")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        working_instances.sort(key=lambda x: x[1])
        
        for i, (url, response_time) in enumerate(working_instances):
            status = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "‚ö°"
            is_local = "üè† –õ–û–ö–ê–õ–¨–ù–´–ô" if "localhost" in url else "üåê –í–ù–ï–®–ù–ò–ô"
            print(f"{status} {url} - {response_time:.2f}—Å {is_local}")
            
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        best_url, best_time = working_instances[0]
        if "localhost" in best_url:
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π Nitter: {best_url}")
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {best_time:.2f}—Å (–æ—Ç–ª–∏—á–Ω–æ!)")
        else:
            print(f"üéØ –õ—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π: {best_url}")
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {best_time:.2f}—Å")
            print(f"üí° –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π Nitter!")
    else:
        print("‚ùå –ù–ò –û–î–ò–ù –ò–ù–°–¢–ê–ù–° –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π Nitter")

async def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ß–ï–†–ï–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ:")
    print("-" * 40)
    
    test_queries = ["bitcoin", "F4ALfBc8QpkgDJ1KK6YkcqqPUZbJTazAsnD4GGnApump"]
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    for query in test_queries:
        print(f"\nüîç –ü–æ–∏—Å–∫: {query}")
        search_url = get_nitter_search_url(query, yesterday)
        print(f"üìç URL: {search_url}")
        
        start_time = time.time()
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, timeout=5) as response:
                    elapsed = time.time() - start_time
                    
                    if response.status == 200:
                        html = await response.text()
                        tweet_count = html.count('timeline-item')
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ ~{tweet_count} —Ç–≤–∏—Ç–æ–≤ –∑–∞ {elapsed:.2f}—Å")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –∑–∞ {elapsed:.2f}—Å")
        except Exception as e:
            elapsed = time.time() - start_time
            print(f"‚ùå –û—à–∏–±–∫–∞: {e} (–∑–∞ {elapsed:.2f}—Å)")

if __name__ == "__main__":
    from datetime import datetime, timedelta
    
    print("üß™ –¢–ï–°–¢ NITTER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîß –¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã: {len(nitter_config.nitter_instances)}")
    
    asyncio.run(test_all_nitter_instances())
    asyncio.run(test_search_functionality()) 