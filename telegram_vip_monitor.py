#!/usr/bin/env python3
"""
üì± TELEGRAM VIP MONITOR üì±
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VIP Telegram —á–∞—Ç–æ–≤ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VIP Telegram —á–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Solana –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ —Å ULTRA –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –≥–∞–∑–∞ ($5)
- –û—Ç–ø—Ä–∞–≤–∫–∞ VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–∞
- –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Twitter VIP —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import asyncio
import logging
import time
import re
from datetime import datetime
from typing import Dict, List, Optional, Set
from pyrogram import Client, filters
from pyrogram.types import Message

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {env_file}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_env_file()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from telegram_vip_config import (
        TELEGRAM_API_CREDENTIALS, VIP_TELEGRAM_CHATS, TELEGRAM_MONITOR_SETTINGS,
        TELEGRAM_NOTIFICATION_CONFIG, MESSAGE_FILTERS, format_telegram_message,
        get_active_telegram_chats, get_auto_buy_telegram_chats, should_process_message,
        update_telegram_stats, get_telegram_stats_summary
    )
    from vip_config import get_gas_fee, get_gas_description, create_keyboard
except ImportError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã telegram_vip_config.py –∏ vip_config.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, TELEGRAM_MONITOR_SETTINGS.get('log_level', 'INFO')),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_vip_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramVIPMonitor')

class TelegramVipMonitor:
    """VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–∞—Ç–æ–≤"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.telegram_chats = VIP_TELEGRAM_CHATS
        self.monitor_settings = TELEGRAM_MONITOR_SETTINGS
        self.notification_config = TELEGRAM_NOTIFICATION_CONFIG
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API
        self.api_credentials = TELEGRAM_API_CREDENTIALS
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_bot_token = self.notification_config['bot_token']
        self.notification_chat_id = os.getenv(self.notification_config['chat_id_env_var'])
        
        # –ö—ç—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_cache: Set[str] = set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_telegram_stats('start')
        
        # Pyrogram –∫–ª–∏–µ–Ω—Ç
        self.client = None
        
        active_chats = get_active_telegram_chats()
        auto_buy_chats = get_auto_buy_telegram_chats()
        
        logger.info(f"üì± Telegram VIP Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(active_chats)}")
        logger.info(f"üîÑ –ß–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–æ–π: {len(auto_buy_chats)}")
        
        if not self.notification_chat_id:
            logger.error(f"‚ùå {self.notification_config['chat_id_env_var']} –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    def extract_contracts_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text:
            return []
        
        # –ò—â–µ–º –∞–¥—Ä–µ—Å–∞ Solana (32-44 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        contracts = re.findall(r'\b[A-Za-z0-9]{32,44}\b', text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º
        clean_contracts = []
        for contract in contracts:
            # –£–±–∏—Ä–∞–µ–º "pump" —Å –∫–æ–Ω—Ü–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if contract.endswith('pump'):
                contract = contract[:-4]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Solana –∞–¥—Ä–µ—Å
            if 32 <= len(contract) <= 44 and contract.isalnum():
                # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                if not contract.startswith('0000') and not contract.endswith('0000'):
                    clean_contracts.append(contract)
        
        return list(set(clean_contracts))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    async def send_telegram_notification(self, message: str, keyboard: Optional[List] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            import requests
            
            payload = {
                "chat_id": self.notification_chat_id,
                "text": message,
                "parse_mode": self.notification_config['parse_mode'],
                "disable_web_page_preview": self.notification_config['disable_web_page_preview']
            }
            
            if keyboard:
                payload["reply_markup"] = {"inline_keyboard": keyboard}
            
            url = f"https://api.telegram.org/bot{self.notification_bot_token}/sendMessage"
            response = requests.post(url, json=payload, timeout=self.notification_config['timeout'])
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_telegram_photo_notification(self, photo_url: str, caption: str, keyboard: Optional[List] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –≤ Telegram"""
        try:
            import requests
            
            payload = {
                "chat_id": self.notification_chat_id,
                "photo": photo_url,
                "caption": caption,
                "parse_mode": self.notification_config['parse_mode']
            }
            
            if keyboard:
                payload["reply_markup"] = {"inline_keyboard": keyboard}
            
            url = f"https://api.telegram.org/bot{self.notification_bot_token}/sendPhoto"
            response = requests.post(url, json=payload, timeout=self.notification_config['timeout'])
            
            if response.status_code == 200:
                logger.info("‚úÖ Telegram —Ñ–æ—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç: {response.text}")
                return await self.send_telegram_notification(caption, keyboard)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ñ–æ—Ç–æ: {e}")
            return await self.send_telegram_notification(caption, keyboard)
    
    async def execute_automatic_purchase(self, contract: str, chat_id: int, message_text: str, 
                                       amount_sol: float, chat_config: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–∞ —Å ULTRA –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        logger.info(f"üöÄ TELEGRAM –ê–í–¢–û–ü–û–ö–£–ü–ö–ê: {contract} –Ω–∞ {amount_sol} SOL –∏–∑ —á–∞—Ç–∞ {chat_id}")
        
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Axiom —Ç—Ä–µ–π–¥–µ—Ä
            from axiom_trader import execute_axiom_purchase
            
            # üî• –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —á–∞—Ç–∞
            chat_priority = chat_config.get('priority', 'HIGH')
            if chat_priority == 'ULTRA':
                gas_type = 'ultra_vip'  # $5 –≥–∞–∑ –¥–ª—è ULTRA –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            else:
                gas_type = 'vip_signals'  # $2 –≥–∞–∑ –¥–ª—è HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            
            vip_gas_fee = get_gas_fee(gas_type)
            gas_description = get_gas_description(gas_type)
            gas_usd = vip_gas_fee * 140  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
            
            logger.info(f"üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º {gas_description}")
            logger.info(f"‚ö° Telegram VIP Gas fee: {vip_gas_fee} SOL (~${gas_usd:.2f})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Axiom.trade
            result = await execute_axiom_purchase(
                contract_address=contract,
                twitter_username=f"TelegramVIP_Chat_{abs(chat_id)}",
                tweet_text=f"–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –∏–∑ Telegram —á–∞—Ç–∞: {message_text[:100]}...",
                sol_amount=amount_sol,
                slippage=15,
                priority_fee=vip_gas_fee  # üî• ULTRA VIP –≥–∞–∑ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            )
            
            execution_time = time.time() - start_time
            
            if result.get('success', False):
                logger.info(f"‚úÖ Telegram –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! TX: {result.get('tx_hash', 'N/A')}")
                update_telegram_stats('purchase_success')
                
                return {
                    'success': True,
                    'tx_hash': result.get('tx_hash', 'N/A'),
                    'sol_amount': amount_sol,
                    'execution_time': execution_time,
                    'status': f'Axiom.trade - –ø–æ–∫—É–ø–∫–∞ {amount_sol:.6f} SOL',
                    'platform': 'Axiom.trade',
                    'gas_fee': vip_gas_fee,
                    'gas_usd': gas_usd
                }
            else:
                error_msg = result.get('error', 'Unknown error from Axiom')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {error_msg}")
                update_telegram_stats('purchase_failed')
                
                return {
                    'success': False,
                    'error': error_msg,
                    'execution_time': execution_time,
                    'gas_fee': vip_gas_fee,
                    'gas_usd': gas_usd
                }
                
        except ImportError:
            logger.error("‚ùå axiom_trader –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Axiom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            update_telegram_stats('purchase_failed')
            return {
                'success': False,
                'error': 'axiom_trader module not found',
                'execution_time': time.time() - start_time
            }
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {e}")
            update_telegram_stats('purchase_failed')
            return {
                'success': False,
                'error': f'Critical error: {str(e)}',
                'execution_time': execution_time
            }
    
    async def process_message_contracts(self, message: Message, chat_config: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        start_time = time.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = message.text or message.caption or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not should_process_message(message_text, chat_config):
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update_telegram_stats('message_processed')
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            contracts = self.extract_contracts_from_text(message_text)
            
            if not contracts:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            author_name = "Unknown"
            if message.from_user:
                if message.from_user.username:
                    author_name = f"@{message.from_user.username}"
                elif message.from_user.first_name:
                    author_name = message.from_user.first_name
                    if message.from_user.last_name:
                        author_name += f" {message.from_user.last_name}"
                else:
                    author_name = f"User_{message.from_user.id}"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            for contract in contracts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
                signal_key = f"tg_{message.chat.id}:{contract}"
                
                if signal_key not in self.signals_cache:
                    self.signals_cache.add(signal_key)
                    update_telegram_stats('contract_found')
                    
                    logger.info(f"üî• TELEGRAM –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù! –ß–∞—Ç {message.chat.id}: {contract}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
                    purchase_result = None
                    if chat_config.get('auto_buy', False):
                        amount_sol = chat_config.get('buy_amount_sol', 0.01)
                        update_telegram_stats('purchase_attempt')
                        
                        purchase_result = await self.execute_automatic_purchase(
                            contract, message.chat.id, message_text, amount_sol, chat_config
                        )
                    
                    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.send_contract_notification(
                        contract, message_text, author_name, message.chat.id, 
                        chat_config, purchase_result
                    )
            
            processing_time = time.time() - start_time
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.2f}—Å, –Ω–∞–π–¥–µ–Ω–æ {len(contracts)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_contract_notification(self, contract: str, message_text: str, author_name: str,
                                       chat_id: int, chat_config: Dict, purchase_result: Optional[Dict] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"""
        try:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message_text) > 200:
                message_text = message_text[:200] + "..."
            
            # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification = format_telegram_message(
                'contract_found',
                description=chat_config['description'],
                chat_id=chat_id,
                author_name=author_name,
                contract=contract,
                message_text=message_text,
                priority=chat_config['priority'],
                timestamp=datetime.now().strftime('%H:%M:%S')
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–µ
            if purchase_result:
                if purchase_result['success']:
                    notification += format_telegram_message(
                        'auto_buy_success',
                        status=purchase_result['status'],
                        sol_amount=purchase_result['sol_amount'],
                        execution_time=purchase_result['execution_time'],
                        tx_hash=purchase_result['tx_hash'],
                        gas_fee=purchase_result.get('gas_fee', 0),
                        gas_usd=purchase_result.get('gas_usd', 0)
                    )
                else:
                    notification += format_telegram_message(
                        'auto_buy_error',
                        error=purchase_result['error'][:100]
                    )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = create_keyboard(contract)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ)
            photo_url = f"https://axiomtrading.sfo3.cdn.digitaloceanspaces.com/{contract}.webp"
            success = await self.send_telegram_photo_notification(photo_url, notification, keyboard)
            
            if success:
                logger.info(f"üì§ Telegram VIP —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {contract}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram VIP —Å–∏–≥–Ω–∞–ª –¥–ª—è {contract}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def setup_client(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = Client(
                self.api_credentials['session_name'],
                api_id=self.api_credentials['api_id'],
                api_hash=self.api_credentials['api_hash'],
                workdir="."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            active_chats = get_active_telegram_chats()
            chat_ids = [config['chat_id'] for config in active_chats.values()]
            
            logger.info(f"üì± –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —á–∞—Ç–æ–≤: {chat_ids}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
            chat_filter = filters.chat(chat_ids)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on_message(chat_filter)
            async def handle_message(client, message: Message):
                try:
                    # –ù–∞–π–¥–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    chat_config = None
                    for config in active_chats.values():
                        if config['chat_id'] == message.chat.id:
                            chat_config = config
                            break
                    
                    if not chat_config:
                        return
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                    if MESSAGE_FILTERS['ignore_bots'] and message.from_user and message.from_user.is_bot:
                        return
                    
                    if MESSAGE_FILTERS['ignore_forwards'] and message.forward_date:
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    max_age = self.monitor_settings['max_message_age']
                    if message.date and (datetime.now() - message.date).total_seconds() > max_age:
                        return
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.process_message_contracts(message, chat_config)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–∞—Ç–æ–≤"""
        try:
            if not self.notification_chat_id:
                logger.error(f"‚ùå {self.notification_config['chat_id_env_var']} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            if not await self.setup_client():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.monitor_settings.get('send_startup_notification', True):
                active_chats = get_active_telegram_chats()
                auto_buy_chats = get_auto_buy_telegram_chats()
                
                start_message = format_telegram_message(
                    'startup',
                    active_chats=len(active_chats),
                    auto_buy_chats=', '.join([f"Chat_{abs(config['chat_id'])}" for config in auto_buy_chats.values()]),
                    timestamp=datetime.now().strftime('%H:%M:%S %d.%m.%Y')
                )
                
                await self.send_telegram_notification(start_message)
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.start()
            logger.info("‚úÖ Telegram VIP Monitor –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (Pyrogram —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                cleanup_threshold = self.monitor_settings['cache_cleanup_threshold']
                if len(self.signals_cache) > cleanup_threshold:
                    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Telegram —Å–∏–≥–Ω–∞–ª–æ–≤")
                    self.signals_cache.clear()
                
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if self.monitor_settings.get('send_error_notifications', True):
                error_message = format_telegram_message(
                    'connection_error',
                    error=str(e)[:200],
                    delay=self.monitor_settings['reconnect_delay']
                )
                await self.send_telegram_notification(error_message)
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            await asyncio.sleep(self.monitor_settings['reconnect_delay'])
        finally:
            if self.client:
                await self.client.stop()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        while True:
            try:
                await self.start_monitoring()
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(self.monitor_settings['reconnect_delay'])
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = TelegramVipMonitor()
    await monitor.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Telegram VIP Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Telegram VIP –º–æ–Ω–∏—Ç–æ—Ä–µ")
