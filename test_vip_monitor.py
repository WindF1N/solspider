#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ VIP TWITTER MONITOR
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ VIP –ø–∞—Ä—Å–µ—Ä–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import asyncio
import os
import sys
from datetime import datetime

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = ['vip_twitter_monitor.py', 'vip_config.py']
    missing_files = []
    
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    try:
        from vip_config import VIP_TWITTER_ACCOUNTS, VIP_MONITOR_SETTINGS
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VIP —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        import aiohttp
        import requests
        from bs4 import BeautifulSoup
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    vip_chat_id = os.getenv('VIP_CHAT_ID')
    
    if not vip_chat_id:
        print("‚ö†Ô∏è VIP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export VIP_CHAT_ID=your_chat_id")
        return False
    
    print(f"‚úÖ VIP_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {vip_chat_id[:10]}...")
    return True

# –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VIP –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        from vip_config import (
            VIP_TWITTER_ACCOUNTS, VIP_MONITOR_SETTINGS, 
            get_active_accounts, get_auto_buy_accounts
        )
        
        print("\nüîß –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP –∞–∫–∫–∞—É–Ω—Ç—ã
        total_accounts = len(VIP_TWITTER_ACCOUNTS)
        active_accounts = get_active_accounts()
        auto_buy_accounts = get_auto_buy_accounts()
        
        print(f"üìä –í—Å–µ–≥–æ VIP –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(active_accounts)}")
        print(f"üí∞ –° –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–æ–π: {len(auto_buy_accounts)}")
        
        # –í—ã–≤–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        for username, config in active_accounts.items():
            status = "ü§ñ –ê–í–¢–û–ü–û–ö–£–ü–ö–ê" if config.get('auto_buy', False) else "üëÅÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì"
            print(f"  ‚Ä¢ @{username} - {config['priority']} - {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {VIP_MONITOR_SETTINGS['default_check_interval']}—Å")
        print(f"üîÑ –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: {VIP_MONITOR_SETTINGS['max_retries']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

# –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VIP –º–æ–Ω–∏—Ç–æ—Ä–∞
async def test_monitor_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é VIP –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    try:
        print("\nüöÄ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ú–û–ù–ò–¢–û–†–ê:")
        
        from vip_twitter_monitor import VipTwitterMonitor
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
        monitor = VipTwitterMonitor()
        
        print(f"‚úÖ VIP –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {sum(1 for config in monitor.VIP_ACCOUNTS.values() if config.get('enabled', False))}")
        print(f"üç™ Cookies –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏: {len(monitor.cookies)}")
        print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {monitor.check_interval}—Å")
        
        # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤
        print("\nüîß –¢–ï–°–¢ –ú–ï–¢–û–î–û–í:")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        test_text = "Check out this new token: 7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU on Solana!"
        contracts = monitor.extract_contracts_from_text(test_text)
        
        if contracts:
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: –Ω–∞–π–¥–µ–Ω {contracts[0][:8]}...")
        else:
            print("‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç —Ä–æ—Ç–∞—Ü–∏–∏ cookies
        cookie1 = monitor.get_next_cookie()
        cookie2 = monitor.get_next_cookie()
        
        print(f"‚úÖ –†–æ—Ç–∞—Ü–∏—è cookies: {len(cookie1)} ‚Üí {len(cookie2)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        return False

# –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def test_message_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VIP —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        print("\nüìù –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô:")
        
        from vip_config import format_vip_message, create_keyboard
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = format_vip_message(
            'contract_found',
            description='–¢–µ—Å—Ç–æ–≤—ã–π VIP –∞–∫–∫–∞—É–Ω—Ç',
            username='test_user',
            contract='7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU',
            tweet_text='–¢–µ—Å—Ç–æ–≤—ã–π —Ç–≤–∏—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
            priority='HIGH',
            timestamp=datetime.now().strftime('%H:%M:%S')
        )
        
        if message and 'VIP TWITTER –°–ò–ì–ù–ê–õ!' in message:
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
        auto_buy_message = format_vip_message(
            'auto_buy_success',
            status='–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω',
            amount_usd=1000.0,
            execution_time=2.5,
            tx_hash='test_tx_hash_123'
        )
        
        if auto_buy_message and '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ö–£–ü–ö–ê' in auto_buy_message:
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏")
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = create_keyboard('7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU')
        
        if keyboard and len(keyboard) > 0:
            button_count = sum(len(row) for row in keyboard)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {button_count} –∫–Ω–æ–ø–æ–∫ –≤ {len(keyboard)} —Ä—è–¥–∞—Ö")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

# –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
async def test_auto_buy_simulation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏"""
    try:
        print("\nüí∞ –¢–ï–°–¢ –°–ò–ú–£–õ–Ø–¶–ò–ò –ê–í–¢–û–ü–û–ö–£–ü–ö–ò:")
        
        from vip_twitter_monitor import VipTwitterMonitor
        
        monitor = VipTwitterMonitor()
        
        # –¢–µ—Å—Ç –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
        result = await monitor.execute_automatic_purchase(
            contract='7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU',
            username='test_user',
            tweet_text='–¢–µ—Å—Ç–æ–≤—ã–π —Ç–≤–∏—Ç',
            amount_usd=100.0
        )
        
        if result and 'success' in result:
            status = "‚úÖ –£–°–ü–ï–•" if result['success'] else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{status} –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: {result.get('status', result.get('error', 'N/A'))}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_time', 0):.2f}—Å")
            
            if result['success']:
                print(f"üíµ –°—É–º–º–∞: ${result.get('amount_usd', 0)}")
                print(f"üîó TX: {result.get('tx_hash', 'N/A')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {e}")
        return False

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã VIP —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø VIP TWITTER MONITOR")
    print("=" * 50)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤", check_files),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤", check_imports),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_configuration),
        ("–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", test_monitor_initialization),
        ("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", test_message_formatting),
        ("–¢–µ—Å—Ç –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏", test_auto_buy_simulation),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! VIP —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ VIP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python vip_twitter_monitor.py")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        
        if not os.getenv('VIP_CHAT_ID'):
            print("\nüí° –°–û–í–ï–¢: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VIP_CHAT_ID –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:")
            print("   export VIP_CHAT_ID=your_telegram_chat_id")
    
    return passed == total

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ VIP –°–ò–°–¢–ï–ú–´")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if not check_files():
        return False
    
    if not check_imports():
        return False
    
    try:
        from vip_twitter_monitor import VipTwitterMonitor
        monitor = VipTwitterMonitor()
        print("‚úÖ VIP –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        test_text = "New token: 7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU"
        contracts = monitor.extract_contracts_from_text(test_text)
        if contracts:
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {contracts[0][:10]}...")
        
        print("üéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        return False

if __name__ == "__main__":
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
    if len(sys.argv) > 1 and sys.argv[1] == "--quick":
        asyncio.run(quick_test())
    else:
        asyncio.run(run_all_tests())