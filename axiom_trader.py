#!/usr/bin/env python3
"""
Axiom.trade API Trader - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —á–µ—Ä–µ–∑ Axiom API
"""

import asyncio
import aiohttp
import json
import time
import os
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class AxiomTrader:
    def __init__(self):
        # API endpoint
        self.api_base = "https://api-prod.wl.bot"
        
        # JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.auth_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjc4OTE1MjQyNDQsInVzZXJJZCI6IjY4NTliOTFkZjk3MjQ2N2E5MDM3Yjg4MyIsInVzZXJuYW1lIjoid29ya2VyMTAwMHgiLCJyZWdpc3RyYXRpb25Db21wbGV0ZWQiOmZhbHNlLCJpYXQiOjE3NTA3MTA2NzcsImV4cCI6MTc1NTg5NDY3N30.axmOxQyFqZXdsc4dSWPc1yI4r94tLDXVSbqEB2CoqdI"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'accept': 'application/json, text/plain, */*',
            'accept-encoding': 'gzip, deflate, br, zstd',
            'accept-language': 'ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7',
            'authorization': f'Bearer {self.auth_token}',
            'content-type': 'application/json',
            'origin': 'https://axiom.trade',
            'referer': 'https://axiom.trade/',
            'sec-ch-ua': '"Microsoft Edge";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'cross-site',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36 Edg/137.0.0.0'
        }
        
        logger.info(f"üí≥ Axiom Trader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def execute_trade(self, token_address, amount, trade_type):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Axiom API"""
        try:
            url = f"{self.api_base}/api/portfolio/handle/execute"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload
            payload = {
                "token_address": token_address,
                "amount": amount,
                "type": trade_type,
                "table": "USER_TRANSACTIONS"
            }
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {trade_type} –∑–∞–ø—Ä–æ—Å –≤ Axiom")
            logger.info(f"   üìç –¢–æ–∫–µ–Ω: {token_address}")
            logger.info(f"   üí∞ –°—É–º–º–∞: {amount}")
            logger.info(f"   üîó URL: {url}")
            logger.info(f"   üì¶ Payload: {json.dumps(payload)}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    json=payload,
                    headers=self.headers
                ) as response:
                    
                    status = response.status
                    response_text = await response.text()
                    
                    logger.info(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {status}")
                    logger.info(f"üì® –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response_text}")
                    
                    if status in [200, 201]:
                        try:
                            response_data = json.loads(response_text)
                            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                            return {
                                'success': True,
                                'response': response_data,
                                'status': status
                            }
                        except json.JSONDecodeError:
                            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
                            return {
                                'success': True,
                                'response': response_text,
                                'status': status
                            }
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {status} - {response_text}")
                        return {
                            'success': False,
                            'error': f'HTTP {status}: {response_text}',
                            'status': status
                        }
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': f'Exception: {str(e)}',
                'status': 0
            }
    
    async def buy_token(self, token_address, sol_amount):
        """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∑–∞ SOL"""
        try:
            start_time = time.time()
            
            logger.info(f"üõí –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω {token_address}")
            logger.info(f"   üí∞ –°—É–º–º–∞: {sol_amount} SOL")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            result = await self.execute_trade(
                token_address=token_address,
                amount=sol_amount,
                trade_type="BUY"
            )
            
            execution_time = time.time() - start_time
            result['execution_time'] = execution_time
            
            if result['success']:
                logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.2f}—Å")
            else:
                logger.error(f"‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∑–∞ {execution_time:.2f}—Å")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
            return {
                'success': False,
                'error': f'Critical error: {str(e)}',
                'execution_time': time.time() - start_time if 'start_time' in locals() else 0
            }
    
    async def sell_token(self, token_address, percentage=100):
        """–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –±–∞–ª–∞–Ω—Å–∞)"""
        try:
            start_time = time.time()
            
            logger.info(f"üìâ –ü—Ä–æ–¥–∞–µ–º —Ç–æ–∫–µ–Ω {token_address}")
            logger.info(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage}%")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
            result = await self.execute_trade(
                token_address=token_address,
                amount=percentage,
                trade_type="SELL_PERCENTAGE"
            )
            
            execution_time = time.time() - start_time
            result['execution_time'] = execution_time
            
            if result['success']:
                logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.2f}—Å")
            else:
                logger.error(f"‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∑–∞ {execution_time:.2f}—Å")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return {
                'success': False,
                'error': f'Critical error: {str(e)}',
                'execution_time': time.time() - start_time if 'start_time' in locals() else 0
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–π–¥–µ—Ä–∞
axiom_trader = AxiomTrader()

async def execute_axiom_purchase(contract_address, twitter_username, tweet_text, sol_amount=0.01, slippage=15, priority_fee=0.0143):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Axiom"""
    try:
        start_time = time.time()
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Axiom: {contract_address}")
        logger.info(f"   üí∞ –°—É–º–º–∞: {sol_amount} SOL")
        logger.info(f"   üë§ –°–∏–≥–Ω–∞–ª –æ—Ç: @{twitter_username}")
        logger.info(f"   üìä Slippage: {slippage}%")
        logger.info(f"   ‚ö° Priority fee: {priority_fee} SOL (~${priority_fee * 140:.2f})")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        result = await axiom_trader.buy_token(contract_address, sol_amount)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TX hash –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞
        if result.get('success', False):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock TX hash –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            import hashlib
            tx_data = f"{contract_address}_{int(start_time)}_{sol_amount}"
            tx_hash = hashlib.sha256(tx_data.encode()).hexdigest()[:64]
            result['tx_hash'] = tx_hash
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX: {tx_hash[:16]}...")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Axiom –ø–æ–∫—É–ø–∫–∏: {e}")
        return {
            'success': False,
            'error': f'Critical error: {str(e)}',
            'execution_time': time.time() - start_time if 'start_time' in locals() else 0
        }

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s: %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    async def test_axiom():
        try:
            trader = AxiomTrader()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É BONK
            bonk_address = "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
            
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É BONK...")
            buy_result = await trader.buy_token(
                token_address=bonk_address,
                sol_amount=0.0001  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–∫—É–ø–∫–∞
            )
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏: {buy_result}")
            
            if buy_result['success']:
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await asyncio.sleep(5)
                
                logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É BONK...")
                sell_result = await trader.sell_token(
                    token_address=bonk_address,
                    percentage=100  # –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ
                )
                
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏: {sell_result}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    asyncio.run(test_axiom()) 