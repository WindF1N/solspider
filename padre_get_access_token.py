
def extract_firebase_token():
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Firebase access token –∏–∑ IndexedDB .ldb —Ñ–∞–π–ª–æ–≤, Local Storage –∏ logs
    """
    print("üîç –ò—â–µ–º Firebase —Ç–æ–∫–µ–Ω –≤ IndexedDB .ldb —Ñ–∞–π–ª–∞—Ö...")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ IndexedDB .ldb —Ñ–∞–π–ª–∞—Ö (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
        token = search_token_in_indexeddb_ldb()
        if token:
            print("‚úÖ Access Token –Ω–∞–π–¥–µ–Ω –≤ IndexedDB .ldb —Ñ–∞–π–ª–∞—Ö!")
            print(f"Token: {token[:50]}...")
            return token

        # # –ï—Å–ª–∏ –≤ IndexedDB –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º Local Storage
        # print("üîÑ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ IndexedDB .ldb, –ø—Ä–æ–≤–µ—Ä—è–µ–º Local Storage...")
        # token = search_token_in_local_storage()
        # if token:
        #     print("‚úÖ Access Token –Ω–∞–π–¥–µ–Ω –≤ Local Storage!")
        #     print(f"Token: {token[:50]}...")
        #     return token

        # –ï—Å–ª–∏ –∏ –≤ Local Storage –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º IndexedDB logs
        print("üîÑ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Local Storage, –ø—Ä–æ–≤–µ—Ä—è–µ–º IndexedDB logs...")
        token = search_token_in_log_files()
        if token:
            print("‚úÖ Access Token –Ω–∞–π–¥–µ–Ω –≤ IndexedDB logs!")
            print(f"Token: {token[:50]}...")
            return token

        print("‚ùå Firebase —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
        return None

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def search_token_in_local_storage():
    """
    –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –≤ Local Storage –±—Ä–∞—É–∑–µ—Ä–∞ (Firebase tokens)
    """
    import glob

    # –ò—â–µ–º –≤ Local Storage –±—Ä–∞—É–∑–µ—Ä–∞
    storage_path = "/mnt/c/Users/agafo/AppData/Local/Microsoft/Edge/User Data/Default/Local Storage/leveldb"
    db_files = glob.glob(f"{storage_path}/*.ldb") + glob.glob(f"{storage_path}/*.log")

    all_tokens = []

    for db_file in db_files:
        try:
            with open(db_file, 'rb') as f:
                content = f.read()

                # –ò—â–µ–º Firebase —Ç–æ–∫–µ–Ω—ã –≤ localStorage
                if b'firebase' in content.lower() or b'accessToken' in content:
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–∫–µ–Ω–∞ Firebase
                    import re
                    content_str = content.decode('utf-8', errors='ignore')
                    token_pattern = r'eyJ[a-zA-Z0-9_\-]+\.eyJ[a-zA-Z0-9_\-]+\.[a-zA-Z0-9_\-]+'
                    matches = re.findall(token_pattern, content_str)

                    if matches:
                        for match in matches:
                            if len(match) > 200:  # Firebase —Ç–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ
                                all_tokens.append(match)
                                print(f"üéØ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ {db_file}")

        except Exception as e:
            continue

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if all_tokens:
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ Local Storage, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        return all_tokens[-1]

    return None

def search_token_in_indexeddb_ldb():
    """
    –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –≤ .ldb —Ñ–∞–π–ª–∞—Ö IndexedDB (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
    """
    import glob

    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è IndexedDB —Å .ldb —Ñ–∞–π–ª–∞–º–∏
    db_path = "/mnt/c/Users/agafo/AppData/Local/Microsoft/Edge/User Data/Default/IndexedDB/https_trade.padre.gg_0.indexeddb.leveldb"
    ldb_files = glob.glob(f"{db_path}/*.ldb")

    all_tokens = []

    print(f"üîç –ò—â–µ–º –≤ IndexedDB .ldb —Ñ–∞–π–ª–∞—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(ldb_files)} —Ñ–∞–π–ª–æ–≤")

    for ldb_file in ldb_files:
        try:
            print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {ldb_file.split('/')[-1]}")
            with open(ldb_file, 'rb') as f:
                content = f.read()

                # –ò—â–µ–º Firebase —Ç–æ–∫–µ–Ω—ã –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if b'firebase' in content.lower() or b'accessToken' in content or b'eyJ' in content:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ {ldb_file.split('/')[-1]}")

                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–∫–µ–Ω–∞ Firebase
                    import re
                    content_str = content.decode('utf-8', errors='ignore')
                    token_pattern = r'eyJ[a-zA-Z0-9_\-]+\.eyJ[a-zA-Z0-9_\-]+\.[a-zA-Z0-9_\-]+'
                    matches = re.findall(token_pattern, content_str)

                    if matches:
                        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª–µ {ldb_file.split('/')[-1]}")
                        for match in matches:
                            if len(match) > 200:  # Firebase —Ç–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ
                                all_tokens.append(match)
                                print(f"‚úÖ –î–æ–±—ã—Ç —Ç–æ–∫–µ–Ω –¥–ª–∏–Ω–æ–π {len(match)} —Å–∏–º–≤–æ–ª–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {ldb_file.split('/')[-1]}: {e}")
            continue

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if all_tokens:
        print(f"üéâ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_tokens)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        return all_tokens[-1]

    print("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .ldb —Ñ–∞–π–ª–∞—Ö IndexedDB")
    return None

def search_token_in_log_files():
    """
    –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –≤ log —Ñ–∞–π–ª–∞—Ö IndexedDB (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    """
    import glob

    # –ò—â–µ–º –≤—Å–µ .log —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = "/mnt/c/Users/agafo/AppData/Local/Microsoft/Edge/User Data/Default/IndexedDB/https_trade.padre.gg_0.indexeddb.leveldb"
    log_files = glob.glob(f"{db_path}/*.log")

    all_tokens = []

    for log_file in log_files:
        try:
            with open(log_file, 'rb') as f:
                content = f.read()

                # –ò—â–µ–º accessToken –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if b'accessToken' in content:
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–∫–µ–Ω–∞ Firebase
                    import re
                    content_str = content.decode('utf-8', errors='ignore')
                    token_pattern = r'eyJ[a-zA-Z0-9_\-]+\.eyJ[a-zA-Z0-9_\-]+\.[a-zA-Z0-9_\-]+'
                    matches = re.findall(token_pattern, content_str)

                    if matches:
                        for match in matches:
                            if len(match) > 200:  # Firebase —Ç–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ
                                all_tokens.append(match)

        except Exception as e:
            continue

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if all_tokens:
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ IndexedDB logs, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        return all_tokens[-1]

    return None


def save_token_to_file(token, filename="token.txt"):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
    """
    with open(filename, 'w') as f:
        f.write(token)
    print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")


if __name__ == "__main__":
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ log —Ñ–∞–π–ª–æ–≤
    access_token = extract_firebase_token()

    if access_token:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_token_to_file(access_token)

        # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            import pyperclip
            pyperclip.copy(access_token)
            print("üìã –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except ImportError:
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyperclip –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä: pip install pyperclip")
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ log —Ñ–∞–π–ª–∞—Ö")