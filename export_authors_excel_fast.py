#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∞–≤—Ç–æ—Ä–æ–≤ —Ç–≤–∏—Ç–æ–≤ —Å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º –≤ Excel
"""

import sys
import os
from datetime import datetime, timedelta
import pandas as pd
from collections import defaultdict
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from database import get_db_manager, TwitterAuthor, TweetMention, Token
from sqlalchemy import desc, func, text

def clean_excel_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤ Excel"""
    if not isinstance(text, str):
        return text
    
    # –£–¥–∞–ª—è–µ–º null —Å–∏–º–≤–æ–ª—ã –∏ –¥—Ä—É–≥–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º emoji –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[^\x20-\x7E\u00A0-\uFFFF]', '?', text)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    if len(text) > 32000:
        text = text[:32000] + "..."
    
    return text

def export_authors_to_excel_fast():
    """–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ —Å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º –≤ Excel"""
    
    print("üìä –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∞–≤—Ç–æ—Ä–æ–≤ —Ç–≤–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ Excel")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ —Å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–≤–∏—Ç–∞–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        print("üîç –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–≤–∏—Ç–∞–º–∏
        query = text("""
            SELECT 
                ta.username,
                ta.display_name,
                ta.followers_count,
                ta.following_count,
                ta.tweets_count,
                ta.likes_count,
                ta.is_verified,
                ta.join_date,
                ta.bio,
                ta.website,
                ta.first_seen,
                ta.last_updated,
                COUNT(tm.id) as total_mentions,
                (SELECT tm2.tweet_text FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_tweet_text,
                (SELECT tm2.discovered_at FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_tweet_date,
                (SELECT tm2.mint FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_mint,
                (SELECT tm2.mention_type FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_mention_type,
                (SELECT tm2.search_query FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_search_query,
                (SELECT tm2.likes FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_tweet_likes,
                (SELECT tm2.retweets FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_tweet_retweets,
                (SELECT tm2.replies FROM tweet_mentions tm2 
                 WHERE tm2.author_username = ta.username 
                 ORDER BY tm2.discovered_at DESC LIMIT 1) as last_tweet_replies
            FROM twitter_authors ta
            LEFT JOIN tweet_mentions tm ON ta.username = tm.author_username
            GROUP BY ta.username
            ORDER BY ta.followers_count DESC
        """)
        
        result = session.execute(query)
        authors_data = []
        
        # –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        tokens_cache = {}
        
        print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤...")
        
        for row in result:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –µ—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            token_symbol = 'N/A'
            token_name = 'N/A'
            
            if row.last_mint:
                if row.last_mint in tokens_cache:
                    token = tokens_cache[row.last_mint]
                else:
                    token = session.query(Token).filter_by(mint=row.last_mint).first()
                    tokens_cache[row.last_mint] = token
                
                if token:
                    token_symbol = token.symbol or 'N/A'
                    token_name = token.name or 'N/A'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
            author_data = {
                '–ê–≤—Ç–æ—Ä': f"@{row.username}",
                '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è': clean_excel_text(row.display_name or 'N/A'),
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': row.followers_count or 0,
                '–ü–æ–¥–ø–∏—Å–∫–∏': row.following_count or 0,
                '–¢–≤–∏—Ç—ã': row.tweets_count or 0,
                '–õ–∞–π–∫–∏': row.likes_count or 0,
                '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω': '–î–∞' if row.is_verified else '–ù–µ—Ç',
                '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': clean_excel_text(row.join_date or 'N/A'),
                '–ë–∏–æ': clean_excel_text((row.bio or '')[:150] + '...' if row.bio and len(row.bio) > 150 else row.bio or 'N/A'),
                '–°–∞–π—Ç': clean_excel_text(row.website or 'N/A'),
                '–ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ': row.first_seen.strftime('%Y-%m-%d %H:%M:%S') if row.first_seen else 'N/A',
                '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': row.last_updated.strftime('%Y-%m-%d %H:%M:%S') if row.last_updated else 'N/A',
                '–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤': row.total_mentions or 0,
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω - –°–∏–º–≤–æ–ª': clean_excel_text(token_symbol),
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω - –ù–∞–∑–≤–∞–Ω–∏–µ': clean_excel_text(token_name),
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω - –ö–æ–Ω—Ç—Ä–∞–∫—Ç': row.last_mint or 'N/A',
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –¢–µ–∫—Å—Ç': clean_excel_text(row.last_tweet_text[:200] + '...' if row.last_tweet_text and len(row.last_tweet_text) > 200 else row.last_tweet_text or '–ù–µ—Ç —Ç–≤–∏—Ç–æ–≤'),
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –î–∞—Ç–∞': row.last_tweet_date.strftime('%Y-%m-%d %H:%M:%S') if row.last_tweet_date else 'N/A',
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –¢–∏–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏—è': clean_excel_text(row.last_mention_type or 'N/A'),
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –ü–æ–∏—Å–∫': clean_excel_text(row.last_search_query or 'N/A'),
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –õ–∞–π–∫–∏': row.last_tweet_likes or 0,
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –†–µ—Ç–≤–∏—Ç—ã': row.last_tweet_retweets or 0,
                '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –û—Ç–≤–µ—Ç—ã': row.last_tweet_replies or 0,
                '–ü—Ä–æ—Ñ–∏–ª—å': f"https://nitter.tiekoetter.com/{row.username}",
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º': categorize_by_followers(row.followers_count or 0),
                'Ratio –ø–æ–¥–ø–∏—Å—á–∏–∫–∏/–ø–æ–¥–ø–∏—Å–∫–∏': f"{((row.followers_count or 0) / max(row.following_count or 1, 1)):.2f}" if (row.following_count or 0) > 0 else 'N/A',
                'Engagement rate': f"{((row.likes_count or 0) / max(row.tweets_count or 1, 1)):.2f}" if (row.tweets_count or 0) > 0 else 'N/A'
            }
            
            authors_data.append(author_data)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(authors_data)} –∞–≤—Ç–æ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(authors_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üìä –§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        total_authors = len(authors_data)
        authors_with_tweets = len([a for a in authors_data if a['–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤'] > 0])
        verified_authors = len([a for a in authors_data if a['–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'] == '–î–∞'])
        avg_followers = sum(a['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'] for a in authors_data) / total_authors if total_authors > 0 else 0
        total_mentions = sum(a['–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤'] for a in authors_data)
        
        stats_data = [
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ', '–ó–Ω–∞—á–µ–Ω–∏–µ': total_authors},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–ê–≤—Ç–æ—Ä–æ–≤ —Å —Ç–≤–∏—Ç–∞–º–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': authors_with_tweets},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–ê–≤—Ç–æ—Ä–æ–≤ –±–µ–∑ —Ç–≤–∏—Ç–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': total_authors - authors_with_tweets},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': verified_authors},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '% –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{(verified_authors / total_authors * 100):.1f}%"},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{avg_followers:,.0f}"},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': total_mentions},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ä–µ–¥–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –∞–≤—Ç–æ—Ä–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{(total_mentions / authors_with_tweets):.1f}" if authors_with_tweets > 0 else '0'},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        categories = {}
        for author in authors_data:
            cat = author['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º']
            if cat not in categories:
                categories[cat] = 0
            categories[cat] += 1
        
        for category, count in categories.items():
            stats_data.append({
                '–ú–µ—Ç—Ä–∏–∫–∞': f'–ê–≤—Ç–æ—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"',
                '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{count} ({(count / total_authors * 100):.1f}%)"
            })
        
        stats_df = pd.DataFrame(stats_data)
        
        # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
        top_authors = df[df['–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤'] > 0].head(20)[
            ['–ê–≤—Ç–æ—Ä', '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤', '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º']
        ]
        
        # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        top_by_followers = df.head(20)[
            ['–ê–≤—Ç–æ—Ä', '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤', '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω - –°–∏–º–≤–æ–ª', '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç - –¢–µ–∫—Å—Ç']
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ Excel —Ñ–∞–π–ª...")
        
        filename = f"authors_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤
            df.to_excel(writer, sheet_name='–í—Å–µ –∞–≤—Ç–æ—Ä—ã', index=False)
            
            # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
            if not top_authors.empty:
                top_authors.to_excel(writer, sheet_name='–¢–æ–ø –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', index=False)
            
            # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            top_by_followers.to_excel(writer, sheet_name='–¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º', index=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –ê–≤—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ —Å —Ç–≤–∏—Ç–∞–º–∏
            authors_with_tweets_df = df[df['–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤'] > 0]
            if not authors_with_tweets_df.empty:
                authors_with_tweets_df.to_excel(writer, sheet_name='–ê–≤—Ç–æ—Ä—ã —Å —Ç–≤–∏—Ç–∞–º–∏', index=False)
            
            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã
            verified_df = df[df['–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'] == '–î–∞']
            if not verified_df.empty:
                verified_df.to_excel(writer, sheet_name='–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', index=False)
        
        print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        print(f"üìä –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤: {total_authors}")
        print(f"üì± –ê–≤—Ç–æ—Ä–æ–≤ —Å —Ç–≤–∏—Ç–∞–º–∏: {authors_with_tweets}")
        print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {verified_authors}")
        print(f"üí¨ –í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤: {total_mentions}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤
        print(f"\nüèÜ –¢–û–ü-10 –ê–í–¢–û–†–û–í –ü–û –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú:")
        print("-" * 80)
        for i, author in enumerate(df.head(10).itertuples(), 1):
            print(f"{i:2d}. {author.–ê–≤—Ç–æ—Ä:<20} | {author.–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:>8,} | {author._17:<15} | –¢–≤–∏—Ç–æ–≤: {author._13}")
        
        session.close()
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def categorize_by_followers(followers_count):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    if followers_count >= 100000:
        return "–ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä (100K+)"
    elif followers_count >= 10000:
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π (10K-100K)"
    elif followers_count >= 1000:
        return "–ê–∫—Ç–∏–≤–Ω—ã–π (1K-10K)"
    elif followers_count >= 100:
        return "–ù–∞—á–∏–Ω–∞—é—â–∏–π (100-1K)"
    else:
        return "–ù–æ–≤–∏—á–æ–∫ (<100)"

if __name__ == "__main__":
    export_authors_to_excel_fast() 