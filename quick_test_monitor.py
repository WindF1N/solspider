#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Token Behavior Monitor
"""

import asyncio
import logging
from token_behavior_monitor import TokenBehaviorMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ 10 —Å–µ–∫—É–Ω–¥"""
    test_token = "6KqRm1oxMgTaoN2tNYSiNE1NeUTRiP6NZsMxNS3KzrzB"
    
    logger.info("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Token Behavior Monitor...")
    
    try:
        async with TokenBehaviorMonitor() as monitor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            success = await monitor.start_monitoring(test_token, "TEST")
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {success}")
            
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            logger.info("‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            stopped = await monitor.stop_monitoring(test_token)
            logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞: {stopped}")
            
        logger.info("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    asyncio.run(quick_test()) 