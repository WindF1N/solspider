#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –∫ —É—Å–ø–µ—Ö—É —Å–Ω–∞–ø—à–æ—Ç–æ–≤
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_detailed_diagnosis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ª—É—á—à–∏—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')][:3]
    
    print(f"üî¨ –¢–ï–°–¢ –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –õ–£–ß–®–ò–• –°–ù–ê–ü–®–û–¢–û–í")
    print(f"="*80)
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(log_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ù–∞—Ö–æ–¥–∏–º —Å–Ω–∞–ø—à–æ—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—à–µ–¥—à–∏—Ö —É—Å–ª–æ–≤–∏–π")
    print()
    
    for i, log_file in enumerate(log_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        token_id = log_file.replace('.log', '')
        
        print(f"{i}. üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: {token_id}")
        print("-" * 70)
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')
            
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
            
            if decision == 'WOULD_SEND':
                snapshot_num = result.get('snapshot_number', '?')
                print(f"üéâ –£–°–ü–ï–• –Ω–∞ —Å–Ω–∞–ø—à–æ—Ç–µ #{snapshot_num}")
                print(f"üí° {reason}")
                
            elif decision == 'WOULD_REJECT':
                snapshots_checked = result.get('snapshots_checked', 0)
                best_snapshot = result.get('best_snapshot', {})
                
                print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:")
                print(f"   –í—Å–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {snapshots_checked}")
                
                if best_snapshot.get('passed_conditions', 0) > 0:
                    print(f"\nüèÜ –õ–£–ß–®–ò–ô –°–ù–ê–ü–®–û–¢ #{best_snapshot['snapshot_number']}:")
                    print(f"   ‚úÖ –ü—Ä–æ—à–µ–¥—à–∏—Ö —É—Å–ª–æ–≤–∏–π: {best_snapshot['passed_conditions']}")
                    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —É—Å–ª–æ–≤–∏–π: {len(best_snapshot.get('failed_conditions', []))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å
                    failed = best_snapshot.get('failed_conditions', [])[:5]  # –ü–µ—Ä–≤—ã–µ 5
                    if failed:
                        print(f"   üö´ –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(failed)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ—à–ª–æ
                    passed = best_snapshot.get('passed_conditions_list', [])[:5]  # –ü–µ—Ä–≤—ã–µ 5
                    if passed:
                        print(f"   ‚úÖ –ß—Ç–æ –±—ã–ª–æ OK: {', '.join(passed)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
                    metrics = best_snapshot.get('metrics', {})
                    if metrics:
                        print(f"   üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–Ω–∞–ø—à–æ—Ç–∞:")
                        if 'holders' in metrics:
                            print(f"      üë• –•–æ–ª–¥–µ—Ä—ã: {metrics['holders']}")
                        if 'liquidity' in metrics:
                            print(f"      üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${metrics['liquidity']:,.0f}")
                        if 'snipers_percent' in metrics:
                            print(f"      üéØ –°–Ω–∞–π–ø–µ—Ä—ã: {metrics['snipers_percent']:.1f}%")
                        if 'insiders_percent' in metrics:
                            print(f"      üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—ã: {metrics['insiders_percent']:.1f}%")
                else:
                    print(f"   üòû –ù–∏ –æ–¥–∏–Ω —Å–Ω–∞–ø—à–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è")
            
            else:
                print(f"üí° {reason}")
                
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    print("="*80)
    print("üéØ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("‚úÖ –í–∏–¥–∏–º —Ç–æ—á–Ω–æ –∫–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –º–µ—à–∞—é—Ç —Ç–æ–∫–µ–Ω—É –ø—Ä–æ–π—Ç–∏")
    print("‚úÖ –ü–æ–Ω–∏–º–∞–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ —Ç–æ–∫–µ–Ω –±—ã–ª –∫ —É—Å–ø–µ—Ö—É")
    print("‚úÖ –ú–æ–∂–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –ª—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    print()
    print("üìã –ü–†–ò–ú–ï–† –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ê:")
    print("‚ùå ACTIVITY REJECT - TOKEN: ABC123... | SNAPSHOTS: 150/200 |")
    print("   HOLDERS: 45 | LIQUIDITY: $8,500 | SNIPERS: 2.1% |")
    print("   REASON: –õ—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç #85: ‚úÖ12 —É—Å–ª–æ–≤–∏–π (–Ω–∞–ø—Ä: holders_min, snipers_ok),")
    print("           ‚ùå –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: min_liquidity, holders_max")

if __name__ == "__main__":
    asyncio.run(test_detailed_diagnosis())