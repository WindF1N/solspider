#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
"""

import pandas as pd
import aiohttp
import asyncio
from datetime import datetime, timedelta
import logging
import numpy as np
from dotenv import load_dotenv
from database import get_db_manager, Token
from logger_config import setup_logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

class AdvancedMarketAnalyzer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞"""
    
    def __init__(self):
        self.session = None
        self.dexscreener_base = "https://api.dexscreener.com/latest"
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_token_full_data(self, mint_address):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ"""
        try:
            url = f"{self.dexscreener_base}/dex/tokens/{mint_address}"
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                elif response.status == 429:
                    await asyncio.sleep(2)
                    return await self.get_token_full_data(mint_address)
                else:
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {mint_address}: {e}")
            return None
    
    def calculate_roi_scenarios(self, current_price, entry_amounts):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ROI —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤"""
        scenarios = {}
        
        for amount in entry_amounts:
            if current_price > 0:
                tokens_bought = amount / current_price
                scenarios[amount] = {
                    'tokens': tokens_bought,
                    'roi_2x': (tokens_bought * current_price * 2) - amount,
                    'roi_5x': (tokens_bought * current_price * 5) - amount,
                    'roi_10x': (tokens_bought * current_price * 10) - amount,
                    'roi_50x': (tokens_bought * current_price * 50) - amount,
                    'roi_100x': (tokens_bought * current_price * 100) - amount,
                    'percentage_2x': 100,  # 2x = 100% –ø—Ä–∏–±—ã–ª—å
                    'percentage_5x': 400,  # 5x = 400% –ø—Ä–∏–±—ã–ª—å
                    'percentage_10x': 900, # 10x = 900% –ø—Ä–∏–±—ã–ª—å
                    'percentage_50x': 4900, # 50x = 4900% –ø—Ä–∏–±—ã–ª—å
                    'percentage_100x': 9900 # 100x = 9900% –ø—Ä–∏–±—ã–ª—å
                }
        
        return scenarios
    
    def analyze_tweet_impact(self, token):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Ç–æ–∫–µ–Ω"""
        
        # –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        time_to_discovery = None
        if token.updated_at and token.created_at:
            time_to_discovery = (token.updated_at - token.created_at).total_seconds() / 3600
        
        # –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        token_age_at_discovery = time_to_discovery if time_to_discovery else 0
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        discovery_category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if time_to_discovery is not None:
            if time_to_discovery <= 1:
                discovery_category = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ (‚â§1—á)"
            elif time_to_discovery <= 6:
                discovery_category = "–ë—ã—Å—Ç—Ä–æ–µ (1-6—á)"
            elif time_to_discovery <= 24:
                discovery_category = "–°—Ä–µ–¥–Ω–µ–µ (6-24—á)"
            else:
                discovery_category = "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ (>24—á)"
        
        # –û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–≤–∏—Ç–æ–≤
        tweet_activity = "–ù–∏–∑–∫–∞—è"
        if token.twitter_contract_tweets >= 10:
            tweet_activity = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
        elif token.twitter_contract_tweets >= 5:
            tweet_activity = "–í—ã—Å–æ–∫–∞—è"
        elif token.twitter_contract_tweets >= 2:
            tweet_activity = "–°—Ä–µ–¥–Ω—è—è"
        
        return {
            'time_to_discovery': time_to_discovery,
            'token_age_at_discovery': token_age_at_discovery,
            'discovery_category': discovery_category,
            'tweet_activity': tweet_activity,
            'total_contract_tweets': token.twitter_contract_tweets,
            'total_symbol_tweets': token.twitter_symbol_tweets or 0
        }

async def analyze_market_impact():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–æ–∫"""
    try:
        db_manager = get_db_manager()
        session = db_manager.Session()
        
        logger.info("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
        tokens = session.query(Token).filter(
            Token.twitter_contract_tweets > 0,
            Token.mint.isnot(None),
            Token.symbol.isnot(None),
            Token.updated_at.isnot(None)  # –¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        ).order_by(Token.twitter_contract_tweets.desc()).limit(100).all()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        results = []
        entry_amounts = [5, 10, 20, 50, 100, 1000]
        
        async with AdvancedMarketAnalyzer() as analyzer:
            for i, token in enumerate(tokens, 1):
                logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ {i}/{len(tokens)}: {token.symbol}")
                
                # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ç–≤–∏—Ç–æ–≤
                tweet_impact = analyzer.analyze_tweet_impact(token)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å DEX
                dex_data = await analyzer.get_token_full_data(token.mint)
                
                if dex_data and dex_data.get('pairs'):
                    # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ª–∏–∫–≤–∏–¥–Ω—É—é –ø–∞—Ä—É
                    pairs = dex_data['pairs']
                    main_pair = max(pairs, key=lambda x: float(x.get('liquidity', {}).get('usd', 0) or 0))
                    
                    if main_pair:
                        current_price = float(main_pair.get('priceUsd', 0) or 0)
                        market_cap = float(main_pair.get('marketCap', 0) or 0)
                        liquidity = float(main_pair.get('liquidity', {}).get('usd', 0) or 0)
                        volume_24h = float(main_pair.get('volume', {}).get('h24', 0) or 0)
                        
                        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                        price_changes = {
                            '5m': float(main_pair.get('priceChange', {}).get('m5', 0) or 0),
                            '1h': float(main_pair.get('priceChange', {}).get('h1', 0) or 0),
                            '6h': float(main_pair.get('priceChange', {}).get('h6', 0) or 0),
                            '24h': float(main_pair.get('priceChange', {}).get('h24', 0) or 0)
                        }
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI —Å—Ü–µ–Ω–∞—Ä–∏–∏
                        roi_scenarios = analyzer.calculate_roi_scenarios(current_price, entry_amounts)
                        
                        result = {
                            'token': token,
                            'tweet_impact': tweet_impact,
                            'market_data': {
                                'current_price': current_price,
                                'market_cap': market_cap,
                                'liquidity': liquidity,
                                'volume_24h': volume_24h,
                                'price_changes': price_changes
                            },
                            'roi_scenarios': roi_scenarios
                        }
                        
                        results.append(result)
                
                await asyncio.sleep(0.3)  # –ü–∞—É–∑–∞ –¥–ª—è API
        
        session.close()
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return []

def create_advanced_analysis_excel(results):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Excel –∞–Ω–∞–ª–∏–∑"""
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"advanced_market_analysis_{timestamp}.xlsx"
        
        # 1. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
        main_analysis = []
        
        # 2. –¢–∞–±–ª–∏—Ü–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        profit_analysis = []
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        discovery_time_analysis = []
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {
            'discovery_categories': {},
            'tweet_activity': {},
            'volume_ranges': {},
            'price_performance': {}
        }
        
        for result in results:
            token = result['token']
            tweet_impact = result['tweet_impact']
            market_data = result['market_data']
            roi_scenarios = result['roi_scenarios']
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            main_row = {
                '–°–∏–º–≤–æ–ª': token.symbol,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': token.name or 'N/A',
                '–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞': token.mint,
                
                # –î–∞–Ω–Ω—ã–µ –æ —Ç–≤–∏—Ç–∞—Ö
                '–¢–≤–∏—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º': token.twitter_contract_tweets,
                '–¢–≤–∏—Ç–æ–≤ —Å —Å–∏–º–≤–æ–ª–æ–º': tweet_impact['total_symbol_tweets'],
                '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–≤–∏—Ç–æ–≤': tweet_impact['tweet_activity'],
                
                # –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                '–í—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)': f"{tweet_impact['time_to_discovery']:.1f}" if tweet_impact['time_to_discovery'] else 'N/A',
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': tweet_impact['discovery_category'],
                '–í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ (—á)': f"{tweet_impact['token_age_at_discovery']:.1f}",
                
                # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ($)': f"{market_data['current_price']:.10f}" if market_data['current_price'] else 'N/A',
                'Market Cap ($)': f"{market_data['market_cap']:,.0f}" if market_data['market_cap'] else 'N/A',
                '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ($)': f"{market_data['liquidity']:,.0f}" if market_data['liquidity'] else 'N/A',
                '–û–±—ä–µ–º 24—á ($)': f"{market_data['volume_24h']:,.0f}" if market_data['volume_24h'] else 'N/A',
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 5–º (%)': f"{market_data['price_changes']['5m']:.2f}",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 1—á (%)': f"{market_data['price_changes']['1h']:.2f}",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 6—á (%)': f"{market_data['price_changes']['6h']:.2f}",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á (%)': f"{market_data['price_changes']['24h']:.2f}",
                
                # –û—Ü–µ–Ω–∫–∏
                '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': '–í—ã—Å–æ–∫–∞—è' if tweet_impact['time_to_discovery'] and tweet_impact['time_to_discovery'] <= 6 else '–°—Ä–µ–¥–Ω—è—è' if tweet_impact['time_to_discovery'] and tweet_impact['time_to_discovery'] <= 24 else '–ù–∏–∑–∫–∞—è',
                '–†—ã–Ω–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–í—ã—Å–æ–∫–∞—è' if market_data['volume_24h'] > 10000 else '–°—Ä–µ–¥–Ω—è—è' if market_data['volume_24h'] > 1000 else '–ù–∏–∑–∫–∞—è',
                
                # –°—Å—ã–ª–∫–∏
                'DexScreener': f"https://dexscreener.com/solana/{token.mint}",
                'Pump.fun': f"https://pump.fun/{token.mint}"
            }
            main_analysis.append(main_row)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
            for amount, scenario in roi_scenarios.items():
                profit_row = {
                    '–°–∏–º–≤–æ–ª': token.symbol,
                    '–í—Ö–æ–¥ ($)': amount,
                    '–ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤': f"{scenario['tokens']:.6f}",
                    '–ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ 2x ($)': f"{scenario['roi_2x']:.2f}",
                    '–ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ 5x ($)': f"{scenario['roi_5x']:.2f}",
                    '–ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ 10x ($)': f"{scenario['roi_10x']:.2f}",
                    '–ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ 50x ($)': f"{scenario['roi_50x']:.2f}",
                    '–ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ 100x ($)': f"{scenario['roi_100x']:.2f}",
                    '–ü—Ä–æ—Ü–µ–Ω—Ç ROI –ø—Ä–∏ 2x': f"{scenario['percentage_2x']:.0f}%",
                    '–ü—Ä–æ—Ü–µ–Ω—Ç ROI –ø—Ä–∏ 10x': f"{scenario['percentage_10x']:.0f}%",
                    '–ü—Ä–æ—Ü–µ–Ω—Ç ROI –ø—Ä–∏ 100x': f"{scenario['percentage_100x']:.0f}%",
                    '–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º 24—á': f"{market_data['volume_24h']:,.0f}",
                    '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å': f"{market_data['liquidity']:,.0f}",
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á': f"{market_data['price_changes']['24h']:.2f}%"
                }
                profit_analysis.append(profit_row)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            if tweet_impact['time_to_discovery'] is not None:
                discovery_row = {
                    '–°–∏–º–≤–æ–ª': token.symbol,
                    '–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)': tweet_impact['time_to_discovery'],
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': tweet_impact['discovery_category'],
                    '–û–±—ä–µ–º —á–µ—Ä–µ–∑ 24—á': market_data['volume_24h'],
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 24—á (%)': market_data['price_changes']['24h'],
                    'Market Cap': market_data['market_cap'],
                    '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–û—Ç–ª–∏—á–Ω–∞—è' if tweet_impact['time_to_discovery'] <= 1 and market_data['price_changes']['24h'] > 50 
                                   else '–•–æ—Ä–æ—à–∞—è' if tweet_impact['time_to_discovery'] <= 6 and market_data['price_changes']['24h'] > 10
                                   else '–°—Ä–µ–¥–Ω—è—è' if market_data['price_changes']['24h'] > 0 else '–ù–∏–∑–∫–∞—è'
                }
                discovery_time_analysis.append(discovery_row)
            
            # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cat = tweet_impact['discovery_category']
            category_stats['discovery_categories'][cat] = category_stats['discovery_categories'].get(cat, 0) + 1
            
            activity = tweet_impact['tweet_activity']
            category_stats['tweet_activity'][activity] = category_stats['tweet_activity'].get(activity, 0) + 1
        
        # –°–æ–∑–¥–∞–µ–º DataFrame'—ã
        main_df = pd.DataFrame(main_analysis)
        profit_df = pd.DataFrame(profit_analysis)
        discovery_df = pd.DataFrame(discovery_time_analysis)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_data = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        for cat, count in category_stats['discovery_categories'].items():
            stats_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è',
                '–ó–Ω–∞—á–µ–Ω–∏–µ': cat,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(count/len(results)*100):.1f}%"
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–≤–∏—Ç–æ–≤
        for activity, count in category_stats['tweet_activity'].items():
            stats_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–≤–∏—Ç–æ–≤',
                '–ó–Ω–∞—á–µ–Ω–∏–µ': activity,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(count/len(results)*100):.1f}%"
            })
        
        stats_df = pd.DataFrame(stats_data)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        correlation_data = []
        if len(discovery_time_analysis) > 5:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            discovery_analysis_df = pd.DataFrame(discovery_time_analysis)
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
            time_price_corr = discovery_analysis_df['–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)'].corr(
                discovery_analysis_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 24—á (%)']
            )
            
            correlation_data.append({
                '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 1': '–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)',
                '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 2': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 24—á (%)',
                '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è': f"{time_price_corr:.4f}" if not pd.isna(time_price_corr) else 'N/A',
                '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è': '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è - –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–æ—Å—Ç–æ–º —Ü–µ–Ω—ã' if time_price_corr < -0.1 
                                else '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–æ—Å—Ç–æ–º —Ü–µ–Ω—ã' if time_price_corr > 0.1
                                else '–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è'
            })
        
        correlation_df = pd.DataFrame(correlation_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            main_df.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑', index=False)
            profit_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏', index=False)
            discovery_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏', index=False)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            if not correlation_df.empty:
                correlation_df.to_excel(writer, sheet_name='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', index=False)
            
            # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
                
                worksheet.freeze_panes = 'A2'
        
        logger.info(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return filename, len(results)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
        return None, 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–æ–∫")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫
    results = await analyze_market_impact()
    
    if not results:
        logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    filename, count = create_advanced_analysis_excel(results)
    
    if filename:
        logger.info(f"üìà –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù:")
        logger.info(f"  ‚Ä¢ –§–∞–π–ª: {filename}")
        logger.info(f"  ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {count}")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        fast_discoveries = sum(1 for r in results if r['tweet_impact']['time_to_discovery'] and r['tweet_impact']['time_to_discovery'] <= 6)
        profitable_24h = sum(1 for r in results if r['market_data']['price_changes']['24h'] > 10)
        high_volume = sum(1 for r in results if r['market_data']['volume_24h'] > 10000)
        
        logger.info(f"  ‚Ä¢ –ë—ã—Å—Ç—Ä—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π (‚â§6—á): {fast_discoveries}")
        logger.info(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∑–∞ 24—á (>10%): {profitable_24h}")
        logger.info(f"  ‚Ä¢ –° –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º (>$10k): {high_volume}")
        
        # –¢–û–ü —Ç–æ–∫–µ–Ω—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        effective_tokens = [r for r in results if r['tweet_impact']['time_to_discovery'] and 
                          r['tweet_impact']['time_to_discovery'] <= 6 and 
                          r['market_data']['price_changes']['24h'] > 20]
        
        if effective_tokens:
            logger.info(f"üèÜ –¢–û–ü —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π (–±—ã—Å—Ç—Ä–æ + –ø—Ä–∏–±—ã–ª—å–Ω–æ):")
            for i, r in enumerate(sorted(effective_tokens, key=lambda x: x['market_data']['price_changes']['24h'], reverse=True)[:5], 1):
                symbol = r['token'].symbol
                time_discovery = r['tweet_impact']['time_to_discovery']
                price_change = r['market_data']['price_changes']['24h']
                logger.info(f"  {i}. {symbol}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞ {time_discovery:.1f}—á, —Ä–æ—Å—Ç {price_change:+.1f}%")
    
    logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())