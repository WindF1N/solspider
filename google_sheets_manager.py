#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets —Å –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import logging
import gspread
from google.oauth2.service_account import Credentials
import os
from datetime import datetime
from typing import List, Dict, Optional, Tuple
import re
import time
import asyncio
import threading
from queue import Queue, PriorityQueue
from typing import Any, Callable

logger = logging.getLogger(__name__)

class GoogleSheetsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets —Å –≥—Ä—É–ø–ø–∞–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    
    def __init__(self, credentials_path: str = "google/pythonke-bd30eedba13b.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.credentials_path = credentials_path
        self.client = None
        self.spreadsheets = {}  # –ö—ç—à –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü {group_key: spreadsheet}
        
        # Rate limiting –¥–ª—è Google Sheets API - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
        self.requests_per_minute = 0
        self.last_request_time = 0
        self.rate_limit_max = 290  # üî•üî•üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–û (Google API: 300/–º–∏–Ω—É—Ç—É)
        self.rate_limit_window = 60  # –û–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets API
        self.scopes = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è Google Sheets
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 0 - –≤—ã—Å–æ–∫–∏–π (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è), 1 - –æ–±—ã—á–Ω—ã–π (—Ç–µ—Å—Ç–æ–≤—ã–µ)
        self.task_queue = PriorityQueue()
        self.worker_thread = None
        self.stop_worker = False
        self.task_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        
        self._initialize_client()
        self._start_worker()
    
    def _check_rate_limit(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–±–ª—é–¥–∞–µ—Ç –ª–∏–º–∏—Ç—ã API Google Sheets - –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        current_time = time.time()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
        if current_time - self.last_request_time >= self.rate_limit_window:
            self.requests_per_minute = 0
            self.last_request_time = current_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ - –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï
        if self.requests_per_minute >= self.rate_limit_max:
            # üî• –ê–ì–†–ï–°–°–ò–í–ù–û: –ñ–¥—É –≤—Å–µ–≥–æ 5 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –º–∏–Ω—É—Ç—ã
            sleep_time = 5.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            logger.warning(f"üî• Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({self.requests_per_minute}/{self.rate_limit_max}). –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {sleep_time}—Å...")
            time.sleep(sleep_time)
            self.requests_per_minute = 0
            self.last_request_time = time.time()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.requests_per_minute += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É (–∫–∞–∂–¥—ã–µ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 90%)
        if (self.requests_per_minute % 50 == 0) or (self.requests_per_minute >= int(self.rate_limit_max * 0.9)):
            logger.info(f"üî• Google Sheets API: {self.requests_per_minute}/{self.rate_limit_max} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É")
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
        try:
            if not os.path.exists(self.credentials_path):
                logger.error(f"‚ùå –§–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_path}")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credentials = Credentials.from_service_account_file(
                self.credentials_path, 
                scopes=self.scopes
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = gspread.authorize(credentials)
            
            logger.info("‚úÖ Google Sheets –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def _start_worker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á Google Sheets"""
        if self.worker_thread is None or not self.worker_thread.is_alive():
            self.stop_worker = False
            self.worker_thread = threading.Thread(target=self._worker_loop, daemon=True)
            self.worker_thread.start()
            logger.info("üöÄ Google Sheets –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á Google Sheets —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
        while not self.stop_worker:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                priority_task = self.task_queue.get(timeout=5)
                
                if priority_task is None:  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    break
                
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É: (priority, counter, (func, args, kwargs))
                priority, counter, task = priority_task
                
                if task is None:  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    break
                
                func, args, kwargs = task
                
                try:
                    result = func(*args, **kwargs)
                    priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
                    logger.debug(f"‚úÖ –ó–∞–¥–∞—á–∞ Google Sheets –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ({priority_str}): {func.__name__}")
                except Exception as task_error:
                    priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ({priority_str}) {func.__name__}: {task_error}")
                finally:
                    self.task_queue.task_done()
                    
            except Exception as e:
                if not self.stop_worker:
                    logger.debug(f"‚è≥ Google Sheets –≤–æ—Ä–∫–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏...")
                continue
        
        logger.info("üõë Google Sheets –≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _queue_task(self, func: Callable, *args, priority: int = 1, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 = –≤—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, 1 = –æ–±—ã—á–Ω—ã–π)
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        """
        if not self.stop_worker:
            task_data = (func, args, kwargs)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            self.task_counter += 1
            self.task_queue.put((priority, self.task_counter, task_data))
            priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
            logger.debug(f"üì§ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å ({priority_str}): {func.__name__}")
        else:
            logger.warning("‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
    def stop_worker_thread(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä"""
        self.stop_worker = True
        self.task_queue.put((0, 0, None))  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ —Å—á–µ—Ç—á–∏–∫–æ–º
        if self.worker_thread:
            self.worker_thread.join(timeout=10)
            logger.info("üõë Google Sheets –≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
    
    def _sanitize_sheet_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import unicodedata
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏
        special_replacements = {
            '¬•': 'YEN',
            '$': 'USD', 
            '‚Ç¨': 'EUR',
            '¬£': 'GBP',
            '‚Çø': 'BTC',
            'üî•': 'FIRE',
            'üöÄ': 'ROCKET',
            'üíé': 'DIAMOND',
            '‚ö°': 'LIGHTNING',
            'üéØ': 'TARGET',
            'üí∞': 'MONEY',
            'üåô': 'MOON'
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        sanitized = name
        for special, replacement in special_replacements.items():
            sanitized = sanitized.replace(special, replacement)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º unicode —Å–∏–º–≤–æ–ª—ã
        sanitized = unicodedata.normalize('NFKD', sanitized)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        sanitized = re.sub(r'[^\w\s\-_]', '', sanitized)
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏
        sanitized = re.sub(r'\s+', ' ', sanitized).strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        sanitized = sanitized.replace(' ', '_')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–º–∞–∫—Å–∏–º—É–º 80 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ + –ø—Ä–µ—Ñ–∏–∫—Å)
        sanitized = sanitized[:80]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        sanitized = sanitized.strip('_')
        
        # –ï—Å–ª–∏ –∏–º—è —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not sanitized:
            sanitized = "Unknown_Token"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        return f"Duplicates_{sanitized}"
    
    def get_or_create_spreadsheet(self, group_key: str, token_symbol: str, token_name: str) -> Optional[object]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.client:
                logger.error("‚ùå Google Sheets –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if group_key in self.spreadsheets:
                return self.spreadsheets[group_key]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ fallback
            primary_name = self._sanitize_sheet_name(f"{token_symbol}_{token_name}")
            fallback_names = [
                primary_name,
                self._sanitize_sheet_name(f"{token_symbol}_Token"),
                self._sanitize_sheet_name(f"Token_{token_symbol}"),
                f"Duplicates_{token_symbol}_{hash(token_name) % 10000}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            ]
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞
            fallback_names = list(dict.fromkeys(fallback_names))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
            
            spreadsheet = None
            sheet_name = None
            
            # üî• –ê–ì–†–ï–°–°–ò–í–ù–û: –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ rate limit –¥–ª—è –ø–æ–∏—Å–∫–∞)
            for candidate_name in fallback_names:
                try:
                    spreadsheet = self.client.open(candidate_name)
                    sheet_name = candidate_name
                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: {sheet_name}")
                    break
                    
                except gspread.SpreadsheetNotFound:
                    continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {candidate_name}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if not spreadsheet:
                # üî• –ê–ì–†–ï–°–°–ò–í–ù–û: –°–æ–±–ª—é–¥–∞–µ–º rate limit —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                self._check_rate_limit()
                
                for candidate_name in fallback_names:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                        logger.info(f"üî• –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É: {candidate_name}")
                        spreadsheet = self.client.create(candidate_name)
                        sheet_name = candidate_name
                        break
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {candidate_name}: {e}")
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É
                if not spreadsheet:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                    return None
                
                # –î–µ–ª–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤—Å–µ–º –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–º —Å —Å—Å—ã–ª–∫–æ–π
                    spreadsheet.share('', perm_type='anyone', role='writer')
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {sheet_name} –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ —Å—Å—ã–ª–∫–µ (—Å –ø—Ä–∞–≤–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
                except Exception as share_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É {sheet_name} –ø—É–±–ª–∏—á–Ω–æ–π: {share_error}")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                worksheet = spreadsheet.sheet1
                worksheet.update_title("Duplicates_Data")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                headers = [
                    "–°–∏–º–≤–æ–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "Twitter", "–ö–æ–Ω—Ç—Ä–∞–∫—Ç", 
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", "–°—Å—ã–ª–∫–∏", "–°—Ç–∞—Ç—É—Å"
                ]
                worksheet.update('A1:H1', [headers])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
                worksheet.format('A1:H1', {
                    "textFormat": {"bold": True},
                    "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9}
                })
                
                logger.info(f"üî• –¢–∞–±–ª–∏—Ü–∞ {sheet_name} —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.spreadsheets[group_key] = spreadsheet
            return spreadsheet
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {group_key}: {e}")
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
            logger.error(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: symbol='{token_symbol}', name='{token_name}'")
            logger.error(f"üìã –ü–æ–ø—ã—Ç–∫–∏ –∏–º–µ–Ω: {[primary_name] + fallback_names if 'fallback_names' in locals() else 'fallback_names –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
            return None
    
    def add_token_to_sheet(self, group_key: str, token_data: Dict, main_twitter: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.get_or_create_spreadsheet(
                group_key, 
                token_data.get('symbol', 'Unknown'),
                token_data.get('name', 'Unknown')
            )
            
            if not spreadsheet:
                return False
            
            worksheet = spreadsheet.sheet1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            symbol = token_data.get('symbol', 'Unknown')
            name = token_data.get('name', 'Unknown')
            contract = token_data.get('id', 'Unknown')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç—ã
            twitter_accounts = self._extract_twitter_accounts(token_data)
            twitter_display = f"@{', @'.join(twitter_accounts)}" if twitter_accounts else "–ù–µ—Ç"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = token_data.get('firstPool', {}).get('createdAt', '')
            created_display = self._parse_jupiter_date(created_at)
            
            # –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
            first_seen = token_data.get('first_seen', '')
            if first_seen:
                discovered_at = self._parse_jupiter_date(first_seen)
            else:
                discovered_at = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
            has_links = self._check_token_links(token_data)
            links_status = "–ï—Å—Ç—å" if has_links else "–ù–µ—Ç"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if main_twitter and twitter_accounts and main_twitter.lower() in [acc.lower() for acc in twitter_accounts]:
                status = "üéØ –ì–õ–ê–í–ù–´–ô"
            elif has_links:
                status = "üîó –° —Å—Å—ã–ª–∫–∞–º–∏"
            else:
                status = "üö´ –ë–µ–∑ —Å—Å—ã–ª–æ–∫"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            row_data = [
                symbol, name, twitter_display, contract, 
                created_display, discovered_at, links_status, status
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            existing_data = worksheet.get_all_values()
            for i, row in enumerate(existing_data[1:], 2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) >= 4 and row[3] == contract:
                    logger.debug(f"üîÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract[:8]}... —É–∂–µ –≤ —Ç–∞–±–ª–∏—Ü–µ {group_key}")
                    return True
            
            # üî• –ê–ì–†–ï–°–°–ò–í–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
            self._check_rate_limit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            worksheet.append_row(row_data)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ E)
            self._sort_sheet_by_date(worksheet)
            
            logger.info(f"üî• –¢–æ–∫–µ–Ω {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É {group_key}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É {group_key}: {e}")
            return False
    
    def add_token_to_sheet_async(self, group_key: str, token_data: Dict, main_twitter: str = None, priority: int = 1):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
        
        Args:
            group_key: –ö–ª—é—á –≥—Ä—É–ø–ø—ã
            token_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            main_twitter: –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 = –≤—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, 1 = –æ–±—ã—á–Ω—ã–π)
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        self._queue_task(
            self._add_token_to_sheet_internal,
            group_key, token_data, main_twitter,
            priority=priority
        )
        priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
        logger.debug(f"üìã –¢–æ–∫–µ–Ω {token_data.get('symbol', 'Unknown')} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å Google Sheets ({priority_str})")
    
    def _add_token_to_sheet_internal(self, group_key: str, token_data: Dict, main_twitter: str = None) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)"""
        return self.add_token_to_sheet(group_key, token_data, main_twitter)
    
    def _extract_twitter_accounts(self, token_data: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
        twitter_accounts = set()
        
        # –ü–æ–ª—è –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å Twitter —Å—Å—ã–ª–∫–∏
        twitter_fields = ['twitter', 'website', 'telegram', 'social', 'links']
        
        for field in twitter_fields:
            url = token_data.get(field, '')
            if url and isinstance(url, str):
                account = self._normalize_twitter_url(url)
                if account:
                    twitter_accounts.add(account)
        
        return list(twitter_accounts)
    
    def _normalize_twitter_url(self, url: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç Twitter URL, –∏–∑–≤–ª–µ–∫–∞—è username"""
        try:
            if not url or not isinstance(url, str):
                return None
                
            url_lower = url.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Twitter/X —Å—Å—ã–ª–∫–∞
            if not any(domain in url_lower for domain in ['twitter.com', 'x.com']):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username
            import re
            username_pattern = r'(?i)(?:twitter\.com|x\.com)/([^/\?]+)'
            match = re.search(username_pattern, url)
            
            if match:
                username = match.group(1).strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É—Ç–∏
                service_paths = ['i', 'home', 'search', 'notifications', 'messages', 'settings', 'intent']
                if username.lower() in service_paths:
                    return None
                    
                return username
                
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Twitter URL {url}: {e}")
            
        return None
    
    def _check_token_links(self, token_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ —É —Ç–æ–∫–µ–Ω–∞"""
        link_fields = ['twitter', 'telegram', 'website']
        for field in link_fields:
            if token_data.get(field):
                return True
        return False
    
    def _sort_sheet_by_date(self, worksheet):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ E) - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_data = worksheet.get_all_values()
            if len(all_data) <= 2:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            headers = all_data[0]
            data_rows = all_data[1:]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ 4, –∏–Ω–¥–µ–∫—Å 4)
            def sort_key(row):
                if len(row) > 4 and row[4]:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy hh:mm
                        date_str = row[4]
                        if '.' in date_str:
                            date_part = date_str.split(' ')[0]
                            day, month, year = date_part.split('.')
                            return datetime(int(year), int(month), int(day))
                    except:
                        pass
                return datetime.min
            
            data_rows.sort(key=sort_key, reverse=True)  # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
            
            # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –°–æ–±–ª—é–¥–∞–µ–º rate limit —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
            self._check_rate_limit()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            worksheet.clear()
            worksheet.update('A1', [headers] + data_rows)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            worksheet.format('A1:H1', {
                "textFormat": {"bold": True},
                "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9}
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def get_sheet_url(self, group_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ç–∞–±–ª–∏—Ü—ã Google Sheets"""
        try:
            if group_key in self.spreadsheets:
                spreadsheet = self.spreadsheets[group_key]
                return spreadsheet.url
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç–∞–±–ª–∏—Ü—ã {group_key}: {e}")
            return None
    
    def update_main_twitter(self, group_key: str, main_twitter: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if group_key not in self.spreadsheets:
                return False
            
            spreadsheet = self.spreadsheets[group_key]
            worksheet = spreadsheet.sheet1
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_data = worksheet.get_all_values()
            if len(all_data) <= 1:
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞—Ç—á
            updates = []
            for i, row in enumerate(all_data[1:], 2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                if len(row) >= 8:
                    twitter_cell = row[2]  # –ö–æ–ª–æ–Ω–∫–∞ C (Twitter)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ Twitter —è—á–µ–π–∫–∞ –≥–ª–∞–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    if main_twitter.lower() in twitter_cell.lower():
                        updates.append({
                            'range': f'H{i}',
                            'values': [['üéØ –ì–õ–ê–í–ù–´–ô']]
                        })
            
            # üî• –ê–ì–†–ï–°–°–ò–í–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
            if updates:
                self._check_rate_limit()
                worksheet.batch_update(updates)
                logger.info(f"üî• –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ {group_key} –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter @{main_twitter}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –≤ —Ç–∞–±–ª–∏—Ü–µ {group_key}: {e}")
            return False
    
    def update_main_twitter_async(self, group_key: str, main_twitter: str, priority: int = 1):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            group_key: –ö–ª—é—á –≥—Ä—É–ø–ø—ã
            main_twitter: –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 = –≤—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, 1 = –æ–±—ã—á–Ω—ã–π)
        """
        self._queue_task(
            self._update_main_twitter_internal,
            group_key, main_twitter,
            priority=priority
        )
        priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
        logger.debug(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ Twitter –¥–ª—è {group_key} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ({priority_str})")
    
    def _update_main_twitter_internal(self, group_key: str, main_twitter: str) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ Twitter (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)"""
        return self.update_main_twitter(group_key, main_twitter)
    
    def check_official_contract_in_twitter(self, group_key: str, main_twitter: str, official_contract: str) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Twitter - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if group_key not in self.spreadsheets:
                return False
            
            spreadsheet = self.spreadsheets[group_key]
            worksheet = spreadsheet.sheet1
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            official_row = [
                "–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô", "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Twitter", f"@{main_twitter}", 
                official_contract, datetime.now().strftime('%d.%m.%Y %H:%M'), 
                datetime.now().strftime('%d.%m.%Y %H:%M:%S'), "Twitter", "‚úÖ –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô"
            ]
            
            # üî• –ê–ì–†–ï–°–°–ò–í–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
            self._check_rate_limit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            current_rows = len(worksheet.get_all_values())
            new_row_number = current_rows + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            worksheet.append_row(official_row)
            worksheet.format(f'A{new_row_number}:H{new_row_number}', {
                "backgroundColor": {"red": 0.8, "green": 1.0, "blue": 0.8},
                "textFormat": {"bold": True}
            })
            
            logger.info(f"üî• –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–º–µ—á–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {group_key}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {group_key}: {e}")
            return False
    
    def add_tokens_batch(self, group_key: str, tokens_list: List[Dict], main_twitter: str = None) -> bool:
        """üî• –°–£–ü–ï–† –ë–´–°–¢–†–û–ï –±–∞—Ç—á–µ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        try:
            if not tokens_list:
                logger.warning(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            first_token = tokens_list[0]
            spreadsheet = self.get_or_create_spreadsheet(
                group_key, 
                first_token.get('symbol', 'Unknown'),
                first_token.get('name', 'Unknown')
            )
            
            if not spreadsheet:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                return False
            
            worksheet = spreadsheet.sheet1
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            batch_rows = []
            
            for token_data in tokens_list:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
                symbol = token_data.get('symbol', 'Unknown')
                name = token_data.get('name', 'Unknown')
                contract = token_data.get('id', 'Unknown')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç—ã
                twitter_accounts = self._extract_twitter_accounts(token_data)
                twitter_display = f"@{', @'.join(twitter_accounts)}" if twitter_accounts else "–ù–µ—Ç"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                created_at = token_data.get('firstPool', {}).get('createdAt', '')
                created_display = self._parse_jupiter_date(created_at)
                
                # –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
                first_seen = token_data.get('first_seen', '')
                if first_seen:
                    discovered_at = self._parse_jupiter_date(first_seen)
                else:
                    discovered_at = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
                has_links = self._check_token_links(token_data)
                links_status = "–ï—Å—Ç—å" if has_links else "–ù–µ—Ç"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if main_twitter and twitter_accounts and main_twitter.lower() in [acc.lower() for acc in twitter_accounts]:
                    status = "üéØ –ì–õ–ê–í–ù–´–ô"
                elif has_links:
                    status = "üîó –° —Å—Å—ã–ª–∫–∞–º–∏"
                else:
                    status = "üö´ –ë–µ–∑ —Å—Å—ã–ª–æ–∫"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±–∞—Ç—á
                row_data = [
                    symbol, name, twitter_display, contract, 
                    created_display, discovered_at, links_status, status
                ]
                batch_rows.append(row_data)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            def sort_key(row):
                date_str = row[4]  # –ö–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π
                if date_str and date_str != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    try:
                        if '.' in date_str:
                            date_part = date_str.split(' ')[0]
                            day, month, year = date_part.split('.')
                            return datetime(int(year), int(month), int(day))
                    except:
                        pass
                return datetime.min
            
            batch_rows.sort(key=sort_key, reverse=True)  # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
            
            # üî• –°–£–ü–ï–† –ë–´–°–¢–†–û: –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
            self._check_rate_limit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                "–°–∏–º–≤–æ–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "Twitter", "–ö–æ–Ω—Ç—Ä–∞–∫—Ç", 
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", "–°—Å—ã–ª–∫–∏", "–°—Ç–∞—Ç—É—Å"
            ]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            all_data = [headers] + batch_rows
            worksheet.clear()
            worksheet.update('A1', all_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.format('A1:H1', {
                "textFormat": {"bold": True},
                "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9}
            })
            
            logger.info(f"üî• –ë–ê–¢–ß–ï–í–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: {len(batch_rows)} —Ç–æ–∫–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {group_key} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø—É {group_key}: {e}")
            return False
    
    def add_tokens_batch_async(self, group_key: str, tokens_list: List[Dict], main_twitter: str = None, priority: int = 1):
        """üî• –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±–∞—Ç—á–µ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
        
        Args:
            group_key: –ö–ª—é—á –≥—Ä—É–ø–ø—ã
            tokens_list: –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
            main_twitter: –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 = –≤—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, 1 = –æ–±—ã—á–Ω—ã–π)
        """
        self._queue_task(
            self.add_tokens_batch,
            group_key, tokens_list, main_twitter,
            priority=priority
        )
        priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
        logger.info(f"üî• –ë–ê–¢–ß–ï–í–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(tokens_list)} —Ç–æ–∫–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {group_key} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ({priority_str})")
    
    def add_single_token_fast(self, group_key: str, token_data: Dict, main_twitter: str = None) -> bool:
        """üî• –ë–´–°–¢–†–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)"""
        try:
            if group_key not in self.spreadsheets:
                logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            spreadsheet = self.spreadsheets[group_key]
            worksheet = spreadsheet.sheet1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            symbol = token_data.get('symbol', 'Unknown')
            name = token_data.get('name', 'Unknown')
            contract = token_data.get('id', 'Unknown')
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã - —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            contract_column = worksheet.col_values(4)  # –ö–æ–ª–æ–Ω–∫–∞ D (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)
            if contract in contract_column:
                logger.debug(f"üîÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract[:8]}... —É–∂–µ –≤ —Ç–∞–±–ª–∏—Ü–µ {group_key}")
                return True
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç—ã
            twitter_accounts = self._extract_twitter_accounts(token_data)
            twitter_display = f"@{', @'.join(twitter_accounts)}" if twitter_accounts else "–ù–µ—Ç"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = token_data.get('firstPool', {}).get('createdAt', '')
            created_display = self._parse_jupiter_date(created_at)
            
            # –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
            first_seen = token_data.get('first_seen', '')
            if first_seen:
                discovered_at = self._parse_jupiter_date(first_seen)
            else:
                discovered_at = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
            has_links = self._check_token_links(token_data)
            links_status = "–ï—Å—Ç—å" if has_links else "–ù–µ—Ç"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if main_twitter and twitter_accounts and main_twitter.lower() in [acc.lower() for acc in twitter_accounts]:
                status = "üéØ –ì–õ–ê–í–ù–´–ô"
            elif has_links:
                status = "üîó –° —Å—Å—ã–ª–∫–∞–º–∏"
            else:
                status = "üö´ –ë–µ–∑ —Å—Å—ã–ª–æ–∫"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            row_data = [
                symbol, name, twitter_display, contract, 
                created_display, discovered_at, links_status, status
            ]
            
            # üî• –ë–´–°–¢–†–û: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ë–ï–ó —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            self._check_rate_limit()
            worksheet.append_row(row_data)
            
            logger.info(f"üî• –ë–´–°–¢–†–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ {symbol} –≤ —Ç–∞–±–ª–∏—Ü—É {group_key}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É {group_key}: {e}")
            return False
    
    def add_single_token_fast_async(self, group_key: str, token_data: Dict, main_twitter: str = None, priority: int = 1):
        """üî• –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        
        Args:
            group_key: –ö–ª—é—á –≥—Ä—É–ø–ø—ã
            token_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            main_twitter: –ì–ª–∞–≤–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 = –≤—ã—Å–æ–∫–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, 1 = –æ–±—ã—á–Ω—ã–π)
        """
        self._queue_task(
            self.add_single_token_fast,
            group_key, token_data, main_twitter,
            priority=priority
        )
        priority_str = "üî• –í–´–°–û–ö–ò–ô" if priority == 0 else "‚è≥ –û–ë–´–ß–ù–´–ô"
        logger.debug(f"üî• –ë–´–°–¢–†–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ {token_data.get('symbol', 'Unknown')} –≤ –æ—á–µ—Ä–µ–¥—å ({priority_str})")

    def _parse_jupiter_date(self, date_string: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ Jupiter API —Ñ–æ—Ä–º–∞—Ç–∞ '2025-07-05T16:03:59Z' –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if not date_string:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ UTC –¥–∞—Ç—ã —Å Z-—Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            if date_string.endswith('Z'):
                # –ó–∞–º–µ–Ω—è–µ–º Z –Ω–∞ +00:00 –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è UTC
                date_string = date_string.replace('Z', '+00:00')
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
            created_date = datetime.fromisoformat(date_string)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            return created_date.strftime('%d.%m.%Y %H:%M')
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Jupiter –¥–∞—Ç—ã '{date_string}': {e}")
            return date_string  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
sheets_manager = GoogleSheetsManager() 