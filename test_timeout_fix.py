#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è timeout –æ—à–∏–±–æ–∫
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_timeout_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É timeout –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    log_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')][:5]
    
    print(f"‚è∞ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò TIMEOUT –ò –û–®–ò–ë–û–ö")
    print(f"="*60)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(log_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    test_files = []
    for log_file in log_files:
        log_path = os.path.join(tokens_logs_dir, log_file)
        test_files.append(log_path)
    
    print(f"üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê...")
    print(f"‚è±Ô∏è Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–æ–∫–µ–Ω")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (–∏–º–∏—Ç–∏—Ä—É–µ—Ç analyze_all_tokens_with_full_criteria)
        results = await tester.analyze_all_tokens_with_full_criteria(tokens_logs_dir)
        
        print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(results)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        error_summary = {
            'SUCCESS': 0,
            'TIMEOUT': 0,
            'OTHER_ERROR': 0,
            'REJECT': 0
        }
        
        timeout_tokens = []
        error_tokens = []
        
        for result in results:
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '')
            token_id = result.get('token_id', 'UNKNOWN')
            
            if decision == 'ERROR':
                if 'Timeout:' in reason:
                    error_summary['TIMEOUT'] += 1
                    timeout_tokens.append(token_id)
                else:
                    error_summary['OTHER_ERROR'] += 1
                    error_tokens.append(token_id)
            elif decision in ['WOULD_SEND', 'WOULD_REJECT']:
                error_summary['SUCCESS'] += 1
            else:
                error_summary['REJECT'] += 1
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {error_summary['SUCCESS']}")
        print(f"‚è∞ Timeout –æ—à–∏–±–∫–∏: {error_summary['TIMEOUT']}")
        print(f"üí• –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {error_summary['OTHER_ERROR']}")
        print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {error_summary['REJECT']}")
        
        if timeout_tokens:
            print(f"\n‚è∞ –¢–û–ö–ï–ù–´ –° TIMEOUT:")
            for token in timeout_tokens[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {token}")
                
        if error_tokens:
            print(f"\nüí• –¢–û–ö–ï–ù–´ –° –î–†–£–ì–ò–ú–ò –û–®–ò–ë–ö–ê–ú–ò:")
            for token in error_tokens[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {token}")
        
        print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ test_filter.log –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
    
    print()
    print("="*60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("‚úÖ Timeout —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 60 —Å–µ–∫—É–Ω–¥")
    print("‚úÖ –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É timeout –∏ –¥—Ä—É–≥–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏")
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫")
    print("‚úÖ –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")

if __name__ == "__main__":
    asyncio.run(test_timeout_handling())