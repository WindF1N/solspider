#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è activity conditions
"""

import asyncio
import os
from test_filter import TokenFilterTester

async def test_holder_patterns_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å–Ω–∞—á–∞–ª–∞ activity_conditions, –ø–æ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ö–æ–ª–¥–µ—Ä–æ–≤"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    if not os.path.exists(tokens_logs_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tokens_logs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö
    test_files = ['26YJjHymy3aS.log']  # –¢–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    all_files = [f for f in os.listdir(tokens_logs_dir) if f.endswith('.log')]
    test_files.extend(all_files[:3])  # –ï—â–µ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö
    
    print(f"üî¨ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ê–ù–ê–õ–ò–ó–ê –ü–ê–¢–¢–ï–†–ù–û–í –•–û–õ–î–ï–†–û–í")
    print(f"="*80)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_files)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º: activity_conditions ‚Üí holder_patterns ‚Üí decision")
    print()
    
    results_summary = {
        'WOULD_SEND': 0,
        'WOULD_REJECT_CONDITIONS': 0,
        'WOULD_REJECT_PATTERNS': 0,
        'OTHER': 0
    }
    
    for i, log_file in enumerate(test_files, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        if not os.path.exists(log_path):
            continue
            
        token_id = log_file.replace('.log', '')
        
        print(f"{i}. üîç –ê–ù–ê–õ–ò–ó: {token_id}")
        print("-" * 70)
        
        try:
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')
            all_conditions_passed = result.get('all_conditions_passed', False)
            healthy_patterns = result.get('healthy_holder_patterns', False)
            analyzed_snapshots = result.get('analyzed_snapshots', 0)
            
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
            
            if decision == 'WOULD_SEND':
                results_summary['WOULD_SEND'] += 1
                print(f"üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•!")
                print(f"   ‚úÖ Activity conditions: –ü–†–û–®–õ–ò")
                print(f"   ‚úÖ Holder patterns: –ó–î–û–†–û–í–´–ï")
                if healthy_patterns:
                    print(f"   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {analyzed_snapshots}")
                
            elif decision == 'WOULD_REJECT':
                if all_conditions_passed:
                    results_summary['WOULD_REJECT_PATTERNS'] += 1
                    print(f"üö® –û–¢–ö–õ–û–ù–ï–ù –ü–û –ü–ê–¢–¢–ï–†–ù–ê–ú –•–û–õ–î–ï–†–û–í")
                    print(f"   ‚úÖ Activity conditions: –ü–†–û–®–õ–ò")
                    print(f"   ‚ùå Holder patterns: –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï")
                    print(f"   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {analyzed_snapshots}")
                    
                    suspicious_patterns = result.get('suspicious_patterns', [])
                    if suspicious_patterns:
                        print(f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {suspicious_patterns[:2]}")
                else:
                    results_summary['WOULD_REJECT_CONDITIONS'] += 1
                    print(f"‚ùå –û–¢–ö–õ–û–ù–ï–ù –ü–û ACTIVITY CONDITIONS")
                    print(f"   ‚ùå Activity conditions: –ù–ï –ü–†–û–®–õ–ò")
                    print(f"   üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: –ù–ï –ü–†–û–í–û–î–ò–õ–°–Ø")
                    
                    snapshots_checked = result.get('snapshots_checked', 0)
                    best_snapshot = result.get('best_snapshot', {})
                    if best_snapshot:
                        print(f"   üèÜ –õ—É—á—à–∏–π —Å–Ω–∞–ø—à–æ—Ç: #{best_snapshot.get('snapshot_number', '?')}")
                        print(f"   ‚úÖ –ú–∞–∫—Å. —É—Å–ª–æ–≤–∏–π: {best_snapshot.get('passed_conditions', 0)}")
            else:
                results_summary['OTHER'] += 1
                print(f"‚ùì –î–†–£–ì–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {decision}")
            
            print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {reason[:100]}{'...' if len(reason) > 100 else ''}")
            
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {e}")
            results_summary['OTHER'] += 1
        
        print()
    
    print("="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–• (activity + patterns): {results_summary['WOULD_SEND']}")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø–æ activity conditions: {results_summary['WOULD_REJECT_CONDITIONS']}")  
    print(f"üö® –û—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º —Ö–æ–ª–¥–µ—Ä–æ–≤: {results_summary['WOULD_REJECT_PATTERNS']}")
    print(f"‚ùì –î—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_summary['OTHER']}")
    print()
    print("üéØ –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û –ï–°–õ–ò:")
    print("‚úÖ –ï—Å—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ü–û–õ–ù–´–ô –£–°–ü–ï–•'")
    print("‚úÖ –ï—Å—Ç—å —Ç–æ–∫–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    print("‚úÖ –õ–æ–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 'üö® ACTIVITY REJECT (HOLDER PATTERNS)' –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö")

if __name__ == "__main__":
    asyncio.run(test_holder_patterns_logic())