import asyncio
import websockets
import json
import msgpack
import ssl
import uuid
import random
from typing import Optional, Any

import os
import subprocess
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('smart_feed_trades.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ track_eboshers.py (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ) ---

def j8(e=None, t=None, n=None):
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π randomUUID –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã t –∏ e
    if hasattr(uuid, 'uuid4') and t is None and (e is None or e == {}):
        return str(uuid.uuid4())

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 16 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç (–∞–Ω–∞–ª–æ–≥ O8())
    if e is None:
        e = {}

    if 'random' in e:
        r = e['random']
    elif 'rng' in e:
        r = e['rng']()
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 16 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç (0-255)
        r = [random.randint(0, 255) for _ in range(16)]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    r[6] = (15 & r[6]) | 64  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é 4
    r[8] = (63 & r[8]) | 128 # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç 10 (RFC 4122)

    if t is not None:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±—É—Ñ–µ—Ä t - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–π—Ç—ã
        n = n or 0
        for i in range(16):
            t[n + i] = r[i]
        return t

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É UUID
    def format_bytes(bytes_arr, offset=0):
        hex_chars = "0123456789abcdef"
        result = []

        for i in range(16):
            if i in [4, 6, 8, 10]:
                result.append('-')
            byte_val = bytes_arr[offset + i]
            result.append(hex_chars[byte_val >> 4])
            result.append(hex_chars[byte_val & 0x0F])

        return ''.join(result)

    return format_bytes(r)

def decode_padre_message(message_bytes: bytes) -> Optional[Any]:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç padre.gg WebSocket.
    –ü–æ–ø—ã—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        unpacked = msgpack.unpackb(message_bytes, raw=False)

        # Padre —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã JSON –≤–Ω—É—Ç—Ä–∏ MessagePack,
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
        if isinstance(unpacked, dict):
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 'type': 'msg' –∏ payload - JSON —Å—Ç—Ä–æ–∫–∞
            if unpacked.get('type') == 'msg' and isinstance(unpacked.get('payload'), str):
                try:
                    return json.loads(unpacked['payload'])
                except json.JSONDecodeError:
                    return unpacked['payload'] # –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return unpacked
        elif isinstance(unpacked, list):
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫, –∏ –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —Å–ª–æ–≤–∞—Ä—å, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ
            for item in unpacked:
                if isinstance(item, dict):
                    return item
                elif isinstance(item, str): # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON
                    try:
                        return json.loads(item)
                    except json.JSONDecodeError:
                        pass
            return unpacked
        else:
            return unpacked # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏–ª–∏ –±—É–ª–µ–≤–æ)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def get_token_from_script() -> Optional[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ padre_get_access_token.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞.
    """
    try:
        logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ padre_get_access_token.py...")

        loop = asyncio.get_event_loop()
        token = await loop.run_in_executor(None, _sync_get_token_from_script)

        if token:
            logger.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
            return token
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def _sync_get_token_from_script() -> Optional[str]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ padre_get_access_token.py
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç padre_get_access_token.py
        script_path = os.path.join(os.path.dirname(__file__), "padre_get_access_token.py")
        result = subprocess.run(
            ["python", script_path],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(__file__)
        )

        if result.returncode == 0:
            logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç padre_get_access_token.py –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ token.txt
            token_file = os.path.join(os.path.dirname(__file__), "token.txt")
            if os.path.exists(token_file):
                with open(token_file, 'r') as f:
                    token = f.read().strip()

                if token and token.startswith('eyJ'):
                    return token
                else:
                    logger.error("‚ùå –¢–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                    return None
            else:
                logger.error("‚ùå –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---

# !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç PADRE_COOKIES –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–∑ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ !!!
# –ï–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ Developer Tools -> Network -> –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ padre.gg -> Headers -> Cookie
PADRE_COOKIES = {
    'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel': 'YOUR_ACTUAL_MIXAPANEL_COOKIE_VALUE'
}

PADRE_WS_URL = "wss://backend.padre.gg/_heavy_multiplex"

async def connect_and_subscribe():
    logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {PADRE_WS_URL}")

    # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    jwt_token = await get_token_from_script()
    if not jwt_token:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω. –û—Ç–º–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        return

    headers = {
        'Cookie': 'mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel=' + PADRE_COOKIES['mp_f259317776e8d4d722cf5f6de613d9b5_mixpanel'],
        'Origin': 'https://trade.padre.gg',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0'
    }

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    try:
        async with websockets.connect(
            PADRE_WS_URL,
            extra_headers=headers,
            ping_interval=None,
            ping_timeout=None,
            ssl=ssl_context
        ) as websocket:
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            auth_message = [
                1,
                jwt_token,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                j8()[:13]
            ]
            auth_bytes = msgpack.packb(auth_message)
            await websocket.send(auth_bytes)
            logger.info("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            # [4, 37, '/trades/recent/solana-HLKzXdsg3q2WwgJHiUUCXgonnvXrvvPSqkpnrju94yjR/smart-feed']
            subscription_message = [
                4,
                37,
                '/trades/recent/solana-HLKzXdsg3q2WwgJHiUUCXgonnvXrvvPSqkpnrju94yjR/smart-feed'
            ]
            subscription_bytes = msgpack.packb(subscription_message)
            await websocket.send(subscription_bytes)
            logger.info("üì° –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞

            logger.info("üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            async for message in websocket:
                if isinstance(message, bytes):
                    decoded_data = decode_padre_message(message)
                    if decoded_data:
                        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {json.dumps(decoded_data, indent=2, ensure_ascii=False)}")
                    else:
                        logger.warning(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ): {message[:50]}...")
                elif isinstance(message, str):
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    except websockets.exceptions.ConnectionClosed as e:
        logger.error(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    try:
        await connect_and_subscribe()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    asyncio.run(main())
