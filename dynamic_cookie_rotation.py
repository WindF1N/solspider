#!/usr/bin/env python3
"""
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ—Ç–∞—Ü–∏–∏ cookies —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º Anubis challenge
–£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
"""
import logging
import random
import asyncio
import aiohttp
from typing import List, Dict, Optional, Tuple, Any
import time
from datetime import datetime, timedelta
from anubis_handler import AnubisHandler, handle_anubis_challenge_for_session

logger = logging.getLogger(__name__)

# üõ°Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –°–ï–¢–ï–í–´–• –û–®–ò–ë–û–ö
async def safe_network_request(session, method, url, max_retries=15, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –õ–Æ–ë–´–• —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
    """
    NETWORK_ERRORS = [
        "Server disconnected",
        "Connection reset by peer", 
        "Cannot connect to host",
        "Connection timed out",
        "Timeout",
        "SSL", 
        "Name resolution failed",
        "Network is unreachable",
        "Connection refused",
        "Connection aborted",
        "Broken pipe",
        "No route to host",
        "Host is unreachable",
        "Connection closed",
        "Connection lost",
        "Socket error",
        "ClientConnectorError",
        "ClientError",
        "ServerDisconnectedError",
        "ClientOSError"
    ]
    
    last_error = None
    
    for attempt in range(max_retries):
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
            if method.lower() == 'get':
                async with session.get(url, **kwargs) as response:
                    await response.read()
                    return response
            elif method.lower() == 'post':
                async with session.post(url, **kwargs) as response:
                    await response.read()
                    return response
            else:
                raise ValueError(f"Unsupported method: {method}")
                
        except Exception as e:
            last_error = e
            error_str = str(e).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
            is_network_error = any(net_err.lower() in error_str for net_err in NETWORK_ERRORS)
            
            if is_network_error:
                backoff_time = min(45, (attempt + 1) * 1.5 + random.uniform(0.5, 2))
                logger.warning(f"üî• [COOKIE] –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                logger.warning(f"‚è≥ [COOKIE] –ñ–¥–µ–º {backoff_time:.1f}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                
                await asyncio.sleep(backoff_time * 2)
                continue
            else:
                # –ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise e
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(f"üíÄ [COOKIE] –í–°–ï {max_retries} –ü–û–ü–´–¢–û–ö –ò–°–ß–ï–†–ü–ê–ù–´. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
    raise last_error

class DynamicProxyCookieRotator:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫—É–∫–∏ —á–µ—Ä–µ–∑ Anubis challenge"""
    
    def __init__(self, nitter_base_url: str = None):
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫—É–∫–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ + —Ñ–æ–Ω–æ–≤—ã–µ)
        self.proxies = [
            None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            "http://user132581:schrvd@37.221.80.162:3542",
            "http://user132581:schrvd@46.149.174.203:3542", 
            "http://user132581:schrvd@37.221.80.181:3542",
            "http://user132581:schrvd@37.221.80.125:3542",
            "http://user132581:schrvd@37.221.80.5:3542",
            "http://user132581:schrvd@213.139.231.127:3542",
            "http://user132581:schrvd@37.221.80.23:3542",
            "http://user132581:schrvd@37.221.80.188:3542",
            "http://user132581:schrvd@45.91.160.28:3542",
            # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª—É—á—à–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
            "http://user132581:schrvd@194.34.250.178:3542",
            "http://user132581:schrvd@149.126.199.210:3542",
            "http://user132581:schrvd@149.126.199.53:3542",
            "http://user132581:schrvd@149.126.211.4:3542",
            "http://user132581:schrvd@149.126.211.208:3542",
            "http://user132581:schrvd@149.126.212.129:3542",
            "http://user132581:schrvd@149.126.240.124:3542",
            "http://user132581:schrvd@149.126.227.154:3542",
            "http://user132581:schrvd@149.126.198.57:3542",
            "http://user132581:schrvd@149.126.198.160:3542",
        ]
        
        # –ö—ç—à –∫—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏ {proxy_url: {"cookie": str, "expires": datetime, "valid": bool}}
        self.proxy_cookies = {}
        
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Nitter - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–æ–º–µ–Ω–∞
        if nitter_base_url is None:
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                from duplicate_groups_manager import get_nitter_base_url
                self.nitter_base_url = get_nitter_base_url()
            except ImportError:
                # Fallback –Ω–∞ IP-–∞–¥—Ä–µ—Å –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                self.nitter_base_url = "http://185.207.1.206:8085"
        else:
            self.nitter_base_url = nitter_base_url
        
        # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.current_index = 0
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        self.failed_proxies = set()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ {proxy_key: unblock_time}
        self.temp_blocked_proxies = {}
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        self.last_cookie_fetch = {}
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.min_fetch_interval = 1  # 1 —Å–µ–∫—É–Ω–¥–∞ (—É–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
        
        # üïí –í–†–ï–ú–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–ê–ñ–î–û–ì–û –ü–†–û–ö–°–ò (–û–¢–ö–õ–Æ–ß–ï–ù–û)
        self.proxy_last_used = {}  # {proxy_key: timestamp}
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - –û–¢–ö–õ–Æ–ß–ï–ù–û
        self.proxy_request_interval = 0  # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ø—Ä–æ–∫—Å–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
        
        logger.info(f"üîÑ [DYNAMIC] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Ç–∞—Ç–æ—Ä —Å {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")
    
    def _get_proxy_key(self, proxy: Optional[str]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—è—Ö)"""
        return proxy if proxy else "NO_PROXY"
    
    def _can_use_proxy(self, proxy: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø—Ä–æ–∫—Å–∏ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–û–¢–ö–õ–Æ–ß–ï–ù–û - –≤—Å–µ–≥–¥–∞ True)"""
        proxy_key = self._get_proxy_key(proxy)
        
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ proxy_request_interval = 0
        return True
    
    def _mark_proxy_used(self, proxy: Optional[str]):
        """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (–û–¢–ö–õ–Æ–ß–ï–ù–û - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
        proxy_key = self._get_proxy_key(proxy)
        self.proxy_last_used[proxy_key] = time.time()
        
        proxy_info = proxy_key if proxy_key != "NO_PROXY" else "–ë–ï–ó –ü–†–û–ö–°–ò"
        logger.debug(f"‚úÖ [DYNAMIC] –ü—Ä–æ–∫—Å–∏ {proxy_info} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    
    def _is_cookie_valid(self, proxy: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        proxy_key = self._get_proxy_key(proxy)
        
        if proxy_key not in self.proxy_cookies:
            return False
            
        cookie_data = self.proxy_cookies[proxy_key]
        
        # üîí –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ö–£–ö–ò –ü–†–ò–ù–ê–î–õ–ï–ñ–ê–¢ –ò–ú–ï–ù–ù–û –≠–¢–û–ú–£ –ü–†–û–ö–°–ò
        if cookie_data.get("source_proxy") != proxy_key:
            logger.warning(f"‚ö†Ô∏è [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥—Ä—É–≥–æ–º—É –ø—Ä–æ–∫—Å–∏: {cookie_data.get('source_proxy')}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if cookie_data.get("expires") and datetime.now() > cookie_data["expires"]:
            logger.debug(f"üïí [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –∏—Å—Ç–µ–∫–ª–∏")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—á–µ–Ω –ª–∏ –∫—É–∫–∏ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        if not cookie_data.get("valid", True):
            logger.debug(f"‚ùå [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ")
            return False
            
        return True
    
    async def _fetch_cookie_for_proxy(self, proxy: Optional[str], session: aiohttp.ClientSession) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Anubis challenge"""
        proxy_key = self._get_proxy_key(proxy)
        
        # üîç –ü–†–û–í–ï–†–Ø–ï–ú –¢–ò–ü NITTER –î–û–ú–ï–ù–ê
        # IP-–∞–¥—Ä–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 185.207.1.206:8085) –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∫—É–∫–∏ Anubis
        # –ö—É–∫–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤ —Ç–∏–ø–∞ nitter.tiekoetter.com
        import re
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è IP-–∞–¥—Ä–µ—Å–æ–≤ —Å –ø–æ—Ä—Ç–æ–º (—Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º –∏–ª–∏ –±–µ–∑)
        ip_pattern = r'^(?:https?://)?(\d+\.\d+\.\d+\.\d+:\d+)$'
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        domain_part = self.nitter_base_url.replace('http://', '').replace('https://', '')
        is_ip_address = re.match(r'^\d+\.\d+\.\d+\.\d+:\d+$', domain_part) is not None
        
        if re.match(ip_pattern, self.nitter_base_url) or is_ip_address:
            logger.info(f"üöÄ [DYNAMIC] IP-–∞–¥—Ä–µ—Å {self.nitter_base_url} (–¥–æ–º–µ–Ω: {domain_part}) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫—É–∫–∏ Anubis")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –∫—É–∫–∏ –¥–ª—è IP-–∞–¥—Ä–µ—Å–∞
            self.proxy_cookies[proxy_key] = {
                "cookie": "",
                "expires": datetime.now() + timedelta(hours=24),  # IP-–∞–¥—Ä–µ—Å–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã
                "valid": True,
                "created": datetime.now(),
                "proxy_specific": True,
                "source_proxy": proxy_key,
                "ip_address": True  # –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ IP-–∞–¥—Ä–µ—Å
            }
            return ""
        
        # # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        # if proxy_key in self.last_cookie_fetch:
        #     time_since_last = time.time() - self.last_cookie_fetch[proxy_key]
        #     if time_since_last < self.min_fetch_interval:
        #         logger.debug(f"‚è∞ [DYNAMIC] –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ –¥–ª—è {proxy_key}")
        #         return None
        
        try:
            logger.info(f"üîç [DYNAMIC] –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫—É–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞: {self.nitter_base_url}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏
            request_kwargs = {}
            if proxy:
                request_kwargs['proxy'] = proxy
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–û–ò–°–ö–û–í–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É Nitter (–≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è challenge)
            test_search_url = f"{self.nitter_base_url}/search?f=tweets&q=—Å–∏—Å—å–∫–∏&since=&until=&near="
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            }
            
            # üõ°Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô HTTP –ó–ê–ü–†–û–° –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–£–ö–ò
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
            response = await safe_network_request(session, 'get', test_search_url, 
                                                headers=headers, timeout=60, **request_kwargs)
            content = await response.text()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∏
            set_cookies = response.headers.getall('Set-Cookie', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ challenge
            has_challenge_text = "Making sure you're not a bot!" in content
            has_anubis_script = 'id="anubis_challenge"' in content
            has_anubis_cookies = any('anubis' in cookie for cookie in set_cookies)
            
            logger.debug(f"üîç [DYNAMIC] {proxy_key}: —Å—Ç–∞—Ç—É—Å={response.status}, challenge={has_challenge_text}, anubis_–∫—É–∫–∏={has_anubis_cookies}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Anubis challenge (–ø–æ script –ò–õ–ò —Ç–µ–∫—Å—Ç—É)
            if has_challenge_text or has_anubis_script:
                logger.info(f"ü§ñ [DYNAMIC] –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge –¥–ª—è {proxy_key}")
                
                # –†–µ—à–∞–µ–º challenge
                new_cookies = await handle_anubis_challenge_for_session(session, str(response.url), content)
                
                if new_cookies:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
                    cookie_string = "; ".join([f"{name}={value}" for name, value in new_cookies.items()])
                    
                    # üîí –°–û–•–†–ê–ù–Ø–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–£–ö–ò –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–†–û–ö–°–ò
                    self.proxy_cookies[proxy_key] = {
                        "cookie": cookie_string,
                        "expires": datetime.now() + timedelta(hours=12),  # –ö—É–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 12 —á–∞—Å–æ–≤
                        "valid": True,
                        "created": datetime.now(),
                        "proxy_specific": True,  # –§–ª–∞–≥ —á—Ç–æ –∫—É–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏
                        "source_proxy": proxy_key  # –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫—É–∫–∏
                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
                    self.last_cookie_fetch[proxy_key] = time.time()
                    
                    logger.info(f"‚úÖ [DYNAMIC] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∫—É–∫–∏ –¥–ª—è {proxy_key}: {len(cookie_string)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return cookie_string
                else:
                    logger.error(f"‚ùå [DYNAMIC] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å Anubis challenge –¥–ª—è {proxy_key}")
                    
            else:
                # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ challenge, –ø—Ä–æ–≤–µ—Ä—è–µ–º anubis –∫—É–∫–∏
                if has_anubis_cookies:
                    logger.info(f"üç™ [DYNAMIC] –ù–µ—Ç –ø–æ–ª–Ω–æ–≥–æ challenge –¥–ª—è {proxy_key}, –Ω–æ –µ—Å—Ç—å anubis –∫—É–∫–∏")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º anubis –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    extracted_cookies = {}
                    for cookie_header in set_cookies:
                        if 'anubis' in cookie_header.lower():
                            cookie_parts = cookie_header.split(';')
                            if cookie_parts:
                                cookie_pair = cookie_parts[0].strip()
                                if '=' in cookie_pair:
                                    name, value = cookie_pair.split('=', 1)
                                    extracted_cookies[name.strip()] = value.strip()
                    
                    if extracted_cookies:
                        cookie_string = "; ".join([f"{name}={value}" for name, value in extracted_cookies.items()])
                        
                        self.proxy_cookies[proxy_key] = {
                            "cookie": cookie_string,
                            "expires": datetime.now() + timedelta(hours=6),  # Anubis –∫—É–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 6 —á–∞—Å–æ–≤
                            "valid": True,
                            "created": datetime.now(),
                            "proxy_specific": True,  # –§–ª–∞–≥ —á—Ç–æ –∫—É–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏
                            "source_proxy": proxy_key  # –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫—É–∫–∏
                        }
                        
                        logger.info(f"‚úÖ [DYNAMIC] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã anubis –∫—É–∫–∏ –¥–ª—è {proxy_key}: {len(cookie_string)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return cookie_string
                
                logger.info(f"‚ö™ [DYNAMIC] –ù–µ—Ç challenge –∏ anubis –∫—É–∫–∏ –¥–ª—è {proxy_key}, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—É–∫–∏")
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ challenge, –Ω–∏ anubis –∫—É–∫–∏
                self.proxy_cookies[proxy_key] = {
                    "cookie": "",
                    "expires": datetime.now() + timedelta(hours=1),  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                    "valid": True,
                    "created": datetime.now(),
                    "proxy_specific": True,  # –§–ª–∞–≥ —á—Ç–æ –∫—É–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏
                    "source_proxy": proxy_key  # –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫—É–∫–∏
                }
                return ""
                    
        except Exception as e:
            error_type = type(e).__name__
            error_details = str(e)
            logger.error(f"‚ùå [DYNAMIC] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ –¥–ª—è {proxy_key}")
            logger.error(f"   üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}")
            logger.error(f"   üìã –î–µ—Ç–∞–ª–∏: {error_details}")
            logger.error(f"   üìã URL: {test_search_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
            if "Cannot connect to host" in error_details or "Connection" in error_details:
                logger.warning(f"üîå [DYNAMIC] –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {proxy_key} - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            elif "timeout" in error_details.lower():
                logger.warning(f"‚è∞ [DYNAMIC] –¢–∞–π–º–∞—É—Ç –¥–ª—è {proxy_key} - –≤–æ–∑–º–æ–∂–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º")
            elif "SSL" in error_details:
                logger.warning(f"üîí [DYNAMIC] SSL –æ—à–∏–±–∫–∞ –¥–ª—è {proxy_key}")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            self.last_cookie_fetch[proxy_key] = time.time()
            
        if error_type == "TimeoutError":
            return "timeout"

        return None
    
    async def get_proxy_cookie_async(self, session: aiohttp.ClientSession, max_retries: int = 3) -> Tuple[Optional[str], str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)"""
        max_wait_time = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
            available_proxies = []
            
            for proxy in self.proxies:
                proxy_key = self._get_proxy_key(proxy)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
                if proxy_key in self.failed_proxies:
                    continue
                    
                # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —É–±—Ä–∞–Ω—ã
                # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–±—Ä–∞–Ω—ã
                # –í—Å–µ –ø—Ä–æ–∫—Å–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã (–∫—Ä–æ–º–µ permanently failed)
                available_proxies.append(proxy)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if available_proxies:
                # üîÑ –£–°–¢–û–ô–ß–ò–í–ê–Ø –†–û–¢–ê–¶–ò–Ø: –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏
                proxy_found = False
                attempts = 0
                
                while not proxy_found and attempts < len(self.proxies):
                    proxy = self.proxies[self.current_index % len(self.proxies)]
                    self.current_index = (self.current_index + 1) % len(self.proxies)
                    attempts += 1
                    
                    proxy_key = self._get_proxy_key(proxy)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–æ–ª—å–∫–æ permanently failed)
                    if proxy_key not in self.failed_proxies:
                        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–±—Ä–∞–Ω—ã
                        
                        proxy_found = True
                        break
                
                if not proxy_found:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∏–∑ available_proxies
                    proxy = available_proxies[0]
                
                proxy_key = self._get_proxy_key(proxy)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏ –ò –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
                if self._is_cookie_valid(proxy) and self._can_use_proxy(proxy):
                    cookie = self.proxy_cookies[proxy_key]["cookie"]
                    # üïí –ü–û–ú–ï–ß–ê–ï–ú –ü–†–û–ö–°–ò –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ô
                    self._mark_proxy_used(proxy)
                    cookie_info = f"{len(cookie)} —Å–∏–º–≤–æ–ª–æ–≤" if cookie else "–ø—É—Å—Ç—ã–µ"
                    logger.debug(f"üç™ [DYNAMIC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏ –¥–ª—è {proxy_key} ({cookie_info})")
                    return proxy, cookie
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫—É–∫–∏
                cookie = await self._fetch_cookie_for_proxy(proxy, session)
                if cookie is not None and cookie != "timeout":
                    # üïí –ü–û–ú–ï–ß–ê–ï–ú –ü–†–û–ö–°–ò –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ô
                    self._mark_proxy_used(proxy)
                    return proxy, cookie
                
                if cookie == "timeout":
                    logger.warning(f"‚ö†Ô∏è [DYNAMIC] –¢–∞–π–º–∞—É—Ç –¥–ª—è {proxy_key}")
                    continue
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏, –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
                logger.warning(f"‚ö†Ô∏è [DYNAMIC] –í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ {proxy_key}")
                self.failed_proxies.add(proxy_key)
                continue
            
            # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–∞–∑—É
            # –õ–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —É–±—Ä–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ proxy_request_interval = 0
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö
            if self.failed_proxies:
                logger.warning(f"üîÑ [DYNAMIC] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ ({len(self.failed_proxies)} —à—Ç.)")
                self.failed_proxies.clear()
                continue
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(0.5)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ–±—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        logger.warning(f"‚è∞ [DYNAMIC] –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ–±—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏")
        
        for proxy in self.proxies:
            proxy_key = self._get_proxy_key(proxy)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in self.failed_proxies:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in self.temp_blocked_proxies:
                unblock_time = self.temp_blocked_proxies[proxy_key]
                if datetime.now() < unblock_time:
                    continue
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            cookie = await self._fetch_cookie_for_proxy(proxy, session)
            if cookie is not None:
                self._mark_proxy_used(proxy)
                logger.warning(f"‚ö†Ô∏è [DYNAMIC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ {proxy_key} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
                return proxy, cookie
        
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏ –±–µ–∑ –∫—É–∫–∏
        logger.error(f"‚ùå [DYNAMIC] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–∏—Ö")
        return None, ""
    
    def mark_proxy_failed(self, proxy: Optional[str], cookie: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
        proxy_key = self._get_proxy_key(proxy)
        self.failed_proxies.add(proxy_key)
        
        # –ü–æ–º–µ—á–∞–µ–º –∫—É–∫–∏ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        if proxy_key in self.proxy_cookies:
            self.proxy_cookies[proxy_key]["valid"] = False
            
        logger.warning(f"‚ùå [DYNAMIC] –ü—Ä–æ–∫—Å–∏ {proxy_key} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π")
    
    def mark_proxy_temp_blocked(self, proxy: Optional[str], cookie: str, block_duration_seconds: int = 120):
        """–í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ (–û–¢–ö–õ–Æ–ß–ï–ù–û - —Ç–æ–ª—å–∫–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—É–∫–∏)"""
        proxy_key = self._get_proxy_key(proxy)
        
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏, —Ç–æ–ª—å–∫–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—É–∫–∏
        # unblock_time = datetime.now() + timedelta(seconds=block_duration_seconds)
        # self.temp_blocked_proxies[proxy_key] = unblock_time
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—É–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
        if proxy_key in self.proxy_cookies:
            self.proxy_cookies[proxy_key]["valid"] = False
            
        logger.info(f"üîÑ [DYNAMIC] –ü—Ä–æ–∫—Å–∏ {proxy_key} - –∫—É–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    
    def invalidate_cookie(self, proxy: Optional[str]):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 429 –æ—à–∏–±–∫–∏)"""
        proxy_key = self._get_proxy_key(proxy)
        
        if proxy_key in self.proxy_cookies:
            self.proxy_cookies[proxy_key]["valid"] = False
            logger.info(f"üîÑ [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def get_cycle_proxy_cookie_async(self, session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –¥–ª—è —Ü–µ–ª–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        proxy, cookie = await self.get_proxy_cookie_async(session)
        proxy_info = "NO_PROXY" if proxy is None else proxy.split('@')[1] if '@' in proxy else proxy
        cookie_info = f"{len(cookie)} —Å–∏–º–≤–æ–ª–æ–≤" if cookie else "–±–µ–∑ –∫—É–∫–∏"
        logger.info(f"üîÑ [DYNAMIC] –°–≤—è–∑–∫–∞ –¥–ª—è —Ü–∏–∫–ª–∞: {proxy_info} + –∫—É–∫–∏ ({cookie_info})")
        return proxy, cookie
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏"""
        valid_cookies = sum(1 for data in self.proxy_cookies.values() if data.get("valid", False))
        expired_cookies = sum(1 for data in self.proxy_cookies.values() 
                            if data.get("expires") and datetime.now() > data["expires"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        now = datetime.now()
        active_temp_blocks = sum(1 for unblock_time in self.temp_blocked_proxies.values() if now < unblock_time)
        
        # üïí –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        current_time = time.time()
        available_by_time = 0
        recently_used = 0
        
        for proxy in self.proxies:
            proxy_key = self._get_proxy_key(proxy)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in self.failed_proxies or proxy_key in self.temp_blocked_proxies:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if self._can_use_proxy(proxy):
                available_by_time += 1
            else:
                recently_used += 1
        
        # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–∫–∏
        uniqueness_check = self.check_cookie_uniqueness()
        
        return {
            'total_proxies': len(self.proxies),
            'failed_proxies': len(self.failed_proxies),
            'temp_blocked_proxies': active_temp_blocks,
            'available_proxies': len(self.proxies) - len(self.failed_proxies) - active_temp_blocks,
            'available_by_time': available_by_time,  # üïí –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            'recently_used': recently_used,  # üïí –ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ (–∂–¥—É—Ç 60 —Å–µ–∫)
            'cached_cookies': len(self.proxy_cookies),
            'valid_cookies': valid_cookies,
            'expired_cookies': expired_cookies,
            'current_index': self.current_index,
            'request_interval': self.proxy_request_interval,  # üïí –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            'cookie_uniqueness': uniqueness_check['is_unique'],  # üîí –í—Å–µ –ª–∏ –∫—É–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
            'unique_cookies': uniqueness_check['unique_cookies'],  # üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É–∫–∏
            'shared_cookies_count': len(uniqueness_check['shared_cookies'])  # üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫—É–∫–∏
        }
    
    def reset_failed_proxies(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        failed_count = len(self.failed_proxies)
        self.failed_proxies.clear()
        logger.info(f"üîÑ [DYNAMIC] –°–±—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (–±—ã–ª–æ: {failed_count})")
    
    def cleanup_expired_cookies(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–∫–∏ –∏–∑ –∫—ç—à–∞ –∏ –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        now = datetime.now()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–∫–∏
        expired_cookie_keys = [
            key for key, data in self.proxy_cookies.items()
            if data.get("expires") and now > data["expires"]
        ]
        
        for key in expired_cookie_keys:
            del self.proxy_cookies[key]
            
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_block_keys = [
            key for key, unblock_time in self.temp_blocked_proxies.items()
            if now > unblock_time
        ]
        
        for key in expired_block_keys:
            del self.temp_blocked_proxies[key]
            
        if expired_cookie_keys or expired_block_keys:
            logger.info(f"üßπ [DYNAMIC] –û—á–∏—â–µ–Ω–æ: {len(expired_cookie_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –∫—É–∫–∏, {len(expired_block_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    
    def check_cookie_uniqueness(self) -> dict:
        """üîí –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        cookie_usage = {}  # cookie_string -> [proxy_keys]
        duplicates = []
        
        for proxy_key, cookie_data in self.proxy_cookies.items():
            cookie_string = cookie_data.get("cookie", "")
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫—É–∫–∏
            if not cookie_string:
                continue
                
            if cookie_string not in cookie_usage:
                cookie_usage[cookie_string] = []
            cookie_usage[cookie_string].append(proxy_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ source_proxy —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á—É
            source_proxy = cookie_data.get("source_proxy")
            if source_proxy != proxy_key:
                duplicates.append({
                    "proxy_key": proxy_key,
                    "source_proxy": source_proxy,
                    "issue": "source_proxy_mismatch"
                })
        
        # –ù–∞–π—Ç–∏ –∫—É–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–∫—Å–∏
        shared_cookies = {
            cookie_string: proxies for cookie_string, proxies in cookie_usage.items()
            if len(proxies) > 1
        }
        
        return {
            "total_cookies": len([data for data in self.proxy_cookies.values() if data.get("cookie")]),
            "unique_cookies": len(cookie_usage),
            "shared_cookies": shared_cookies,
            "duplicates": duplicates,
            "is_unique": len(shared_cookies) == 0 and len(duplicates) == 0
        }


class DynamicBackgroundProxyCookieRotator(DynamicProxyCookieRotator):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, nitter_base_url: str = None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        super().__init__(nitter_base_url)
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.proxies = [
            "http://user132581:schrvd@194.34.250.178:3542",
            "http://user132581:schrvd@149.126.199.210:3542",
            "http://user132581:schrvd@149.126.199.53:3542",
            "http://user132581:schrvd@149.126.211.4:3542",
            "http://user132581:schrvd@149.126.211.208:3542",
            "http://user132581:schrvd@149.126.212.129:3542",
            "http://user132581:schrvd@149.126.240.124:3542",
            "http://user132581:schrvd@149.126.227.154:3542",
            "http://user132581:schrvd@149.126.198.57:3542",
            "http://user132581:schrvd@149.126.198.160:3542",
        ]
        
        logger.info(f"üîÑ [DYNAMIC_BG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–æ–Ω–æ–≤—ã–π —Ä–æ—Ç–∞—Ç–æ—Ä —Å {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")


# –°–∏–Ω–≥–ª—Ç–æ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
dynamic_proxy_cookie_rotator = DynamicProxyCookieRotator()
dynamic_background_proxy_cookie_rotator = DynamicBackgroundProxyCookieRotator()

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
async def get_next_proxy_cookie_async(session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    return await dynamic_proxy_cookie_rotator.get_proxy_cookie_async(session)

async def get_background_proxy_cookie_async(session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    return await dynamic_background_proxy_cookie_rotator.get_proxy_cookie_async(session)

def mark_proxy_failed(proxy: Optional[str], cookie: str):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
    dynamic_proxy_cookie_rotator.mark_proxy_failed(proxy, cookie)

def mark_background_proxy_failed(proxy: Optional[str], cookie: str):
    """–ü–æ–º–µ—á–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
    dynamic_background_proxy_cookie_rotator.mark_proxy_failed(proxy, cookie)

def mark_proxy_temp_blocked(proxy: Optional[str], cookie: str, block_duration_seconds: int = 120):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    dynamic_proxy_cookie_rotator.mark_proxy_temp_blocked(proxy, cookie, block_duration_seconds)

def mark_background_proxy_temp_blocked(proxy: Optional[str], cookie: str, block_duration_seconds: int = 120):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    dynamic_background_proxy_cookie_rotator.mark_proxy_temp_blocked(proxy, cookie, block_duration_seconds)

def check_cookie_uniqueness() -> dict:
    """üîí –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–æ—Ç–∞—Ç–æ—Ä–µ"""
    return dynamic_proxy_cookie_rotator.check_cookie_uniqueness()

def get_proxy_stats() -> dict:
    """üìä –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–∫—Å–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—É–∫–∏"""
    return dynamic_proxy_cookie_rotator.get_stats()

async def get_all_available_proxies_async(session: aiohttp.ClientSession) -> List[Tuple[Optional[str], str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ –ø—Ä–∏ 429 –æ—à–∏–±–∫–∞—Ö"""
    all_proxies = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ä–æ—Ç–∞—Ç–æ—Ä–∞
    total_proxies = len(dynamic_proxy_cookie_rotator.proxies)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    original_index = dynamic_proxy_cookie_rotator.current_index
    
    try:
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏
        for i in range(total_proxies):
            proxy = dynamic_proxy_cookie_rotator.proxies[i]
            proxy_key = dynamic_proxy_cookie_rotator._get_proxy_key(proxy)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in dynamic_proxy_cookie_rotator.failed_proxies:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in dynamic_proxy_cookie_rotator.temp_blocked_proxies:
                unblock_time = dynamic_proxy_cookie_rotator.temp_blocked_proxies[proxy_key]
                if datetime.now() < unblock_time:
                    continue
                else:
                    # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                    del dynamic_proxy_cookie_rotator.temp_blocked_proxies[proxy_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏
            if dynamic_proxy_cookie_rotator._is_cookie_valid(proxy):
                cookie = dynamic_proxy_cookie_rotator.proxy_cookies[proxy_key]["cookie"]
                all_proxies.append((proxy, cookie))
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫—É–∫–∏
                cookie = await dynamic_proxy_cookie_rotator._fetch_cookie_for_proxy(proxy, session)
                if cookie is not None:
                    all_proxies.append((proxy, cookie))
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å –ø—É—Å—Ç—ã–º cookie
                    all_proxies.append((proxy, ""))
        
        logger.info(f"üîÑ [DYNAMIC] –ü–æ–ª—É—á–µ–Ω–æ {len(all_proxies)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ {total_proxies} –æ–±—â–∏—Ö")
        return all_proxies
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        dynamic_proxy_cookie_rotator.current_index = original_index

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
async def cleanup_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫—É–∫–∏"""
    while True:
        try:
            dynamic_proxy_cookie_rotator.cleanup_expired_cookies()
            dynamic_background_proxy_cookie_rotator.cleanup_expired_cookies()
            await asyncio.sleep(3600)  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 10 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    print("üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫—É–∫–∏ —Å Anubis challenge")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏") 