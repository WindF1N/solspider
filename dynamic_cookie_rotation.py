#!/usr/bin/env python3
"""
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ—Ç–∞—Ü–∏–∏ cookies —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º Anubis challenge
–£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
"""
import logging
import random
import asyncio
import aiohttp
from typing import List, Dict, Optional, Tuple, Any
import time
from datetime import datetime, timedelta
from anubis_handler import AnubisHandler, handle_anubis_challenge_for_session

logger = logging.getLogger(__name__)

class DynamicProxyCookieRotator:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫—É–∫–∏ —á–µ—Ä–µ–∑ Anubis challenge"""
    
    def __init__(self, nitter_base_url: str = "https://nitter.tiekoetter.com"):
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫—É–∫–∏
        self.proxies = [
            None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            "http://user132581:schrvd@37.221.80.162:3542",
            "http://user132581:schrvd@46.149.174.203:3542", 
            "http://user132581:schrvd@37.221.80.181:3542",
            "http://user132581:schrvd@37.221.80.125:3542",
            "http://user132581:schrvd@37.221.80.5:3542",
            "http://user132581:schrvd@213.139.231.127:3542",
            "http://user132581:schrvd@37.221.80.23:3542",
            "http://user132581:schrvd@37.221.80.188:3542",
            "http://user132581:schrvd@45.91.160.28:3542",
        ]
        
        # –ö—ç—à –∫—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏ {proxy_url: {"cookie": str, "expires": datetime, "valid": bool}}
        self.proxy_cookies = {}
        
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Nitter
        self.nitter_base_url = nitter_base_url
        
        # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.current_index = 0
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        self.failed_proxies = set()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ {proxy_key: unblock_time}
        self.temp_blocked_proxies = {}
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        self.last_cookie_fetch = {}
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.min_fetch_interval = 300  # 5 –º–∏–Ω—É—Ç
        
        logger.info(f"üîÑ [DYNAMIC] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Ç–∞—Ç–æ—Ä —Å {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")
    
    def _get_proxy_key(self, proxy: Optional[str]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—è—Ö)"""
        return proxy if proxy else "NO_PROXY"
    
    def _is_cookie_valid(self, proxy: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        proxy_key = self._get_proxy_key(proxy)
        
        if proxy_key not in self.proxy_cookies:
            return False
            
        cookie_data = self.proxy_cookies[proxy_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if cookie_data.get("expires") and datetime.now() > cookie_data["expires"]:
            logger.debug(f"üïí [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –∏—Å—Ç–µ–∫–ª–∏")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—á–µ–Ω –ª–∏ –∫—É–∫–∏ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        if not cookie_data.get("valid", True):
            logger.debug(f"‚ùå [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ")
            return False
            
        return True
    
    async def _fetch_cookie_for_proxy(self, proxy: Optional[str], session: aiohttp.ClientSession) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Anubis challenge"""
        proxy_key = self._get_proxy_key(proxy)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if proxy_key in self.last_cookie_fetch:
            time_since_last = time.time() - self.last_cookie_fetch[proxy_key]
            if time_since_last < self.min_fetch_interval:
                logger.debug(f"‚è∞ [DYNAMIC] –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ –¥–ª—è {proxy_key}")
                return None
        
        try:
            logger.info(f"üîç [DYNAMIC] –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏: {proxy_key}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏
            request_kwargs = {}
            if proxy:
                request_kwargs['proxy'] = proxy
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–û–ò–°–ö–û–í–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É Nitter (–≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è challenge)
            test_search_url = f"{self.nitter_base_url}/search?f=tweets&q=test&since=&until=&near="
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            }
            
            async with session.get(test_search_url, headers=headers, timeout=15, **request_kwargs) as response:
                content = await response.text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∏
                set_cookies = response.headers.getall('Set-Cookie', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ challenge
                has_challenge_text = "Making sure you're not a bot!" in content
                has_anubis_script = 'id="anubis_challenge"' in content
                has_anubis_cookies = any('anubis' in cookie for cookie in set_cookies)
                
                logger.debug(f"üîç [DYNAMIC] {proxy_key}: —Å—Ç–∞—Ç—É—Å={response.status}, challenge={has_challenge_text}, anubis_–∫—É–∫–∏={has_anubis_cookies}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Anubis challenge (–ø–æ script –ò–õ–ò —Ç–µ–∫—Å—Ç—É)
                if has_challenge_text or has_anubis_script:
                    logger.info(f"ü§ñ [DYNAMIC] –û–±–Ω–∞—Ä—É–∂–µ–Ω Anubis challenge –¥–ª—è {proxy_key}")
                    
                    # –†–µ—à–∞–µ–º challenge
                    new_cookies = await handle_anubis_challenge_for_session(session, str(response.url), content)
                    
                    if new_cookies:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
                        cookie_string = "; ".join([f"{name}={value}" for name, value in new_cookies.items()])
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                        self.proxy_cookies[proxy_key] = {
                            "cookie": cookie_string,
                            "expires": datetime.now() + timedelta(hours=12),  # –ö—É–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 12 —á–∞—Å–æ–≤
                            "valid": True,
                            "created": datetime.now()
                        }
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
                        self.last_cookie_fetch[proxy_key] = time.time()
                        
                        logger.info(f"‚úÖ [DYNAMIC] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∫—É–∫–∏ –¥–ª—è {proxy_key}: {len(cookie_string)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return cookie_string
                    else:
                        logger.error(f"‚ùå [DYNAMIC] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å Anubis challenge –¥–ª—è {proxy_key}")
                        
                else:
                    # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ challenge, –ø—Ä–æ–≤–µ—Ä—è–µ–º anubis –∫—É–∫–∏
                    if has_anubis_cookies:
                        logger.info(f"üç™ [DYNAMIC] –ù–µ—Ç –ø–æ–ª–Ω–æ–≥–æ challenge –¥–ª—è {proxy_key}, –Ω–æ –µ—Å—Ç—å anubis –∫—É–∫–∏")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º anubis –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                        extracted_cookies = {}
                        for cookie_header in set_cookies:
                            if 'anubis' in cookie_header.lower():
                                cookie_parts = cookie_header.split(';')
                                if cookie_parts:
                                    cookie_pair = cookie_parts[0].strip()
                                    if '=' in cookie_pair:
                                        name, value = cookie_pair.split('=', 1)
                                        extracted_cookies[name.strip()] = value.strip()
                        
                        if extracted_cookies:
                            cookie_string = "; ".join([f"{name}={value}" for name, value in extracted_cookies.items()])
                            
                            self.proxy_cookies[proxy_key] = {
                                "cookie": cookie_string,
                                "expires": datetime.now() + timedelta(hours=6),  # Anubis –∫—É–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 6 —á–∞—Å–æ–≤
                                "valid": True,
                                "created": datetime.now()
                            }
                            
                            logger.info(f"‚úÖ [DYNAMIC] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã anubis –∫—É–∫–∏ –¥–ª—è {proxy_key}: {len(cookie_string)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return cookie_string
                    
                    logger.info(f"‚ö™ [DYNAMIC] –ù–µ—Ç challenge –∏ anubis –∫—É–∫–∏ –¥–ª—è {proxy_key}, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—É–∫–∏")
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ challenge, –Ω–∏ anubis –∫—É–∫–∏
                    self.proxy_cookies[proxy_key] = {
                        "cookie": "",
                        "expires": datetime.now() + timedelta(hours=1),  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                        "valid": True,
                        "created": datetime.now()
                    }
                    return ""
                    
        except Exception as e:
            logger.error(f"‚ùå [DYNAMIC] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏ –¥–ª—è {proxy_key}: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            self.last_cookie_fetch[proxy_key] = time.time()
            
        return None
    
    async def get_proxy_cookie_async(self, session: aiohttp.ClientSession, max_retries: int = 3) -> Tuple[Optional[str], str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏"""
        attempts = 0
        
        while attempts < len(self.proxies) and attempts < max_retries:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
            proxy = self.proxies[self.current_index]
            self.current_index = (self.current_index + 1) % len(self.proxies)
            
            proxy_key = self._get_proxy_key(proxy)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in self.failed_proxies:
                attempts += 1
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            if proxy_key in self.temp_blocked_proxies:
                unblock_time = self.temp_blocked_proxies[proxy_key]
                if datetime.now() < unblock_time:
                    attempts += 1
                    continue
                else:
                    # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                    del self.temp_blocked_proxies[proxy_key]
                    logger.info(f"üîì [DYNAMIC] –ü—Ä–æ–∫—Å–∏ {proxy_key} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏
            if self._is_cookie_valid(proxy):
                cookie = self.proxy_cookies[proxy_key]["cookie"]
                logger.debug(f"üç™ [DYNAMIC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–∫–∏ –¥–ª—è {proxy_key}")
                return proxy, cookie
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫—É–∫–∏
            cookie = await self._fetch_cookie_for_proxy(proxy, session)
            if cookie is not None:
                return proxy, cookie
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏, –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
            logger.warning(f"‚ö†Ô∏è [DYNAMIC] –í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ {proxy_key}")
            self.failed_proxies.add(proxy_key)
            attempts += 1
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        if self.failed_proxies:
            logger.warning(f"üîÑ [DYNAMIC] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ ({len(self.failed_proxies)} —à—Ç.)")
            self.failed_proxies.clear()
            
            # –ü—Ä–æ–±—É–µ–º —Å –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–æ–∫—Å–∏
            proxy = self.proxies[0]
            self.current_index = 1
            
            cookie = await self._fetch_cookie_for_proxy(proxy, session)
            if cookie is not None:
                return proxy, cookie
        
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∫—É–∫–∏
        logger.error(f"‚ùå [DYNAMIC] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–∏—Ö")
        return self.proxies[0], ""
    
    def mark_proxy_failed(self, proxy: Optional[str], cookie: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
        proxy_key = self._get_proxy_key(proxy)
        self.failed_proxies.add(proxy_key)
        
        # –ü–æ–º–µ—á–∞–µ–º –∫—É–∫–∏ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        if proxy_key in self.proxy_cookies:
            self.proxy_cookies[proxy_key]["valid"] = False
            
        logger.warning(f"‚ùå [DYNAMIC] –ü—Ä–æ–∫—Å–∏ {proxy_key} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π")
    
    def mark_proxy_temp_blocked(self, proxy: Optional[str], cookie: str, block_duration_minutes: int = 1):
        """–í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)"""
        proxy_key = self._get_proxy_key(proxy)
        unblock_time = datetime.now() + timedelta(minutes=block_duration_minutes)
        self.temp_blocked_proxies[proxy_key] = unblock_time
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—É–∫–∏
        if proxy_key in self.proxy_cookies:
            self.proxy_cookies[proxy_key]["valid"] = False
            
        logger.warning(f"üò¥ [DYNAMIC] –ü—Ä–æ–∫—Å–∏ {proxy_key} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {block_duration_minutes} –º–∏–Ω. –¥–æ {unblock_time.strftime('%H:%M:%S')}")
    
    def invalidate_cookie(self, proxy: Optional[str]):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 429 –æ—à–∏–±–∫–∏)"""
        proxy_key = self._get_proxy_key(proxy)
        
        if proxy_key in self.proxy_cookies:
            self.proxy_cookies[proxy_key]["valid"] = False
            logger.info(f"üîÑ [DYNAMIC] –ö—É–∫–∏ –¥–ª—è {proxy_key} –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def get_cycle_proxy_cookie_async(self, session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –¥–ª—è —Ü–µ–ª–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        proxy, cookie = await self.get_proxy_cookie_async(session)
        proxy_info = "NO_PROXY" if proxy is None else proxy.split('@')[1] if '@' in proxy else proxy
        cookie_info = f"{len(cookie)} —Å–∏–º–≤–æ–ª–æ–≤" if cookie else "–±–µ–∑ –∫—É–∫–∏"
        logger.info(f"üîÑ [DYNAMIC] –°–≤—è–∑–∫–∞ –¥–ª—è —Ü–∏–∫–ª–∞: {proxy_info} + –∫—É–∫–∏ ({cookie_info})")
        return proxy, cookie
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–∫—Å–∏ –∏ –∫—É–∫–∏"""
        valid_cookies = sum(1 for data in self.proxy_cookies.values() if data.get("valid", False))
        expired_cookies = sum(1 for data in self.proxy_cookies.values() 
                            if data.get("expires") and datetime.now() > data["expires"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        now = datetime.now()
        active_temp_blocks = sum(1 for unblock_time in self.temp_blocked_proxies.values() if now < unblock_time)
        
        return {
            'total_proxies': len(self.proxies),
            'failed_proxies': len(self.failed_proxies),
            'temp_blocked_proxies': active_temp_blocks,
            'available_proxies': len(self.proxies) - len(self.failed_proxies) - active_temp_blocks,
            'cached_cookies': len(self.proxy_cookies),
            'valid_cookies': valid_cookies,
            'expired_cookies': expired_cookies,
            'current_index': self.current_index
        }
    
    def reset_failed_proxies(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        failed_count = len(self.failed_proxies)
        self.failed_proxies.clear()
        logger.info(f"üîÑ [DYNAMIC] –°–±—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (–±—ã–ª–æ: {failed_count})")
    
    def cleanup_expired_cookies(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–∫–∏ –∏–∑ –∫—ç—à–∞ –∏ –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        now = datetime.now()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–∫–∏
        expired_cookie_keys = [
            key for key, data in self.proxy_cookies.items()
            if data.get("expires") and now > data["expires"]
        ]
        
        for key in expired_cookie_keys:
            del self.proxy_cookies[key]
            
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_block_keys = [
            key for key, unblock_time in self.temp_blocked_proxies.items()
            if now > unblock_time
        ]
        
        for key in expired_block_keys:
            del self.temp_blocked_proxies[key]
            
        if expired_cookie_keys or expired_block_keys:
            logger.info(f"üßπ [DYNAMIC] –û—á–∏—â–µ–Ω–æ: {len(expired_cookie_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –∫—É–∫–∏, {len(expired_block_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")


class DynamicBackgroundProxyCookieRotator(DynamicProxyCookieRotator):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, nitter_base_url: str = "https://nitter.tiekoetter.com"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        super().__init__(nitter_base_url)
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.proxies = [
            "http://user132581:schrvd@194.34.250.178:3542",
            "http://user132581:schrvd@149.126.199.210:3542",
            "http://user132581:schrvd@149.126.199.53:3542",
            "http://user132581:schrvd@149.126.211.4:3542",
            "http://user132581:schrvd@149.126.211.208:3542",
            "http://user132581:schrvd@149.126.212.129:3542",
            "http://user132581:schrvd@149.126.240.124:3542",
            "http://user132581:schrvd@149.126.227.154:3542",
            "http://user132581:schrvd@149.126.198.57:3542",
            "http://user132581:schrvd@149.126.198.160:3542",
        ]
        
        logger.info(f"üîÑ [DYNAMIC_BG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–æ–Ω–æ–≤—ã–π —Ä–æ—Ç–∞—Ç–æ—Ä —Å {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")


# –°–∏–Ω–≥–ª—Ç–æ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
dynamic_proxy_cookie_rotator = DynamicProxyCookieRotator()
dynamic_background_proxy_cookie_rotator = DynamicBackgroundProxyCookieRotator()

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
async def get_next_proxy_cookie_async(session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    return await dynamic_proxy_cookie_rotator.get_proxy_cookie_async(session)

async def get_background_proxy_cookie_async(session: aiohttp.ClientSession) -> Tuple[Optional[str], str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏+–∫—É–∫–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    return await dynamic_background_proxy_cookie_rotator.get_proxy_cookie_async(session)

def mark_proxy_failed(proxy: Optional[str], cookie: str):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
    dynamic_proxy_cookie_rotator.mark_proxy_failed(proxy, cookie)

def mark_background_proxy_failed(proxy: Optional[str], cookie: str):
    """–ü–æ–º–µ—á–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π"""
    dynamic_background_proxy_cookie_rotator.mark_proxy_failed(proxy, cookie)

def mark_proxy_temp_blocked(proxy: Optional[str], cookie: str, block_duration_minutes: int = 1):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç"""
    dynamic_proxy_cookie_rotator.mark_proxy_temp_blocked(proxy, cookie, block_duration_minutes)

def mark_background_proxy_temp_blocked(proxy: Optional[str], cookie: str, block_duration_minutes: int = 1):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç"""
    dynamic_background_proxy_cookie_rotator.mark_proxy_temp_blocked(proxy, cookie, block_duration_minutes)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
async def cleanup_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫—É–∫–∏"""
    while True:
        try:
            dynamic_proxy_cookie_rotator.cleanup_expired_cookies()
            dynamic_background_proxy_cookie_rotator.cleanup_expired_cookies()
            await asyncio.sleep(3600)  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 10 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    print("üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫—É–∫–∏ —Å Anubis challenge")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏") 