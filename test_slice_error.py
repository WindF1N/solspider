#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ slice
"""

import asyncio
import os
import logging
from test_filter import TokenFilterTester

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

async def test_slice_error():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É slice"""
    tester = TokenFilterTester()
    
    tokens_logs_dir = '/home/creatxr/solspider/tokens_logs'
    
    # –¢–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞–ª–∏ –æ—à–∏–±–∫—É
    error_tokens = [
        '2u1AMFNttZggLy1mHDAofoNQA8nC56dqnQg5JkaKhgiN.log',
        'EsYns2NH9r5U7VTp2uCkV7TVkmwsu4o1j1gdtbSSmytn.log'
    ]
    
    print(f"üîç –¢–ï–°–¢ –û–®–ò–ë–ö–ò SLICE")
    print(f"="*60)
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞–ª–∏ –æ—à–∏–±–∫—É")
    print()
    
    for i, log_file in enumerate(error_tokens, 1):
        log_path = os.path.join(tokens_logs_dir, log_file)
        
        if not os.path.exists(log_path):
            print(f"{i}. ‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {log_file}")
            continue
            
        token_id = log_file.replace('.log', '')
        
        print(f"{i}. üîç –¢–ï–°–¢: {token_id}")
        print(f"   –§–∞–π–ª: {log_path}")
        
        try:
            print(f"   üìä –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
            result = await tester.analyze_token_with_full_criteria(log_path)
            
            decision = result.get('decision', 'UNKNOWN')
            reason = result.get('reason', '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')
            
            print(f"   ‚úÖ –£–°–ü–ï–•: {decision}")
            print(f"   üí° –ü—Ä–∏—á–∏–Ω–∞: {reason[:100]}")
            
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
            
            if "slice" in str(e):
                print(f"   üö® –û–®–ò–ë–ö–ê SLICE –ù–ê–ô–î–ï–ù–ê!")
                
                # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π traceback
                import traceback
                print(f"   üìä –ü–æ–ª–Ω—ã–π traceback:")
                traceback.print_exc()
            else:
                print(f"   üìä –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ slice)")
        
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–ª—è –Ω–∞—á–∞–ª–∞
        if i == 1:
            break
    
    print("="*60)
    print("üéØ –¶–ï–õ–¨:")
    print("‚úÖ –ù–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞ slice")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞")

if __name__ == "__main__":
    asyncio.run(test_slice_error())