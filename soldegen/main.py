import configparser
import asyncio
import aiohttp
import os
import glob
from datetime import datetime, timedelta, timezone
from tqdm import tqdm

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
CONFIG_FILE = 'config.ini'
INPUT_DIR = 'input_wallets'
OUTPUT_DIR = 'output/classified_wallets'
HOT_FILE = os.path.join(OUTPUT_DIR, 'hot_wallets.txt')
WARM_FILE = os.path.join(OUTPUT_DIR, 'warm_wallets.txt')
COLD_FILE = os.path.join(OUTPUT_DIR, 'cold_wallets.txt')

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ì–ò–ë–†–ò–î–ù–û–ì–û –†–ï–ñ–ò–ú–ê ---
BATCH_SIZE = 25             # –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
INITIAL_DELAY = 0.5         # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≥–æ–Ω–∫–µ
RETRY_DELAY = 1.5           # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
MAX_RETRIES = 3             # –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤ –¥–ª—è –Ω–µ—É–¥–∞–≤—à–∏—Ö—Å—è –∫–æ—à–µ–ª—å–∫–æ–≤

def load_config():
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    if not os.path.exists(CONFIG_FILE): raise FileNotFoundError(f"–§–∞–π–ª '{CONFIG_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    config = configparser.ConfigParser(); config.read(CONFIG_FILE)
    settings = {'api_key': config.get('API', 'helius_api_key', fallback=None), 'hot_hours': config.getint('TriageSettings', 'hot_hours', fallback=24), 'warm_days': config.getint('TriageSettings', 'warm_days', fallback=7)}
    if not settings['api_key'] or '–í–ê–®_–ö–õ–Æ–ß' in settings['api_key']: raise ValueError("API –∫–ª—é—á Helius –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.ini")
    return settings

def load_wallets_from_input_dir():
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    if not os.path.exists(INPUT_DIR): os.makedirs(INPUT_DIR); print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{INPUT_DIR}'."); return []
    file_list = glob.glob(os.path.join(INPUT_DIR, '*.txt'))
    if not file_list: print(f"‚ö†Ô∏è  –í '{INPUT_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .txt —Ñ–∞–π–ª–æ–≤."); return []
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É—é —Ñ–∞–π–ª—ã: {', '.join([os.path.basename(f) for f in file_list])}")
    unique_wallets = set()
    for filename in file_list:
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                for line in f:
                    wallet = line.strip()
                    if wallet and 32 <= len(wallet) <= 44: unique_wallets.add(wallet)
        except Exception as e: print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
    if not unique_wallets: raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—à–µ–ª—å–∫–∏.")
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unique_wallets)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    return list(unique_wallets)

async def get_last_transaction_timestamp_async(session, wallet, api_key):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    url = f"https://api.helius.xyz/v0/addresses/{wallet}/transactions?api-key={api_key}&limit=1"
    try:
        async with session.get(url, timeout=20) as response:
            if response.status == 200:
                data = await response.json()
                if data: return wallet, data[0].get('timestamp')
                else: return wallet, None
            else: return wallet, 'api_error'
    except Exception: return wallet, "network_error"

def classify_wallets(results, settings):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    hot_wallets, warm_wallets, cold_wallets = [], [], []
    now = datetime.now(timezone.utc); hot_threshold = timedelta(hours=settings['hot_hours']); warm_threshold = timedelta(days=settings['warm_days'])
    print("\nüóÇÔ∏è  –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤...")
    error_count = 0
    for wallet, timestamp in results:
        if timestamp is None or isinstance(timestamp, str):
            cold_wallets.append(wallet)
            if isinstance(timestamp, str): error_count += 1
            continue
        try:
            tx_time = datetime.fromtimestamp(timestamp, tz=timezone.utc)
            delta = now - tx_time
            if delta <= hot_threshold: hot_wallets.append(wallet)
            elif delta <= warm_threshold: warm_wallets.append(wallet)
            else: cold_wallets.append(wallet)
        except Exception: cold_wallets.append(wallet); error_count += 1
    if error_count > 0: print(f"‚ö†Ô∏è  {error_count} –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. –û–Ω–∏ –ø–æ–º–µ—â–µ–Ω—ã –≤ '—Ö–æ–ª–æ–¥–Ω—ã–µ'.")
    return hot_wallets, warm_wallets, cold_wallets

def write_results(hot, warm, cold, settings):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    with open(HOT_FILE, 'w') as f: f.write('\n'.join(hot))
    with open(WARM_FILE, 'w') as f: f.write('\n'.join(warm))
    with open(COLD_FILE, 'w') as f: f.write('\n'.join(cold))
    print("\n" + "="*50)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    print(f"üî• –ì–æ—Ä—è—á–∏–µ (< {settings['hot_hours']} —á.):\t{len(hot)} –∫–æ—à–µ–ª—å–∫–æ–≤ -> {HOT_FILE}")
    print(f"üü† –¢–µ–ø–ª—ã–µ (< {settings['warm_days']} –¥.):\t{len(warm)} –∫–æ—à–µ–ª—å–∫–æ–≤ -> {WARM_FILE}")
    print(f"üßä –•–æ–ª–æ–¥–Ω—ã–µ (> {settings['warm_days']} –¥.):\t{len(cold)} –∫–æ—à–µ–ª—å–∫–æ–≤ -> {COLD_FILE}")
    print("="*50)

async def process_wallets_in_batches(session, wallets, api_key, delay, pbar):
    """–ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–∞—á–∫–∞–º–∏."""
    all_results_for_pass = []
    for i in range(0, len(wallets), BATCH_SIZE):
        batch = wallets[i:i + BATCH_SIZE]
        tasks = [get_last_transaction_timestamp_async(session, wallet, api_key) for wallet in batch]
        
        batch_results = await asyncio.gather(*tasks)
        all_results_for_pass.extend(batch_results)
        
        pbar.update(len(batch) - pbar.n if pbar.n < pbar.total else len(batch)) # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä

        if i + BATCH_SIZE < len(wallets):
            await asyncio.sleep(delay)
    return all_results_for_pass

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π –ª–æ–≥–∏–∫–æ–π."""
    config = load_config()
    wallets_to_process = load_wallets_from_input_dir()
    if not wallets_to_process: return

    successful_results = []
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {len(wallets_to_process)} –∫–æ—à–µ–ª—å–∫–æ–≤...")
    
    with tqdm(total=len(wallets_to_process), desc="–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏") as pbar:
        async with aiohttp.ClientSession() as session:
            
            # --- –û—Å–Ω–æ–≤–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≥–æ–Ω–∫–∞ ---
            pbar.set_postfix_str("–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≥–æ–Ω–∫–∞")
            initial_results = await process_wallets_in_batches(session, wallets_to_process, config['api_key'], INITIAL_DELAY, pbar)
            
            failed_wallets = []
            for wallet, timestamp in initial_results:
                if timestamp is None or not isinstance(timestamp, str):
                    successful_results.append((wallet, timestamp))
                else:
                    failed_wallets.append(wallet)
            
            pbar.n = len(successful_results) # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –Ω–∞ –∫–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö
            pbar.refresh()

            # --- –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–µ—É–¥–∞–≤—à–∏—Ö—Å—è ---
            for i in range(MAX_RETRIES):
                if not failed_wallets: break # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º
                
                pbar.set_postfix_str(f"–ü–æ–≤—Ç–æ—Ä {i+1}/{MAX_RETRIES} –¥–ª—è {len(failed_wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
                await asyncio.sleep(RETRY_DELAY) # –î–æ–ø. –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º –ø–æ–≤—Ç–æ—Ä–æ–≤

                retry_results = await process_wallets_in_batches(session, failed_wallets, config['api_key'], RETRY_DELAY, pbar)
                
                newly_failed_wallets = []
                for wallet, timestamp in retry_results:
                    if timestamp is None or not isinstance(timestamp, str):
                        if wallet in failed_wallets: # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç, –∫–æ–≥–æ –º—ã –∏—Å–∫–∞–ª–∏
                           successful_results.append((wallet, timestamp))
                    else:
                        newly_failed_wallets.append(wallet)

                failed_wallets = newly_failed_wallets # –°–ø–∏—Å–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–≤—Ç–æ—Ä
                pbar.n = len(successful_results) # –°–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                pbar.refresh()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    for wallet in failed_wallets:
        successful_results.append((wallet, 'final_error'))

    hot, warm, cold = classify_wallets(successful_results, config)
    write_results(hot, warm, cold, config)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (FileNotFoundError, ValueError) as e: print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    except KeyboardInterrupt: print("\nüö´ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")